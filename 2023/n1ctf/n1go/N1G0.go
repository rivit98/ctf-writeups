package main

import (
	"fmt"
	"os"
)

func hacker_get_out() {
	println(func() string {
		seed := byte(8)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
		fnc(96)(249)(2)(8)(250)(13)(186)(244)(71)(254)(15)(172)(79)(6)(255)(173)
		return string(data)
	}())
}

func get_byte() byte {
	var _bQdQE80pC []byte = make([]byte, 1)
	_, z7BBrnp6VaCz := os.Stdin.Read(_bQdQE80pC)
	if z7BBrnp6VaCz != nil {
		panic(z7BBrnp6VaCz)
	}
	return _bQdQE80pC[0]
}

func just_do_it() {
	defer func() {
		println(func() string {
			seed := byte(226)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
			fnc(104)(43)(254)(1)(172)(68)(11)(177)(73)(11)(172)(26)(10)
			return string(data)
		}())
	}()
}
func just_do_it2() {
	defer func() {
		println(func() string {
			seed := byte(28)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
			fnc(102)(247)(236)(217)(94)(0)(11)(199)(215)(185)(30)(86)(182)
			return string(data)
		}())
	}()
}
func qXRTqTr4() {
	fmt.Println(func() string {
		data := []byte("\x8d\x8dvE\x02\xee\xf00n\x86\xcb_d2\xa9a\xeb\xac\xed\xae_\xb8/_\x04\x89\"\x92f\x89G1\xffxB@\xa1er`U4u\xfb.\x80\xf1\xf7\xf4N8\xca4ƶQ\x82\xcf8t\xdfDO'\xb4\x8cײ\xd1o\x90")
		positions := [...]byte{4, 16, 6, 56, 48, 47, 62, 10, 66, 27, 24, 35, 58, 44, 68, 18, 5, 3, 67, 36, 53, 59, 22, 5, 35, 32, 10, 68, 58, 28, 38, 26, 44, 0, 33, 3, 46, 54, 5, 40, 58, 28, 60, 3, 57, 53, 68, 62, 38, 14, 43, 70, 70, 14, 10, 14, 64, 55, 33, 5, 15, 29, 58, 44, 55, 17, 17, 47, 43, 58, 65, 54, 24, 16, 19, 26, 54, 14, 14, 45, 51, 25, 12, 34, 70, 63, 1, 9, 15, 39, 29, 21}
		for i := 0; i < 92; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 133
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
		}
		return string(data)
	}())
}
func p7Lx_7ZxsO() {
	defer func() {
		println(func() string {
			data := []byte("\"\"|n])y i\x10 :,")
			positions := [...]byte{3, 7, 4, 9, 4, 6, 2, 4, 5, 1, 0, 12, 7, 5, 9, 6}
			for i := 0; i < 16; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 80
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
			}
			return string(data)
		}())
	}()
}
func u8X9_w() {
	println(func() string {
		data := []byte("y0u0loq~U:jQ!akI\fa \x0ery\x17k ;n\xe7/trJeX\xe4T?n\r")
		positions := [...]byte{11, 8, 12, 25, 15, 3, 11, 20, 36, 20, 31, 31, 35, 35, 32, 7, 1, 8, 11, 21, 16, 3, 33, 22, 3, 10, 8, 6, 1, 6, 34, 27, 7, 22, 12, 28, 20, 38, 15, 19, 10, 36}
		for i := 0; i < 42; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 41
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
		}
		return string(data)
	}())
}
func rpftUKvU() {
	println(func() string {
		data := []byte("y\xf7u\x06\xe3\xe8\x90P\x80:);o\xe7\xd6\xedsG\xd0c\xf1\xf1~k\x00;n\xc1 tr\xe0 \xeagai\xb6\xd2")
		positions := [...]byte{5, 6, 12, 24, 27, 25, 31, 1, 21, 13, 6, 7, 3, 7, 22, 4, 1, 4, 20, 6, 15, 13, 15, 20, 37, 19, 38, 16, 37, 15, 17, 11, 24, 27, 33, 15, 5, 25, 11, 15, 18, 25, 16, 8, 5, 17, 14, 4}
		for i := 0; i < 48; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 94
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
		}
		return string(data)
	}())
}
func j6STEBhl() {
	fmt.Println(func() string {
		fullData := []byte("<\x95\x10|\xef\xea\xfe\xd7\x7f>\xdcKHU\xb0&\x04p\xfa\x878\x9f\x02\xc4{-5j\x05\xef\x86\xde\xeaed\\4=\xbb&\x8c\x11l#\xab\x92\xe6\x89=@$\xb1 \x8b\xdd\xe8\x86\x03\x9d\xd4S$\x86\xe3f\x88\xb4\x94\xf4\x1f\xb5\xaf}\xf2\x97\u07be\x03\x90\x04Nd\xb9\x88\xcf\x14S/\x82\x10\x83O\xa2[\xb8Ȑ_C\xc3\xe9p\x1f\xcd\fP\xd0e\xdaΌ\xa17\xb2w\x86\x8b\x1d\xb0\x06\xdfd;z-[\xe0\xa8'\x9f\x11\xe9\x17\xd9M\xa6\xd6-\xb7i\xdck")
		data := make([]byte, 0, 72)
		data = append(data, fullData[95]^fullData[62], fullData[9]^fullData[93], fullData[2]+fullData[64], fullData[6]-fullData[103], fullData[37]^fullData[91], fullData[68]^fullData[44], fullData[14]+fullData[74], fullData[1]-fullData[107], fullData[138]^fullData[133], fullData[96]+fullData[31], fullData[48]+fullData[61], fullData[0]-fullData[54], fullData[85]^fullData[86], fullData[124]+fullData[28], fullData[108]-fullData[81], fullData[40]-fullData[128], fullData[3]^fullData[43], fullData[18]+fullData[97], fullData[70]-fullData[72], fullData[89]^fullData[33], fullData[137]-fullData[109], fullData[24]-fullData[15], fullData[45]+fullData[75], fullData[66]-fullData[13], fullData[77]^fullData[134], fullData[7]-fullData[92], fullData[139]^fullData[69], fullData[88]+fullData[71], fullData[113]-fullData[49], fullData[135]+fullData[82], fullData[110]+fullData[38], fullData[41]+fullData[52], fullData[55]+fullData[30], fullData[67]-fullData[39], fullData[131]-fullData[83], fullData[36]^fullData[141], fullData[79]-fullData[94], fullData[115]+fullData[120], fullData[105]-fullData[140], fullData[90]-fullData[50], fullData[78]-fullData[112], fullData[23]+fullData[17], fullData[59]^fullData[111], fullData[130]^fullData[80], fullData[56]+fullData[76], fullData[132]-fullData[46], fullData[4]+fullData[65], fullData[53]+fullData[63], fullData[16]+fullData[125], fullData[60]^fullData[117], fullData[57]+fullData[26], fullData[101]^fullData[119], fullData[42]-fullData[20], fullData[35]-fullData[32], fullData[122]^fullData[121], fullData[27]^fullData[25], fullData[34]-fullData[87], fullData[51]-fullData[98], fullData[19]^fullData[100], fullData[5]^fullData[116], fullData[8]+fullData[126], fullData[12]^fullData[104], fullData[84]-fullData[21], fullData[99]+fullData[118], fullData[123]^fullData[102], fullData[29]^fullData[58], fullData[10]^fullData[127], fullData[47]+fullData[136], fullData[11]-fullData[73], fullData[106]+fullData[129], fullData[22]^fullData[114])
		return string(data)
	}())
}
func anzYyNaO2Sqn() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func fPNmACqku() {
	println(func() string {
		data := []byte("\xf9\xdbu \x02ost:5͈g\r\x87\xab\x129 \x1d\r\xa4aH\x84\xf9\xa8d\xcf\x01r\xfb\xf0a\x85\xe9\xc4x\x86")
		positions := [...]byte{32, 15, 17, 12, 21, 38, 23, 14, 20, 19, 37, 0, 23, 16, 34, 25, 4, 13, 21, 12, 28, 34, 25, 29, 16, 9, 31, 21, 24, 8, 35, 1, 8, 26, 17, 36, 9, 10, 16, 24, 14, 11, 14, 0}
		for i := 0; i < 44; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 70
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
		}
		return string(data)
	}())
}
func gYU76P_Ih() {
	defer func() {
		println(func() string {
			seed := byte(53)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
			fnc(21)(43)(254)(1)(172)(68)(11)(177)(73)(11)(172)(26)(10)
			return string(data)
		}())
	}()
}
func _5czmy3kq() {
	defer func() {
		println(func() string {
			data := []byte("H\x8d\x8b! \xd6o\x92\xc7rs\x94F")
			positions := [...]byte{7, 5, 2, 1, 3, 10, 8, 11, 3, 9, 2, 1, 12, 0}
			for i := 0; i < 14; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 244
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
			}
			return string(data)
		}())
	}()
}
func iKyVJcdP() {
	fmt.Println(func() string {
		key := []byte("\xef\x1bh\xd7;\x95\xa8kz\x18\xeah/\x90]\x1eݘR\x83\x12Y\x9aٛ\x81\x10\xa5>'\x8czR\xc2\x1f*\xe4\xf1rQ<G\x93\x1eڨ$\xf7\xde\xe8\v\xbb[o\x9675\xf8Jç\xe9\xc6K\x18u\xa0\u008e\xbd,")
		data := []byte("=\x80\xde\b\xad\xf4\xef\x9b\xe8\x86K\xc7v\xc2Ӄ<\xf1\x8a\xf8q\xae\n8鶆ְ\x86ӫ\xc00\x80\x890V氕{\b}\x1eٛe=6C1\x8f\xe1\xf5~jf\xb8$\x06-\xf6\xbe}\xe7\x14!\xe7,\xa1")
		for i, b := range key {
			data[i] = data[i] - b
		}
		return string(data)
	}())
}
func hsfkzpGN51R() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 6
			decryptKey := 225
			for counter := 0; i != 7; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 8:
					i = 4
					data = append(data, "f\x11*"...,
					)
				case 0:
					data = append(data, "l\x1fb"...,
					)
					i = 3
				case 3:
					data = append(data, "l\x1c\\"...,
					)
					i = 8
				case 6:
					i = 1
					data = append(data, 69)
				case 4:
					data = append(data, 59)
					i = 5
				case 1:
					data = append(data, 111)
					i = 2
				case 2:
					i = 0
					data = append(data, 108)
				case 5:
					i = 7
					for y := range data {
						data[y] = data[y] - byte(decryptKey^y)
					}
				}
			}
			return string(data)
		}())
	}()
}
func ryJlQ0Royzm() {
	fmt.Println(func() string {
		key := []byte("\x19\xbd\xbb\xca\xf3w\xed3\r\xf0\xea\xf1.\xa5\x82\xf8![\xeb\x0fm\xacg\xe9H\x1f\a\xdfQ\xba\x85\x1b\xbb\xf7i-\xea\xe4\xa6\x1d\x1a\x17\xd8ǐ\xba~\x87-\xccU\xdc:\x1c\x92ٔX\x9c\xb8~\b3\xcf\xd5%\xac,\x18\x82h")
		data := []byte("W\xd8\xcd\xfb\x81(\xaa\x03c\x9e\x8b\xaei\x97\xf4\x9d~\x02\xd3z2\xf9\x17\xb6\x06*q\xee#\xe5\xc2*ՙ\br\xa6\x81\xd2BC#\xad\x98ԋ\t\xe9r\x82m\xaa\x0en͞\xa16\xf2\xd9!L\x03\xbc\xb0W\xd8sA\xed\x1d")
		for i, b := range key {
			data[i] = data[i] ^ b
		}
		return string(data)
	}())
}
func nIwyucd_2oR() {
	defer func() {
		println(func() string {
			key := []byte("Dt7\x9f\xab\xa8\x98\x82\xfd\xe0\x00\n\xfd")
			data := []byte("\x8e\xe9\xaa\x13\xcb\f\a\xa2fT DA")
			for i, b := range key {
				data[i] = data[i] - b
			}
			return string(data)
		}())
	}()
}
func b_Fs7cmlJz() {
	defer func() {
		println(func() string {
			seed := byte(200)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
			fnc(130)(63)(250)(247)(90)(176)(235)(79)(215)(225)(86)(246)(134)
			return string(data)
		}())
	}()
}
func aL5QzzstMl2() {
	fmt.Println(func() string {
		key := []byte("\xa7\xe0\xc2\xeeg\xb3\xe3I\x85\xb0\x04\x1e\xe3\xf6\x11\xb9\x86\x8f\xa9\xf6\xbb\xf5\x96^\xcd\xe7\xbe)\xe5\b\t\xf8뾏\xc3\xfb\xa5\x14\xda\x13D\xc0:\xe6\x12\x9bV\x96\x1a\xben\xed\xf7:\x0e\"w\x8cGq\x83\xe4a\xa7lUl\x93) ")
		data := []byte("\xa7\x85\xb4C\v\xacd\xe7\xe9\xbe]Ad<e\xac\xd9ʏ\x7f\xa4`\xda\x01\x81N\xb8\b\x8dW>9\x83\xb0ҜQ\xc0`\x85F\xf0\xb5%^\x1f\xdc\x18\xc94z\bG{%9\x13\xf7\xe2\x1a\xee\xc1L\x12\xbe\x06\x1f\xf3\xc6FU")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func irNjk8o() {
	fmt.Println(func() string {
		key := []byte("\x8d\x0e\xec\xd3&f\x04j\xad/\xf4\xfbUUH~\xaa\xafw\x93\xcc=\x8d\xf1\x91\xea\xf6kUA%\x17V\xa2\xf1Ѿ\xec~ \xd2\"\x99\x19SZb\xedN\xe8`qA1g-\xb2yb\xb9\xbc\x94\xceE\f\xd0Z\xa2Ïc")
		data := []byte("\xc3k\x9a\xe2T9CZ\xc3A\x95\xa4\x12g>\x1b\xf5\xf6O\xe6\x93h\xfd\xae\xdf߀Z'\x1eb&8̐\x8e\xf2\x89\n\x7f\x8b\x16\xecF\x17k\x15\x83\x11\xa6X\auC8j\x87\x17\f\xd8\xe3\xd0\xfe6i\xa2.\xfd\x9a\xe0\x16")
		for i, b := range key {
			data[i] = data[i] ^ b
		}
		return string(data)
	}())
}
func iQdS_oe() {
	defer func() {
		println(func() string {
			data := []byte("jus\" pNyHq :h")
			positions := [...]byte{8, 5, 3, 9, 8, 6, 7, 9, 8, 0, 8, 12, 12, 5}
			for i := 0; i < 14; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 241
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
			}
			return string(data)
		}())
	}()
}
func mEs6HGpOQ() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func iZZ5y9FT7z() {
	println(func() string {
		seed := byte(12)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
		fnc(117)(238)(26)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
		return string(data)
	}())
}
func aNFpxWAF() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 6
			decryptKey := 119
			for counter := 0; i != 4; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 3:
					data = append(data, "C\x05\x19"...,
					)
					i = 5
				case 1:
					i = 2
					data = append(data, "U,"...,
					)
				case 6:
					i = 7
					data = append(data, ".\x10"...,
					)
				case 0:
					i = 3
					data = append(data, "@\x05\r"...,
					)
				case 2:
					for y := range data {
						data[y] = data[y] ^ byte(decryptKey^y)
					}
					i = 4
				case 7:
					data = append(data, "\x15\x13"...,
					)
					i = 0
				case 5:
					i = 1
					data = append(data, 78)
				}
			}
			return string(data)
		}())
	}()
}
func zSlME1Jl8u1C() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func vqXlr9muEN() {
	fmt.Println(func() string {
		data := make([]byte, 0, 9)
		i := 1
		decryptKey := 239
		for counter := 0; i != 5; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 6:
				i = 0
				data = append(data, 24)
			case 9:
				i = 5
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
			case 1:
				data = append(data, 248)
				i = 3
			case 0:
				data = append(data, 28)
				i = 7
			case 8:
				data = append(data, 214)
				i = 9
			case 3:
				i = 4
				data = append(data, 16)
			case 2:
				i = 8
				data = append(data, 233)
			case 4:
				i = 6
				data = append(data, 203)
			case 7:
				i = 2
				data = append(data, 204)
			}
		}
		return string(data)
	}())
}
func dz6ylf4M2HOD() {
	defer func() {
		println(func() string {
			seed := byte(57)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
			fnc(131)(49)(96)(193)(46)(160)(75)(71)(215)(185)(30)(86)(182)
			return string(data)
		}())
	}()
}
func ssFsuiIU() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func lpn4zRMK() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func gUzofJbpYL() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func jnbMz8FR() {
	println(func() string {
		data := make([]byte, 0, 40)
		i := 9
		decryptKey := 94
		for counter := 0; i != 0; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 2:
				i = 16
				data = append(data, "ܜ\x90"...,
				)
			case 8:
				data = append(data, "\xd7\xc7"...,
				)
				i = 12
			case 13:
				i = 8
				data = append(data, "\x8e\x91\x97\xcc"...,
				)
			case 1:
				data = append(data, "ǌ"...,
				)
				i = 13
			case 11:
				data = append(data, 152)
				i = 2
			case 7:
				i = 1
				data = append(data, "\x8a\x93"...,
				)
			case 14:
				i = 0
				for y := range data {
					data[y] = data[y] ^ byte(decryptKey^y)
				}
			case 17:
				data = append(data, "\x81\x8eԔ"...,
				)
				i = 18
			case 6:
				data = append(data, 136)
				i = 17
			case 9:
				i = 7
				data = append(data, 157)
			case 10:
				data = append(data, "\xa6\xa9\xaf"...,
				)
				i = 3
			case 18:
				i = 4
				data = append(data, "֕\x82"...,
				)
			case 3:
				data = append(data, 227)
				i = 14
			case 16:
				data = append(data, "\x9b؍\x88"...,
				)
				i = 5
			case 15:
				data = append(data, 161)
				i = 10
			case 4:
				i = 11
				data = append(data, "\x94\x93"...,
				)
			case 12:
				i = 6
				data = append(data, "Ϝ"...,
				)
			case 5:
				i = 15
				data = append(data, "\x82\xe4\xa4"...,
				)
			}
		}
		return string(data)
	}())
}
func _5hZcYIeMvt() {
	fmt.Println(func() string {
		data := make([]byte, 0, 72)
		i := 4
		decryptKey := 254
		for counter := 0; i != 29; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 14:
				i = 8
				data = append(data, 143)
			case 13:
				i = 26
				data = append(data, "s^G\x97"...,
				)
			case 22:
				i = 14
				data = append(data, "|q"...,
				)
			case 21:
				data = append(data, "y\x91\xa3\x8d"...,
				)
				i = 11
			case 9:
				i = 22
				data = append(data, "xqS\x8f"...,
				)
			case 8:
				data = append(data, "}_"...,
				)
				i = 10
			case 27:
				i = 30
				data = append(data, "aL6}"...,
				)
			case 1:
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
				i = 29
			case 25:
				i = 23
				data = append(data, "m\x81"...,
				)
			case 20:
				data = append(data, "\x9e\x94\x98\x86"...,
				)
				i = 28
			case 0:
				i = 3
				data = append(data, "kV>"...,
				)
			case 15:
				data = append(data, "\x98\x81iU"...,
				)
				i = 20
			case 24:
				data = append(data, "\x94xg\xa9"...,
				)
				i = 12
			case 11:
				data = append(data, "zT"...,
				)
				i = 15
			case 26:
				data = append(data, 150)
				i = 19
			case 4:
				data = append(data, 87)
				i = 25
			case 3:
				i = 27
				data = append(data, "ond"...,
				)
			case 6:
				i = 7
				data = append(data, 174)
			case 2:
				data = append(data, "\xa1\x93"...,
				)
				i = 24
			case 7:
				i = 16
				data = append(data, "\x9e\x85f"...,
				)
			case 30:
				data = append(data, 107)
				i = 9
			case 17:
				i = 1
				data = append(data, 196)
			case 19:
				data = append(data, "\x8c\x89"...,
				)
				i = 21
			case 28:
				data = append(data, "s\xb0q"...,
				)
				i = 6
			case 16:
				i = 2
				data = append(data, 158)
			case 18:
				data = append(data, "\xa6\xbb"...,
				)
				i = 17
			case 23:
				i = 5
				data = append(data, 59)
			case 5:
				i = 0
				data = append(data, 127)
			case 12:
				data = append(data, "\xae\xba\xbf\xa9"...,
				)
				i = 18
			case 10:
				i = 13
				data = append(data, "E\x89C\x87"...,
				)
			}
		}
		return string(data)
	}())
}
func nqMtXK() {
	fmt.Println(func() string {
		data := make([]byte, 0, 9)
		i := 8
		decryptKey := 38
		for counter := 0; i != 6; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 1:
				data = append(data, 168)
				i = 2
			case 4:
				data = append(data, 102)
				i = 5
			case 8:
				data = append(data, 136)
				i = 3
			case 0:
				data = append(data, 121)
				i = 4
			case 3:
				i = 7
				data = append(data, 160)
			case 5:
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
				i = 6
			case 9:
				i = 0
				data = append(data, 92)
			case 2:
				data = append(data, 172)
				i = 9
			case 7:
				i = 1
				data = append(data, 91)
			}
		}
		return string(data)
	}())
}
func cXZve2BsO0Xv() {
	fmt.Println(func() string {
		data := []byte("N\xb7\x0e\x94\x94\xba=\xb4nn\xa6nGYv\xd6hY\xacu_c\x15_N2\x1f|r\xc9G1\x98\xc3a6L\xb3\x82\x8cY4\x9a\xb541w\x19\xd5\x19tvLr\x12k5}\xbeU_D0Ub\x8dY_3\x906")
		positions := [...]byte{7, 10, 43, 58, 22, 43, 18, 48, 5, 16, 59, 21, 63, 70, 32, 38, 33, 3, 66, 6, 47, 11, 69, 65, 38, 29, 38, 42, 1, 5, 4, 15, 50, 39, 37, 39, 50, 42, 55, 32, 11, 57, 44, 70, 26, 59, 27, 54, 48, 68, 49, 66, 18, 70, 64, 25, 43, 7, 59, 13, 2, 52, 21, 59, 35, 68, 55, 22, 57, 4, 63, 3}
		for i := 0; i < 72; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 200
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
		}
		return string(data)
	}())
}
func zokyZlFwe() {
	println(func() string {
		data := make([]byte, 0, 40)
		i := 7
		decryptKey := 172
		for counter := 0; i != 1; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 10:
				data = append(data, "h<~>"...,
				)
				i = 4
			case 8:
				data = append(data, "{0"...,
				)
				i = 0
			case 13:
				data = append(data, 109)
				i = 10
			case 2:
				i = 9
				data = append(data, "}\x7f$?"...,
				)
			case 12:
				i = 2
				data = append(data, "/tx"...,
				)
			case 14:
				data = append(data, "v\x84"...,
				)
				i = 8
			case 5:
				i = 15
				data = append(data, "'t"...,
				)
			case 3:
				data = append(data, "\x864"...,
				)
				i = 14
			case 4:
				data = append(data, "\x81\x8a~{"...,
				)
				i = 3
			case 0:
				i = 6
				data = append(data, "\x85\x84\x8c"...,
				)
			case 11:
				i = 1
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
			case 9:
				i = 5
				data = append(data, 47)
			case 6:
				i = 16
				data = append(data, "L\x8e\x95"...,
				)
			case 7:
				i = 12
				data = append(data, "\x85|\x83"...,
				)
			case 15:
				i = 13
				data = append(data, 98)
			case 16:
				data = append(data, "\x90\x91\x97K"...,
				)
				i = 11
			}
		}
		return string(data)
	}())
}
func vV4JyqH() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 2
			decryptKey := 236
			for counter := 0; i != 8; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 4:
					data = append(data, "F\x94\xa0I"...,
					)
					i = 6
				case 2:
					data = append(data, "m\x99"...,
					)
					i = 3
				case 6:
					i = 0
					data = append(data, 100)
				case 5:
					i = 4
					data = append(data, "\x8c\x94"...,
					)
				case 3:
					i = 1
					data = append(data, 148)
				case 7:
					for y := range data {
						data[y] = data[y] + byte(decryptKey^y)
					}
					i = 8
				case 0:
					data = append(data, 115)
					i = 7
				case 1:
					i = 5
					data = append(data, "\x96G"...,
					)
				}
			}
			return string(data)
		}())
	}()
}
func cMBYLj093cP() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func lK4Ra2hntnkv() {
	fmt.Println(func() string {
		key := []byte("\x87M\x01\xaah\xbc\xa7x\x00\xbd\xfd-O\xafZ\x11\xf7\xb7\u05ce\xeab\xaf\xeb\xbb\xd5\xea\xcbT\xd4\xdb\v\xac\x9b\xb4J~\x86\xd1,\x86\x9b\xbb\xedpO\x13B&\x9f&M$w\xed)]s\xff^\xede\x01\x90\xac\xc4d\xf9\xec\xd9S")
		data := []byte("\xc7\x18u\x87\n\xa3\xa0\xb8n\xb1d2\xf8\x83\x1cTh\xa2a\xe7u\xf3\xc1t\x93`\x8cf\x1e\x8bl&\xc2ӭ\x15\xceߣ3ә\xbar\xd4\xe2d,9\xaf\x12)\x10\xfbr\x1e\xd8\xfbo\x03r\xdf/㹮\x10fm\x96\"")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func uXQNBr() {
	defer func() {
		println(func() string {
			key := []byte("\xd3\x00cη(\xccU\x91)\xe1~\xb3")
			data := []byte("\x1du\xd6B\u05cc;u\xfa\x9d\x01\xb8\xf7")
			for i, b := range key {
				data[i] = data[i] - b
			}
			return string(data)
		}())
	}()
}
func v5oqVRy() {
	fmt.Println(func() string {
		data := make([]byte, 0, 9)
		i := 3
		decryptKey := 81
		for counter := 0; i != 1; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 0:
				data = append(data, 90)
				i = 6
			case 3:
				data = append(data, 58)
				i = 9
			case 4:
				i = 2
				data = append(data, 87)
			case 2:
				data = append(data, 24)
				i = 8
			case 7:
				i = 0
				data = append(data, 73)
			case 9:
				data = append(data, 28)
				i = 4
			case 6:
				for y := range data {
					data[y] = data[y] ^ byte(decryptKey^y)
				}
				i = 1
			case 8:
				i = 5
				data = append(data, 30)
			case 5:
				i = 7
				data = append(data, 80)
			}
		}
		return string(data)
	}())
}
func yHhPu9Jq_CIq() {
	fmt.Println(func() string {
		fullData := []byte("w\xa98\xc4%K\x97\x8a3\xf4ܪ\xa2\xb8v0")
		data := make([]byte, 0, 9)
		data = append(data, fullData[13]+fullData[6], fullData[2]+fullData[15], fullData[11]^fullData[7], fullData[5]^fullData[4], fullData[12]-fullData[8], fullData[1]+fullData[0], fullData[3]+fullData[14], fullData[10]^fullData[9])
		return string(data)
	}())
}
func gYiX7i() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func pfefyAPQ5() {
	fmt.Println(func() string {
		seed := byte(17)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
		fnc(61)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
		return string(data)
	}())
}
func rAqZTIG0C_() {
	fmt.Println(func() string {
		data := make([]byte, 0, 72)
		i := 11
		decryptKey := 191
		for counter := 0; i != 24; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 16:
				i = 15
				data = append(data, "\xb2Ɓ\x93"...,
				)
			case 27:
				i = 10
				data = append(data, "堸"...,
				)
			case 11:
				data = append(data, "\xb7\x9d\x8d"...,
				)
				i = 4
			case 12:
				data = append(data, "ӗ\xbb"...,
				)
				i = 2
			case 17:
				data = append(data, "Օ"...,
				)
				i = 12
			case 6:
				i = 8
				data = append(data, 178)
			case 9:
				for y := range data {
					data[y] = data[y] ^ byte(decryptKey^y)
				}
				i = 24
			case 20:
				data = append(data, 175)
				i = 17
			case 19:
				data = append(data, "\x89\xf4\xae\xad"...,
				)
				i = 18
			case 15:
				i = 6
				data = append(data, "\xb6\xb1ӟ"...,
				)
			case 0:
				data = append(data, "\xab\x81\x88\xe4"...,
				)
				i = 5
			case 22:
				i = 21
				data = append(data, "\xe5\xe4"...,
				)
			case 21:
				data = append(data, "\xd3\xca"...,
				)
				i = 9
			case 3:
				i = 1
				data = append(data, 249)
			case 26:
				data = append(data, "\xb8Ο"...,
				)
				i = 23
			case 2:
				data = append(data, "\xa0\xd7"...,
				)
				i = 7
			case 18:
				data = append(data, 163)
				i = 14
			case 13:
				i = 0
				data = append(data, "\x85\x91\xb9"...,
				)
			case 14:
				data = append(data, "\x9a\x80\xf7\xb5"...,
				)
				i = 25
			case 4:
				i = 26
				data = append(data, "ˏ\xa3"...,
				)
			case 10:
				data = append(data, "\x96\x86\xf3\xbc"...,
				)
				i = 3
			case 5:
				i = 27
				data = append(data, "\xa6\x8d\x91"...,
				)
			case 8:
				data = append(data, "\xb9\x9f\xb1"...,
				)
				i = 20
			case 25:
				data = append(data, "\xdc\xca\xcf"...,
				)
				i = 22
			case 23:
				i = 16
				data = append(data, "\x9e\x92\xad"...,
				)
			case 7:
				i = 13
				data = append(data, "\xb7\xb6\xba"...,
				)
			case 1:
				i = 19
				data = append(data, "\xbe\x90"...,
				)
			}
		}
		return string(data)
	}())
}
func hI5d_jB() {
	fmt.Println(func() string {
		fullData := []byte("\x1c\xed\x060G\x9e\xb6\xe2\x85\xd0\x17b\x7f\xb63\xb0")
		data := make([]byte, 0, 9)
		data = append(data, fullData[3]^fullData[12], fullData[11]+fullData[2], fullData[9]-fullData[15], fullData[8]-fullData[10], fullData[6]-fullData[4], fullData[1]+fullData[14], fullData[0]-fullData[7], fullData[5]^fullData[13])
		return string(data)
	}())
}
func fYPopoVjeN() {
	fmt.Println(func() string {
		data := make([]byte, 0, 72)
		i := 32
		decryptKey := 126
		for counter := 0; i != 1; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 3:
				data = append(data, 40)
				i = 33
			case 23:
				i = 17
				data = append(data, 113)
			case 9:
				i = 4
				data = append(data, 103)
			case 27:
				i = 18
				data = append(data, "\x02x8~"...,
				)
			case 24:
				data = append(data, "I~"...,
				)
				i = 9
			case 22:
				data = append(data, "I\v "...,
				)
				i = 6
			case 28:
				data = append(data, "\x1c~2"...,
				)
				i = 2
			case 21:
				data = append(data, "\x1a\x1b"...,
				)
				i = 30
			case 6:
				data = append(data, "<H"...,
				)
				i = 15
			case 14:
				i = 12
				data = append(data, "\x142"...,
				)
			case 15:
				i = 5
				data = append(data, "\r\x15;"...,
				)
			case 31:
				data = append(data, 34)
				i = 13
			case 7:
				i = 0
				data = append(data, "\x11T\x13="...,
				)
			case 33:
				data = append(data, "<\x14\x06"...,
				)
				i = 16
			case 29:
				i = 11
				data = append(data, "\x0e7"...,
				)
			case 26:
				i = 8
				data = append(data, "\x15c23"...,
				)
			case 13:
				i = 26
				data = append(data, 14)
			case 17:
				data = append(data, "gbH"...,
				)
				i = 24
			case 5:
				data = append(data, "+^"...,
				)
				i = 7
			case 2:
				data = append(data, 31)
				i = 14
			case 30:
				data = append(data, 23)
				i = 3
			case 19:
				data = append(data, "\x03\x00"...,
				)
				i = 29
			case 0:
				data = append(data, "$Y"...,
				)
				i = 19
			case 4:
				i = 1
				for y := range data {
					data[y] = data[y] ^ byte(decryptKey^y)
				}
			case 8:
				i = 10
				data = append(data, "?\x00\x1fk"...,
				)
			case 12:
				data = append(data, 28)
				i = 27
			case 18:
				data = append(data, ":\x16\rz"...,
				)
				i = 21
			case 20:
				i = 25
				data = append(data, 48)
			case 11:
				data = append(data, "-Z\x18"...,
				)
				i = 23
			case 16:
				i = 22
				data = append(data, ",%"...,
				)
			case 32:
				data = append(data, 26)
				i = 20
			case 10:
				data = append(data, ",>\x1b"...,
				)
				i = 28
			case 25:
				i = 31
				data = append(data, " f"...,
				)
			}
		}
		return string(data)
	}())
}
func nryFAnISi() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func rmfMp8722Py() {
	println(func() string {
		seed := byte(97)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
		fnc(24)(22)(250)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
		return string(data)
	}())
}
func h4iz6z() {
	println(func() string {
		key := []byte("\xd4&\xdc\x1e\x9c]pUA'\xda\xf9\x94\x84\xe8w\xed\xbe\xe3e\xa8\xc2\xc2R\x0e2\v\x84v[\xbd\x93\to\xafG\xa1˹")
		data := []byte("M\x95Q>\b\xcc\xe3\xc9aa\x03\x19\b\xe5S\xdc\r\x1f\x03\xc7\x1a'#\xbd.\x93y\xe8\x96\xcf/\f)\xd0\x16\xa8\n9\xda")
		for i, b := range key {
			data[i] = data[i] - b
		}
		return string(data)
	}())
}
func tTCXg1() {
	defer func() {
		println(func() string {
			seed := byte(179)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
			fnc(151)(43)(254)(1)(172)(68)(11)(177)(73)(11)(172)(26)(10)
			return string(data)
		}())
	}()
}
func iUjn7ntZI() {
	defer func() {
		println(func() string {
			fullData := []byte("\xb5hRܼc\x10gU\x9a\x85q\xbf\xb3'=\x9f\xcf\r\xf3\xb5\x1f\x86fm\x17")
			data := make([]byte, 0, 14)
			data = append(data, fullData[24]^fullData[14], fullData[1]-fullData[19], fullData[6]+fullData[5], fullData[18]+fullData[7], fullData[3]-fullData[4], fullData[25]-fullData[13], fullData[2]^fullData[15], fullData[12]^fullData[16], fullData[9]+fullData[17], fullData[8]+fullData[21], fullData[22]-fullData[23], fullData[20]+fullData[10], fullData[0]-fullData[11])
			return string(data)
		}())
	}()
}
func oyZHtTD() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 4
			decryptKey := 153
			for counter := 0; i != 0; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 6:
					data = append(data, "!\""...,
					)
					i = 3
				case 4:
					i = 6
					data = append(data, 247)
				case 2:
					i = 7
					data = append(data, 26)
				case 8:
					i = 1
					data = append(data, 229)
				case 1:
					i = 0
					for y := range data {
						data[y] = data[y] - byte(decryptKey^y)
					}
				case 5:
					i = 8
					data = append(data, 224)
				case 7:
					i = 5
					data = append(data, "\xca\x0e\x18\xc7"...,
					)
				case 3:
					data = append(data, "\"\xc9\f"...,
					)
					i = 2
				}
			}
			return string(data)
		}())
	}()
}
func liyNRi() {
	fmt.Println(func() string {
		seed := byte(115)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(194)(157)(242)(50)(101)(123)(16)(14)
		return string(data)
	}())
}
func tLNhZsbvmp() {
	println(func() string {
		fullData := []byte("\"D\x89\x19\x9ff\xce\xecȾ\x96\xc4\xc7G\xa7\xa4]\xd0ܐ'⣸\xd8\xe7a@.<*\xf3j\xb0\xbc\x82\xb9>\xd5\xd0\xe4\xfb\xa3t:\xb4\x05Ɉ\xf8\x05\x83D\xccD\x9c\x90u\xdf\xf9\xcdl\x13\xb8\xa7\xb6\xee313\x17\xcf\xe97\xc7\xf7\x02\x95")
		data := make([]byte, 0, 40)
		data = append(data, fullData[50]+fullData[43], fullData[75]-fullData[48], fullData[31]+fullData[35], fullData[52]+fullData[18], fullData[17]^fullData[34], fullData[7]+fullData[51], fullData[42]^fullData[39], fullData[29]-fullData[8], fullData[72]^fullData[47], fullData[66]-fullData[45], fullData[65]^fullData[4], fullData[13]-fullData[20], fullData[14]+fullData[60], fullData[27]-fullData[58], fullData[74]+fullData[15], fullData[67]-fullData[6], fullData[19]^fullData[33], fullData[5]-fullData[46], fullData[21]+fullData[37], fullData[55]-fullData[44], fullData[71]-fullData[16], fullData[68]-fullData[53], fullData[3]-fullData[23], fullData[41]-fullData[56], fullData[70]^fullData[73], fullData[24]^fullData[36], fullData[30]+fullData[1], fullData[59]-fullData[77], fullData[40]-fullData[11], fullData[63]-fullData[54], fullData[38]^fullData[64], fullData[32]^fullData[62], fullData[25]^fullData[12], fullData[9]+fullData[22], fullData[2]-fullData[0], fullData[69]+fullData[28], fullData[26]-fullData[49], fullData[76]^fullData[61], fullData[10]-fullData[57])
		return string(data)
	}())
}
func syNjBt_PIDn1() {
	fmt.Println(func() string {
		data := []byte("\xb0\xa5 no\xcfo\xc0")
		positions := [...]byte{1, 7, 0, 5, 5, 1, 7, 6, 1, 7, 6, 5}
		for i := 0; i < 12; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 121
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func g9HoHsXZ() {
	fmt.Println(func() string {
		seed := byte(104)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(183)(135)(198)(218)(181)(27)(80)(142)
		return string(data)
	}())
}
func oLJAfWf() {
	println(func() string {
		key := []byte(">\xec1\x88f\x11\xee\x8f\x01w\xacj\xe8\r\x05\xb3*\xfb(d\xb1\x85\xba\x86+Fnp\x96\xd5\x18\xb8\xe5\xcd9\xed\x8ca\xe2")
		data := []byte("\xb7[\xa6\xa8Ҁa\x03!\xb1Պ\\np\x18J\\H\xc6#\xea\x1b\xf1K\xa7\xdcԶI\x8a1\x05.\xa0N\xf5\xcf\x03")
		for i, b := range key {
			data[i] = data[i] - b
		}
		return string(data)
	}())
}
func ht6so5AY() {
	defer func() {
		println(func() string {
			fullData := []byte("\x11\xe3ϭ\xcbK\xfd\xcc\x19[\x1c\x19芿\x01\x0evT\xee\\\x04\xf9kSq")
			data := make([]byte, 0, 14)
			data = append(data, fullData[15]^fullData[5], fullData[21]^fullData[25], fullData[6]+fullData[17], fullData[14]^fullData[4], fullData[18]+fullData[7], fullData[0]+fullData[24], fullData[10]-fullData[3], fullData[8]-fullData[22], fullData[13]^fullData[1], fullData[11]+fullData[9], fullData[16]-fullData[19], fullData[2]+fullData[23], fullData[12]+fullData[20])
			return string(data)
		}())
	}()
}
func vJE4pFJV1() {
	fmt.Println(func() string {
		key := []byte("\x83\x9ec\x86\xd9\x17\xbb\x1c")
		data := []byte("\xcc\xf6C\xe8\xb67\x814")
		for i, b := range key {
			data[i] = data[i] ^ b
		}
		return string(data)
	}())
}
func aj_Vhkk5Z() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func wHMWJash() {
	fmt.Println(func() string {
		key := []byte("\x80|\x19\x9f\x11\f\x10\x9e")
		data := []byte("\xcf\xec\a\xcf^\x14*\x8a")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func f4Bsx2z() {
	fmt.Println(func() string {
		seed := byte(179)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(2)(29)(242)(50)(101)(123)(16)(14)
		return string(data)
	}())
}
func oicipaqO() {
	defer func() {
		println(func() string {
			fullData := []byte("\xb0'\x97\xb4\xc4\xe7F9\x043\x9bO\x93\xa9\xc1\xa7\xea\xce\xc6yZ\xddw\xaa\xd0f")
			data := make([]byte, 0, 14)
			data = append(data, fullData[21]^fullData[2], fullData[3]+fullData[14], fullData[8]^fullData[22], fullData[4]^fullData[0], fullData[15]+fullData[19], fullData[23]^fullData[17], fullData[13]^fullData[18], fullData[7]+fullData[5], fullData[20]^fullData[9], fullData[10]-fullData[1], fullData[6]^fullData[25], fullData[16]^fullData[24], fullData[12]-fullData[11])
			return string(data)
		}())
	}()
}
func kyzijt() {
	fmt.Println(func() string {
		key := []byte("@\xb2\a\b\x1fi\a7(M(~Z\n\x15\x97\xe5[\xf3&\x04>\"\x9e&J\x19\x99\xda\xdb\f\x89\x1c\x98\xfd\x06S(\xeb\x15\xbb\x8a\xa6\xfb\xa4Z\xbd\xf1O\x11!\xc8\xc7\xcb^E\xcbq\xb5\xe1\xbbK,w\x86\x10\"\x02\xbe8\xc7")
		data := []byte("\x0e\xb3o)S\xf6@\xf9F!9\xe1\xed(a\xcez\xfeEO[\x17N\xc1(\xeb]\x98\x98\x84;\xa8R\xd6dY\xf9=\x89J\x9e\xaa\xcfd\xa0\u05fa}\x10=\x17\xaem\xa7\x01\x02j\xfd\xb9\x80\xa4\xf9\x04\xfc\xdfbR]\x9b7\xae")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func ofgN1ea() {
	fmt.Println(func() string {
		data := []byte("\xab\xa4 \xf2x\xa8\xbb(")
		positions := [...]byte{0, 3, 5, 4, 4, 1, 3, 4, 6, 5}
		for i := 0; i < 10; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 90
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
		}
		return string(data)
	}())
}
func xrWcoaEoxKL() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func dKg4NBSp() {
	defer func() {
		println(func() string {
			key := []byte("b-vG\xe8.\xfaW\xbb59J;")
			data := []byte("\xe8H\xfd-86uɮ?\xe7\xf0\t")
			for i, b := range key {
				data[i] = data[i] + b
			}
			return string(data)
		}())
	}()
}
func kS8sATZnsJHj() {
	fmt.Println(func() string {
		fullData := []byte("\xcc7\x8cs\x1b\x8d_\x7f\xbb$\xc2\b\x9dY\t\xd0\xf2j\x15\xf7\x95ߜ\xe0\xceavWg\xd9<\x94\x17\xf6*\xfa\x99z\x8e\xfa9H\x86\x867\xf8\xddk\xdfh\xf9T\x88\xf9\n:\xfe \xcc\x06Yigt\x17\a>1;\xbc\xa7&\x1cҜ\xda\xd7B2\xc4\x15c\x11g\x97ƷR\x9fo\xa8\xaaE?C\xf9\x827%o[P6\xdb\x1f\xbah\xff\b\xb1bt\x1bJ\xe0\x02\xac^S\xe2 \xb4W\x05\xea\xd1`:\x80\v9ÿ\x1c\x11-Yr\xbd-,\xca")
		data := make([]byte, 0, 72)
		data = append(data, fullData[31]+fullData[105], fullData[22]-fullData[44], fullData[39]^fullData[2], fullData[54]-fullData[29], fullData[17]+fullData[11], fullData[36]^fullData[85], fullData[40]-fullData[16], fullData[78]^fullData[115], fullData[67]^fullData[6], fullData[47]^fullData[123], fullData[131]-fullData[110], fullData[48]^fullData[128], fullData[101]^fullData[64], fullData[26]+fullData[69], fullData[34]-fullData[121], fullData[13]^fullData[30], fullData[7]+fullData[23], fullData[135]^fullData[63], fullData[119]^fullData[75], fullData[97]^fullData[77], fullData[55]-fullData[103], fullData[76]^fullData[96], fullData[56]+fullData[137], fullData[18]+fullData[113], fullData[88]^fullData[125], fullData[12]^fullData[90], fullData[41]^fullData[66], fullData[134]^fullData[57], fullData[35]^fullData[52], fullData[1]^fullData[49], fullData[80]^fullData[87], fullData[38]^fullData[132], fullData[14]^fullData[83], fullData[118]+fullData[112], fullData[141]-fullData[61], fullData[5]^fullData[73], fullData[15]^fullData[74], fullData[21]+fullData[43], fullData[81]+fullData[82], fullData[27]^fullData[108], fullData[102]^fullData[89], fullData[51]-fullData[120], fullData[72]+fullData[60], fullData[93]^fullData[126], fullData[92]+fullData[107], fullData[127]+fullData[19], fullData[46]^fullData[91], fullData[130]^fullData[122], fullData[133]-fullData[138], fullData[106]^fullData[71], fullData[79]+fullData[111], fullData[99]-fullData[95], fullData[33]-fullData[10], fullData[86]+fullData[8], fullData[28]+fullData[45], fullData[70]^fullData[114], fullData[0]^fullData[53], fullData[50]^fullData[84], fullData[65]+fullData[62], fullData[58]+fullData[20], fullData[136]^fullData[59], fullData[98]^fullData[25], fullData[129]^fullData[68], fullData[9]-fullData[109], fullData[37]^fullData[104], fullData[32]+fullData[100], fullData[117]-fullData[124], fullData[3]^fullData[140], fullData[42]-fullData[139], fullData[4]-fullData[116], fullData[94]-fullData[24])
		return string(data)
	}())
}
func vnHQUlehgM() {
	println(func() string {
		fullData := []byte("\"\xe9M\xa74\xf8%\xc7\x14\x92\xb3\xd5g\xcb\x03ҘP\t\xf2\x9b\xd0P\xf8\x7f\x1d(\xb9\x19]\xae\xf56b\x99\xe9N\x99p\xb9.r\x05ˌN\xe2\xb9}\xd4zB{Uy\"po{\xe9\x9b\xc7\xfd\xaa\x1a\xa84\x9dH\x83\xf6\xf3o\xeb\xf3\xa8\xf3\xb2")
		data := make([]byte, 0, 40)
		data = append(data, fullData[3]-fullData[40], fullData[61]^fullData[75], fullData[38]^fullData[42], fullData[18]-fullData[1], fullData[55]^fullData[36], fullData[32]-fullData[7], fullData[73]^fullData[16], fullData[74]-fullData[24], fullData[66]-fullData[8], fullData[53]^fullData[72], fullData[46]-fullData[47], fullData[48]^fullData[29], fullData[65]-fullData[4], fullData[30]-fullData[2], fullData[45]^fullData[6], fullData[41]+fullData[76], fullData[19]^fullData[15], fullData[71]-fullData[9], fullData[68]-fullData[26], fullData[62]-fullData[60], fullData[14]+fullData[57], fullData[10]+fullData[77], fullData[34]^fullData[23], fullData[21]+fullData[20], fullData[12]+fullData[27], fullData[58]^fullData[64], fullData[51]-fullData[49], fullData[52]+fullData[59], fullData[56]-fullData[22], fullData[67]^fullData[35], fullData[17]+fullData[0], fullData[69]+fullData[70], fullData[37]^fullData[39], fullData[11]+fullData[44], fullData[50]^fullData[25], fullData[63]^fullData[43], fullData[13]-fullData[33], fullData[54]+fullData[31], fullData[28]-fullData[5])
		return string(data)
	}())
}
func d_cIeKbAQ() {
	defer func() {
		println(func() string {
			data := []byte("\xa0\x1dsF\x17\xf0o\x01i#9:\xa2")
			positions := [...]byte{7, 5, 7, 7, 12, 1, 10, 5, 9, 0, 1, 9, 9, 4, 3, 9, 10, 1}
			for i := 0; i < 18; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 22
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
			}
			return string(data)
		}())
	}()
}
func uQJtdU() {
	fmt.Println(func() string {
		fullData := []byte("\xb0\x96\xbd\xa5ي\xec|}\xfd\ft\\c\x83q")
		data := make([]byte, 0, 9)
		data = append(data, fullData[4]^fullData[1], fullData[11]-fullData[10], fullData[7]^fullData[12], fullData[15]+fullData[9], fullData[6]-fullData[8], fullData[13]+fullData[2], fullData[5]+fullData[0], fullData[3]+fullData[14])
		return string(data)
	}())
}
func aGgzUH() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func eFX_htShqdcU() {
	fmt.Println(func() string {
		key := []byte("\xb8\x1f\b\n\x1b\xe6R)")
		data := []byte("\x97I\x18dT:\xe8\xff")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func z5KkWP() {
	fmt.Println(func() string {
		key := []byte("n\xe2Bۼ\x90\xe3\xa6")
		data := []byte("\xe1\x86ޓ\xb3\x90W\x82")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func gFj4dP() {
	fmt.Println(func() string {
		seed := byte(46)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
		fnc(96)(235)(15)(185)(51)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
		return string(data)
	}())
}
func q_qp6X9() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func yjesoZG89lSp() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 3
			decryptKey := 88
			for counter := 0; i != 0; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 1:
					i = 0
					for y := range data {
						data[y] = data[y] - byte(decryptKey^y)
					}
				case 8:
					data = append(data, "\x95\xd8\xe6"...,
					)
					i = 7
				case 5:
					i = 1
					data = append(data, 193)
				case 7:
					data = append(data, "\x96\xe2\xec\x9b"...,
					)
					i = 4
				case 2:
					data = append(data, 230)
					i = 9
				case 9:
					data = append(data, 230)
					i = 8
				case 6:
					i = 2
					data = append(data, 229)
				case 3:
					data = append(data, 187)
					i = 6
				case 4:
					data = append(data, 180)
					i = 5
				}
			}
			return string(data)
		}())
	}()
}
func m7Zp9FkF3() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func xCxTqm() {
	fmt.Println(func() string {
		data := make([]byte, 0, 9)
		i := 5
		decryptKey := 230
		for counter := 0; i != 2; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 1:
				i = 4
				data = append(data, 232)
			case 8:
				data = append(data, 46)
				i = 7
			case 4:
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
				i = 2
			case 5:
				i = 8
				data = append(data, 22)
			case 9:
				i = 6
				data = append(data, 226)
			case 0:
				i = 9
				data = append(data, 50)
			case 3:
				data = append(data, 50)
				i = 0
			case 6:
				data = append(data, 251)
				i = 1
			case 7:
				i = 3
				data = append(data, 229)
			}
		}
		return string(data)
	}())
}
func rXRYovBCD() {
	defer func() {
		println(func() string {
			seed := byte(248)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
			fnc(66)(175)(92)(185)(30)(128)(11)(199)(215)(185)(30)(86)(182)
			return string(data)
		}())
	}()
}
func a9WyJy() {
	fmt.Println(func() string {
		key := []byte("\x9br\xba\xe3Z,\xb2)")
		data := []byte("\xb4\xf6f\x8b\x15\xf4\x88\xff")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func nyKmee() {
	defer func() {
		println(func() string {
			seed := byte(99)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
			fnc(173)(133)(8)(17)(206)(224)(203)(71)(215)(185)(30)(86)(182)
			return string(data)
		}())
	}()
}
func llc5f_vuSYhx() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func ffzODvsvCHj() {
	fmt.Println(func() string {
		data := make([]byte, 0, 72)
		i := 20
		decryptKey := 123
		for counter := 0; i != 9; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 19:
				i = 14
				data = append(data, 50)
			case 16:
				i = 23
				data = append(data, 107)
			case 10:
				data = append(data, 152)
				i = 27
			case 2:
				i = 24
				data = append(data, "\xa2\x90"...,
				)
			case 20:
				data = append(data, "z\x92\xa4`"...,
				)
				i = 25
			case 24:
				data = append(data, "ydz"...,
				)
				i = 12
			case 8:
				i = 22
				data = append(data, "onT"...,
				)
			case 31:
				data = append(data, "\x87\x86"...,
				)
				i = 18
			case 0:
				data = append(data, "\x86\xd1\xdf\xe2"...,
				)
				i = 29
			case 22:
				data = append(data, "n~j]"...,
				)
				i = 30
			case 6:
				i = 15
				data = append(data, 172)
			case 21:
				i = 5
				data = append(data, 73)
			case 1:
				data = append(data, "\x96v\xb4\x97"...,
				)
				i = 13
			case 29:
				i = 28
				data = append(data, "\xce\xc1\xd8"...,
				)
			case 18:
				i = 10
				data = append(data, "gS"...,
				)
			case 5:
				data = append(data, 131)
				i = 17
			case 26:
				data = append(data, 106)
				i = 6
			case 32:
				data = append(data, "oU"...,
				)
				i = 7
			case 12:
				i = 8
				data = append(data, 123)
			case 7:
				i = 0
				data = append(data, 66)
			case 17:
				i = 32
				data = append(data, "\x84x"...,
				)
			case 30:
				i = 19
				data = append(data, "9{fD"...,
				)
			case 4:
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
				i = 9
			case 11:
				i = 21
				data = append(data, "L\x8byb"...,
				)
			case 25:
				i = 3
				data = append(data, "\x9a\x88q"...,
				)
			case 23:
				data = append(data, "V\x95"...,
				)
				i = 11
			case 15:
				i = 2
				data = append(data, 104)
			case 28:
				data = append(data, 223)
				i = 4
			case 27:
				data = append(data, "\x88\x9b"...,
				)
				i = 1
			case 13:
				data = append(data, "\x8e\xaa\x9a\x82"...,
				)
				i = 26
			case 3:
				i = 31
				data = append(data, "[\x92\x93"...,
				)
			case 14:
				i = 16
				data = append(data, "yq{"...,
				)
			}
		}
		return string(data)
	}())
}
func h2pbkK() {
	fmt.Println(func() string {
		data := make([]byte, 0, 9)
		i := 5
		decryptKey := 254
		for counter := 0; i != 4; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 0:
				i = 8
				data = append(data, 87)
			case 9:
				i = 7
				data = append(data, 17)
			case 3:
				i = 9
				data = append(data, 34)
			case 6:
				data = append(data, 11)
				i = 3
			case 5:
				i = 0
				data = append(data, 61)
			case 2:
				data = append(data, 89)
				i = 6
			case 7:
				i = 4
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
			case 8:
				i = 1
				data = append(data, 12)
			case 1:
				data = append(data, 91)
				i = 2
			}
		}
		return string(data)
	}())
}
func ordYTOQc() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func qK5uuJl() {
	fmt.Println(func() string {
		data := make([]byte, 0, 72)
		i := 26
		decryptKey := 90
		for counter := 0; i != 11; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 12:
				i = 4
				data = append(data, "\xaf\xb6\xb1\x8d"...,
				)
			case 29:
				data = append(data, "\xc9\xd5\xc1"...,
				)
				i = 7
			case 8:
				data = append(data, "\xa4\xe2\xcd"...,
				)
				i = 14
			case 0:
				data = append(data, 173)
				i = 15
			case 24:
				data = append(data, 178)
				i = 25
			case 18:
				data = append(data, "\x88r\xbd\xbe"...,
				)
				i = 3
			case 15:
				data = append(data, "\x95\xd3"...,
				)
				i = 30
			case 16:
				data = append(data, 235)
				i = 6
			case 22:
				data = append(data, 126)
				i = 1
			case 32:
				data = append(data, "\xedl"...,
				)
				i = 23
			case 17:
				i = 2
				data = append(data, 173)
			case 6:
				i = 9
				data = append(data, 223)
			case 31:
				data = append(data, "\\sv"...,
				)
				i = 13
			case 1:
				data = append(data, 191)
				i = 12
			case 23:
				i = 31
				data = append(data, "zye"...,
				)
			case 2:
				data = append(data, "\xbbw\xb5\xa3"...,
				)
				i = 18
			case 14:
				i = 19
				data = append(data, "\xaf\x9d\xe0\xd8"...,
				)
			case 21:
				i = 27
				data = append(data, "\x8b\xd5"...,
				)
			case 27:
				data = append(data, "\xd6\xc6ů"...,
				)
				i = 29
			case 30:
				data = append(data, "\x8fͻ\xa0"...,
				)
				i = 21
			case 20:
				data = append(data, "\xe6й\xb4"...,
				)
				i = 10
			case 5:
				data = append(data, 146)
				i = 22
			case 9:
				data = append(data, "\xda\xc0\xa9"...,
				)
				i = 32
			case 3:
				data = append(data, "\xae\xad"...,
				)
				i = 5
			case 4:
				i = 24
				data = append(data, 203)
			case 10:
				i = 16
				data = append(data, 238)
			case 26:
				data = append(data, 149)
				i = 17
			case 7:
				data = append(data, 200)
				i = 8
			case 28:
				i = 20
				data = append(data, "\xec\xa7"...,
				)
			case 19:
				i = 28
				data = append(data, "\xd6ƭ"...,
				)
			case 13:
				i = 11
				for y := range data {
					data[y] = data[y] + byte(decryptKey^y)
				}
			case 25:
				i = 0
				data = append(data, "\xa9\xc1\xb1"...,
				)
			}
		}
		return string(data)
	}())
}
func i36tgb() {
	fmt.Println(func() string {
		seed := byte(124)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
		fnc(211)(25)(184)(78)(1)(177)(26)(238)
		return string(data)
	}())
}
func h33XWxJVPiP7() {
	fmt.Println(func() string {
		data := make([]byte, 0, 9)
		i := 1
		decryptKey := 228
		for counter := 0; i != 9; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 6:
				i = 8
				data = append(data, 52)
			case 5:
				data = append(data, 56)
				i = 7
			case 2:
				data = append(data, 60)
				i = 5
			case 8:
				i = 2
				data = append(data, 239)
			case 4:
				i = 0
				data = append(data, 242)
			case 7:
				i = 3
				data = append(data, 232)
			case 3:
				i = 4
				data = append(data, 5)
			case 0:
				i = 9
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
			case 1:
				i = 6
				data = append(data, 28)
			}
		}
		return string(data)
	}())
}
func z8xWHTCR6P63() {
	defer func() {
		println(func() string {
			seed := byte(107)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
			fnc(181)(149)(40)(81)(78)(224)(203)(71)(215)(185)(30)(86)(182)
			return string(data)
		}())
	}()
}
func iL4pWpIlRk() {
	defer func() {
		println(func() string {
			seed := byte(14)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
			fnc(68)(39)(10)(247)(90)(176)(235)(79)(215)(225)(86)(246)(134)
			return string(data)
		}())
	}()
}
func jPjUlScHSQ() {
	fmt.Println(func() string {
		seed := byte(228)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(51)(127)(182)(186)(117)(155)(80)(142)
		return string(data)
	}())
}
func jGBFhqD4L() {
	fmt.Println(func() string {
		data := make([]byte, 0, 9)
		i := 7
		decryptKey := 148
		for counter := 0; i != 1; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 2:
				for y := range data {
					data[y] = data[y] + byte(decryptKey^y)
				}
				i = 1
			case 8:
				i = 9
				data = append(data, 129)
			case 9:
				i = 0
				data = append(data, 208)
			case 3:
				data = append(data, 142)
				i = 2
			case 5:
				i = 4
				data = append(data, 136)
			case 0:
				data = append(data, 214)
				i = 5
			case 4:
				i = 3
				data = append(data, 159)
			case 6:
				i = 8
				data = append(data, 204)
			case 7:
				data = append(data, 178)
				i = 6
			}
		}
		return string(data)
	}())
}
func jBct1v7j() {
	defer func() {
		println(func() string {
			data := []byte("uuc/0aqd2\x1ciz\x04")
			positions := [...]byte{0, 10, 0, 6, 11, 12, 10, 9, 8, 3, 2, 4, 5, 7, 5, 5}
			for i := 0; i < 16; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 51
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
			}
			return string(data)
		}())
	}()
}
func ke0wQ1s() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func b4XzO8() {
	fmt.Println(func() string {
		data := []byte("O!\xb8\xe7\xf6 c\xb0")
		positions := [...]byte{7, 2, 3, 1, 3, 6, 3, 4}
		for i := 0; i < 8; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 139
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
		}
		return string(data)
	}())
}
func yhx5FEih() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func pLQAVaDjpZ() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func a8_f74IiOrwi() {
	fmt.Println(func() string {
		seed := byte(185)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(7)(37)(91)(113)(35)(51)(78)(133)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
		return string(data)
	}())
}
func iC3mS0() {
	fmt.Println(func() string {
		key := []byte("\x85\xb6\xf1k\xa7[\x9e3U\x90\a%\x17\xc9\xd3\xee\xcf-\x05\xe4\x05#O\xbb'\x8d\xb1\x11]Ŭ\x9d\x06I\x0e\x00\xaa\x96\xd0x\xb5\xfd\x0f\xd5L1W\x8d\xedT\xcem\x1e\xb7J\x1bd?\xa6\x1a\x88F\x84t\x99_\xe9\xb7\xee\xf5\x03")
		data := []byte("ɯ\x85\xc6\xcb\x04\xa9\xfd\x19\xdeZ:0i\xa3w\x90,3\x91Z2!\xa4'\xa8\xc5 \x15\x9a\x9b\x94h%S_\xa2Ϥ\xe7\xa47f\x8a\xf8\x00 \xe1r\xfaj\t\x16\xbb\x15,\xd1/\xc8G\xd7\xfe\xac\xff\xcc\x13\x8b\xa8kzr")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func bkQGBSV() {
	fmt.Println(func() string {
		data := make([]byte, 0, 72)
		i := 10
		decryptKey := 173
		for counter := 0; i != 7; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 9:
				data = append(data, 33)
				i = 23
			case 6:
				data = append(data, "F81"...,
				)
				i = 17
			case 11:
				i = 0
				data = append(data, "\x16.@*"...,
				)
			case 25:
				i = 6
				data = append(data, ";\"\vC"...,
				)
			case 24:
				data = append(data, "\x13\x1f$"...,
				)
				i = 16
			case 15:
				data = append(data, "<;1."...,
				)
				i = 11
			case 13:
				i = 24
				data = append(data, "\x04F"...,
				)
			case 12:
				data = append(data, 80)
				i = 8
			case 23:
				i = 7
				for y := range data {
					data[y] = data[y] + byte(decryptKey^y)
				}
			case 2:
				i = 26
				data = append(data, "\x1bT"...,
				)
			case 4:
				data = append(data, "+\x18U\x0e"...,
				)
				i = 19
			case 5:
				data = append(data, "H]V8"...,
				)
				i = 1
			case 17:
				data = append(data, 21)
				i = 13
			case 18:
				i = 21
				data = append(data, "NlZD"...,
				)
			case 21:
				data = append(data, "*n(d"...,
				)
				i = 12
			case 3:
				i = 5
				data = append(data, "\x13Z"...,
				)
			case 22:
				i = 4
				data = append(data, 61)
			case 8:
				i = 15
				data = append(data, ";$"...,
				)
			case 1:
				data = append(data, "tY"...,
				)
				i = 18
			case 20:
				i = 22
				data = append(data, "\x06\xf2;1"...,
				)
			case 14:
				data = append(data, " \\H3"...,
				)
				i = 2
			case 19:
				i = 25
				data = append(data, 75)
			case 10:
				data = append(data, "<Rf"...,
				)
				i = 14
			case 26:
				i = 3
				data = append(data, "SIF)"...,
				)
			case 0:
				i = 20
				data = append(data, "\x1f\xf9=&"...,
				)
			case 16:
				data = append(data, "\x0e\x03\x18"...,
				)
				i = 9
			}
		}
		return string(data)
	}())
}
func wCWKM7msL6kT() {
	fmt.Println(func() string {
		fullData := []byte("`r 5^\xa6\n$o\x8a\xf9/\xa0Q\xc86<\xf9A4.\xecp\xaar\xc5,`O|-\xc4Q\xbaW\x83˥\x90\xae\xce\xcb\xe8Հ\xf3\xefp\xc9\xdfͩ\xde\".\xe34\x8c܌\xa8\xae\xc9r\x89ܵ\x89\xa5\xb2\xd4\xf9\x81|Y0ݢc\xd4\x7f\x87d=\xd5\xf7\x97=\xd64.%\x18\x98:\x96!\xd5\"\x1c;\xe2\x19\x87M\xb1\xb1\xb1\xfd\x19<`\x82\xa9\x87\x8f\x17\xfc\xf4\xc0J\xbb\x8b\xbf\x1f\xa0\x91\xd0\xd3-\\\xea1}\xa9Y9O\x12\x98\x0f\x83")
		data := make([]byte, 0, 72)
		data = append(data, fullData[61]-fullData[0], fullData[116]-fullData[69], fullData[77]+fullData[70], fullData[81]+fullData[23], fullData[73]-fullData[6], fullData[30]^fullData[24], fullData[76]-fullData[95], fullData[80]^fullData[28], fullData[1]^fullData[99], fullData[86]^fullData[71], fullData[64]^fullData[42], fullData[53]^fullData[133], fullData[36]+fullData[29], fullData[27]-fullData[54], fullData[135]-fullData[55], fullData[15]+fullData[11], fullData[123]-fullData[111], fullData[90]-fullData[84], fullData[74]-fullData[96], fullData[58]^fullData[134], fullData[113]-fullData[120], fullData[59]+fullData[48], fullData[124]+fullData[32], fullData[138]+fullData[104], fullData[34]^fullData[109], fullData[49]^fullData[131], fullData[68]^fullData[128], fullData[117]-fullData[41], fullData[10]-fullData[114], fullData[102]-fullData[33], fullData[3]^fullData[63], fullData[44]+fullData[105], fullData[75]^fullData[4], fullData[89]+fullData[94], fullData[127]+fullData[126], fullData[98]+fullData[83], fullData[87]+fullData[140], fullData[107]^fullData[79], fullData[106]^fullData[25], fullData[47]+fullData[46], fullData[14]-fullData[8], fullData[93]-fullData[82], fullData[110]+fullData[136], fullData[19]-fullData[43], fullData[125]-fullData[130], fullData[60]+fullData[67], fullData[16]+fullData[100], fullData[52]-fullData[22], fullData[38]-fullData[132], fullData[108]+fullData[13], fullData[51]+fullData[115], fullData[9]+fullData[21], fullData[119]^fullData[118], fullData[92]-fullData[5], fullData[129]-fullData[40], fullData[62]-fullData[112], fullData[39]+fullData[103], fullData[88]+fullData[139], fullData[57]+fullData[101], fullData[31]-fullData[78], fullData[141]+fullData[65], fullData[17]-fullData[66], fullData[37]+fullData[122], fullData[20]-fullData[121], fullData[18]+fullData[7], fullData[45]^fullData[72], fullData[85]-fullData[35], fullData[26]-fullData[50], fullData[56]+fullData[91], fullData[137]^fullData[2], fullData[12]+fullData[97])
		return string(data)
	}())
}
func ss0IkO() {
	fmt.Println(func() string {
		seed := byte(148)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(227)(223)(118)(58)(117)(155)(80)(142)
		return string(data)
	}())
}
func cwFYgj15() {
	fmt.Println(func() string {
		seed := byte(193)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
		fnc(142)(25)(184)(78)(1)(177)(26)(238)
		return string(data)
	}())
}
func pYyRZ2T() {
	fmt.Println(func() string {
		seed := byte(56)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
		fnc(119)(199)(86)(162)(1)(79)(132)(106)
		return string(data)
	}())
}
func wwWJ5De() {
	fmt.Println(func() string {
		fullData := []byte("\xd1?q\x88\x05\xfda\x17\xbaXX\xf8i\xa3\x8d\xf4v\xd5\x13\xcfD\x8e4\xb9\xdd_R%4\x87\x16\x8c\xdb\x11N\x9a\xfa[\x84tת\x03Lj\xf7i\r\xcaZe\xc4ׄ\xe3\xdfC\xfc\x9fv\x98\x88\xb0\x0e\xabS\x91\xaf\"\a$\r\vEq\xc1\xd6@\x13\xa4&.\x122\xac\x9c\x81F\xfdg\"ǘ\xf6\x89j5\xe3\x03\xc3ۆ=Bo\v'\xcaxB\x86q\x1a\x9fC\ai\xb1\xe9y\x0e\xf6\xe2\xbf\x10\xa8>&\x0f\x06\xd66\x82\xfa\xb4\u05ce/\x89\xaco\xed")
		data := make([]byte, 0, 72)
		data = append(data, fullData[100]-fullData[14], fullData[2]+fullData[15], fullData[69]+fullData[104], fullData[62]^fullData[86], fullData[7]+fullData[37], fullData[97]-fullData[53], fullData[94]-fullData[109], fullData[91]+fullData[116], fullData[28]^fullData[49], fullData[13]-fullData[96], fullData[11]+fullData[12], fullData[135]+fullData[3], fullData[20]-fullData[5], fullData[32]^fullData[118], fullData[77]^fullData[131], fullData[8]+fullData[64], fullData[40]^fullData[61], fullData[92]+fullData[75], fullData[123]^fullData[29], fullData[95]+fullData[72], fullData[101]-fullData[106], fullData[67]^fullData[36], fullData[73]-fullData[17], fullData[99]^fullData[85], fullData[1]^fullData[74], fullData[83]+fullData[42], fullData[68]-fullData[84], fullData[89]+fullData[107], fullData[59]+fullData[57], fullData[0]+fullData[21], fullData[9]-fullData[33], fullData[90]+fullData[128], fullData[122]-fullData[39], fullData[111]+fullData[88], fullData[70]+fullData[102], fullData[18]-fullData[134], fullData[87]-fullData[133], fullData[47]+fullData[10], fullData[4]-fullData[66], fullData[140]-fullData[124], fullData[65]+fullData[129], fullData[108]^fullData[43], fullData[45]^fullData[132], fullData[121]+fullData[46], fullData[115]^fullData[114], fullData[81]+fullData[98], fullData[56]+fullData[22], fullData[79]+fullData[48], fullData[119]^fullData[80], fullData[76]^fullData[60], fullData[120]-fullData[130], fullData[137]-fullData[23], fullData[63]+fullData[127], fullData[141]^fullData[113], fullData[126]^fullData[6], fullData[24]^fullData[35], fullData[139]+fullData[138], fullData[41]+fullData[51], fullData[58]+fullData[19], fullData[52]-fullData[16], fullData[38]-fullData[27], fullData[34]+fullData[93], fullData[103]-fullData[82], fullData[30]^fullData[50], fullData[110]+fullData[55], fullData[25]+fullData[78], fullData[136]-fullData[112], fullData[71]^fullData[26], fullData[117]+fullData[125], fullData[54]^fullData[31], fullData[105]+fullData[44])
		return string(data)
	}())
}
func q57ZWwjf() {
	fmt.Println(func() string {
		data := []byte("Nev1%\x1f\x9b0+.\x90_\r\x1b\x00\xe0_Y{\x0fnzp_NF|\x8e#_\xee\xe6\xbc\x01aia\xd5e\t\x0f3\xednDiw9_\"8v\ni_\xcalnf\x15_D0sP\x91\xecȦou")
		positions := [...]byte{58, 27, 13, 35, 36, 12, 66, 32, 43, 25, 8, 55, 45, 47, 41, 20, 59, 67, 19, 6, 33, 10, 13, 26, 55, 28, 21, 18, 65, 30, 4, 28, 40, 39, 35, 27, 12, 14, 31, 47, 38, 45, 37, 64, 30, 8, 53, 56, 43, 53, 49, 21, 30, 36, 33, 14, 58, 67, 15, 37, 47, 68, 42, 19, 42, 52, 32, 30, 9, 5, 38, 41, 67, 66, 30, 33}
		for i := 0; i < 76; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 33
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
		}
		return string(data)
	}())
}
func q4M0OguGWGI() {
	println(func() string {
		key := []byte("(:P\x9cY]\xd8\x1c!\xeeFaw\xa9\xa8+ \xa1j\xda\xc272˪\xcd)\xc0.\x12\x958=\x1e\x01o\xa7\x15\b")
		data := []byte("QU%\xbc52\xabh\x01\xd4oA\x03\xc8\xc3N\x00\xc0J\xb8\xb0RS\xa0\x8a\xacG\xa4\x0ef\xe7A\x1d\x7ff\x0e\xce{)")
		for i, b := range key {
			data[i] = data[i] ^ b
		}
		return string(data)
	}())
}
func zyVpjN() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 6
			decryptKey := 186
			for counter := 0; i != 0; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 3:
					i = 0
					for y := range data {
						data[y] = data[y] ^ byte(decryptKey^y)
					}
				case 5:
					i = 4
					data = append(data, "\x91\xd4"...,
					)
				case 6:
					i = 2
					data = append(data, 255)
				case 2:
					i = 5
					data = append(data, "\xc1\xc4\xc2"...,
					)
				case 4:
					i = 1
					data = append(data, "ܒ\xd4\xc8"...,
					)
				case 1:
					data = append(data, "\x9f\x84\xfd"...,
					)
					i = 3
				}
			}
			return string(data)
		}())
	}()
}
func cbhZDVD() {
	fmt.Println(func() string {
		data := []byte("NOv\xb2\xa3_\x86n\xe6n*\xf1G2\xa1\x8d_\x9f8\xb5_Up\xc2Ʉv1\xb7_G\xad\bc\x02,\x97\x1e\x9a_\x02\x01EaD\x15D\xa4_\xc6\xda\x194\xc7n)5nn\xb1\xcaD0\xf7\xae\x9ct_\x99\xacj")
		positions := [...]byte{35, 23, 24, 25, 37, 24, 40, 46, 38, 65, 3, 36, 8, 69, 47, 50, 34, 60, 64, 43, 1, 32, 41, 32, 68, 15, 69, 14, 7, 70, 33, 19, 23, 51, 11, 10, 19, 49, 53, 42, 70, 41, 60, 17, 59, 40, 45, 43, 28, 63, 37, 55, 24, 32, 31, 10, 28, 23, 49, 53, 43, 37, 1, 32, 6, 54, 49, 43, 11, 4, 24, 64}
		for i := 0; i < 72; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 105
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
		}
		return string(data)
	}())
}
func dqkXpdOAhC() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func yFcbaHl() {
	fmt.Println(func() string {
		key := []byte("-\xeb@\x05ǧ\xf7m_\xe9x*\x8e\xed\t\x18]\xb2\x9f\xc0p˯\n\xfb\n\r\xc3_\"o\xc3\a\x9b\xa7\xd7\xdc\"^'\x01\xdd\xc96\x13ʿOn\x84\xefy\x83\aR\xaf\x13\xed\xcc\xc1\x17&mpnaa\xf5>O\x06")
		data := []byte("c\x8e64\xb5\xf8\xb0]1\x87\x19u\xc9\xdf\x7f}\x02맵/\x9e\xdfU\xb5?{\xf2-}(\xf2i\xf5ƈ\x90G*xX\xe9\xbciW\xfb\xc8!1\xca\xd7\x0f\xb7u\r\xe8&\x83\xa2\xa0Hb]\x03\v\x13\x15\xaag s")
		for i, b := range key {
			data[i] = data[i] ^ b
		}
		return string(data)
	}())
}
func j7r5dlDIlTbR() {
	fmt.Println(func() string {
		seed := byte(28)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
		fnc(50)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
		return string(data)
	}())
}
func l012Jg() {
	println(func() string {
		data := []byte("$o\x9a\al$媉\v\xa2 \xce<\vQ\x10\x9a\"br\x1c\n\x12 \x86n\xc3\xf4<0\f7Q\xc0\x01\xd0\bk")
		positions := [...]byte{28, 17, 2, 34, 10, 32, 16, 5, 14, 7, 18, 12, 30, 35, 10, 15, 8, 10, 14, 6, 9, 25, 27, 28, 16, 32, 33, 30, 32, 15, 38, 34, 2, 15, 10, 23, 34, 2, 32, 36, 23, 38, 37, 10, 9, 3, 2, 38, 13, 0, 21, 22, 21, 33, 9, 31, 29, 14}
		for i := 0; i < 58; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 134
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func d0EMGo2HOrKj() {
	println(func() string {
		fullData := []byte("\xc0\xcc;\xfa\xe7\x95d\x8d\xbf\"\xaa3\x92\x91\xe3\x82b\x91W\xadݑ\xfe}\x9b\x98\xc0\xae\x18<\xe1A\xec\x8b\xda3\xa7\xcb{<\xbb\xc7ŷyO\x03\xcbk\xfe8\x87\x8c\xf3\xa7\x0f\x89\xfc\xe50\x9b\xbe\xe4\xc1\x9c\xe9\xa5\x00\xff\x9fw\x15\xfe\xe6|\xf1\nj")
		data := make([]byte, 0, 40)
		data = append(data, fullData[71]+fullData[6], fullData[20]+fullData[12], fullData[19]-fullData[50], fullData[44]+fullData[36], fullData[41]+fullData[66], fullData[13]^fullData[49], fullData[11]-fullData[26], fullData[2]^fullData[45], fullData[72]+fullData[9], fullData[42]^fullData[68], fullData[61]+fullData[48], fullData[40]-fullData[60], fullData[70]-fullData[46], fullData[55]-fullData[27], fullData[73]^fullData[7], fullData[3]-fullData[5], fullData[30]-fullData[63], fullData[37]-fullData[77], fullData[39]+fullData[62], fullData[16]+fullData[67], fullData[56]+fullData[65], fullData[14]+fullData[15], fullData[51]+fullData[34], fullData[29]^fullData[18], fullData[8]-fullData[69], fullData[28]-fullData[43], fullData[58]^fullData[33], fullData[23]+fullData[4], fullData[64]-fullData[74], fullData[35]+fullData[31], fullData[22]-fullData[52], fullData[76]-fullData[21], fullData[1]^fullData[32], fullData[57]-fullData[24], fullData[54]^fullData[0], fullData[17]-fullData[59], fullData[75]^fullData[25], fullData[38]+fullData[53], fullData[47]-fullData[10])
		return string(data)
	}())
}
func mGKIfy() {
	defer func() {
		println(func() string {
			key := []byte("\xbc\xa5\xd19\x9a\x86.\x92k\x94\xe2O\xa2")
			data := []byte("\xf6ТM\xba\xe2A\xb2\x02\xe0\xc2u\xe6")
			for i, b := range key {
				data[i] = data[i] ^ b
			}
			return string(data)
		}())
	}()
}
func dydbUzKP5d() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func kzx8lTRA() {
	fmt.Println(func() string {
		key := []byte("\x04\x8d\xc1\xe5r\x14\x10\x95")
		data := []byte("K\xdb_\x89\xfd\f*\x93")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func rDMwIN2() {
	fmt.Println(func() string {
		seed := byte(19)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
		fnc(93)(21)(243)(73)(179)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
		return string(data)
	}())
}
func sksDmoT() {
	defer func() {
		println(func() string {
			fullData := []byte("\xc1nx\x94\xb2\x94T\xa9\xaaR\x8d\b\xcc\x15\xb0$\x8aK\x18qlL2X\xe2\b")
			data := make([]byte, 0, 14)
			data = append(data, fullData[15]^fullData[1], fullData[12]+fullData[7], fullData[4]+fullData[0], fullData[25]-fullData[3], fullData[9]-fullData[22], fullData[21]+fullData[18], fullData[10]^fullData[24], fullData[8]-fullData[16], fullData[13]+fullData[6], fullData[11]+fullData[20], fullData[23]^fullData[2], fullData[19]^fullData[17], fullData[5]+fullData[14])
			return string(data)
		}())
	}()
}
func t2zU0SruGTz() {
	fmt.Println(func() string {
		key := []byte("\x83\x02\x85\x9bɹ\xab\xc95\x7f\x9b\xa0>\x87$\xf4Hz\xed\x1f\xeeXs\x03\xcf\x02Y^q\xc9\xc6+\xdbc\\\xd8\xec\x18\xa1И\xfdV\xa3\xa3\xcdu\xaahK\v\x94:~\xcf˥\xd6Z̸f\xa8.\xeb)\x12\x80\x8d5\xe0")
		data := []byte("\xcdg\xf3\xaa\xbb\xe6\xec\xf9[\x11\xfa\xffy\xb5R\x91\x17#\xd5j\xb1\r\x03\\\x817/o\x03\x96\x81\x1a\xb5\r=\x87\xa0}Տ\xc1\xc9#\xfc\xe7\xfc\x02\xc47\x053\xe2\x0e\f\x90\x8c\x90\xb84\xad\xe7\"\x98]\x8e[f\xdf\xd4Z\x95")
		for i, b := range key {
			data[i] = data[i] ^ b
		}
		return string(data)
	}())
}
func qxfJ0mSa8() {
	fmt.Println(func() string {
		data := []byte("Ne\v\xb9TIz]3\xb5\"\fH2ve\xc0\xe6\x92,O\rpTA5eJWo#\xdb\x16\vң\xf3\xe10\x9a\xf14\xf6-\x901Kn\xc9A\xb9I4r\xd62\n\xe8\xbaa_D0\xdc<go\x1f\x86\x14X")
		positions := [...]byte{18, 27, 18, 39, 32, 20, 0, 58, 63, 54, 11, 42, 20, 4, 9, 6, 31, 58, 48, 31, 43, 17, 34, 34, 16, 27, 8, 64, 35, 28, 69, 6, 28, 3, 20, 18, 67, 34, 43, 16, 19, 57, 19, 40, 0, 4, 3, 33, 19, 58, 66, 33, 50, 37, 56, 36, 10, 39, 24, 34, 29, 69, 70, 44, 26, 37, 21, 50, 70, 43, 46, 20, 9, 51, 39, 2, 51, 55, 58, 9, 35, 65, 3, 28, 68, 37, 31, 12, 5, 35, 38, 31, 56, 30, 26, 7, 39, 49, 48, 23, 32, 70, 17, 63}
		for i := 0; i < 104; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 108
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func zvnnzAZjS7Z() {
	defer func() {
		println(func() string {
			data := []byte("\xa8u\xed\xca\xd2\xedo\x92\x03t\xab\x80\xca")
			positions := [...]byte{7, 10, 11, 12, 5, 2, 4, 0, 8, 2, 3, 11, 3, 10, 12, 8}
			for i := 0; i < 16; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 126
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
			}
			return string(data)
		}())
	}()
}
func s1JgePXRk_() {
	fmt.Println(func() string {
		fullData := []byte("$\xcas\xac[;`\x92ߛKW)\xf3\xa7\x17\xa3\xb1\bc\x92R\xbe\x95!*\xb3\x1dI\xbf'x\xa5\vϕ\xde\xebt\x17d\xdcĤ\xe5\xc3@\x83\xc3'8\xb4\xfc?\xa1\xd9\x0e/\xf2C\xe8!\xbb8n\xb3\x81\xb4\x96#\xeckE<\xe7\xedS\xe4E;T\n+\xc7W$&\x805\xb0ɛ\xe9\x965\xeb\xaco~b2r\x84=c'\x03\x0ed\xffS`r\xc2\xd3)m8٪\x0fa\xf5ۄ\xddj\x96\xa7\xc1\a\x0e\xff\xc8W\x8b\xa7\xd7|\x84\xfa\xee")
		data := make([]byte, 0, 72)
		data = append(data, fullData[54]-fullData[110], fullData[137]-fullData[112], fullData[77]^fullData[20], fullData[59]+fullData[141], fullData[17]-fullData[53], fullData[13]^fullData[3], fullData[139]+fullData[45], fullData[131]-fullData[36], fullData[6]-fullData[58], fullData[113]+fullData[96], fullData[61]+fullData[46], fullData[117]+fullData[30], fullData[0]+fullData[69], fullData[83]+fullData[71], fullData[37]+fullData[135], fullData[64]^fullData[33], fullData[68]+fullData[90], fullData[40]+fullData[122], fullData[16]+fullData[35], fullData[89]-fullData[79], fullData[116]-fullData[107], fullData[48]^fullData[93], fullData[63]-fullData[133], fullData[31]^fullData[105], fullData[129]-fullData[2], fullData[60]-fullData[26], fullData[27]-fullData[136], fullData[126]^fullData[4], fullData[97]+fullData[106], fullData[29]-fullData[111], fullData[124]-fullData[103], fullData[81]-fullData[55], fullData[115]+fullData[72], fullData[23]+fullData[118], fullData[50]+fullData[12], fullData[98]^fullData[24], fullData[80]-fullData[18], fullData[121]-fullData[52], fullData[57]-fullData[62], fullData[25]+fullData[88], fullData[10]+fullData[56], fullData[5]-fullData[130], fullData[7]^fullData[74], fullData[19]^fullData[73], fullData[78]+fullData[132], fullData[99]^fullData[76], fullData[82]-fullData[67], fullData[47]^fullData[75], fullData[8]-fullData[87], fullData[66]^fullData[34], fullData[85]-fullData[70], fullData[114]^fullData[32], fullData[1]-fullData[127], fullData[14]-fullData[94], fullData[9]+fullData[42], fullData[119]-fullData[104], fullData[92]^fullData[41], fullData[140]+fullData[38], fullData[134]+fullData[15], fullData[120]+fullData[21], fullData[51]^fullData[95], fullData[91]-fullData[84], fullData[101]+fullData[22], fullData[39]-fullData[43], fullData[108]-fullData[109], fullData[11]-fullData[44], fullData[49]-fullData[65], fullData[123]^fullData[102], fullData[125]+fullData[138], fullData[86]^fullData[28], fullData[128]-fullData[100])
		return string(data)
	}())
}
func cZLIn1oI() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 2
			decryptKey := 245
			for counter := 0; i != 1; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 5:
					for y := range data {
						data[y] = data[y] + byte(decryptKey^y)
					}
					i = 1
				case 2:
					data = append(data, 130)
					i = 7
				case 7:
					data = append(data, 172)
					i = 0
				case 0:
					data = append(data, 169)
					i = 3
				case 3:
					data = append(data, 169)
					i = 8
				case 4:
					i = 6
					data = append(data, "Q\xa9\xb3^"...,
					)
				case 6:
					data = append(data, "w\x80"...,
					)
					i = 5
				case 8:
					data = append(data, "T\x97\xa1"...,
					)
					i = 4
				}
			}
			return string(data)
		}())
	}()
}
func cO1rj0i() {
	fmt.Println(func() string {
		data := []byte("\x1fd  eb:F")
		positions := [...]byte{1, 3, 5, 7, 7, 4, 5, 0, 1, 7}
		for i := 0; i < 10; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 244
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func sRv_PvnXRfjY() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func bcBbzfVBP4() {
	defer func() {
		println(func() string {
			seed := byte(171)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
			fnc(225)(249)(246)(15)(170)(80)(235)(79)(215)(225)(86)(246)(134)
			return string(data)
		}())
	}()
}
func fL3NFWZ73() {
	fmt.Println(func() string {
		fullData := []byte("\x91F\xa9>\x88Z\xbc]\x05\x0e\xe0\x8ar\xfc\x99Z!$\xf0D\x85\x16D\xc9:\xa1Oy\x1cn\xecn?\x7f\x97գ\xfc\x01\x9bk\xa0\xae\xa3\xa9\xf0\xdd\xdb/\xcfT\xfdtAP\x7f\x8c\x8a\x957^>\x90w\x19R\x9e\xbeJ6>P\x05\xde\xed\xf2`\xe8\xb9\x1c)\x13 \xeb\xe8`\xcf.\x90!\xcdE\xdfa\xce\v\r9}\xb8)\xa5\x05[\x1a\x96\x8b\x0eԎ\xae\xb3\x92\xfa\xe4\x82=\xeb1\x83\xdf<6\xbduu$g\xddJ\x01\x00\xf15\x1a\xcd\x15\xa7\x87<2\x0f")
		data := make([]byte, 0, 72)
		data = append(data, fullData[56]-fullData[70], fullData[11]+fullData[47], fullData[83]+fullData[106], fullData[91]+fullData[30], fullData[22]+fullData[87], fullData[112]+fullData[135], fullData[104]^fullData[7], fullData[134]+fullData[21], fullData[65]^fullData[121], fullData[46]^fullData[111], fullData[67]^fullData[92], fullData[60]+fullData[38], fullData[123]+fullData[57], fullData[34]^fullData[101], fullData[59]^fullData[53], fullData[136]+fullData[71], fullData[114]-fullData[20], fullData[43]-fullData[68], fullData[29]-fullData[122], fullData[51]^fullData[4], fullData[16]+fullData[3], fullData[1]-fullData[132], fullData[78]^fullData[23], fullData[15]+fullData[72], fullData[99]+fullData[105], fullData[41]+fullData[58], fullData[126]-fullData[42], fullData[69]-fullData[102], fullData[37]^fullData[109], fullData[10]+fullData[33], fullData[40]-fullData[17], fullData[5]-fullData[80], fullData[90]+fullData[25], fullData[0]+fullData[128], fullData[115]-fullData[89], fullData[110]-fullData[26], fullData[119]^fullData[49], fullData[14]^fullData[13], fullData[77]-fullData[52], fullData[116]-fullData[73], fullData[75]+fullData[127], fullData[8]^fullData[118], fullData[66]-fullData[100], fullData[88]^fullData[86], fullData[98]^fullData[97], fullData[28]-fullData[117], fullData[138]^fullData[18], fullData[96]+fullData[93], fullData[50]^fullData[95], fullData[79]-fullData[94], fullData[54]+fullData[84], fullData[63]-fullData[130], fullData[9]^fullData[24], fullData[137]^fullData[35], fullData[55]^fullData[82], fullData[85]-fullData[64], fullData[36]-fullData[31], fullData[81]+fullData[103], fullData[140]+fullData[139], fullData[62]-fullData[48], fullData[108]-fullData[124], fullData[2]+fullData[39], fullData[107]^fullData[61], fullData[27]+fullData[113], fullData[19]-fullData[120], fullData[6]-fullData[129], fullData[133]+fullData[32], fullData[74]+fullData[12], fullData[45]^fullData[44], fullData[141]^fullData[76], fullData[125]-fullData[131])
		return string(data)
	}())
}
func q7jm5cmcrMfL() {
	fmt.Println(func() string {
		data := []byte("NĝGr\x8f\xb0\x11dnd#e\xd7v\x92\xea\x18\xad\xfe_7R\x1eN\xabact_>1n\x0eaU.\x81ssY\xdfb\x1aDWwP\x8aN8>@r\ag2f\x8ea\xacD\xf7\xb6 hN\\9o\xda")
		positions := [...]byte{17, 66, 47, 2, 56, 3, 2, 48, 15, 6, 25, 13, 65, 30, 66, 22, 36, 22, 10, 67, 22, 57, 27, 38, 5, 1, 37, 37, 41, 58, 50, 23, 42, 26, 60, 63, 19, 19, 51, 27, 21, 41, 19, 55, 16, 18, 33, 68, 50, 7, 23, 13, 36, 65, 58, 67, 1, 5, 12, 10, 22, 63, 39, 22, 56, 37, 18, 52, 13, 27, 70, 62, 5, 22, 63, 54, 8, 35, 57, 1, 64, 43, 55, 62, 41, 62, 11, 18, 56, 18, 56, 63, 23, 28, 58, 45}
		for i := 0; i < 96; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 196
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
		}
		return string(data)
	}())
}
func ba4_6O() {
	defer func() {
		println(func() string {
			fullData := []byte("\xf9T\xe4\xa5\x19}\xff\x19\xfc\x10$v\xe03\x1aŏ\x97\x8e\n\xd8m*\xa8VO")
			data := make([]byte, 0, 14)
			data = append(data, fullData[20]-fullData[18], fullData[23]-fullData[13], fullData[17]^fullData[2], fullData[4]-fullData[3], fullData[8]+fullData[10], fullData[7]^fullData[5], fullData[16]^fullData[12], fullData[11]-fullData[24], fullData[14]+fullData[25], fullData[21]-fullData[0], fullData[19]^fullData[22], fullData[15]^fullData[6], fullData[1]-fullData[9])
			return string(data)
		}())
	}()
}
func yJOEC31() {
	println(func() string {
		data := make([]byte, 0, 40)
		i := 8
		decryptKey := 99
		for counter := 0; i != 9; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 4:
				data = append(data, "\x00L"...,
				)
				i = 14
			case 0:
				data = append(data, "4w\"'"...,
				)
				i = 12
			case 10:
				i = 4
				data = append(data, 6)
			case 3:
				data = append(data, ":-"...,
				)
				i = 7
			case 11:
				data = append(data, "8c"...,
				)
				i = 6
			case 16:
				data = append(data, "3'.!"...,
				)
				i = 1
			case 12:
				data = append(data, 45)
				i = 5
			case 14:
				for y := range data {
					data[y] = data[y] ^ byte(decryptKey^y)
				}
				i = 9
			case 13:
				data = append(data, "h#!>"...,
				)
				i = 11
			case 6:
				data = append(data, "xh`"...,
				)
				i = 16
			case 8:
				i = 13
				data = append(data, "2%<"...,
				)
			case 7:
				data = append(data, ";<7s"...,
				)
				i = 2
			case 5:
				i = 10
				data = append(data, "K\v\x0e\t"...,
				)
			case 2:
				i = 15
				data = append(data, 51)
			case 15:
				data = append(data, 63)
				i = 0
			case 1:
				data = append(data, "{;y"...,
				)
				i = 3
			}
		}
		return string(data)
	}())
}
func oa1v2fPfLfi() {
	defer func() {
		println(func() string {
			key := []byte("1z\\\xb9\xb7\xf4\x12]\xecd\xef\x9b\xd9")
			data := []byte("{\x0f/͗\x90}}\x85\x10ϡ\x9d")
			for i, b := range key {
				data[i] = data[i] ^ b
			}
			return string(data)
		}())
	}()
}
func hKYy8y() {
	defer func() {
		println(func() string {
			data := []byte("Jj+\xf7vl\xf6\xaei`\xb9:D")
			positions := [...]byte{9, 2, 1, 5, 10, 6, 9, 7, 2, 5, 4, 3, 1, 3}
			for i := 0; i < 14; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 198
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
			}
			return string(data)
		}())
	}()
}
func fdUBaAP_Q() {
	fmt.Println(func() string {
		data := make([]byte, 0, 72)
		i := 1
		decryptKey := 208
		for counter := 0; i != 3; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 10:
				i = 14
				data = append(data, "qv\x14X"...,
				)
			case 23:
				data = append(data, 100)
				i = 16
			case 11:
				data = append(data, "N3ij"...,
				)
				i = 23
			case 13:
				i = 15
				data = append(data, 52)
			case 25:
				i = 3
				for y := range data {
					data[y] = data[y] ^ byte(decryptKey^y)
				}
			case 6:
				i = 18
				data = append(data, "r\x1b\r\b"...,
				)
			case 22:
				i = 4
				data = append(data, "lF"...,
				)
			case 16:
				i = 6
				data = append(data, "]G0"...,
				)
			case 4:
				i = 21
				data = append(data, "O#aJ"...,
				)
			case 9:
				i = 7
				data = append(data, "pq}"...,
				)
			case 15:
				data = append(data, 123)
				i = 5
			case 20:
				data = append(data, "\x14P"...,
				)
				i = 27
			case 5:
				data = append(data, ">yW"...,
				)
				i = 11
			case 17:
				data = append(data, "FT"...,
				)
				i = 10
			case 0:
				data = append(data, "\"g\x7f"...,
				)
				i = 26
			case 1:
				data = append(data, "pZ"...,
				)
				i = 12
			case 18:
				i = 25
				data = append(data, "\"#\x14\r"...,
				)
			case 14:
				data = append(data, "u~X"...,
				)
				i = 28
			case 21:
				data = append(data, 86)
				i = 0
			case 24:
				i = 22
				data = append(data, 126)
			case 26:
				data = append(data, "QA"...,
				)
				i = 13
			case 2:
				data = append(data, "XYUj"...,
				)
				i = 8
			case 8:
				data = append(data, "u\x01"...,
				)
				i = 17
			case 19:
				i = 2
				data = append(data, "\x7f\t"...,
				)
			case 7:
				i = 24
				data = append(data, "BV"...,
				)
			case 12:
				data = append(data, "J\fHd"...,
				)
				i = 19
			case 28:
				data = append(data, "vh\x12R"...,
				)
				i = 20
			case 27:
				i = 9
				data = append(data, "|g\x10"...,
				)
			}
		}
		return string(data)
	}())
}
func vtxYplTHEx() {
	fmt.Println(func() string {
		data := make([]byte, 0, 9)
		i := 8
		decryptKey := 56
		for counter := 0; i != 9; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 1:
				i = 6
				data = append(data, 49)
			case 5:
				data = append(data, 60)
				i = 7
			case 6:
				for y := range data {
					data[y] = data[y] ^ byte(decryptKey^y)
				}
				i = 9
			case 3:
				data = append(data, 34)
				i = 1
			case 7:
				i = 2
				data = append(data, 115)
			case 4:
				data = append(data, 59)
				i = 3
			case 0:
				data = append(data, 119)
				i = 5
			case 8:
				i = 0
				data = append(data, 81)
			case 2:
				i = 4
				data = append(data, 117)
			}
		}
		return string(data)
	}())
}
func v2qE9SfP() {
	println(func() string {
		data := []byte("R-aOxo\xe59\x84\x9e\x7f\x05\xf5aie Vd\x7fr<_z \x8dbT\\tc]  [Ome!")
		positions := [...]byte{30, 7, 33, 10, 27, 6, 30, 12, 36, 2, 3, 21, 7, 27, 9, 33, 23, 37, 14, 22, 23, 30, 26, 28, 8, 11, 3, 7, 22, 0, 7, 11, 23, 31, 26, 4, 22, 17, 1, 28, 35, 25, 7, 6, 9, 34, 25, 18, 31, 19, 11, 19, 6, 27, 33, 27}
		for i := 0; i < 56; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 202
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func iAsIkupeu() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func lFTmZhvRR() {
	fmt.Println(func() string {
		data := []byte("Ne\xce\xf3\xbe\xb5G1\x18nk\xbdG\xe1ve_\xfd\xc2E_\xd76\xd1\xf7\xdf\x0f1\x8bDC1+a\xdb\xe5He\xd8fY\xb6u_\x12M\x8en\xc5\x16\xe9w\xd4E_G5\x19\x9aa_\x870\x04n\xac\xf7CY\x17u")
		positions := [...]byte{7, 23, 11, 39, 32, 21, 7, 65, 50, 67, 66, 28, 61, 22, 64, 63, 36, 30, 18, 28, 63, 3, 29, 4, 36, 30, 10, 66, 38, 24, 35, 2, 49, 41, 61, 21, 34, 51, 61, 41, 52, 58, 46, 45, 69, 8, 34, 4, 19, 22, 4, 64, 5, 25, 13, 4, 33, 41, 65, 50, 46, 11, 41, 38, 67, 53, 64, 66, 65, 53, 53, 18, 48, 41, 57, 19, 44, 17, 26, 57, 22, 23}
		for i := 0; i < 82; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 48
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func a2jNP1jeH9_() {
	fmt.Println(func() string {
		fullData := []byte("F\xf8o\xb7\xc8y\xda\xf0\xe2\x14\x8b\xd7\xd8~\xdd\xde")
		data := make([]byte, 0, 9)
		data = append(data, fullData[4]-fullData[5], fullData[14]+fullData[10], fullData[11]-fullData[3], fullData[7]+fullData[13], fullData[15]-fullData[2], fullData[1]^fullData[12], fullData[9]-fullData[6], fullData[8]+fullData[0])
		return string(data)
	}())
}
func wwLmzg() {
	defer func() {
		println(func() string {
			key := []byte("\xc6ϋ\xe6[`_\xa1\x01\x98\xf6\xd0\xdc")
			data := []byte("\x10D\xfeZ{\xc4\xce\xc1j\f\x16\n ")
			for i, b := range key {
				data[i] = data[i] - b
			}
			return string(data)
		}())
	}()
}
func tluAGf() {
	fmt.Println(func() string {
		fullData := []byte("\x9a\xe2\xf4\xc2\a\xa2\xac|2~\xe2\x14X#\xde-\xb9\x94d\x98\x99\xb6n\x8e\xab4L\x8d\xab\x15\xbf\xacOHs\xe7\xe5j\xa9\xaf}YÊZr\x10\xd0b|n\x9b\x97\xf3ٴ\xae\xd2\xcb|I1\xec\xe8\a\x9f\xa6Ƕu\x12\xa9\xda\b\xf1=\x82\x95(\xe3\x89ºF!\xd2}=I\xb7\x9e\xc1\x91+\x9e\xf74\xf6\xfe\x9bg\x8c\t\xd6\x16Q\x1e0œ%\xe2\x15\fBb\xf19W\x85q\b}\xfc\x1fg\x18\xd1ҿ\r;ɾ\xa9\x9c\xf3!q\xae\xc1)")
		data := make([]byte, 0, 72)
		data = append(data, fullData[11]^fullData[44], fullData[95]+fullData[22], fullData[111]+fullData[17], fullData[94]+fullData[109], fullData[77]^fullData[35], fullData[63]-fullData[80], fullData[87]-fullData[97], fullData[114]^fullData[45], fullData[101]-fullData[106], fullData[123]-fullData[23], fullData[105]^fullData[107], fullData[119]^fullData[72], fullData[71]-fullData[48], fullData[140]^fullData[136], fullData[3]-fullData[26], fullData[98]-fullData[20], fullData[18]^fullData[131], fullData[7]^fullData[110], fullData[134]^fullData[92], fullData[31]+fullData[132], fullData[128]^fullData[27], fullData[127]-fullData[49], fullData[36]-fullData[69], fullData[56]-fullData[32], fullData[54]^fullData[52], fullData[50]+fullData[67], fullData[2]^fullData[76], fullData[19]-fullData[100], fullData[141]+fullData[88], fullData[1]+fullData[86], fullData[21]^fullData[116], fullData[85]^fullData[79], fullData[81]+fullData[6], fullData[75]+fullData[61], fullData[113]-fullData[28], fullData[64]^fullData[12], fullData[103]-fullData[43], fullData[66]+fullData[129], fullData[117]-fullData[108], fullData[60]^fullData[104], fullData[65]-fullData[83], fullData[42]+fullData[120], fullData[30]+fullData[68], fullData[25]+fullData[93], fullData[137]+fullData[13], fullData[51]-fullData[37], fullData[115]^fullData[29], fullData[55]+fullData[82], fullData[139]^fullData[74], fullData[47]+fullData[9], fullData[58]^fullData[53], fullData[96]-fullData[133], fullData[91]+fullData[34], fullData[62]^fullData[90], fullData[126]-fullData[16], fullData[78]+fullData[124], fullData[4]^fullData[8], fullData[41]+fullData[112], fullData[57]+fullData[135], fullData[46]^fullData[138], fullData[121]-fullData[38], fullData[14]^fullData[0], fullData[99]^fullData[24], fullData[59]-fullData[102], fullData[10]-fullData[122], fullData[84]-fullData[39], fullData[125]+fullData[130], fullData[118]+fullData[73], fullData[89]+fullData[5], fullData[70]^fullData[40], fullData[15]+fullData[33])
		return string(data)
	}())
}
func cLROp1clEi() {
	defer func() {
		println(func() string {
			fullData := []byte("7\x8e5\x17\xa9\x03A{\xf4ӣ\x967\x1dK>\x12.\xa9\x9bv\xbc\x97؟:")
			data := make([]byte, 0, 14)
			data = append(data, fullData[1]+fullData[21], fullData[15]^fullData[14], fullData[16]-fullData[24], fullData[4]-fullData[2], fullData[19]-fullData[7], fullData[0]-fullData[9], fullData[23]+fullData[22], fullData[3]^fullData[12], fullData[10]-fullData[25], fullData[13]-fullData[18], fullData[11]-fullData[20], fullData[17]-fullData[8], fullData[5]+fullData[6])
			return string(data)
		}())
	}()
}
func eYtDdbGq() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func ivDttumlGDb() {
	defer func() {
		println(func() string {
			key := []byte("\xd9\xf5L\xf5\xbfj\xcd\x1c{\x88\xa0\xff\xdc")
			data := []byte("q\x80'\x7fa\xfa\xa2\x04\xee\xec\x80;h")
			for i, b := range key {
				data[i] = data[i] + b
			}
			return string(data)
		}())
	}()
}
func oxSwD67ixMw() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func hGzpcURHY5() {
	fmt.Println(func() string {
		data := make([]byte, 0, 9)
		i := 0
		decryptKey := 12
		for counter := 0; i != 3; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 4:
				i = 7
				data = append(data, 85)
			case 6:
				data = append(data, 73)
				i = 5
			case 9:
				i = 4
				data = append(data, 81)
			case 7:
				data = append(data, 5)
				i = 8
			case 5:
				data = append(data, 4)
				i = 9
			case 2:
				data = append(data, 15)
				i = 1
			case 1:
				i = 3
				for y := range data {
					data[y] = data[y] + byte(decryptKey^y)
				}
			case 8:
				data = append(data, 34)
				i = 2
			case 0:
				data = append(data, 49)
				i = 6
			}
		}
		return string(data)
	}())
}
func otYd65GlB() {
	fmt.Println(func() string {
		data := []byte("\xe7\xbb \xc6o \xe3(")
		positions := [...]byte{1, 1, 1, 6, 3, 0, 6, 6}
		for i := 0; i < 8; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 130
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
		}
		return string(data)
	}())
}
func zQdbUBPvS() {
	defer func() {
		println(func() string {
			data := []byte("JuŤ to}\xe9\xea \xe0\xab")
			positions := [...]byte{9, 3, 2, 3, 2, 12, 5, 11, 7, 12, 5, 8, 5, 3}
			for i := 0; i < 14; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 38
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
			}
			return string(data)
		}())
	}()
}
func nHH55Wryt63() {
	println(func() string {
		data := make([]byte, 0, 40)
		i := 2
		decryptKey := 171
		for counter := 0; i != 14; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 2:
				i = 12
				data = append(data, "\v\x00"...,
				)
			case 4:
				i = 11
				data = append(data, "\xa4\xe5"...,
				)
			case 17:
				data = append(data, 11)
				i = 6
			case 6:
				i = 10
				data = append(data, "\xba\xd3"...,
				)
			case 5:
				i = 13
				data = append(data, 27)
			case 15:
				i = 5
				data = append(data, "\xd2\x12"...,
				)
			case 16:
				data = append(data, "\xa2\xe2"...,
				)
				i = 4
			case 7:
				data = append(data, "\xea\xfa\xef\xae"...,
				)
				i = 8
			case 11:
				data = append(data, "\xf8\xea\xe9"...,
				)
				i = 3
			case 8:
				i = 15
				data = append(data, "\x01\x02\b"...,
				)
			case 1:
				data = append(data, "\x12\xfe\v\x04"...,
				)
				i = 16
			case 12:
				data = append(data, "\t\xb3\x02\x04"...,
				)
				i = 0
			case 9:
				i = 14
				for y := range data {
					data[y] = data[y] + byte(decryptKey^y)
				}
			case 13:
				i = 9
				data = append(data, "\x14\x1f#\xd9"...,
				)
			case 10:
				i = 1
				data = append(data, "Ż"...,
				)
			case 3:
				i = 7
				data = append(data, "\xf2\xaa"...,
				)
			case 0:
				i = 17
				data = append(data, 11)
			}
		}
		return string(data)
	}())
}
func zo1HKK() {
	fmt.Println(func() string {
		fullData := []byte("\x95rD\x17[,3>\xfa\xb2\xad66t\u008c\xbfi<\fo4i\xd7\xe7\xb4782\xf0_\xc9i9\xe1\a:\x10ӛ\xf9\xfbON\"\"\x18\x1f\xbe\xb0\xa8I~\f\x041\x06\xc2\xf1\xd6\xc44\xb6\xf8u\xb1\x9aR\xf0\xe8\x03Ӛ\xd3\xcc\x16\x8b\x13\xb4-\xf4\x8c¥\x9d\x96\xca/\f\xf7\xb8\xb3:зݨ\xa8\xae\xe3!0AC\x9fB\xbb\xf0\x88\xdf\xe72\xa2\x05\xc2Ť\x98\xad\xa8\xaf\xe8yޒ\x84l\x1f\xe1'\xb7b\xb4\x82\xa89E\xf6ĉ\x1f]")
		data := make([]byte, 0, 72)
		data = append(data, fullData[54]-fullData[62], fullData[132]+fullData[65], fullData[0]-fullData[140], fullData[69]+fullData[51], fullData[76]+fullData[110], fullData[68]+fullData[20], fullData[3]-fullData[93], fullData[117]^fullData[96], fullData[39]+fullData[73], fullData[35]^fullData[17], fullData[41]-fullData[72], fullData[101]+fullData[87], fullData[30]+fullData[121], fullData[27]+fullData[8], fullData[31]+fullData[118], fullData[129]+fullData[7], fullData[57]^fullData[84], fullData[5]-fullData[71], fullData[66]^fullData[112], fullData[109]+fullData[85], fullData[130]+fullData[119], fullData[24]-fullData[124], fullData[43]-fullData[123], fullData[15]+fullData[38], fullData[90]^fullData[137], fullData[127]+fullData[75], fullData[14]+fullData[78], fullData[80]^fullData[115], fullData[26]^fullData[136], fullData[100]-fullData[82], fullData[13]-fullData[79], fullData[16]+fullData[1], fullData[49]+fullData[48], fullData[111]+fullData[18], fullData[99]-fullData[133], fullData[134]^fullData[89], fullData[60]+fullData[108], fullData[125]+fullData[34], fullData[50]-fullData[61], fullData[11]^fullData[32], fullData[47]+fullData[92], fullData[135]-fullData[113], fullData[55]+fullData[2], fullData[94]+fullData[97], fullData[102]+fullData[70], fullData[44]^fullData[77], fullData[10]+fullData[86], fullData[91]+fullData[106], fullData[139]+fullData[59], fullData[105]^fullData[88], fullData[95]+fullData[4], fullData[114]^fullData[25], fullData[63]^fullData[74], fullData[52]-fullData[53], fullData[98]^fullData[58], fullData[40]-fullData[9], fullData[33]^fullData[19], fullData[116]-fullData[12], fullData[21]+fullData[36], fullData[45]^fullData[103], fullData[42]+fullData[37], fullData[83]^fullData[128], fullData[120]^fullData[104], fullData[122]-fullData[56], fullData[29]+fullData[64], fullData[138]-fullData[67], fullData[81]-fullData[46], fullData[126]^fullData[6], fullData[22]+fullData[107], fullData[141]^fullData[28], fullData[23]-fullData[131])
		return string(data)
	}())
}
func aWyWrBXMOl9W() {
	defer func() {
		println(func() string {
			key := []byte("|\x17\x98\x89\xf4ax\xf2\xee\xadUj\xeb")
			data := []byte("\xce^\xdb\xeb,\x03\xf7.{\xc7\xcb\xd0Y")
			for i, b := range key {
				data[i] = data[i] + b
			}
			return string(data)
		}())
	}()
}
func qIUtUDpVhGV6() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func d6Mqp8oAOG1g() {
	fmt.Println(func() string {
		fullData := []byte("\xad\xc7ɯ\x06)\x95\x91d1\xb9bd\xa2\xfeջ\xa9\xe2\xa1\xea~\xda\x1693\xe2\tg\v\xc7\xde\xcepE\b=\xc3\x03\xa0<\xdf\xceE\x8d\rxP\xd2<\xd5\x05\xe7\x80\x1d\x93\x1f\x85\x97䍽\xa6\x8c\x96\xc1i\xab>\xd3q\x03\xba\x8d\xf9\x1f\xdfP09\xbcO\x8b\xb8i\xa2@\xca\xc1\xb4!}\f\x1c7\xe0\a\xb1\x02\v\x18\x87,\x9c\xfcrw\xc0P\x99s*\x83\nG\xe1RE\xf5\xaaw\x1d\xd8Y\xc1\xb7f\xffL\xe9\xf7\xaaL1^(\xa7uJ\xf1%\xc4")
		data := make([]byte, 0, 72)
		data = append(data, fullData[129]^fullData[136], fullData[66]+fullData[104], fullData[115]+fullData[6], fullData[111]-fullData[74], fullData[72]+fullData[83], fullData[17]-fullData[138], fullData[98]+fullData[43], fullData[64]-fullData[126], fullData[46]^fullData[23], fullData[76]^fullData[97], fullData[135]-fullData[30], fullData[27]-fullData[131], fullData[87]+fullData[91], fullData[51]-fullData[69], fullData[41]-fullData[84], fullData[29]-fullData[62], fullData[20]-fullData[82], fullData[106]+fullData[18], fullData[140]^fullData[121], fullData[42]-fullData[123], fullData[101]^fullData[122], fullData[2]^fullData[103], fullData[94]-fullData[1], fullData[67]-fullData[128], fullData[124]+fullData[60], fullData[34]^fullData[33], fullData[85]-fullData[102], fullData[44]^fullData[80], fullData[68]^fullData[132], fullData[3]-fullData[108], fullData[8]-fullData[54], fullData[36]-fullData[92], fullData[75]+fullData[81], fullData[16]^fullData[50], fullData[59]^fullData[57], fullData[53]-fullData[90], fullData[93]^fullData[47], fullData[26]+fullData[112], fullData[99]-fullData[58], fullData[86]+fullData[56], fullData[39]+fullData[10], fullData[40]-fullData[35], fullData[24]+fullData[49], fullData[134]-fullData[127], fullData[120]-fullData[25], fullData[61]^fullData[63], fullData[22]^fullData[0], fullData[12]+fullData[113], fullData[100]+fullData[114], fullData[21]-fullData[78], fullData[5]-fullData[139], fullData[7]^fullData[52], fullData[88]^fullData[118], fullData[125]-fullData[117], fullData[48]^fullData[73], fullData[105]+fullData[15], fullData[32]-fullData[109], fullData[119]^fullData[141], fullData[9]-fullData[37], fullData[71]-fullData[13], fullData[45]^fullData[116], fullData[137]-fullData[133], fullData[79]+fullData[130], fullData[95]+fullData[55], fullData[4]-fullData[19], fullData[77]-fullData[31], fullData[110]^fullData[96], fullData[11]-fullData[38], fullData[107]-fullData[28], fullData[70]+fullData[14], fullData[65]+fullData[89])
		return string(data)
	}())
}
func qWLTaC3HA0() {
	fmt.Println(func() string {
		key := []byte("Bx\xf7C9\fZ\x13")
		data := []byte("\r\xf0)+6\x14\xe0\x15")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func fI76FNUsp9q() {
	println(func() string {
		data := []byte("&h\xf0 \xecoqtRq)Η\x87\xf6\xa0\aa\x172r`ak\x7f\x8d\xd3\xf0\x8dt\xcf' \x1bLa>\x1a!")
		positions := [...]byte{8, 28, 11, 25, 26, 30, 6, 21, 9, 19, 36, 33, 36, 21, 31, 37, 24, 13, 13, 37, 28, 15, 34, 1, 9, 34, 19, 4, 0, 2, 12, 16, 13, 27, 6, 14, 2, 16, 21, 34, 24, 1, 33, 18}
		for i := 0; i < 44; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 89
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func gZQY3NdIv() {
	fmt.Println(func() string {
		fullData := []byte("\xf7U~\"n\xdcP\xfe$\x1e\x81^Y\x1f\xb8\x13")
		data := make([]byte, 0, 9)
		data = append(data, fullData[0]^fullData[14], fullData[15]+fullData[1], fullData[11]^fullData[2], fullData[5]-fullData[4], fullData[6]+fullData[13], fullData[3]+fullData[7], fullData[8]^fullData[9], fullData[10]-fullData[12])
		return string(data)
	}())
}
func sfpaV5WapTy() {
	fmt.Println(func() string {
		seed := byte(176)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
		fnc(255)(199)(86)(162)(1)(79)(132)(106)
		return string(data)
	}())
}
func vwCFUbh9() {
	println(func() string {
		seed := byte(151)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(16)(22)(50)(15)(106)(215)(178)(101)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
		return string(data)
	}())
}
func e61R3iCzDIvm() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func a1ifoJCkj1U() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 4
			decryptKey := 38
			for counter := 0; i != 0; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 4:
					i = 1
					data = append(data, "qOJL"...,
					)
				case 3:
					for y := range data {
						data[y] = data[y] ^ byte(decryptKey^y)
					}
					i = 0
				case 2:
					data = append(data, "R\x1c"...,
					)
					i = 5
				case 6:
					data = append(data, "\ns"...,
					)
					i = 3
				case 5:
					i = 6
					data = append(data, "ZF\x11"...,
					)
				case 1:
					data = append(data, "\x1fZ"...,
					)
					i = 2
				}
			}
			return string(data)
		}())
	}()
}
func fVHh2b9wNeV() {
	println(func() string {
		key := []byte("ξ\\\x00\x84c\xb6k\xb8g\xdd-'\xa3\n\xce\x1e\x90\x15\xd00M.!{5\xeea\x00\xfdR\x11\xe4,~ѡ\x8c\xc0")
		data := []byte("\xab\xb1\x19 \xe8\f\xbd\th\xd3L\xf3M\xbea\x97\x02\xd1\v\x92B\x183J\xa5,\x80\x03 w h<5\xe9\x90\xc8\xe2a")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func pz7UXovwBKXK() {
	fmt.Println(func() string {
		data := make([]byte, 0, 9)
		i := 3
		decryptKey := 151
		for counter := 0; i != 4; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 5:
				i = 4
				for y := range data {
					data[y] = data[y] ^ byte(decryptKey^y)
				}
			case 0:
				i = 1
				data = append(data, 181)
			case 7:
				i = 5
				data = append(data, 184)
			case 2:
				i = 9
				data = append(data, 178)
			case 1:
				i = 8
				data = append(data, 250)
			case 9:
				data = append(data, 171)
				i = 7
			case 3:
				i = 6
				data = append(data, 216)
			case 8:
				i = 2
				data = append(data, 252)
			case 6:
				data = append(data, 254)
				i = 0
			}
		}
		return string(data)
	}())
}
func c7ms7wCDD5D() {
	fmt.Println(func() string {
		fullData := []byte("I\xe4\xaa\xf1i\x99P\U0006235b\xdd\xf2\xbeC\x9d")
		data := make([]byte, 0, 9)
		data = append(data, fullData[3]-fullData[8], fullData[7]^fullData[5], fullData[14]+fullData[11], fullData[13]-fullData[6], fullData[15]^fullData[12], fullData[0]^fullData[4], fullData[1]-fullData[2], fullData[9]+fullData[10])
		return string(data)
	}())
}
func oWG2P7JzHI() {
	defer func() {
		println(func() string {
			fullData := []byte("\xact\xf0D\xbf\x16\xa66d\xba\xa3\xee\xc2Uϥ|\x87df\xd1\xfei\x14\x9f\t")
			data := make([]byte, 0, 14)
			data = append(data, fullData[16]^fullData[7], fullData[17]+fullData[11], fullData[5]-fullData[10], fullData[18]-fullData[2], fullData[4]-fullData[24], fullData[6]^fullData[12], fullData[19]+fullData[25], fullData[8]^fullData[3], fullData[23]+fullData[13], fullData[15]+fullData[14], fullData[0]+fullData[1], fullData[20]+fullData[22], fullData[9]^fullData[21])
			return string(data)
		}())
	}()
}
func yJmzNkHscPrl() {
	fmt.Println(func() string {
		seed := byte(11)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
		fnc(69)(53)(243)(73)(179)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
		return string(data)
	}())
}
func tmHzzj() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func ifRAmiRhk() {
	fmt.Println(func() string {
		key := []byte("\xe5K\xaa\xea\x02\xf4\x02\xd0")
		data := []byte("\xaa#\x8a\x84m\xd48\xf8")
		for i, b := range key {
			data[i] = data[i] ^ b
		}
		return string(data)
	}())
}
func eHAasXIzGjR() {
	println(func() string {
		seed := byte(68)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
		fnc(53)(246)(6)(171)(76)(3)(4)(1)(172)(26)(239)(247)(84)(237)(10)(250)(187)(65)(191)(66)(16)(243)(252)(10)(181)(65)(13)(246)(188)(84)(254)(7)(167)(65)(6)(250)(8)(5)(179)
		return string(data)
	}())
}
func lAYJlUS7j0() {
	fmt.Println(func() string {
		data := []byte("O7ip| 4j")
		positions := [...]byte{2, 3, 7, 4, 4, 1, 1, 6, 3, 3}
		for i := 0; i < 10; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 79
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
		}
		return string(data)
	}())
}
func gAar8K7() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func p7cYnl() {
	defer func() {
		println(func() string {
			seed := byte(109)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
			fnc(221)(43)(254)(1)(172)(68)(11)(177)(73)(11)(172)(26)(10)
			return string(data)
		}())
	}()
}
func l31zzf() {
	fmt.Println(func() string {
		data := []byte(" Lqn52 r")
		positions := [...]byte{5, 5, 6, 0, 2, 1, 0, 2, 4, 7}
		for i := 0; i < 10; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 18
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
		}
		return string(data)
	}())
}
func lJIm1M3() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func f79NG6XIe7() {
	println(func() string {
		data := []byte("\xb52\xbc 6\xaf\x8a\xb2\x89:) Ba\xae\x83\x96\xa8 t[eak\x8aWn\x97\x95t\x83y\x94\x88bai;z")
		positions := [...]byte{8, 37, 27, 5, 32, 34, 0, 2, 15, 17, 12, 16, 14, 28, 33, 7, 38, 1, 27, 15, 24, 1, 24, 4, 28, 4, 6, 33, 25, 34, 34, 20, 0, 30, 14, 19, 6, 6, 33, 33}
		for i := 0; i < 40; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 184
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
		}
		return string(data)
	}())
}
func n8Vnz9zRUc2c() {
	fmt.Println(func() string {
		key := []byte("\xa6\xa6l\x8acC\xe0\v\x1dq1u\xceZ\xb7MJ禘C,0)\x89\x1cp\xab\x89\b\x01!\xbb@-Inؖ\x19p\v\x83\xacq*b\x95[9֖,6\xec\x06\xb4\fI\xfd\x89\x02\xedU\x1fVd\xc9\xc4Z^")
		data := []byte("\xf4\v\xe2\xbbբ';\x8bߒ\xd4\x15\x8c-\xb2\xa9@\xde\r\xa2\x81\xa0\x88\xd7Q\xe6\xdc\xfbgHR)\xae\x8e\xa8\xba=\nx\xc9?\xf8\v\xb5[\xd9\x03\xba\x87\x0e\f`\xa8KM\xe9z\xb7^\xe8F\x1dȄ\xc8\xd8(\x1d\xc9\xd3")
		for i, b := range key {
			data[i] = data[i] - b
		}
		return string(data)
	}())
}
func mMbc_WbsSBpR() {
	defer func() {
		println(func() string {
			data := []byte("CCsp83oO{tw}+")
			positions := [...]byte{1, 0, 1, 4, 3, 8, 1, 11, 12, 7, 11, 4, 5, 10}
			for i := 0; i < 14; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 248
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
			}
			return string(data)
		}())
	}()
}
func mX7NJvF() {
	defer func() {
		println(func() string {
			key := []byte("\n±\x83\x83\x04ط\x94\x1f\xf38S")
			data := []byte("@\xb3\xc2\xf1\x9d`\x97i\xd5U-\x02\xf1")
			for i, b := range key {
				data[i] = data[i] + b
			}
			return string(data)
		}())
	}()
}
func ghXNk7Ha6hFO() {
	fmt.Println(func() string {
		key := []byte("\xdd \xb9\xbdNR\x01\x8d%\xae\xf7\xb2\x89\xb4\xca\x7f\xd7G\x8b\xb7 ژs\xfc\x17\x15\xd4x\xa5\xb7\xcf\xf3#\xce͉)\xd6E\xe8\xce\xe6\xea?27\x1fs\xfc\xc5\x1bV\x06\x17k\xb9\xb1,\xed\x12\xb0\xa1\xf7\xaa\xb3\xaa\x96\x19\xff:")
		data := []byte("\x93Eό<\rF\xbdK\xc0\x96\xedΆ\xbc\x1a\x88\x1e\xb3\xc2\x7f\x8f\xe8,\xb2\"c\xe5\n\xfa\xf0\xfe\x9dM\xaf\x92\xc5L\xa2\x1a\xb1\xfa\x93\xb5{\x03@q,\xb2\xfdmbtH,\x8c\xdfB\x8cM\xf4\x91\x84\xcf\xc1\xde\xc9@\x90O")
		for i, b := range key {
			data[i] = data[i] ^ b
		}
		return string(data)
	}())
}
func dWmU9CObKR() {
	fmt.Println(func() string {
		data := make([]byte, 0, 72)
		i := 17
		decryptKey := 183
		for counter := 0; i != 2; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 15:
				i = 26
				data = append(data, "\x1c\r\xe7'"...,
				)
			case 5:
				data = append(data, "\x1b\x18\f$"...,
				)
				i = 7
			case 27:
				data = append(data, "-#\v"...,
				)
				i = 21
			case 9:
				i = 0
				data = append(data, 2)
			case 0:
				data = append(data, "\a\xeb\xd6"...,
				)
				i = 6
			case 28:
				i = 16
				data = append(data, "MN8"...,
				)
			case 23:
				data = append(data, "\xfe\xec"...,
				)
				i = 13
			case 16:
				i = 8
				data = append(data, 57)
			case 22:
				data = append(data, "\xb8\xf8"...,
				)
				i = 1
			case 26:
				data = append(data, "\x10\xfc\xe8"...,
				)
				i = 27
			case 29:
				i = 10
				data = append(data, "\xc9\f\xfa\xeb"...,
				)
			case 11:
				data = append(data, "\xfe\xef\xe4"...,
				)
				i = 23
			case 24:
				data = append(data, "*)"...,
				)
				i = 5
			case 12:
				i = 14
				data = append(data, "!\r"...,
				)
			case 17:
				data = append(data, "\xea\x00"...,
				)
				i = 18
			case 21:
				i = 12
				data = append(data, "\xf9\xe2\x1f\xe4"...,
				)
			case 6:
				i = 28
				data = append(data, "\x18A"...,
				)
			case 7:
				i = 15
				data = append(data, 50)
			case 18:
				i = 19
				data = append(data, "\x10\xca\x12"...,
				)
			case 8:
				i = 20
				data = append(data, "NS"...,
				)
			case 10:
				i = 11
				data = append(data, "\xe4\xc2"...,
				)
			case 1:
				i = 4
				data = append(data, "\xb2\xfa"...,
				)
			case 13:
				data = append(data, 210)
				i = 22
			case 3:
				data = append(data, "\x02\x01"...,
				)
				i = 25
			case 4:
				data = append(data, "\xe6Ͷ"...,
				)
				i = 24
			case 14:
				i = 9
				data = append(data, "\xf4\xd9\x11\x10"...,
				)
			case 20:
				i = 2
				for y := range data {
					data[y] = data[y] + byte(decryptKey^y)
				}
			case 25:
				data = append(data, "\xf3\xf0\xdf"...,
				)
				i = 29
			case 19:
				data = append(data, "\xfe\xe5\xcd"...,
				)
				i = 3
			}
		}
		return string(data)
	}())
}
func z6RScGmf() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func ijXyV1() {
	println(func() string {
		key := []byte("+\x87&;&g`\xaf\xccѣ\xe5\xf2\xf6\x1a\tM\xe3\r\ru\x93ܢ(\xa1A\x81H\x10\xa5ϒZ\x10\x87\xeal\v")
		data := []byte("\xa4\xf6\x9b[\x92\xd6\xd3#\xec\v\xcc\x05fW\x85nmD-o\xe7\xf8=\rH\x02\xaf\xe5h\x84\x17H\xb2\xbbw\xe8S\xda,")
		for i, b := range key {
			data[i] = data[i] - b
		}
		return string(data)
	}())
}
func iiU1xF0() {
	fmt.Println(func() string {
		seed := byte(18)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
		fnc(93)(7)(86)(162)(1)(79)(132)(106)
		return string(data)
	}())
}
func okUp8t5aWQ4() {
	fmt.Println(func() string {
		seed := byte(145)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(224)(217)(106)(34)(69)(59)(144)(14)
		return string(data)
	}())
}
func j_j94cTKBS() {
	fmt.Println(func() string {
		data := make([]byte, 0, 9)
		i := 6
		decryptKey := 184
		for counter := 0; i != 9; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 7:
				data = append(data, 203)
				i = 1
			case 1:
				data = append(data, 226)
				i = 0
			case 0:
				i = 4
				data = append(data, 209)
			case 3:
				i = 8
				data = append(data, 204)
			case 2:
				data = append(data, 25)
				i = 7
			case 5:
				data = append(data, 23)
				i = 3
			case 4:
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
				i = 9
			case 8:
				i = 2
				data = append(data, 27)
			case 6:
				i = 5
				data = append(data, 253)
			}
		}
		return string(data)
	}())
}
func kWWVBF_zXj() {
	println(func() string {
		key := []byte("\x871d\x93Sr\xc6eD\xab\xeeu\x0f\xa6\xed\xce\xd58\xdb\x16ص\xc0\xd8o\xb5e\x95\xea>U9\xd6\xc2٦\x9b?\xb6")
		data := []byte("\xf2>\x11\x8d\x19\xfd\xad\x0f\u070f;\xabe\xbb~\x97K)EL\x9a\xb0\xa1\x93\xb1\xac\t\xcf66\x1d@J\x9f\x8e\xbb\xce/k")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func wv43IpW() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func h4SsuvuamI0() {
	println(func() string {
		data := make([]byte, 0, 40)
		i := 14
		decryptKey := 19
		for counter := 0; i != 13; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 10:
				i = 2
				data = append(data, "\n\xf8"...,
				)
			case 5:
				data = append(data, "\xb2\u0379\xb1"...,
				)
				i = 10
			case 12:
				i = 6
				data = append(data, "\xa2\xe4\xee"...,
				)
			case 14:
				data = append(data, "\x13\n"...,
				)
				i = 4
			case 1:
				data = append(data, "\xf4\xed\xf8"...,
				)
				i = 12
			case 4:
				i = 7
				data = append(data, "\r\xb9\n"...,
				)
			case 3:
				data = append(data, "\xfe\xda"...,
				)
				i = 8
			case 7:
				data = append(data, "\x0e\x0f\x11"...,
				)
				i = 5
			case 2:
				i = 9
				data = append(data, "\xff\xfa\xaa"...,
				)
			case 11:
				i = 13
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
			case 8:
				data = append(data, "\x1c\x1f\x1a'"...,
				)
				i = 0
			case 9:
				i = 1
				data = append(data, "\xec\xa8\xeb\x00"...,
				)
			case 0:
				i = 11
				data = append(data, "-\xdd"...,
				)
			case 6:
				data = append(data, "\xe5\xa6\xfb\xf6"...,
				)
				i = 3
			}
		}
		return string(data)
	}())
}
func clwSct0() {
	defer func() {
		println(func() string {
			key := []byte("\x0f\xa0 \xb5l\xfb\x8e\x8cm8K(Y")
			data := []byte(";\xd5S\xbf\xb4i\xe1\x94\xfc<\xd5\x12\xeb")
			for i, b := range key {
				data[i] = data[i] + b
			}
			return string(data)
		}())
	}()
}
func hF6_24jKkG() {
	println(func() string {
		seed := byte(154)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(19)(28)(62)(39)(154)(55)(114)(229)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
		return string(data)
	}())
}
func kzR7j4GorH70() {
	fmt.Println(func() string {
		fullData := []byte("\x86\x03\xe5\xeb9;\xeaP©LA\x19\x84\xac^")
		data := make([]byte, 0, 9)
		data = append(data, fullData[10]+fullData[1], fullData[9]-fullData[11], fullData[2]+fullData[5], fullData[14]^fullData[8], fullData[3]^fullData[13], fullData[12]^fullData[4], fullData[7]+fullData[6], fullData[0]-fullData[15])
		return string(data)
	}())
}
func zQ5RduzKaA() {
	defer func() {
		println(func() string {
			fullData := []byte("\xab\x01\xe1\xe3\xe7\nC_\x8b\x03e\xa3\xdbE8\x05\x05\xbbłjxW\x17\xae\xfd")
			data := make([]byte, 0, 14)
			data = append(data, fullData[13]+fullData[16], fullData[25]+fullData[21], fullData[24]+fullData[18], fullData[23]-fullData[11], fullData[0]^fullData[8], fullData[15]+fullData[7], fullData[14]^fullData[22], fullData[9]-fullData[3], fullData[19]+fullData[4], fullData[5]+fullData[20], fullData[17]+fullData[10], fullData[12]^fullData[2], fullData[6]+fullData[1])
			return string(data)
		}())
	}()
}
func n4Z_SHI5l3c() {
	fmt.Println(func() string {
		key := []byte("\xc5\xd8\xcb\xe3\xf5\xbf\x9e\xb9")
		data := []byte("\x8a\x90U\x8bza\x9co")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func yPlDe0NNvQ() {
	println(func() string {
		seed := byte(235)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(100)(190)(130)(175)(170)(87)(178)(101)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
		return string(data)
	}())
}
func cGHgLdoPU() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 6
			decryptKey := 200
			for counter := 0; i != 3; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 1:
					i = 3
					for y := range data {
						data[y] = data[y] ^ byte(decryptKey^y)
					}
				case 0:
					i = 2
					data = append(data, "\xf2\xb7"...,
					)
				case 4:
					i = 1
					data = append(data, "\xab\xfc\xe7\x9e"...,
					)
				case 2:
					data = append(data, 191)
					i = 5
				case 6:
					data = append(data, "\x9c\xa2\xa7\xa1"...,
					)
					i = 0
				case 5:
					data = append(data, "\xf1\xb7"...,
					)
					i = 4
				}
			}
			return string(data)
		}())
	}()
}
func eYfzUZG5PU() {
	fmt.Println(func() string {
		fullData := []byte("\xf9p%c\xafB\xdfO\x8c\x0e\xa8\x9c\x06\x9f.\xae\xba\xc8u\x0f/\x99Ф\xa6\xe5vf\xb2:<\xf0\xb91\x7f\xa9N\x7f{:\x8f\xfe\a\xbda\xcb-\xac\xb9\xe9\xf6\xe2\xf9\x85J\xe89d9\n\xfe\xadt\xfa::\xafoX\x14\x12\xf6\xe3\x12HdK\xff\x1f\xd9\a\x9d\x99\x92U\x81n^\xe3\xd1\xed#\xa5|\xba\x1a \xbdv\xec\xc8\n\x1a\xf2i\xfb0T\xa5U\x84\xa8\xb6\xb4BǊ\xb9+8d\xda\xc3/\x90\x8a\x88˕\xb1\x15D\xb9\xbe\xe2\x88\xef\xe9d\x83\x18\"")
		data := make([]byte, 0, 72)
		data = append(data, fullData[3]-fullData[130], fullData[90]^fullData[126], fullData[57]^fullData[73], fullData[104]^fullData[68], fullData[64]^fullData[74], fullData[87]-fullData[77], fullData[9]-fullData[115], fullData[131]-fullData[69], fullData[81]+fullData[89], fullData[128]+fullData[79], fullData[139]-fullData[141], fullData[28]+fullData[61], fullData[37]^fullData[119], fullData[70]^fullData[96], fullData[23]-fullData[14], fullData[129]+fullData[113], fullData[49]-fullData[116], fullData[2]^fullData[93], fullData[15]-fullData[26], fullData[38]-fullData[12], fullData[25]^fullData[16], fullData[95]^fullData[7], fullData[54]^fullData[29], fullData[137]-fullData[125], fullData[51]^fullData[47], fullData[30]-fullData[80], fullData[105]-fullData[53], fullData[52]-fullData[17], fullData[127]^fullData[48], fullData[124]-fullData[33], fullData[55]^fullData[66], fullData[138]^fullData[109], fullData[18]-fullData[42], fullData[118]-fullData[97], fullData[1]-fullData[19], fullData[11]^fullData[122], fullData[114]+fullData[59], fullData[41]-fullData[21], fullData[60]+fullData[98], fullData[5]-fullData[72], fullData[46]^fullData[62], fullData[84]+fullData[6], fullData[88]-fullData[86], fullData[27]^fullData[56], fullData[63]^fullData[133], fullData[117]-fullData[135], fullData[140]^fullData[67], fullData[101]^fullData[120], fullData[108]+fullData[94], fullData[65]-fullData[99], fullData[85]^fullData[132], fullData[136]^fullData[82], fullData[10]+fullData[8], fullData[45]^fullData[32], fullData[112]+fullData[35], fullData[0]+fullData[36], fullData[102]^fullData[20], fullData[24]+fullData[100], fullData[91]+fullData[76], fullData[134]+fullData[34], fullData[123]+fullData[106], fullData[92]+fullData[13], fullData[39]+fullData[50], fullData[107]+fullData[78], fullData[111]+fullData[43], fullData[71]-fullData[110], fullData[75]-fullData[31], fullData[40]^fullData[22], fullData[83]-fullData[58], fullData[44]-fullData[103], fullData[4]^fullData[121])
		return string(data)
	}())
}
func gjfvqJZC0A() {
	fmt.Println(func() string {
		data := []byte("NFv\xf5C\xaf\x1fj+\x97\x97p72X\xa0\xb6\x8d\xad\x8e_\x9f\xb3_N5v\xb3r_G\xe6n\x9aa_\xd0et_Y\xb0\xbf͎1\xed?_N\x86`e\xdd}M5z\xc9\xc7\x1e\x8b\x7fse\xc2y_Y\x00\r")
		positions := [...]byte{3, 27, 21, 41, 3, 69, 36, 53, 9, 65, 27, 57, 31, 19, 15, 58, 46, 59, 66, 11, 41, 3, 41, 44, 60, 43, 17, 60, 61, 16, 15, 33, 21, 62, 66, 6, 22, 43, 19, 54, 50, 20, 9, 42, 47, 5, 61, 14, 1, 55, 5, 9, 18, 22, 18, 5, 69, 7, 10, 19, 66, 1, 15, 51, 47, 43, 8, 52, 59, 57, 10, 66, 4, 36, 12, 55, 62, 1, 9, 66, 66, 59, 36, 70}
		for i := 0; i < 84; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 139
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
		}
		return string(data)
	}())
}
func zG1bgJ() {
	fmt.Println(func() string {
		data := []byte("Sh\x1en\"'>r")
		positions := [...]byte{2, 5, 2, 5, 6, 0, 0, 6, 5, 7, 4, 5}
		for i := 0; i < 12; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 247
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func dCfmAzz() {
	defer func() {
		println(func() string {
			key := []byte("\a\"ۧ\xefJ\xb6\xb3\xaa\x8a7d\xcf")
			data := []byte("CS\x98\xcd1\x1a\xb9m\xbf\xea\xe9\xd6u")
			for i, b := range key {
				data[i] = data[i] + b
			}
			return string(data)
		}())
	}()
}
func qlKkl4vsy_Fr() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func vNVRsBhg() {
	fmt.Println(func() string {
		data := make([]byte, 0, 9)
		i := 5
		decryptKey := 112
		for counter := 0; i != 2; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 0:
				data = append(data, 133)
				i = 9
			case 9:
				i = 1
				data = append(data, 160)
			case 3:
				i = 8
				data = append(data, 130)
			case 6:
				data = append(data, 211)
				i = 0
			case 1:
				data = append(data, 143)
				i = 4
			case 4:
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
				i = 2
			case 7:
				data = append(data, 201)
				i = 3
			case 8:
				i = 6
				data = append(data, 209)
			case 5:
				data = append(data, 175)
				i = 7
			}
		}
		return string(data)
	}())
}
func uzxLSu() {
	defer func() {
		println(func() string {
			key := []byte("\xa7&:_\x85L`.\xd4\xe8?\x92D")
			data := []byte("\xedSI+\xa5(\x0f\x0e\xbd\x9c\x1f\xa8\x00")
			for i, b := range key {
				data[i] = data[i] ^ b
			}
			return string(data)
		}())
	}()
}
func vxyjw4WZ() {
	defer func() {
		println(func() string {
			data := []byte("Ju\x99\xd2\xe13o#\xaf\xf6G\x9f\xd5")
			positions := [...]byte{3, 10, 8, 7, 9, 12, 11, 7, 4, 7, 5, 9, 3, 7, 4, 2, 4, 7}
			for i := 0; i < 18; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 169
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
			}
			return string(data)
		}())
	}()
}
func ovrDb96QOb() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func tA_zu1DS() {
	println(func() string {
		data := make([]byte, 0, 40)
		i := 17
		decryptKey := 95
		for counter := 0; i != 18; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 8:
				data = append(data, "\x00\xda"...,
				)
				i = 1
			case 14:
				data = append(data, 249)
				i = 4
			case 17:
				i = 7
				data = append(data, 19)
			case 12:
				data = append(data, "'+\xe1"...,
				)
				i = 0
			case 4:
				i = 8
				data = append(data, 250)
			case 2:
				data = append(data, "\xf2\xe7\xa6"...,
				)
				i = 14
			case 19:
				data = append(data, "\xf6\x03"...,
				)
				i = 3
			case 5:
				i = 15
				data = append(data, "\xf2\xf1\xfa\xa2"...,
				)
			case 1:
				i = 11
				data = append(data, 26)
			case 9:
				i = 13
				data = append(data, 178)
			case 6:
				data = append(data, "\xac\xed\x00"...,
				)
				i = 5
			case 0:
				for y := range data {
					data[y] = data[y] + byte(decryptKey^y)
				}
				i = 18
			case 3:
				data = append(data, "\xfc\xaa\xea"...,
				)
				i = 6
			case 16:
				data = append(data, 12)
				i = 10
			case 7:
				i = 16
				data = append(data, "\b\x11\xbb\n"...,
				)
			case 10:
				data = append(data, "\x13\x13"...,
				)
				i = 9
			case 15:
				i = 2
				data = append(data, 226)
			case 13:
				data = append(data, "˽\xb3\n"...,
				)
				i = 19
			case 11:
				i = 12
				data = append(data, "#\x1c"...,
				)
			}
		}
		return string(data)
	}())
}
func a1nGDH() {
	fmt.Println(func() string {
		key := []byte("\xb4N\nw8\x1c\x00J")
		data := []byte("\x9b\x1a\x16\xf77\x04:\xde")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func xCZbCb() {
	fmt.Println(func() string {
		data := []byte("oʇ\xa8\xc8j:&")
		positions := [...]byte{7, 1, 5, 0, 1, 5, 4, 2, 3, 0}
		for i := 0; i < 10; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 220
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
		}
		return string(data)
	}())
}
func wDYTTgnKzJ() {
	fmt.Println(func() string {
		seed := byte(167)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
		fnc(167)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
		return string(data)
	}())
}
func s2fTL1yI() {
	println(func() string {
		data := make([]byte, 0, 40)
		i := 2
		decryptKey := 208
		for counter := 0; i != 10; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 11:
				i = 5
				data = append(data, "\xad\xa6\xe5"...,
				)
			case 12:
				i = 1
				data = append(data, 188)
			case 9:
				data = append(data, "\xbf\xa9\xae\xa5"...,
				)
				i = 8
			case 4:
				i = 9
				data = append(data, 168)
			case 16:
				for y := range data {
					data[y] = data[y] ^ byte(decryptKey^y)
				}
				i = 10
			case 1:
				i = 4
				data = append(data, "\xb3\xe9\xa9\xeb"...,
				)
			case 6:
				i = 7
				data = append(data, "ٙ\x9c\x9b"...,
				)
			case 15:
				data = append(data, "\xfa\xb1"...,
				)
				i = 3
			case 5:
				i = 6
				data = append(data, "\xb0\xb5\xbf"...,
				)
			case 13:
				data = append(data, 222)
				i = 16
			case 0:
				data = append(data, "\xf2\xa1\xb5"...,
				)
				i = 12
			case 2:
				i = 15
				data = append(data, "\xa0\xb7\xae"...,
				)
			case 8:
				i = 11
				data = append(data, "\xe1\xa1"...,
				)
			case 3:
				i = 14
				data = append(data, "\xb3\xac"...,
				)
			case 7:
				data = append(data, "\x94\x92"...,
				)
				i = 13
			case 14:
				data = append(data, "\xaa\xf1\xea\xfa"...,
				)
				i = 0
			}
		}
		return string(data)
	}())
}
func gzbcGK() {
	println(func() string {
		data := make([]byte, 0, 40)
		i := 6
		decryptKey := 189
		for counter := 0; i != 10; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 15:
				data = append(data, 4)
				i = 11
			case 0:
				data = append(data, "\xfd="...,
				)
				i = 2
			case 2:
				i = 16
				data = append(data, "MB\xf9L"...,
				)
			case 6:
				data = append(data, ">3<\xe6"...,
				)
				i = 9
			case 9:
				i = 8
				data = append(data, "-/"...,
				)
			case 8:
				i = 1
				data = append(data, "66\xed\x06"...,
				)
			case 12:
				i = 7
				data = append(data, "\xf78C5"...,
				)
			case 13:
				data = append(data, "\xf55"...,
				)
				i = 12
			case 7:
				data = append(data, "4="...,
				)
				i = 0
			case 11:
				i = 10
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
			case 3:
				i = 5
				data = append(data, "\xee=)6"...,
				)
			case 4:
				data = append(data, "EN"...,
				)
				i = 14
			case 5:
				data = append(data, 47)
				i = 13
			case 14:
				i = 15
				data = append(data, "GJN"...,
				)
			case 16:
				i = 4
				data = append(data, "MS\x05"...,
				)
			case 1:
				i = 3
				data = append(data, 248)
			}
		}
		return string(data)
	}())
}
func hCJJCvK0Jc() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func aC2Ylx0() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func m8VpM9ElE() {
	fmt.Println(func() string {
		key := []byte("9g\xb8\xd8\xe3\b\xb0\xb0")
		data := []byte("\x88\xcf\xd8FR(\xea\xd8")
		for i, b := range key {
			data[i] = data[i] - b
		}
		return string(data)
	}())
}
func q3rUmNc5XVDl() {
	fmt.Println(func() string {
		data := []byte("\xdfe85r_\xdc0n\xe2$_G\x1av\x110\x93t\xee\xebU\xb9_;\xceP\xd5._G\x11\xfan\x17\x00ue\xeb_F\xc8\xf1q\x12\x8a\x8cr\xcb\xfa8\x85\x8fr\x02\t;n\x12\x1d^\n0+e\xebr_\xc0o[")
		positions := [...]byte{25, 26, 13, 66, 18, 45, 59, 20, 9, 55, 40, 56, 10, 16, 46, 60, 25, 36, 2, 0, 24, 13, 25, 16, 28, 19, 36, 56, 18, 48, 56, 68, 40, 13, 65, 32, 6, 41, 47, 52, 56, 27, 60, 15, 17, 22, 68, 17, 20, 58, 38, 35, 47, 6, 10, 44, 19, 17, 43, 70, 17, 40, 31, 65, 61, 58, 3, 42, 49, 44, 46, 52, 54, 45, 45, 22, 51, 65, 46, 63, 0, 32, 32, 34, 54, 51}
		for i := 0; i < 86; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 85
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func dTiiO1zqDvkL() {
	defer func() {
		println(func() string {
			seed := byte(175)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
			fnc(249)(29)(56)(113)(142)(96)(203)(71)(215)(185)(30)(86)(182)
			return string(data)
		}())
	}()
}
func m1pShztdc() {
	println(func() string {
		seed := byte(213)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(78)(146)(42)(255)(74)(151)(50)(101)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
		return string(data)
	}())
}
func jvngpteu9d() {
	println(func() string {
		data := []byte("y`\xe7\x8e5o\xda\xff :)~J\xf5ke\xb7\x01 b/\x11\xfd\xd9\x16an\a \xear\x19 ;\xe6Kin=")
		positions := [...]byte{4, 4, 17, 35, 2, 6, 21, 23, 27, 11, 12, 2, 4, 1, 20, 1, 11, 16, 3, 1, 12, 13, 33, 34, 23, 7, 34, 2, 2, 20, 17, 16, 27, 22, 38, 29, 4, 34, 31, 4, 1, 7, 31, 24, 2, 34}
		for i := 0; i < 46; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 108
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func zZG4taZRQU4_() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func _AcczWfWRuJj() {
	fmt.Println(func() string {
		key := []byte("\x9c\xf0\xc5\x05\xf8XFx")
		data := []byte("\xebX\xe5sgx\x80\xa0")
		for i, b := range key {
			data[i] = data[i] - b
		}
		return string(data)
	}())
}
func hHSAIHJn() {
	fmt.Println(func() string {
		data := []byte("ONw\xb7\x00\x91:\x9f")
		positions := [...]byte{4, 3, 7, 3, 7, 4, 1, 2, 7, 7, 1, 5}
		for i := 0; i < 12; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 201
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
		}
		return string(data)
	}())
}
func bNwIvlf() {
	fmt.Println(func() string {
		data := make([]byte, 0, 72)
		i := 10
		decryptKey := 98
		for counter := 0; i != 17; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 20:
				i = 4
				data = append(data, 134)
			case 21:
				data = append(data, "\x91\xc6\xd2\xd7"...,
				)
				i = 26
			case 9:
				i = 30
				data = append(data, 220)
			case 11:
				i = 23
				data = append(data, 147)
			case 12:
				i = 29
				data = append(data, "eb<\x80"...,
				)
			case 23:
				data = append(data, "\x90\x89k\xa7"...,
				)
				i = 3
			case 22:
				i = 28
				data = append(data, "=\x86"...,
				)
			case 13:
				data = append(data, "|`O"...,
				)
				i = 21
			case 18:
				data = append(data, "ndaQ"...,
				)
				i = 14
			case 4:
				i = 13
				data = append(data, "\x89{"...,
				)
			case 5:
				data = append(data, "K\x88I"...,
				)
				i = 24
			case 16:
				data = append(data, 153)
				i = 0
			case 27:
				data = append(data, "oo"...,
				)
				i = 18
			case 0:
				data = append(data, "S\x97"...,
				)
				i = 15
			case 14:
				i = 12
				data = append(data, "i{"...,
				)
			case 25:
				i = 6
				data = append(data, "m\xb1"...,
				)
			case 19:
				i = 11
				data = append(data, "t^\xa5"...,
				)
			case 28:
				i = 5
				data = append(data, "|p^"...,
				)
			case 30:
				i = 17
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
			case 24:
				data = append(data, "\x86v]N"...,
				)
				i = 20
			case 10:
				i = 16
				data = append(data, "o\x85"...,
				)
			case 7:
				i = 19
				data = append(data, "\x96\x8c\x89"...,
				)
			case 3:
				data = append(data, "\x94\x89\xa7"...,
				)
				i = 1
			case 26:
				i = 8
				data = append(data, "\xc1\xbe"...,
				)
			case 2:
				i = 27
				data = append(data, "\xaf\x9b\x86"...,
				)
			case 8:
				i = 9
				data = append(data, 211)
			case 29:
				data = append(data, "iQ"...,
				)
				i = 22
			case 15:
				i = 7
				data = append(data, "\x83nV\x97"...,
				)
			case 1:
				data = append(data, "\x95\x87"...,
				)
				i = 25
			case 6:
				data = append(data, 107)
				i = 2
			}
		}
		return string(data)
	}())
}
func kuO2d0bCWuD() {
	println(func() string {
		fullData := []byte("\xc2Ch>s\xc7\xe8TvH\xc8\xf4\xe3\xe7\xa8\xf1\xc1\xe57\xd5Y!F\xf2\v\xe2\x1ec\a\x02\xad\v\x0eCu\xb2\xdcˠ\xcda(\xec\xad|\xac\x061q\xfb\xc7U\x96D\x85\xd0&^\x1a~@D\x97\xd5d\xcc\x01@\x1c\x01^x&\xb58\xb9\x0f\x80")
		data := make([]byte, 0, 40)
		data = append(data, fullData[65]^fullData[73], fullData[35]-fullData[33], fullData[45]-fullData[18], fullData[26]^fullData[3], fullData[48]+fullData[49], fullData[68]-fullData[30], fullData[67]-fullData[39], fullData[53]-fullData[55], fullData[36]+fullData[61], fullData[15]^fullData[37], fullData[31]-fullData[25], fullData[34]-fullData[51], fullData[11]-fullData[77], fullData[27]^fullData[29], fullData[8]-fullData[24], fullData[23]^fullData[62], fullData[6]-fullData[10], fullData[9]-fullData[13], fullData[56]^fullData[46], fullData[32]+fullData[7], fullData[57]-fullData[42], fullData[64]^fullData[66], fullData[58]-fullData[75], fullData[60]-fullData[19], fullData[71]+fullData[14], fullData[44]+fullData[17], fullData[1]-fullData[63], fullData[54]-fullData[21], fullData[5]+fullData[20], fullData[50]+fullData[43], fullData[4]-fullData[69], fullData[12]+fullData[52], fullData[70]^fullData[59], fullData[0]-fullData[40], fullData[2]^fullData[76], fullData[38]^fullData[16], fullData[47]+fullData[74], fullData[22]+fullData[41], fullData[28]^fullData[72])
		return string(data)
	}())
}
func kEzTGZZ() {
	defer func() {
		println(func() string {
			seed := byte(230)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
			fnc(48)(139)(20)(41)(254)(64)(139)(199)(215)(185)(30)(86)(182)
			return string(data)
		}())
	}()
}
func upGZXz() {
	fmt.Println(func() string {
		key := []byte("K6A\xea\xd1\xeb\xc6\xf5")
		data := []byte("\x9a\x9eaX@\v\x00\x1d")
		for i, b := range key {
			data[i] = data[i] - b
		}
		return string(data)
	}())
}
func eWJOMi7yGud4() {
	fmt.Println(func() string {
		data := []byte("7O\x06>\xa3\x03u\x9b\x99]\x9d_UJ:\xa0\x8b<M\xee_Up_\xc35=\x90\x89\x86b1nn\x9e\x8b\x95Ht_k4u_\r\x82wn_\xfa8\x9bm{FGQnn\\\xc8a\x9fs\x81rf$4\rD")
		positions := [...]byte{59, 3, 24, 60, 35, 16, 34, 60, 5, 2, 29, 37, 13, 27, 19, 7, 64, 52, 67, 14, 24, 62, 40, 24, 6, 36, 2, 8, 68, 30, 5, 4, 45, 26, 10, 8, 68, 13, 51, 19, 7, 19, 7, 64, 2, 15, 10, 62, 69, 49, 53, 52, 66, 12, 7, 4, 6, 51, 13, 1, 9, 34, 70, 9, 28, 19, 17, 69, 59, 7, 67, 15, 12, 8, 1, 17, 56, 29, 27, 14, 44, 27, 0, 18, 14, 52, 61, 54}
		for i := 0; i < 88; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 157
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
		}
		return string(data)
	}())
}
func aT5rZBSdqcK() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 2
			decryptKey := 155
			for counter := 0; i != 5; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 1:
					i = 6
					data = append(data, "و"...,
					)
				case 2:
					i = 0
					data = append(data, 184)
				case 3:
					data = append(data, "\xcdۋ\xcf"...,
					)
					i = 1
				case 6:
					i = 4
					data = append(data, "\xa1\xa6"...,
					)
				case 4:
					i = 5
					for y := range data {
						data[y] = data[y] + byte(decryptKey^y)
					}
				case 0:
					data = append(data, "\xe2\xe3\xe3\x8a"...,
					)
					i = 3
				}
			}
			return string(data)
		}())
	}()
}
func cR1E7iIWuT() {
	println(func() string {
		fullData := []byte("\x83\xb5\x83\x8csi\xf9\xe2a\xb7\xe0\x165\xeb\x1e}\u0095^\xc8+ٖ\x89\xd8\x1e'\x81qeP\xf2\xf6\xe2\n{ҥ\x03ѹ\x86\xeaL\x14\x96\xc1\x93\x11\xce\x05\x8ajJ\xb9\x95]W\xb6N$V\xd2\xe4o\x82\xa6\xf2(\xf4\xbe_\xf1.\xf6}\xa4\xe6")
		data := make([]byte, 0, 40)
		data = append(data, fullData[42]-fullData[28], fullData[44]^fullData[35], fullData[39]^fullData[76], fullData[71]+fullData[46], fullData[47]-fullData[26], fullData[52]^fullData[50], fullData[72]^fullData[65], fullData[70]-fullData[53], fullData[75]^fullData[56], fullData[64]-fullData[12], fullData[57]+fullData[62], fullData[67]+fullData[73], fullData[29]^fullData[48], fullData[38]+fullData[18], fullData[36]^fullData[54], fullData[30]-fullData[13], fullData[51]+fullData[45], fullData[33]^fullData[2], fullData[6]^fullData[21], fullData[22]^fullData[69], fullData[59]+fullData[60], fullData[31]+fullData[4], fullData[74]-fullData[55], fullData[37]^fullData[49], fullData[5]+fullData[9], fullData[16]-fullData[8], fullData[66]+fullData[19], fullData[7]^fullData[41], fullData[1]-fullData[17], fullData[61]+fullData[14], fullData[68]-fullData[58], fullData[0]-fullData[34], fullData[11]-fullData[32], fullData[24]^fullData[40], fullData[77]+fullData[27], fullData[63]+fullData[15], fullData[10]+fullData[23], fullData[3]-fullData[25], fullData[43]-fullData[20])
		return string(data)
	}())
}
func ixkGSL4() {
	fmt.Println(func() string {
		fullData := []byte("]\xc6E7ۦ\xa26\xf36G\xca8\xac\xea^")
		data := make([]byte, 0, 9)
		data = append(data, fullData[13]-fullData[0], fullData[6]+fullData[1], fullData[14]+fullData[7], fullData[9]+fullData[12], fullData[5]-fullData[3], fullData[2]+fullData[4], fullData[10]+fullData[8], fullData[11]+fullData[15])
		return string(data)
	}())
}
func fDmGGfTKq() {
	fmt.Println(func() string {
		fullData := []byte("\x80\xbbźu\xf0-\xc5\xc64\x83:W\xdfR\xf9\x05y\n\x845\x95$\xe7\u074c\xefݘY\vU1Ѯ\xf24\xaa\xd2\xc1\xf7 4\x99pǯ\x8e\xd4\xfc\r\x1dkӦ\x1b\x9a\x86eU\xd3 \x9b4]\x9c\x8d\xef\xa6\xd6x\x04\x1cy;\x99\x19\xe5\xe8\xb1\xf7U\xecՠ\x83H{.\xaab=eg\xb3\x87\x8741\x8d\x9a!E\xb8\xa9\x98\x1d\x9a\x00\xde\xf7b\xc8|*\xc6ZJ\xe6\xb2\xf0\xc1\x1c\x92\x06\x1eQ\xb7nT\xc7\xf9\xaf_WRA&D\x04'\xa7")
		data := make([]byte, 0, 72)
		data = append(data, fullData[117]^fullData[71], fullData[1]^fullData[109], fullData[106]+fullData[29], fullData[139]-fullData[53], fullData[108]-fullData[47], fullData[91]^fullData[90], fullData[14]-fullData[30], fullData[36]+fullData[49], fullData[133]^fullData[98], fullData[97]+fullData[11], fullData[81]^fullData[42], fullData[66]-fullData[88], fullData[56]^fullData[24], fullData[130]+fullData[52], fullData[116]+fullData[122], fullData[74]-fullData[69], fullData[73]+fullData[118], fullData[57]^fullData[13], fullData[92]^fullData[64], fullData[21]-fullData[61], fullData[114]^fullData[4], fullData[5]+fullData[58], fullData[7]-fullData[31], fullData[34]+fullData[79], fullData[6]+fullData[101], fullData[132]^fullData[100], fullData[18]^fullData[113], fullData[102]+fullData[82], fullData[72]-fullData[37], fullData[70]+fullData[23], fullData[128]-fullData[140], fullData[16]^fullData[9], fullData[76]+fullData[59], fullData[112]+fullData[68], fullData[93]^fullData[124], fullData[127]^fullData[78], fullData[75]^fullData[83], fullData[86]+fullData[51], fullData[135]^fullData[137], fullData[60]+fullData[25], fullData[129]^fullData[50], fullData[28]+fullData[65], fullData[115]+fullData[46], fullData[22]^fullData[87], fullData[27]^fullData[43], fullData[62]^fullData[89], fullData[44]-fullData[131], fullData[2]-fullData[12], fullData[121]-fullData[111], fullData[10]-fullData[20], fullData[103]^fullData[0], fullData[141]-fullData[32], fullData[33]^fullData[77], fullData[48]^fullData[54], fullData[55]+fullData[138], fullData[120]-fullData[104], fullData[67]-fullData[3], fullData[41]-fullData[119], fullData[63]-fullData[8], fullData[84]+fullData[39], fullData[99]+fullData[38], fullData[80]^fullData[94], fullData[95]-fullData[134], fullData[19]+fullData[26], fullData[110]^fullData[123], fullData[17]+fullData[15], fullData[85]^fullData[40], fullData[105]^fullData[45], fullData[107]-fullData[136], fullData[125]+fullData[126], fullData[96]^fullData[35])
		return string(data)
	}())
}
func umZOjiF() {
	fmt.Println(func() string {
		key := []byte(") K@z\xb0\x8f\xc7")
		data := []byte("&H\xd5.\xf5p\xaba")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func oZFyO5m() {
	fmt.Println(func() string {
		data := make([]byte, 0, 9)
		i := 9
		decryptKey := 151
		for counter := 0; i != 5; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 1:
				data = append(data, 212)
				i = 0
			case 0:
				data = append(data, 241)
				i = 4
			case 7:
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
				i = 5
			case 2:
				i = 8
				data = append(data, 211)
			case 3:
				data = append(data, 24)
				i = 2
			case 9:
				i = 3
				data = append(data, 0)
			case 6:
				data = append(data, 36)
				i = 1
			case 4:
				data = append(data, 222)
				i = 7
			case 8:
				data = append(data, 32)
				i = 6
			}
		}
		return string(data)
	}())
}
func mAVmPaATK() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 2
			decryptKey := 175
			for counter := 0; i != 7; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 6:
					data = append(data, "\xbd\xb8"...,
					)
					i = 4
				case 5:
					i = 0
					data = append(data, 168)
				case 0:
					data = append(data, "\xb0b\xb8"...,
					)
					i = 1
				case 4:
					data = append(data, "\xbac"...,
					)
					i = 5
				case 1:
					data = append(data, "\xc4m\x88\x8f"...,
					)
					i = 3
				case 3:
					i = 7
					for y := range data {
						data[y] = data[y] + byte(decryptKey^y)
					}
				case 2:
					i = 6
					data = append(data, 145)
				}
			}
			return string(data)
		}())
	}()
}
func tE_8YCpjwiD() {
	println(func() string {
		data := []byte("\n\x11\x04 lOst\xf3-tLta\xdd/da\xa2P-A\x1ce*a\x00=/*\xfay\xe9\x1c\x1d_+n.")
		positions := [...]byte{33, 26, 32, 2, 29, 26, 8, 14, 24, 22, 33, 24, 27, 14, 18, 1, 2, 1, 0, 38, 30, 11, 9, 2, 20, 1, 34, 16, 35, 22, 15, 19, 5, 0, 28, 32, 18, 36, 22, 1, 21, 19, 2, 23, 36, 10}
		for i := 0; i < 46; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 177
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func ax3H62GDersU() {
	fmt.Println(func() string {
		key := []byte("\x12\xc1\xa5\xac\x92\xb7\x01N*\xe0\x97\x01\xe8p=\xfb\x0fp\x05\xdd\xd4\xf2(\xf6\x89\x17\xf0L\x00\x03G\xdb\xfb\xb0y=\xc6\xe8:\xaa\x12\xd5\xed\u0084\xef\xdeLF\a\xb9\x99\xe9\x1c\xb5\x93\xf5\xe9\xfe\x16\x12q\xba\x1f/\xaa\x1e\xb3=\xf2,")
		data := []byte("\\\xa4ӝ\xe0\xe8F~D\x8e\xf6^\xafBK\x9eP)=\xa8\x8b\xa7X\xa9\xc7\"\x86}r\\\x00\xea\x95\xde\x18b\x8a\x8dN\xf5Kᘝ\xc0ީ\"\x19I\x81\xef\xddn\xea\xd4\xc0\x87\x90wM5\x8alJ\xd8j\xecd\x9dY")
		for i, b := range key {
			data[i] = data[i] ^ b
		}
		return string(data)
	}())
}
func fyzVt0TE() {
	defer func() {
		println(func() string {
			seed := byte(33)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
			fnc(107)(249)(246)(15)(170)(80)(235)(79)(215)(225)(86)(246)(134)
			return string(data)
		}())
	}()
}
func e9C9sd6GV() {
	fmt.Println(func() string {
		data := []byte("Oh)\xa9\x89$\x8d\x8f")
		positions := [...]byte{4, 6, 3, 5, 7, 4, 2, 4, 6, 5}
		for i := 0; i < 10; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 174
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func k4agk1() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 1
			decryptKey := 67
			for counter := 0; i != 0; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 1:
					data = append(data, "\r360"...,
					)
					i = 4
				case 3:
					for y := range data {
						data[y] = data[y] ^ byte(decryptKey^y)
					}
					i = 0
				case 4:
					data = append(data, "c&.`"...,
					)
					i = 5
				case 5:
					i = 2
					data = append(data, "&:mv"...,
					)
				case 2:
					data = append(data, 15)
					i = 3
				}
			}
			return string(data)
		}())
	}()
}
func dw6wP_n19p() {
	fmt.Println(func() string {
		seed := byte(228)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(50)(123)(7)(201)(211)(147)(14)(5)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
		return string(data)
	}())
}
func yIE6KV8VkR52() {
	fmt.Println(func() string {
		data := make([]byte, 0, 72)
		i := 6
		decryptKey := 25
		for counter := 0; i != 4; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 22:
				data = append(data, "\xf0*"...,
				)
				i = 26
			case 7:
				data = append(data, "\xe5\xc1\x03\xee"...,
				)
				i = 17
			case 24:
				data = append(data, "\xec\xf2\xf3"...,
				)
				i = 18
			case 26:
				data = append(data, "\x18\x01"...,
				)
				i = 24
			case 8:
				i = 3
				data = append(data, "\x0e\xef\xdb "...,
				)
			case 5:
				data = append(data, "\xcc\xe6"...,
				)
				i = 1
			case 10:
				i = 20
				data = append(data, "\xc4\x03\xf1"...,
				)
			case 9:
				i = 2
				data = append(data, "F9PW"...,
				)
			case 21:
				i = 19
				data = append(data, "\v\f\x00"...,
				)
			case 0:
				i = 10
				data = append(data, "\xf3\xe3\xce\r"...,
				)
			case 1:
				i = 7
				data = append(data, "\xf6\xe2"...,
				)
			case 3:
				i = 15
				data = append(data, "\x10\x13"...,
				)
			case 13:
				i = 11
				data = append(data, "\xd8\x12\x00\xe9"...,
				)
			case 19:
				i = 12
				data = append(data, "\xf7\xdd\xca\x0e"...,
				)
			case 12:
				data = append(data, "IWZ"...,
				)
				i = 9
			case 18:
				i = 5
				data = append(data, "\xe7\xe6"...,
				)
			case 20:
				data = append(data, "\xda\xd1"...,
				)
				i = 21
			case 14:
				i = 23
				data = append(data, 26)
			case 6:
				i = 13
				data = append(data, "\xf2\n\x1c"...,
				)
			case 25:
				data = append(data, "\x0f\x06\""...,
				)
				i = 16
			case 17:
				data = append(data, "̺\x01\xf9"...,
				)
				i = 0
			case 15:
				i = 25
				data = append(data, "\x0e\xee,"...,
				)
			case 23:
				data = append(data, "\x1b\x0f"...,
				)
				i = 8
			case 11:
				i = 14
				data = append(data, 211)
			case 16:
				i = 22
				data = append(data, "\x12\n\xf24"...,
				)
			case 2:
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
				i = 4
			}
		}
		return string(data)
	}())
}
func kOIRLdNecV() {
	defer func() {
		println(func() string {
			fullData := []byte("\x04\xfb\n6\xfem1I\v\"\xa7]\xdc \xbc\xd3\xf5}\xd59\xc1$\x01\xb3\x04\x8f")
			data := make([]byte, 0, 14)
			data = append(data, fullData[22]+fullData[7], fullData[3]-fullData[20], fullData[17]-fullData[2], fullData[1]^fullData[25], fullData[0]^fullData[21], fullData[11]^fullData[19], fullData[14]+fullData[23], fullData[4]+fullData[9], fullData[5]-fullData[24], fullData[10]^fullData[15], fullData[18]^fullData[16], fullData[6]^fullData[8], fullData[13]-fullData[12])
			return string(data)
		}())
	}()
}
func syrtRu9fDS() {
	defer func() {
		println(func() string {
			seed := byte(36)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
			fnc(110)(7)(12)(25)(222)(0)(11)(199)(215)(185)(30)(86)(182)
			return string(data)
		}())
	}()
}
func uvxhHf1rf() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func eFxrPRDSg9() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 2
			decryptKey := 207
			for counter := 0; i != 4; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 5:
					data = append(data, "?\xe8\x03\x12"...,
					)
					i = 1
				case 2:
					data = append(data, "\f8"...,
					)
					i = 0
				case 1:
					i = 4
					for y := range data {
						data[y] = data[y] - byte(decryptKey^y)
					}
				case 3:
					i = 5
					data = append(data, "3\xe53"...,
					)
				case 0:
					i = 3
					data = append(data, "35\xe6+"...,
					)
				}
			}
			return string(data)
		}())
	}()
}
func tCSKuar7GG() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 3
			decryptKey := 62
			for counter := 0; i != 0; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 6:
					i = 4
					data = append(data, "\xa4S"...,
					)
				case 2:
					data = append(data, "^\x9a"...,
					)
					i = 6
				case 1:
					i = 0
					for y := range data {
						data[y] = data[y] - byte(decryptKey^y)
					}
				case 5:
					data = append(data, "\xad\xae\xae"...,
					)
					i = 7
				case 7:
					data = append(data, "]\xa0\xae"...,
					)
					i = 2
				case 4:
					i = 1
					data = append(data, "ly"...,
					)
				case 3:
					data = append(data, 131)
					i = 5
				}
			}
			return string(data)
		}())
	}()
}
func lNRUI1ObxG() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func cQzTzxNM() {
	defer func() {
		println(func() string {
			fullData := []byte("M2\xccy\xea\x9c\xfc'\xf6l\a)\xa8\xb1!\t\xb8\x19S\x1a N2n\xb4\x8a")
			data := make([]byte, 0, 14)
			data = append(data, fullData[16]-fullData[23], fullData[6]+fullData[3], fullData[18]^fullData[20], fullData[4]+fullData[25], fullData[11]-fullData[15], fullData[22]+fullData[1], fullData[21]^fullData[14], fullData[17]+fullData[10], fullData[19]-fullData[13], fullData[0]+fullData[7], fullData[24]+fullData[9], fullData[2]^fullData[8], fullData[5]+fullData[12])
			return string(data)
		}())
	}()
}
func eaaZ_FdsPzw() {
	fmt.Println(func() string {
		seed := byte(48)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(127)(23)(230)(26)(53)(27)(80)(142)
		return string(data)
	}())
}
func yONBgu9t() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func eG_NKg() {
	fmt.Println(func() string {
		fullData := []byte("\x92u\x15/\xa0\xa3\xc8:\xa2D\xe9S\xce%r5\xe4\xa1K\xf9\xf7\x995V\xc1}\f\x84\xdfM\x81\x9b\xc5;L\xcdHB\xcc\xc2IT\xb9+^\xe2C\xc7CB\tĘst\x9a\xcb\xffSfM\xf4f\xe8S\xb6\xeaϴA9\xeeϨ\xfa\xa9<\xcdhy{\x89\xbe&\xd4\xf8\xb9\xea\v\xe9\xb9e\"g\x03\x9f\xb9\xb9\xc1\xff\xe2\x15\xe6\xfc\x01([\x06U\x05\xeck\xa2\xab\xb5\xb1\xb7\x91;\fB\x87ο\xc95L\x00\x17{\xf3\xe3\xff\x13\xa7\xc1ډm\x8c\xa5\x88")
		data := make([]byte, 0, 72)
		data = append(data, fullData[36]+fullData[107], fullData[75]-fullData[9], fullData[101]-fullData[95], fullData[63]-fullData[116], fullData[41]-fullData[45], fullData[29]-fullData[71], fullData[119]-fullData[32], fullData[125]^fullData[109], fullData[138]-fullData[57], fullData[77]^fullData[5], fullData[106]^fullData[7], fullData[111]-fullData[26], fullData[10]-fullData[112], fullData[64]+fullData[28], fullData[3]-fullData[97], fullData[80]+fullData[87], fullData[58]-fullData[61], fullData[82]+fullData[31], fullData[59]^fullData[44], fullData[81]+fullData[110], fullData[113]-fullData[126], fullData[51]+fullData[117], fullData[20]^fullData[121], fullData[25]+fullData[100], fullData[118]^fullData[1], fullData[76]+fullData[19], fullData[89]-fullData[53], fullData[43]-fullData[74], fullData[115]+fullData[98], fullData[0]^fullData[35], fullData[72]^fullData[141], fullData[73]^fullData[21], fullData[33]^fullData[108], fullData[122]^fullData[4], fullData[48]^fullData[92], fullData[42]^fullData[102], fullData[132]+fullData[60], fullData[55]^fullData[99], fullData[69]^fullData[22], fullData[23]+fullData[50], fullData[123]-fullData[62], fullData[103]^fullData[6], fullData[86]^fullData[38], fullData[54]-fullData[2], fullData[88]-fullData[47], fullData[78]+fullData[124], fullData[37]-fullData[56], fullData[24]-fullData[11], fullData[83]^fullData[79], fullData[94]-fullData[114], fullData[46]^fullData[129], fullData[8]^fullData[84], fullData[67]+fullData[91], fullData[18]^fullData[70], fullData[133]^fullData[34], fullData[127]-fullData[90], fullData[136]-fullData[140], fullData[27]+fullData[66], fullData[40]+fullData[13], fullData[137]-fullData[105], fullData[17]-fullData[120], fullData[134]^fullData[131], fullData[16]-fullData[68], fullData[15]-fullData[39], fullData[128]^fullData[14], fullData[30]^fullData[130], fullData[49]-fullData[12], fullData[93]+fullData[85], fullData[52]+fullData[135], fullData[96]+fullData[65], fullData[104]-fullData[139])
		return string(data)
	}())
}
func hjqyWvCHLJf() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func mLq7RIe() {
	fmt.Println(func() string {
		seed := byte(168)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(246)(3)(23)(233)(19)(19)(14)(5)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
		return string(data)
	}())
}
func rFZkN4F7ng() {
	println(func() string {
		data := []byte("B\x8cu\xd7\xf9\xb8dtV=)\xd1t\xa2\x98\xd8 \x84 Ex\x88\xc0\xa9n<\x898b\x82r\x91}eP\x8fi\xda\xd0")
		positions := [...]byte{14, 3, 3, 33, 15, 22, 33, 3, 13, 20, 9, 15, 27, 0, 37, 24, 13, 31, 37, 17, 38, 11, 27, 9, 19, 23, 23, 34, 9, 0, 8, 4, 22, 23, 5, 13, 35, 0, 5, 29, 15, 26, 23, 28, 1, 4, 37, 22, 34, 6, 21, 23, 32, 25}
		for i := 0; i < 54; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 175
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
		}
		return string(data)
	}())
}
func jKwEzNoh() {
	fmt.Println(func() string {
		seed := byte(173)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
		fnc(226)(231)(86)(162)(1)(79)(132)(106)
		return string(data)
	}())
}
func zdWm8tvs77x2() {
	println(func() string {
		seed := byte(47)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
		fnc(86)(234)(26)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
		return string(data)
	}())
}
func lC5zr0UdK() {
	defer func() {
		println(func() string {
			seed := byte(228)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
			fnc(174)(231)(10)(247)(90)(176)(235)(79)(215)(225)(86)(246)(134)
			return string(data)
		}())
	}()
}
func xnMacQjC7h8() {
	defer func() {
		println(func() string {
			seed := byte(84)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
			fnc(30)(7)(10)(247)(90)(176)(235)(79)(215)(225)(86)(246)(134)
			return string(data)
		}())
	}()
}
func _BT16HB020() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func gbJiOTY() {
	fmt.Println(func() string {
		key := []byte("\x05\xc3(!\xe64\a\x12")
		data := []byte("J\xa5\xf8M\x89\xec3\x16")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func uxGzyjvOHhx() {
	defer func() {
		println(func() string {
			seed := byte(164)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
			fnc(166)(43)(254)(1)(172)(68)(11)(177)(73)(11)(172)(26)(10)
			return string(data)
		}())
	}()
}
func rUNopf() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func mMVY4Znn0o7x() {
	fmt.Println(func() string {
		fullData := []byte("\x8ax\xb0\xe1V\x1b<\xd8\x1c@?q3\xfd\xf7\xf9")
		data := make([]byte, 0, 9)
		data = append(data, fullData[15]+fullData[4], fullData[9]-fullData[7], fullData[6]^fullData[8], fullData[11]+fullData[13], fullData[1]+fullData[14], fullData[3]+fullData[10], fullData[0]+fullData[2], fullData[12]^fullData[5])
		return string(data)
	}())
}
func a0e10QA() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 4
			decryptKey := 161
			for counter := 0; i != 5; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 1:
					i = 3
					data = append(data, "\xe5\xf0"...,
					)
				case 6:
					i = 2
					data = append(data, "\t\x15\xc7"...,
					)
				case 3:
					for y := range data {
						data[y] = data[y] - byte(decryptKey^y)
					}
					i = 5
				case 4:
					data = append(data, "\xea\x16\x15"...,
					)
					i = 0
				case 0:
					i = 6
					data = append(data, "\x17\xc4"...,
					)
				case 2:
					data = append(data, "\x11\x1d\xca"...,
					)
					i = 1
				}
			}
			return string(data)
		}())
	}()
}
func yZ2FkRSD2V() {
	fmt.Println(func() string {
		seed := byte(79)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(157)(81)(179)(33)(131)(243)(206)(133)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
		return string(data)
	}())
}
func j1dOYAhw() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func ewiHQaz9lZVG() {
	println(func() string {
		key := []byte("N\xb3,\x94w\xacc}JZ\x9c\x05R6\xb2\xcc̈8\xf1&\xcau\x89z/ӟ\xb96P\xb9أ\x86\xe9\xe4\fh")
		data := []byte("\xc7\"\xa1\xb4\xe3\x1b\xd6\xf1j\x94\xc5%Ɨ\x1d1\xec\xe9XS\x98/\xd6\xf4\x9a\x90A\x03٪\xc22\xf8\x04\xedJMz\x89")
		for i, b := range key {
			data[i] = data[i] - b
		}
		return string(data)
	}())
}
func nVxeP6nt_69() {
	defer func() {
		println(func() string {
			key := []byte("\xf6\u05ee\xb1\nW̝܊!\x1e\xe2")
			data := []byte("@L!%*\xbb;\xbdE\xfeAX&")
			for i, b := range key {
				data[i] = data[i] - b
			}
			return string(data)
		}())
	}()
}
func cAJOoJff4() {
	println(func() string {
		data := []byte("\xee\xb1u \xbbo\xb3áM\x93\xb3\x81a\b[\x18\xaa\x9b\x13PDaW \xc2ud\x92\xcf\xe7y \x93\xba]OP\x96")
		positions := [...]byte{34, 19, 21, 16, 29, 33, 28, 34, 37, 9, 17, 15, 1, 34, 9, 36, 8, 20, 30, 16, 30, 26, 23, 4, 35, 4, 38, 7, 17, 12, 33, 18, 33, 10, 26, 21, 9, 0, 21, 4, 10, 30, 8, 25, 11, 14, 1, 6, 11, 18, 4, 37}
		for i := 0; i < 52; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 167
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
		}
		return string(data)
	}())
}
func cEp6jfgzW() {
	println(func() string {
		data := []byte("\xe7ou\x97hos\x0fc:{\x83\x7fa.n\xa9a\x982.eaQ\x80and^*ֽ\x9fq\x879iQw")
		positions := [...]byte{16, 29, 11, 19, 31, 30, 35, 28, 0, 10, 8, 4, 37, 32, 10, 31, 33, 19, 8, 28, 0, 3, 18, 31, 14, 18, 19, 15, 33, 23, 7, 38, 38, 16, 34, 34, 12, 30, 10, 4, 20, 24, 30, 0, 11, 38}
		for i := 0; i < 46; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 190
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
		}
		return string(data)
	}())
}
func bthAdG1() {
	fmt.Println(func() string {
		data := make([]byte, 0, 9)
		i := 0
		decryptKey := 192
		for counter := 0; i != 5; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 6:
				i = 3
				data = append(data, 185)
			case 2:
				data = append(data, 115)
				i = 9
			case 1:
				i = 7
				data = append(data, 112)
			case 7:
				i = 6
				data = append(data, 189)
			case 3:
				i = 8
				data = append(data, 105)
			case 4:
				data = append(data, 181)
				i = 1
			case 8:
				data = append(data, 134)
				i = 2
			case 0:
				data = append(data, 157)
				i = 4
			case 9:
				for y := range data {
					data[y] = data[y] + byte(decryptKey^y)
				}
				i = 5
			}
		}
		return string(data)
	}())
}
func bVtVyIcuoi() {
	println(func() string {
		data := []byte("vo\xce\xcb\x01o\x03t \xe6\xf9\xb8\xc8\xefk\a a \x87c\xefa\xe2\xd3\n}\xfa\x13\xab\xf1\x01 \x92gaI\xf0!")
		positions := [...]byte{11, 12, 6, 13, 24, 33, 28, 20, 21, 36, 37, 4, 21, 27, 26, 12, 2, 9, 0, 15, 26, 19, 29, 10, 31, 25, 23, 15, 29, 25, 28, 36, 6, 27, 19, 29, 12, 2, 25, 12, 30, 26, 27, 6, 3, 37}
		for i := 0; i < 46; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 81
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
		}
		return string(data)
	}())
}
func dZzdxEB() {
	println(func() string {
		seed := byte(180)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
		fnc(205)(238)(26)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
		return string(data)
	}())
}
func vin2bH1m() {
	println(func() string {
		fullData := []byte("\x11\xaa\x8b\xc8ན\xa3\x812;ڐl\xca\xe0\xc8\xe1 \x97\x1a*%o\xe3\x96\xf7`B\xc8r\xea)#\xf8c\xa5\xe6h\xf2\xde\xfa\xfd\x9aI\xc0H4X\xf1\xcb{RF\xe8\x7f\xba\xa7e\xc7\xcb\xc0\x86)\xb9\x84\xe5\x83,\x14.\xa0\x8f\xa8\x05\t\x89\t")
		data := make([]byte, 0, 40)
		data = append(data, fullData[7]^fullData[11], fullData[57]+fullData[16], fullData[37]+fullData[72], fullData[69]^fullData[47], fullData[22]-fullData[64], fullData[19]^fullData[34], fullData[39]^fullData[8], fullData[0]^fullData[58], fullData[74]-fullData[66], fullData[18]+fullData[20], fullData[23]^fullData[53], fullData[42]+fullData[33], fullData[4]-fullData[13], fullData[76]^fullData[54], fullData[71]+fullData[60], fullData[21]+fullData[10], fullData[30]-fullData[52], fullData[26]^fullData[25], fullData[5]+fullData[35], fullData[14]^fullData[73], fullData[3]^fullData[56], fullData[6]-fullData[70], fullData[1]^fullData[50], fullData[49]-fullData[62], fullData[15]-fullData[61], fullData[77]^fullData[38], fullData[24]+fullData[2], fullData[46]^fullData[68], fullData[29]+fullData[48], fullData[28]+fullData[9], fullData[32]+fullData[44], fullData[55]+fullData[41], fullData[51]+fullData[36], fullData[43]+fullData[59], fullData[12]-fullData[63], fullData[67]+fullData[40], fullData[75]+fullData[27], fullData[31]^fullData[65], fullData[17]^fullData[45])
		return string(data)
	}())
}
func zGD9HVF() {
	fmt.Println(func() string {
		data := make([]byte, 0, 9)
		i := 3
		decryptKey := 51
		for counter := 0; i != 8; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 3:
				i = 5
				data = append(data, 74)
			case 1:
				i = 9
				data = append(data, 25)
			case 0:
				i = 2
				data = append(data, 110)
			case 6:
				i = 4
				data = append(data, 38)
			case 4:
				for y := range data {
					data[y] = data[y] + byte(decryptKey^y)
				}
				i = 8
			case 9:
				i = 0
				data = append(data, 104)
			case 2:
				i = 7
				data = append(data, 32)
			case 5:
				data = append(data, 100)
				i = 1
			case 7:
				data = append(data, 55)
				i = 6
			}
		}
		return string(data)
	}())
}
func quDDgRKIs() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 5
			decryptKey := 135
			for counter := 0; i != 7; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 5:
					i = 3
					data = append(data, "\xd9\x03"...,
					)
				case 4:
					data = append(data, "\xf0\xfa\xa5"...,
					)
					i = 1
				case 0:
					data = append(data, "\xab\xee\xf8"...,
					)
					i = 6
				case 6:
					data = append(data, 168)
					i = 4
				case 3:
					i = 0
					data = append(data, "\x00\x00"...,
					)
				case 2:
					i = 7
					for y := range data {
						data[y] = data[y] - byte(decryptKey^y)
					}
				case 1:
					data = append(data, "\xbe\xc7"...,
					)
					i = 2
				}
			}
			return string(data)
		}())
	}()
}
func tj54ABlEEd() {
	fmt.Println(func() string {
		fullData := []byte("\xf262\xfe\xce>\x06Yh\xfc\x12\xa2\x16\x81\x82f")
		data := make([]byte, 0, 9)
		data = append(data, fullData[13]+fullData[4], fullData[15]-fullData[3], fullData[2]^fullData[10], fullData[6]+fullData[8], fullData[7]+fullData[12], fullData[11]^fullData[14], fullData[5]+fullData[9], fullData[1]+fullData[0])
		return string(data)
	}())
}
func sgE2SFd() {
	defer func() {
		println(func() string {
			fullData := []byte("g!I\xfa\x03\xb8\x98Q\xa3\xa6\xc0҉4\xfc\x81\x0e>\x9c\xe9\xd7}H<\x86\xf5")
			data := make([]byte, 0, 14)
			data = append(data, fullData[16]+fullData[23], fullData[18]^fullData[19], fullData[12]^fullData[3], fullData[25]^fullData[15], fullData[9]-fullData[24], fullData[0]-fullData[4], fullData[7]^fullData[17], fullData[2]+fullData[20], fullData[1]+fullData[22], fullData[13]-fullData[10], fullData[8]+fullData[21], fullData[11]-fullData[6], fullData[14]-fullData[5])
			return string(data)
		}())
	}()
}
func zYKuHruQ0bam() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func m29yIQINz9Z() {
	fmt.Println(func() string {
		data := make([]byte, 0, 72)
		i := 21
		decryptKey := 103
		for counter := 0; i != 29; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 0:
				data = append(data, "9\""...,
				)
				i = 4
			case 21:
				i = 20
				data = append(data, "*@P"...,
				)
			case 11:
				data = append(data, "mcK"...,
				)
				i = 0
			case 16:
				i = 7
				data = append(data, 43)
			case 26:
				i = 27
				data = append(data, 80)
			case 31:
				i = 22
				data = append(data, 13)
			case 4:
				i = 15
				data = append(data, "_$aM"...,
				)
			case 23:
				i = 1
				data = append(data, 51)
			case 2:
				data = append(data, "%\r"...,
				)
				i = 10
			case 6:
				data = append(data, "/$"...,
				)
				i = 17
			case 7:
				i = 12
				data = append(data, 22)
			case 19:
				for y := range data {
					data[y] = data[y] + byte(decryptKey^y)
				}
				i = 29
			case 5:
				i = 3
				data = append(data, "[X"...,
				)
			case 12:
				i = 31
				data = append(data, "X\x01"...,
				)
			case 15:
				data = append(data, "4\x19Q"...,
				)
				i = 26
			case 18:
				i = 30
				data = append(data, "\xf8\xf9\x0e"...,
				)
			case 28:
				data = append(data, "r\\M'"...,
				)
				i = 14
			case 25:
				data = append(data, ",\x12\xf8"...,
				)
				i = 33
			case 20:
				data = append(data, "\nR>"...,
				)
				i = 2
			case 22:
				i = 18
				data = append(data, 14)
			case 13:
				data = append(data, 105)
				i = 5
			case 10:
				i = 23
				data = append(data, "BA"...,
				)
			case 3:
				i = 28
				data = append(data, "Ld"...,
				)
			case 30:
				data = append(data, 19)
				i = 19
			case 32:
				i = 8
				data = append(data, "\x1f\t"...,
				)
			case 8:
				data = append(data, "L:"...,
				)
				i = 24
			case 14:
				i = 11
				data = append(data, "gP<("...,
				)
			case 24:
				i = 6
				data = append(data, "+$\x02>"...,
				)
			case 27:
				data = append(data, "BG"...,
				)
				i = 16
			case 33:
				data = append(data, "8\xf2:&"...,
				)
				i = 9
			case 9:
				i = 13
				data = append(data, "\r\xf6j"...,
				)
			case 17:
				data = append(data, 62)
				i = 25
			case 1:
				i = 32
				data = append(data, 48)
			}
		}
		return string(data)
	}())
}
func jXuJvL6() {
	println(func() string {
		fullData := []byte("\xfaAU\x9cM\xe3\x14c\xabF\xbd\x7f-\x94\x91bu\xfc:\x19\xa0-\xd9x\x11i$1_\xc1\x03\xff\x8a\x9d\xd4\x1eÛ\b\xe8-\xbcu\x92w\xf1汽\x85n\xab\x93\x1exK\xb2\x83\x00̋\x9a\xec\xc0Tb\xef\xeby1\xabk8Ό\r\x16\x0f")
		data := make([]byte, 0, 40)
		data = append(data, fullData[43]-fullData[19], fullData[0]-fullData[60], fullData[32]+fullData[67], fullData[48]^fullData[33], fullData[68]-fullData[75], fullData[3]-fullData[21], fullData[9]+fullData[40], fullData[62]-fullData[23], fullData[47]^fullData[14], fullData[61]+fullData[20], fullData[39]+fullData[1], fullData[4]-fullData[12], fullData[30]^fullData[44], fullData[31]+fullData[65], fullData[35]^fullData[16], fullData[22]+fullData[74], fullData[5]^fullData[36], fullData[49]-fullData[26], fullData[29]+fullData[28], fullData[58]+fullData[15], fullData[77]+fullData[7], fullData[64]^fullData[27], fullData[53]-fullData[10], fullData[8]^fullData[63], fullData[66]+fullData[69], fullData[25]^fullData[38], fullData[54]^fullData[76], fullData[72]-fullData[34], fullData[56]+fullData[50], fullData[45]+fullData[57], fullData[46]^fullData[13], fullData[42]-fullData[17], fullData[55]^fullData[71], fullData[52]+fullData[73], fullData[41]+fullData[51], fullData[37]-fullData[18], fullData[6]-fullData[70], fullData[11]^fullData[24], fullData[59]+fullData[2])
		return string(data)
	}())
}
func mqb3VM() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 0
			decryptKey := 60
			for counter := 0; i != 3; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 5:
					data = append(data, "O\x89\x95"...,
					)
					i = 4
				case 4:
					i = 1
					data = append(data, "B]h"...,
					)
				case 0:
					data = append(data, "r\x9e"...,
					)
					i = 2
				case 6:
					i = 5
					data = append(data, "\x9fL\x91\x9d"...,
					)
				case 2:
					data = append(data, 157)
					i = 6
				case 1:
					for y := range data {
						data[y] = data[y] - byte(decryptKey^y)
					}
					i = 3
				}
			}
			return string(data)
		}())
	}()
}
func zuri33e9vXp() {
	fmt.Println(func() string {
		fullData := []byte("\xaex\xb2B\xb9\x82'\x0f\xdf'\xb5\xd2cR!\xa0)\x7f\x01f\x82\xdf$úĉ-XKO\xdem!\xffx\xb1\xba\x18|\x7f\xf4Z\x8a\xab'\xea\x91\xda\x1dp\xb6=\xb3\xc8iy\x1c\xf4߷}\x0e~\x92\xdb\xfc{\x11~.U\xa4\xff\xb6F^e\xdeE\x8d\x97\xe9\x16'\n\xdf\xe6\f\x91\x9b\x02\"\x0e1\xa40\xd8\xea\x8fd \xc5nQ\x80\xf0(ܽI\xc2\v\xd8\xe6\xdf}OY\xf2\xb5@[KP\x9b\vv\x0fb\x8f9\xee07(\xd0y\xae&\xd8 ")
		data := make([]byte, 0, 72)
		data = append(data, fullData[25]-fullData[127], fullData[91]+fullData[12], fullData[38]+fullData[76], fullData[118]-fullData[107], fullData[103]-fullData[66], fullData[9]-fullData[54], fullData[85]-fullData[23], fullData[132]^fullData[31], fullData[44]-fullData[52], fullData[1]^fullData[83], fullData[95]+fullData[109], fullData[30]-fullData[106], fullData[134]^fullData[50], fullData[68]-fullData[86], fullData[140]-fullData[129], fullData[64]-fullData[27], fullData[62]+fullData[104], fullData[133]^fullData[55], fullData[61]-fullData[79], fullData[105]-fullData[126], fullData[10]^fullData[98], fullData[108]^fullData[26], fullData[120]^fullData[102], fullData[94]+fullData[70], fullData[18]^fullData[117], fullData[16]-fullData[41], fullData[65]+fullData[125], fullData[21]-fullData[138], fullData[69]-fullData[88], fullData[116]^fullData[92], fullData[49]^fullData[42], fullData[80]+fullData[72], fullData[113]^fullData[74], fullData[33]-fullData[53], fullData[130]+fullData[11], fullData[97]-fullData[56], fullData[32]^fullData[14], fullData[57]^fullData[137], fullData[37]+fullData[24], fullData[78]-fullData[17], fullData[139]^fullData[40], fullData[115]+fullData[71], fullData[19]+fullData[7], fullData[0]+fullData[36], fullData[131]+fullData[112], fullData[28]-fullData[6], fullData[93]-fullData[81], fullData[110]^fullData[45], fullData[48]-fullData[67], fullData[59]^fullData[47], fullData[121]^fullData[35], fullData[96]+fullData[75], fullData[124]^fullData[100], fullData[101]+fullData[13], fullData[15]^fullData[34], fullData[84]+fullData[141], fullData[20]^fullData[60], fullData[8]+fullData[99], fullData[46]-fullData[39], fullData[119]-fullData[89], fullData[82]^fullData[51], fullData[111]-fullData[63], fullData[2]^fullData[5], fullData[135]^fullData[122], fullData[29]-fullData[87], fullData[3]-fullData[136], fullData[128]-fullData[90], fullData[4]^fullData[114], fullData[58]+fullData[77], fullData[22]+fullData[123], fullData[73]^fullData[43])
		return string(data)
	}())
}
func ix1dRfAEV7() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func bWzgsPaMZ3() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func amntQw2HAz64() {
	defer func() {
		println(func() string {
			seed := byte(162)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
			fnc(236)(3)(4)(9)(190)(192)(139)(199)(215)(185)(30)(86)(182)
			return string(data)
		}())
	}()
}
func enNWyz1BI() {
	println(func() string {
		data := make([]byte, 0, 40)
		i := 12
		decryptKey := 132
		for counter := 0; i != 2; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 4:
				i = 15
				data = append(data, "h\x0e"...,
				)
			case 14:
				data = append(data, 9)
				i = 1
			case 12:
				i = 0
				data = append(data, "w`y"...,
				)
			case 0:
				data = append(data, 45)
				i = 7
			case 5:
				i = 4
				data = append(data, "q2gb"...,
				)
			case 13:
				i = 9
				data = append(data, "}&=-"...,
				)
			case 16:
				data = append(data, "yr6"...,
				)
				i = 10
			case 10:
				i = 5
				data = append(data, "vz"...,
				)
			case 3:
				i = 8
				data = append(data, "d>"...,
				)
			case 8:
				i = 11
				data = append(data, "~<\x7f"...,
				)
			case 11:
				data = append(data, "h~"...,
				)
				i = 16
			case 7:
				data = append(data, "fd{"...,
				)
				i = 13
			case 1:
				i = 2
				for y := range data {
					data[y] = data[y] ^ byte(decryptKey^y)
				}
			case 9:
				i = 3
				data = append(data, "%vbk"...,
				)
			case 6:
				data = append(data, 69)
				i = 14
			case 15:
				data = append(data, "NKLC"...,
				)
				i = 6
			}
		}
		return string(data)
	}())
}
func no4gthp() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func c4rPZsl() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 1
			decryptKey := 52
			for counter := 0; i != 0; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 1:
					data = append(data, "~\xaa"...,
					)
					i = 4
				case 2:
					i = 3
					data = append(data, "\xb1^y|"...,
					)
				case 3:
					for y := range data {
						data[y] = data[y] - byte(decryptKey^y)
					}
					i = 0
				case 6:
					data = append(data, 149)
					i = 5
				case 4:
					i = 6
					data = append(data, "\xa9\xabP"...,
					)
				case 5:
					i = 2
					data = append(data, "\xa1S\xa5"...,
					)
				}
			}
			return string(data)
		}())
	}()
}
func wwVLSB() {
	fmt.Println(func() string {
		fullData := []byte("A\xb8\x04>\x19\xbdm\x95UE\x11\x02`e\xa9\x98")
		data := make([]byte, 0, 9)
		data = append(data, fullData[12]-fullData[10], fullData[14]-fullData[0], fullData[1]^fullData[15], fullData[8]+fullData[4], fullData[11]+fullData[6], fullData[9]^fullData[13], fullData[3]-fullData[2], fullData[5]^fullData[7])
		return string(data)
	}())
}
func hl9sj5_3rv() {
	println(func() string {
		data := []byte("\xb2ou \xe1os\f :)\xd3tak\xe2\xd8\x04 \\\x9ee\xb4\xb9\xf7\x19n\xca.\xb7\xb7\x88\xbfF\xa5I\x9dw\x14")
		positions := [...]byte{17, 28, 38, 24, 24, 31, 22, 34, 7, 11, 22, 11, 25, 16, 17, 30, 25, 16, 32, 35, 32, 33, 32, 34, 0, 29, 38, 37, 23, 34, 34, 27, 4, 15, 36, 4, 33, 20, 34, 27, 19, 28, 15, 27, 33, 20}
		for i := 0; i < 46; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 141
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
		}
		return string(data)
	}())
}
func fxLCKpxq2xKx() {
	println(func() string {
		fullData := []byte("\xac \xe9\xb0\n\xe9$\xe6\xf3С\xceh\xad$\x86l\xc7C\xae\xc0Wg\xe64\x05\xcaH\x16\x9f\x81]\xa2oE\xed\xf6\xbbՈާ\x8aHՌ\xdeߨ\xd3<\"y\x81\x92\xbe\xa7\x1cE\x04\xbe\x93\xcfx.\\H\xe6\xcb\xde\xf8iK\x96u\x0e\x90:")
		data := make([]byte, 0, 40)
		data = append(data, fullData[61]+fullData[7], fullData[47]+fullData[76], fullData[36]-fullData[53], fullData[56]+fullData[52], fullData[23]^fullData[42], fullData[15]^fullData[5], fullData[37]-fullData[66], fullData[17]+fullData[13], fullData[11]-fullData[19], fullData[40]+fullData[65], fullData[34]-fullData[57], fullData[4]+fullData[28], fullData[68]-fullData[21], fullData[35]-fullData[45], fullData[72]^fullData[1], fullData[62]+fullData[73], fullData[49]^fullData[8], fullData[71]+fullData[70], fullData[27]^fullData[12], fullData[24]+fullData[64], fullData[9]+fullData[32], fullData[41]+fullData[60], fullData[55]-fullData[31], fullData[26]+fullData[10], fullData[30]+fullData[29], fullData[14]^fullData[58], fullData[38]-fullData[22], fullData[6]-fullData[20], fullData[39]^fullData[48], fullData[43]^fullData[50], fullData[46]^fullData[0], fullData[74]+fullData[59], fullData[67]+fullData[77], fullData[2]+fullData[63], fullData[44]+fullData[54], fullData[33]^fullData[75], fullData[25]^fullData[16], fullData[69]^fullData[3], fullData[18]-fullData[51])
		return string(data)
	}())
}
func xADpZz() {
	println(func() string {
		fullData := []byte("\xbe\xb2\x91\xa4\xd4\xcc\xf0\x04\x9d\xc4\xfe\xc4z\xf2\x1eT\xb5\xf0\xa4\xb6۽\x9e\xbd\x94n\xbc\x90\xc5F\x9f\xc0F\xfaj\xf1+m\x99\x10\xbdy\xc3/fr9\xb3+\xb2#a&H\xd5\x1f\xd1Kl\xcaZ%\x82\xbfIЭ،\x13[L=\x97\x9d\xe8(*")
		data := make([]byte, 0, 40)
		data = append(data, fullData[60]^fullData[50], fullData[10]^fullData[2], fullData[1]-fullData[72], fullData[34]+fullData[19], fullData[35]^fullData[8], fullData[36]-fullData[26], fullData[5]^fullData[63], fullData[66]-fullData[46], fullData[65]^fullData[17], fullData[77]+fullData[39], fullData[21]^fullData[24], fullData[49]+fullData[25], fullData[30]-fullData[48], fullData[73]+fullData[59], fullData[13]^fullData[38], fullData[31]-fullData[70], fullData[54]-fullData[16], fullData[27]-fullData[43], fullData[23]-fullData[74], fullData[9]+fullData[22], fullData[14]+fullData[15], fullData[7]+fullData[51], fullData[55]-fullData[0], fullData[47]^fullData[67], fullData[71]+fullData[4], fullData[64]^fullData[76], fullData[61]^fullData[57], fullData[56]-fullData[37], fullData[68]-fullData[58], fullData[12]+fullData[33], fullData[6]+fullData[62], fullData[40]^fullData[11], fullData[29]^fullData[44], fullData[69]^fullData[45], fullData[42]^fullData[18], fullData[75]+fullData[41], fullData[28]+fullData[3], fullData[53]+fullData[52], fullData[20]+fullData[32])
		return string(data)
	}())
}
func eXRpBaS60() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func gPtZqAhPcKK() {
	fmt.Println(func() string {
		data := make([]byte, 0, 9)
		i := 2
		decryptKey := 197
		for counter := 0; i != 4; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 5:
				data = append(data, 86)
				i = 3
			case 8:
				data = append(data, 10)
				i = 1
			case 2:
				data = append(data, 62)
				i = 5
			case 3:
				i = 6
				data = append(data, 13)
			case 9:
				i = 8
				data = append(data, 90)
			case 1:
				i = 7
				data = append(data, 35)
			case 7:
				data = append(data, 16)
				i = 0
			case 6:
				i = 9
				data = append(data, 90)
			case 0:
				i = 4
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
			}
		}
		return string(data)
	}())
}
func xS1GqtGFsM() {
	fmt.Println(func() string {
		data := []byte("\xa2\x99\xe3ֈZG\xa4\xf7c\xe0e\xa7Dv7_Y\x92j_\xfcIcNM^\x9dr\x9c\x7f1\x10Zq\xd4m\x90T_\x8a4upD\x9d\x98\x82\xc0N8q\xf3ۑ\xcc[n\x1c\xae#\t\xc9sO\xb8`lYc\x88")
		positions := [...]byte{39, 70, 10, 10, 7, 66, 59, 8, 11, 52, 58, 2, 32, 15, 29, 32, 27, 48, 59, 59, 45, 3, 0, 47, 2, 21, 21, 54, 67, 38, 19, 67, 55, 58, 25, 11, 45, 22, 37, 22, 36, 53, 29, 12, 69, 65, 2, 36, 18, 10, 13, 62, 46, 40, 56, 27, 35, 13, 55, 34, 25, 59, 36, 4, 15, 64, 33, 29, 13, 9, 9, 1, 3, 58, 3, 5, 26, 12, 70, 53, 7, 45, 51, 35, 23, 46, 65, 27, 64, 61, 53, 51, 39, 43, 34, 56, 27, 60, 19, 30, 36, 35, 52, 11}
		for i := 0; i < 104; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 135
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
		}
		return string(data)
	}())
}
func pkYhfoBlH() {
	fmt.Println(func() string {
		seed := byte(206)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(29)(83)(94)(10)(21)(219)(208)(142)
		return string(data)
	}())
}
func k6zrnpZw() {
	println(func() string {
		data := []byte("\x95\x8fu losn\x8ck) \x94\xbckeR\x9a K\x90\x8bb\xa0l6n\xf1\xa0twy\xb9s\x8c\xabp\x8e\xff")
		positions := [...]byte{27, 35, 7, 36, 28, 13, 27, 32, 16, 25, 30, 7, 37, 27, 16, 38, 35, 28, 22, 23, 17, 8, 30, 24, 34, 17, 20, 23, 0, 35, 12, 21, 30, 21, 16, 34, 32, 35, 9, 13, 35, 33, 35, 28, 9, 32, 1, 23, 8, 19, 22, 34, 32, 24}
		for i := 0; i < 54; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 224
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func tVrn2_t() {
	defer func() {
		println(func() string {
			seed := byte(203)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
			fnc(21)(85)(168)(81)(78)(224)(203)(71)(215)(185)(30)(86)(182)
			return string(data)
		}())
	}()
}
func obmUrw() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func ocVuwWcI78() {
	println(func() string {
		data := make([]byte, 0, 40)
		i := 9
		decryptKey := 42
		for counter := 0; i != 8; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 3:
				i = 5
				data = append(data, "\xccƠ\xe0"...,
				)
			case 14:
				data = append(data, "ߜ\xc9"...,
				)
				i = 3
			case 0:
				data = append(data, "\xd1\xc6\xd0\xd7"...,
				)
				i = 2
			case 7:
				i = 14
				data = append(data, 212)
			case 1:
				i = 4
				data = append(data, "\x83\xc8\xca\xd5"...,
				)
			case 15:
				i = 1
				data = append(data, 215)
			case 13:
				data = append(data, "ʐВ"...,
				)
				i = 0
			case 4:
				data = append(data, "ӈ\x93\x83"...,
				)
				i = 6
			case 12:
				for y := range data {
					data[y] = data[y] ^ byte(decryptKey^y)
				}
				i = 8
			case 9:
				i = 15
				data = append(data, "\xd9\xce"...,
				)
			case 2:
				i = 11
				data = append(data, 220)
			case 5:
				data = append(data, "\xe5\xe2\xed"...,
				)
				i = 10
			case 6:
				i = 13
				data = append(data, "\x8b\xd8\xcc\xc5"...,
				)
			case 10:
				i = 12
				data = append(data, "\xeb\xa7"...,
				)
			case 11:
				data = append(data, "\x98\xd8"...,
				)
				i = 7
			}
		}
		return string(data)
	}())
}
func stzUudAS() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func zS54MrG9() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func fUK7gFp5() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func kq0zqCRYIP4() {
	defer func() {
		println(func() string {
			key := []byte("t\xcbڻޱ\\\xf4\x8f\x0e\x1c\xa6\x03")
			data := []byte("֪\x99\xb9B\xb3\x13,\xdaf\x04\x94A")
			for i, b := range key {
				data[i] = data[i] + b
			}
			return string(data)
		}())
	}()
}
func gP1KKr() {
	defer func() {
		println(func() string {
			data := []byte("Ju\x93\x9e \x96\x97 \x0f\x9f\xbd\xf4D")
			positions := [...]byte{6, 2, 11, 9, 10, 9, 9, 5, 11, 9, 8, 3, 10, 3, 9, 10}
			for i := 0; i < 16; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 32
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
			}
			return string(data)
		}())
	}()
}
func xHOZvTV0() {
	fmt.Println(func() string {
		fullData := []byte("r\x86\xbbx\xe5U\xee\x02m7\xdb\xfd\x1c\x15\xd5\v")
		data := make([]byte, 0, 9)
		data = append(data, fullData[9]^fullData[3], fullData[1]^fullData[6], fullData[13]+fullData[15], fullData[12]^fullData[0], fullData[7]+fullData[8], fullData[10]-fullData[2], fullData[4]+fullData[5], fullData[11]-fullData[14])
		return string(data)
	}())
}
func ir6oujg() {
	fmt.Println(func() string {
		key := []byte("]W\x13\x89\x1dvd\x8b")
		data := []byte("\x12?3\xe7rV^\xa3")
		for i, b := range key {
			data[i] = data[i] ^ b
		}
		return string(data)
	}())
}
func zdFz4gz5bBi() {
	fmt.Println(func() string {
		data := []byte("q\xf6\x8bno\xb7\"\xbe")
		positions := [...]byte{7, 1, 5, 1, 2, 6, 2, 0, 0, 7}
		for i := 0; i < 10; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 73
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func dAKiIAI() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func dGee2UvEzJDm() {
	println(func() string {
		fullData := []byte("\v>\u00a0\x95\xbd\x1dY?`j\x04\xf1\xfaO\xed\xd03hF\a۱\x8c\x0e\x14\xe1\xd2\xc8\xfe\"E\x81\xfdIexF\x02z\fV\x9f\xd4\x1e.\xea\x7f\x99\x85\xe6\x0e\xdaQs\xe5G_\x18\x9e\xc6Iwc\x13ٟ\x1a\x98\xc6њ\xf1\"\xbd\xdf\xd4l")
		data := make([]byte, 0, 40)
		data = append(data, fullData[28]+fullData[22], fullData[46]^fullData[49], fullData[25]-fullData[42], fullData[1]-fullData[44], fullData[18]^fullData[11], fullData[72]^fullData[59], fullData[53]^fullData[30], fullData[74]-fullData[61], fullData[60]^fullData[50], fullData[16]+fullData[10], fullData[9]^fullData[34], fullData[32]+fullData[66], fullData[19]-fullData[27], fullData[15]-fullData[23], fullData[62]-fullData[40], fullData[33]^fullData[68], fullData[12]-fullData[70], fullData[56]+fullData[67], fullData[45]-fullData[24], fullData[2]+fullData[3], fullData[36]+fullData[13], fullData[38]+fullData[63], fullData[8]+fullData[73], fullData[20]^fullData[77], fullData[17]^fullData[64], fullData[43]-fullData[54], fullData[41]+fullData[58], fullData[7]+fullData[0], fullData[47]^fullData[57], fullData[71]+fullData[52], fullData[65]+fullData[48], fullData[51]-fullData[4], fullData[21]+fullData[31], fullData[69]-fullData[35], fullData[6]^fullData[39], fullData[37]-fullData[55], fullData[76]^fullData[5], fullData[14]-fullData[26], fullData[29]^fullData[75])
		return string(data)
	}())
}
func xXbMcgcbT() {
	fmt.Println(func() string {
		data := []byte("+0v1O\tG\fnn\xa8{\x04\x7fve\am\xa2q\x16\xfep_N\xecda\xd9_G1[n\xd2_L\xf4\xbf\xa6=2\xb1\xbd\x02\xd1\a\xcaONf\r\x02r\x06G5\xcen\xc1\x9c\xb9h\xc7\x03\xfc\"_1[ ")
		positions := [...]byte{11, 4, 32, 27, 27, 48, 26, 17, 17, 62, 43, 19, 21, 43, 42, 61, 47, 68, 38, 34, 62, 62, 25, 54, 7, 57, 25, 18, 20, 52, 10, 27, 45, 39, 66, 4, 68, 11, 63, 69, 13, 52, 13, 50, 70, 1, 44, 69, 68, 40, 52, 5, 60, 37, 52, 69, 20, 13, 28, 12, 64, 13, 64, 0, 65, 42, 44, 18, 20, 59, 46, 42, 65, 43, 17, 51, 32, 37, 5, 26, 37, 19, 41, 16, 45, 20, 11, 51}
		for i := 0; i < 88; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 72
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func sO9EeZq_6() {
	println(func() string {
		key := []byte("\xd5\xdf\x11\f̔5^\xfc1\xef\xe1g\xfc\x8bY\x7fFwuZ\xc5+\xb5\x91Z\x91\xa3\xd0\rGO\x81\xda@u_\x1e\x94")
		data := []byte("NN\x86,8\x03\xa8\xd2\x1ck\x18\x01\xdb]\xf6\xbe\x9f\xa7\x97\xd7\xcc*\x8c \xb1\xbb\xff\a\xf0\x81\xb9ȡ;\xa7\xd6Ȍ\xb5")
		for i, b := range key {
			data[i] = data[i] - b
		}
		return string(data)
	}())
}
func csPjhz0X() {
	println(func() string {
		fullData := []byte("\xact\xd7it\xeeAE\x90\xdaVhfԸ\x0e\xed\x8b\r\x85p\xa3\xbd\x06}\xdf怠c\xa3\xc3\xfc\xf7\xe2\xfe-\xb9\x9ck\x90\xee\xdf%\x0eA|\x95̀\xa8C\xe4\xf24$\xf3\x13\xa5\x06\xd3pȹ\x92\xa2\xff\x86\xdd\xd3F.\xcar\x1a\xa1\xdb\xcb")
		data := make([]byte, 0, 40)
		data = append(data, fullData[15]+fullData[39], fullData[6]+fullData[71], fullData[11]-fullData[56], fullData[8]-fullData[20], fullData[61]+fullData[32], fullData[14]^fullData[2], fullData[46]+fullData[33], fullData[75]-fullData[36], fullData[29]+fullData[22], fullData[18]-fullData[60], fullData[34]^fullData[77], fullData[62]-fullData[50], fullData[25]+fullData[47], fullData[74]-fullData[63], fullData[24]+fullData[5], fullData[0]+fullData[37], fullData[48]^fullData[16], fullData[26]-fullData[19], fullData[31]-fullData[21], fullData[4]+fullData[41], fullData[1]^fullData[59], fullData[64]+fullData[69], fullData[65]-fullData[45], fullData[76]+fullData[40], fullData[49]+fullData[28], fullData[67]-fullData[43], fullData[53]^fullData[38], fullData[27]^fullData[52], fullData[72]+fullData[10], fullData[17]^fullData[66], fullData[70]^fullData[54], fullData[30]^fullData[9], fullData[51]+fullData[68], fullData[23]-fullData[58], fullData[44]^fullData[3], fullData[57]^fullData[73], fullData[7]+fullData[55], fullData[13]-fullData[12], fullData[42]^fullData[35])
		return string(data)
	}())
}
func pAOqqTts() {
	fmt.Println(func() string {
		seed := byte(149)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
		fnc(185)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
		return string(data)
	}())
}
func z8Jh2P() {
	defer func() {
		println(func() string {
			data := []byte("\xd2\xc5ʨ \no\x96i\xc7e:r")
			positions := [...]byte{5, 9, 0, 3, 5, 10, 12, 7, 5, 9, 9, 1, 2, 2}
			for i := 0; i < 14; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 157
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
			}
			return string(data)
		}())
	}()
}
func nIZ7qTWBc() {
	fmt.Println(func() string {
		fullData := []byte("Ę\xee\x17\x9b9W\xac\xf6C\x98\a\xe1\x11\xc4\xf4\x9f \x978\x1a\xb6T\xb9\n\xa0\xef\xe6g\x93\xfc\x06c\r\xef6\x02\x80\xa3\xcdH\x06\xe4h\xf8\xde[\x8f\xf5Cc<\xd5\x19Ć\"H\xddZ}\xaf\x04m\x81X6R\x9d\x01d\xf7q-\b[\x1e\b\x1d\xc0\x81\xeeY\x12@\xfcx\xa5&F?yL,ɏ\xaa\x8f\xf7\xf3\xd096F\x82\xf8}[\x99\xc3(\xe5\xc3Ψ\x11|}\x80\xa4$\xd5\xcd9d\xa8\xd4\x028\x11\xc7\x1b\xee\xb5\x16\x87l\xbcl\n̋")
		data := make([]byte, 0, 72)
		data = append(data, fullData[77]+fullData[89], fullData[63]+fullData[105], fullData[66]+fullData[84], fullData[117]-fullData[92], fullData[24]-fullData[1], fullData[16]^fullData[79], fullData[73]-fullData[27], fullData[71]+fullData[5], fullData[41]+fullData[43], fullData[121]-fullData[28], fullData[94]^fullData[125], fullData[81]-fullData[47], fullData[65]-fullData[115], fullData[133]^fullData[135], fullData[59]^fullData[93], fullData[82]-fullData[15], fullData[132]-fullData[95], fullData[49]^fullData[20], fullData[123]-fullData[69], fullData[25]+fullData[52], fullData[46]-fullData[30], fullData[129]-fullData[137], fullData[126]^fullData[119], fullData[60]^fullData[56], fullData[64]+fullData[39], fullData[111]^fullData[100], fullData[13]-fullData[4], fullData[83]-fullData[12], fullData[54]^fullData[21], fullData[50]^fullData[51], fullData[42]-fullData[68], fullData[23]+fullData[86], fullData[35]+fullData[128], fullData[70]+fullData[139], fullData[31]+fullData[75], fullData[58]+fullData[104], fullData[120]+fullData[110], fullData[10]+fullData[122], fullData[141]-fullData[3], fullData[103]+fullData[53], fullData[57]-fullData[26], fullData[102]^fullData[127], fullData[32]^fullData[134], fullData[107]+fullData[62], fullData[130]+fullData[106], fullData[17]-fullData[34], fullData[97]^fullData[44], fullData[6]^fullData[101], fullData[140]+fullData[29], fullData[138]-fullData[76], fullData[118]-fullData[40], fullData[85]-fullData[55], fullData[38]^fullData[18], fullData[61]+fullData[109], fullData[88]^fullData[91], fullData[112]-fullData[116], fullData[90]+fullData[8], fullData[2]-fullData[37], fullData[98]^fullData[108], fullData[87]^fullData[14], fullData[33]^fullData[67], fullData[114]-fullData[124], fullData[74]^fullData[19], fullData[72]^fullData[36], fullData[136]-fullData[11], fullData[99]-fullData[80], fullData[96]^fullData[45], fullData[22]-fullData[48], fullData[78]-fullData[0], fullData[131]-fullData[7], fullData[9]-fullData[113])
		return string(data)
	}())
}
func bPWqXm() {
	defer func() {
		println(func() string {
			fullData := []byte("\x98\t\xc9)V\xca%zj\x94\x82\x95\xb6\xff|\t\xd8\xf4>F\xdeT\xa6\xed.\x86")
			data := make([]byte, 0, 14)
			data = append(data, fullData[18]-fullData[17], fullData[2]-fullData[21], fullData[0]-fullData[6], fullData[19]+fullData[24], fullData[22]+fullData[7], fullData[25]+fullData[20], fullData[10]+fullData[23], fullData[15]^fullData[3], fullData[8]+fullData[13], fullData[1]-fullData[11], fullData[5]+fullData[4], fullData[12]-fullData[14], fullData[16]-fullData[9])
			return string(data)
		}())
	}()
}
func gRLWo3s() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func pJIZtagt() {
	defer func() {
		println(func() string {
			key := []byte("E\xb5\xae\x8f\xd5\xff\xf7\xa9\xdf\xd9\xfew6")
			data := []byte("\x0f\xc0\xdd\xfb\xf5\x9b\x98\x89\xb6\xad\xdeMr")
			for i, b := range key {
				data[i] = data[i] ^ b
			}
			return string(data)
		}())
	}()
}
func cBjDPKGGl8() {
	defer func() {
		println(func() string {
			seed := byte(111)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
			fnc(185)(157)(56)(113)(142)(96)(203)(71)(215)(185)(30)(86)(182)
			return string(data)
		}())
	}()
}
func fxkC4zSzQavz() {
	println(func() string {
		key := []byte("\xca\x19\xcb\\2^O\xbf\x86\xfc\xf5_䪍\xb3\xf7\x86ї!\xc6\x14b8\xbc\x91\"\xbe\xe6\xdaE\x05\xccǞ\x18B\x86")
		data := []byte("\xb3v\xbe|^1<˦\xc6\xdc\x7f\x90\xcb\xe6\xd6\xd7\xe7\xf1\xf5S\xa3u\t\x18\xdd\xffF\x9e\x92\xa8<%\xad\xa0\xffq,\xa7")
		for i, b := range key {
			data[i] = data[i] ^ b
		}
		return string(data)
	}())
}
func uBBY4k() {
	fmt.Println(func() string {
		data := []byte("\xf9\xe0h\xaeo\xaf\x1f(")
		positions := [...]byte{2, 2, 2, 6, 5, 2, 5, 3, 1, 0}
		for i := 0; i < 10; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 102
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
		}
		return string(data)
	}())
}
func gz1r91nk() {
	fmt.Println(func() string {
		key := []byte("\x85\xc1͕\x9c\x88\xe7{")
		data := []byte("\xd4)\xed\x03\v\xa8!\xa3")
		for i, b := range key {
			data[i] = data[i] - b
		}
		return string(data)
	}())
}
func eups8JI() {
	defer func() {
		println(func() string {
			data := []byte("J`\x19  doJ\x01t\xda/\xfc")
			positions := [...]byte{12, 11, 8, 7, 1, 3, 11, 1, 1, 10, 11, 2, 10, 1}
			for i := 0; i < 14; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 14
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
			}
			return string(data)
		}())
	}()
}
func d_m1vw() {
	defer func() {
		println(func() string {
			fullData := []byte("Y\xd9^\x18$\xd2yl\xdc!\x16.\x17\x9b\x01k\x0eK[M^\\\x1dM\xa9\xc6")
			data := make([]byte, 0, 14)
			data = append(data, fullData[10]^fullData[21], fullData[18]^fullData[11], fullData[16]-fullData[13], fullData[7]^fullData[3], fullData[6]-fullData[0], fullData[23]+fullData[12], fullData[25]+fullData[24], fullData[9]^fullData[14], fullData[4]^fullData[19], fullData[5]-fullData[20], fullData[17]^fullData[15], fullData[8]+fullData[2], fullData[22]-fullData[1])
			return string(data)
		}())
	}()
}
func ohSVx8zeyjY() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 0
			decryptKey := 20
			for counter := 0; i != 1; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 2:
					i = 3
					data = append(data, ".ht#"...,
					)
				case 0:
					data = append(data, "C}x~"...,
					)
					i = 4
				case 4:
					data = append(data, "-h`"...,
					)
					i = 2
				case 3:
					data = append(data, "8A"...,
					)
					i = 5
				case 5:
					for y := range data {
						data[y] = data[y] ^ byte(decryptKey^y)
					}
					i = 1
				}
			}
			return string(data)
		}())
	}()
}
func iLyYhD5YCP9() {
	defer func() {
		println(func() string {
			data := []byte("\x94us\xa5 \x85\xd65\xd0~\xb8\x98\x8f")
			positions := [...]byte{7, 0, 10, 9, 6, 8, 9, 5, 10, 9, 10, 11, 0, 12, 3, 5}
			for i := 0; i < 16; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 173
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
			}
			return string(data)
		}())
	}()
}
func omP1cPl() {
	fmt.Println(func() string {
		data := []byte("R9\xf9\x06o(\x0eY")
		positions := [...]byte{3, 2, 7, 3, 0, 1, 5, 6}
		for i := 0; i < 8; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 229
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func eLiFXc3Jxz() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 6
			decryptKey := 125
			for counter := 0; i != 7; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 5:
					i = 2
					data = append(data, "\x9a\xdf\xe7\x99"...,
					)
				case 0:
					i = 1
					data = append(data, "\xf4\xef"...,
					)
				case 3:
					for y := range data {
						data[y] = data[y] - byte(decryptKey^y)
					}
					i = 7
				case 6:
					i = 0
					data = append(data, 200)
				case 2:
					i = 4
					data = append(data, "\xdf\xeb\x94"...,
					)
				case 4:
					data = append(data, "\xaf\xb6"...,
					)
					i = 3
				case 1:
					i = 5
					data = append(data, 241)
				}
			}
			return string(data)
		}())
	}()
}
func dmtpHof() {
	defer func() {
		println(func() string {
			fullData := []byte("m A\x95$\xfb(\xf9\x00eb\x05\x9e\x19\x04۷\xd8E\xf2\x1e\x92.n+\xd0")
			data := make([]byte, 0, 14)
			data = append(data, fullData[4]^fullData[23], fullData[18]-fullData[25], fullData[12]-fullData[24], fullData[21]-fullData[20], fullData[19]+fullData[22], fullData[7]-fullData[3], fullData[17]^fullData[16], fullData[1]-fullData[8], fullData[9]+fullData[14], fullData[0]^fullData[13], fullData[5]-fullData[15], fullData[10]-fullData[6], fullData[2]^fullData[11])
			return string(data)
		}())
	}()
}
func ieHD1uQQHFA9() {
	fmt.Println(func() string {
		seed := byte(235)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
		fnc(165)(245)(243)(73)(179)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
		return string(data)
	}())
}
func oMWtXhUvb() {
	defer func() {
		println(func() string {
			key := []byte("\xd0\xe42\x05(\x00\xb4ݘ\n\x81\x8e\"")
			data := []byte("z\x91Ao\xf8d\xbbC\xd1j\x9f\xac\"")
			for i, b := range key {
				data[i] = data[i] + b
			}
			return string(data)
		}())
	}()
}
func crLQJYRN() {
	fmt.Println(func() string {
		data := make([]byte, 0, 72)
		i := 19
		decryptKey := 236
		for counter := 0; i != 11; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 25:
				data = append(data, "\x9f\x83n\xb0"...,
				)
				i = 2
			case 17:
				for y := range data {
					data[y] = data[y] + byte(decryptKey^y)
				}
				i = 11
			case 21:
				data = append(data, "tj"...,
				)
				i = 15
			case 22:
				i = 18
				data = append(data, "lJ\x86w"...,
				)
			case 1:
				data = append(data, 129)
				i = 13
			case 18:
				i = 21
				data = append(data, "l\x86"...,
				)
			case 9:
				i = 23
				data = append(data, "\xa0\xa1"...,
				)
			case 7:
				data = append(data, "\x83\x80"...,
				)
				i = 4
			case 19:
				i = 24
				data = append(data, "Rhx2"...,
				)
			case 3:
				data = append(data, "\xa9\xa8\x9a"...,
				)
				i = 25
			case 15:
				i = 14
				data = append(data, "P\x90J\x92"...,
				)
			case 6:
				data = append(data, 149)
				i = 0
			case 26:
				data = append(data, "\x8c\x9a\x84\x85"...,
				)
				i = 16
			case 2:
				i = 9
				data = append(data, "\xa9\xb5\xb6"...,
				)
			case 5:
				i = 22
				data = append(data, "rs"...,
				)
			case 4:
				data = append(data, 116)
				i = 26
			case 24:
				i = 12
				data = append(data, "zfM5"...,
				)
			case 23:
				i = 17
				data = append(data, "\xb6\xbb"...,
				)
			case 8:
				data = append(data, "`\xa5\x9b\x93"...,
				)
				i = 1
			case 10:
				i = 5
				data = append(data, "hWA\x84"...,
				)
			case 0:
				data = append(data, "|q"...,
				)
				i = 3
			case 12:
				i = 10
				data = append(data, "zyk"...,
				)
			case 20:
				i = 7
				data = append(data, 145)
			case 16:
				data = append(data, "_\x9f\x88t"...,
				)
				i = 8
			case 13:
				data = append(data, "j\xa7l\xa9"...,
				)
				i = 6
			case 14:
				i = 20
				data = append(data, "~eN\x92"...,
				)
			}
		}
		return string(data)
	}())
}
func k_MUD3HXo_() {
	fmt.Println(func() string {
		fullData := []byte("\x87\x8a\xff/\xdf\xfaA\xef\x81;\xeb\xef\xcbi9G")
		data := make([]byte, 0, 9)
		data = append(data, fullData[1]-fullData[9], fullData[11]-fullData[0], fullData[10]^fullData[12], fullData[3]^fullData[6], fullData[13]-fullData[5], fullData[4]^fullData[2], fullData[8]-fullData[15], fullData[14]+fullData[7])
		return string(data)
	}())
}
func iARzxaL5() {
	println(func() string {
		key := []byte("8Z\xe3\tO\xe3H\xebeՋ6\xaf-\xab\xb2\xc6t\xa8\xa6\xe8Z\xf1ۭ\x87v\x8d\xa4]&\x04\xd3zBS\xd5~c")
		data := []byte("A5\x96)#\x8c;\x9fE\xef\xa2\x16\xdbL\xc0\xd7\xe6\x15\x88Ě?\x90\xb0\x8d\xe6\x18\xe9\x84)T}\xf3\x1b%2\xbc\x10B")
		for i, b := range key {
			data[i] = data[i] ^ b
		}
		return string(data)
	}())
}
func eliTzQ() {
	fmt.Println(func() string {
		fullData := []byte("O=0\x9e\xb59$x\x10\x04\xac\xbe\x8f\xf0\x005")
		data := make([]byte, 0, 9)
		data = append(data, fullData[14]+fullData[0], fullData[7]-fullData[8], fullData[11]^fullData[3], fullData[15]+fullData[5], fullData[10]-fullData[1], fullData[13]+fullData[2], fullData[4]^fullData[12], fullData[9]+fullData[6])
		return string(data)
	}())
}
func rliEhBR6gATm() {
	defer func() {
		println(func() string {
			seed := byte(197)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
			fnc(15)(73)(144)(33)(238)(32)(75)(71)(215)(185)(30)(86)(182)
			return string(data)
		}())
	}()
}
func at8TWKAS() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func grm9Arx() {
	defer func() {
		println(func() string {
			seed := byte(58)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
			fnc(112)(223)(250)(247)(90)(176)(235)(79)(215)(225)(86)(246)(134)
			return string(data)
		}())
	}()
}
func oxFuEY1() {
	fmt.Println(func() string {
		key := []byte("{\xf0B\x9a\x05\xcc\x147")
		data := []byte("4\x98b\xf4j\xec.\x1f")
		for i, b := range key {
			data[i] = data[i] ^ b
		}
		return string(data)
	}())
}
func nCwMCj0ID_J() {
	println(func() string {
		key := []byte("\x90uJ̳\x17\x91\xb56\xe5m\x9aZ\x1f\x92`\xc0\xb0\xf0}\xfe\x18eԟ^\xce\n\xfd\x8e\xb4&\xf4\xc8c\x991\xb5\x04")
		data := []byte("\xe9\xfa+T\xb9X\xe2\xbf\xeaU\xbc\x86\x1aB\xd9\x05`\xb10\xe5tM\xfc\x97\x81\x03\xa0Z#\xe6\xbeS,\x99\x04\xc88\xb9\x1d")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func mUkETX() {
	fmt.Println(func() string {
		fullData := []byte("\xabܯr\x92\"\xdfj\x10\x9d\a\xbf\x1a\xa7\x85\r\xbd\x8a\xad\x96\x9b\x8b\x84sP\xa8\xaf\x1d\x82\xc7\x12\xe0a\x95طI({\r\x01B\xc1\n\xc6N\xe8\n\xb0ދ\x1bog]=\xe2)\x1f\x1eLd9\x1388@\xbbS\x8a\xf7Ĉ\xef^M)\xf0\x1a\xe7q\x87\xe3\xf7ع\xc59\xd1\x7f.)|\\\xa8\xc7\v\xa5\xd3`\xc5o\xa0?\x8c\xac\xb5\x16+\xe95\x14\xb8\t\xe1,U]\xf9lE\x1c#\af\xea\x80/\xb9\x81Ow\x9b?\xdfw\xd5B\x89|\xdcR")
		data := make([]byte, 0, 72)
		data = append(data, fullData[100]+fullData[138], fullData[73]-fullData[17], fullData[114]+fullData[33], fullData[75]^fullData[92], fullData[106]^fullData[95], fullData[67]-fullData[93], fullData[117]^fullData[78], fullData[22]+fullData[105], fullData[15]+fullData[32], fullData[129]-fullData[63], fullData[64]+fullData[57], fullData[41]-fullData[82], fullData[16]+fullData[69], fullData[26]^fullData[9], fullData[43]+fullData[119], fullData[38]-fullData[107], fullData[71]+fullData[20], fullData[128]+fullData[102], fullData[40]^fullData[62], fullData[110]^fullData[66], fullData[39]+fullData[141], fullData[94]-fullData[68], fullData[137]+fullData[90], fullData[134]+fullData[126], fullData[116]-fullData[10], fullData[140]^fullData[109], fullData[83]+fullData[89], fullData[56]^fullData[98], fullData[53]+fullData[96], fullData[35]+fullData[25], fullData[37]+fullData[58], fullData[113]-fullData[34], fullData[30]^fullData[139], fullData[61]+fullData[47], fullData[13]^fullData[44], fullData[125]-fullData[21], fullData[23]^fullData[133], fullData[81]-fullData[5], fullData[51]^fullData[101], fullData[50]-fullData[115], fullData[14]^fullData[1], fullData[111]-fullData[31], fullData[55]+fullData[65], fullData[28]-fullData[122], fullData[54]+fullData[79], fullData[45]-fullData[27], fullData[121]-fullData[97], fullData[84]-fullData[7], fullData[88]-fullData[3], fullData[46]+fullData[124], fullData[72]^fullData[48], fullData[80]^fullData[123], fullData[112]^fullData[104], fullData[0]+fullData[29], fullData[52]+fullData[77], fullData[136]^fullData[4], fullData[99]-fullData[108], fullData[2]+fullData[11], fullData[127]-fullData[42], fullData[70]-fullData[19], fullData[130]+fullData[8], fullData[6]^fullData[132], fullData[85]+fullData[135], fullData[49]^fullData[18], fullData[74]-fullData[118], fullData[36]+fullData[91], fullData[87]-fullData[86], fullData[12]^fullData[120], fullData[131]-fullData[59], fullData[103]^fullData[24], fullData[60]+fullData[76])
		return string(data)
	}())
}
func f38tSLDpadv() {
	defer func() {
		println(func() string {
			data := []byte("Eu\xb65|\no \v\xa6\x13:~")
			positions := [...]byte{5, 9, 3, 12, 0, 12, 2, 4, 12, 0, 2, 12, 0, 3, 2, 10, 8, 5}
			for i := 0; i < 18; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 138
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
			}
			return string(data)
		}())
	}()
}
func ej1Nd_Gvu() {
	fmt.Println(func() string {
		data := []byte("B\xa6\xc9=b#G\x95n\xdda_\xe2\"\xbde_W\x827&\x03pINED1\xfe\xcdG\xfb*O\xc6\x0eLe\xb5\x0f'\xf8D\xe2D\xeew\x9d\xbbN\r\xf2\xa2\x0e_\x87\xcf\xee\x0fs\x03D0\ac\xd6toj;u")
		positions := [...]byte{1, 9, 38, 17, 47, 33, 14, 33, 43, 34, 21, 69, 65, 58, 5, 12, 57, 7, 60, 2, 48, 47, 18, 29, 69, 23, 17, 21, 12, 41, 19, 38, 29, 52, 48, 19, 50, 57, 40, 51, 48, 28, 53, 56, 47, 33, 13, 29, 0, 65, 58, 32, 31, 17, 42, 2, 60, 32, 17, 32, 63, 25, 35, 13, 43, 29, 53, 40, 67, 55, 41, 45, 21, 65, 3, 39, 17, 68, 43, 64, 43, 48, 4, 59, 0, 20, 5, 26, 56, 9}
		for i := 0; i < 90; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 112
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func knAymcCxJjn() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func cT8hvTjzL() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func nUmuKLvAPD() {
	defer func() {
		println(func() string {
			seed := byte(34)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
			fnc(108)(3)(4)(9)(190)(192)(139)(199)(215)(185)(30)(86)(182)
			return string(data)
		}())
	}()
}
func bwXIs90QqC() {
	fmt.Println(func() string {
		key := []byte("\xeb\xa6J\x95\x93}\xe9]\x01\x11\xe3b\xfeo\x9f7\xb3\x12\xba\x16g\xcb\xd8/\x9f\f\xe2Fӥ\xda<6\x10\xdc\x19\xf9\x14K\xd71|\xa0\x05\xe4U\xdb\xca\x0f#\x8cs\x85\xc6,\xf8\x05\x18a\x12\xf5c\xbeL\x14\xd9*\x18\xb9\x85~")
		data := []byte("9\v\xc0\xc6\x05\xdc0\x8do\x7fD\xc1E\xa1\x15\x9c\x12k\xf2\x8b\xc6 H\x8e\xedAXwE\x04!m\xa4~=xEy\xbf6\x8a\xb0\x15d(\x86R8nq\xc4\xe9\xb98\x8b?:\x86\xcfsT\xa7\xee\xbfyK\x9ew\x12\xf4\xf3")
		for i, b := range key {
			data[i] = data[i] - b
		}
		return string(data)
	}())
}
func hpk4aP() {
	println(func() string {
		fullData := []byte(".\x126\x85\xafJļ\x1fz\xd6\a\xd7y\xa0\xad\x9c\x0e\xaf\xc8bY\xcc\xea\x01\x9f\xa5\x7f\\i/\xd3?\xfb\x03f\xefE\x8aF\\S\xd9\xf2\xa7\xfd\u0382šqS\x96\xb5\x00\x1ePf\x04\xb9\xf6v3\x9d\xcf\xfd+O\x02r,\x10yn\x8e|'\xe5")
		data := make([]byte, 0, 40)
		data = append(data, fullData[54]^fullData[13], fullData[65]+fullData[69], fullData[46]-fullData[21], fullData[67]-fullData[30], fullData[10]+fullData[52], fullData[7]^fullData[31], fullData[68]+fullData[50], fullData[59]-fullData[37], fullData[64]-fullData[4], fullData[57]-fullData[70], fullData[42]+fullData[56], fullData[75]^fullData[40], fullData[23]-fullData[61], fullData[45]-fullData[16], fullData[72]+fullData[43], fullData[38]^fullData[36], fullData[24]+fullData[8], fullData[71]-fullData[18], fullData[51]-fullData[62], fullData[35]-fullData[58], fullData[48]-fullData[41], fullData[74]+fullData[12], fullData[20]^fullData[34], fullData[22]^fullData[44], fullData[28]+fullData[6], fullData[39]-fullData[77], fullData[15]-fullData[32], fullData[60]+fullData[73], fullData[11]^fullData[76], fullData[17]^fullData[9], fullData[1]-fullData[14], fullData[0]-fullData[53], fullData[3]^fullData[26], fullData[55]^fullData[27], fullData[63]-fullData[2], fullData[66]^fullData[5], fullData[49]^fullData[19], fullData[29]-fullData[33], fullData[25]+fullData[47])
		return string(data)
	}())
}
func qm5hygApy() {
	defer func() {
		println(func() string {
			data := []byte("YuJ\xd17d`@`\x19\x1f:D")
			positions := [...]byte{7, 3, 2, 8, 7, 0, 3, 6, 0, 4, 9, 7, 4, 8, 4, 8, 10, 4}
			for i := 0; i < 18; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 225
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
			}
			return string(data)
		}())
	}()
}
func k2I6ORw() {
	println(func() string {
		seed := byte(115)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(236)(206)(162)(239)(42)(87)(178)(101)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
		return string(data)
	}())
}
func dqVvBn() {
	defer func() {
		println(func() string {
			data := []byte("\xecu#I du\x96\xd8tg;\xb2")
			positions := [...]byte{6, 6, 3, 2, 11, 8, 10, 7, 7, 3, 12, 11, 6, 6, 2, 0, 8, 12}
			for i := 0; i < 18; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 119
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
			}
			return string(data)
		}())
	}()
}
func sLb3m6p() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 3
			decryptKey := 244
			for counter := 0; i != 0; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 2:
					data = append(data, 50)
					i = 4
				case 4:
					for y := range data {
						data[y] = data[y] - byte(decryptKey^y)
					}
					i = 0
				case 3:
					data = append(data, ",XS"...,
					)
					i = 5
				case 6:
					data = append(data, "\x05S"...,
					)
					i = 1
				case 1:
					i = 2
					data = append(data, "_\b#"...,
					)
				case 5:
					data = append(data, "U\x06KS"...,
					)
					i = 6
				}
			}
			return string(data)
		}())
	}()
}
func kC9MMQ0m() {
	fmt.Println(func() string {
		seed := byte(234)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
		fnc(100)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
		return string(data)
	}())
}
func e4hoxT() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 4
			decryptKey := 141
			for counter := 0; i != 5; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 6:
					data = append(data, "\xa2\xdb"...,
					)
					i = 2
				case 0:
					data = append(data, "\xb4\xf2\xee\xb9"...,
					)
					i = 6
				case 1:
					i = 3
					data = append(data, 242)
				case 2:
					for y := range data {
						data[y] = data[y] ^ byte(decryptKey^y)
					}
					i = 5
				case 4:
					data = append(data, "\xd9\xe7\xe2\xe4"...,
					)
					i = 7
				case 7:
					i = 1
					data = append(data, 183)
				case 3:
					i = 0
					data = append(data, 250)
				}
			}
			return string(data)
		}())
	}()
}
func _ubYjN() {
	println(func() string {
		key := []byte("\x15\x18\xbd\xa7\xacOm\xb3\xe0\x8a\xb0\b&\x10Ψ\xd2T\xf1\x82\xd8B\xbfA\x90\x7f\x8cb\x16\xd5\xdd'P\xfd\x06l\x11|\x16")
		data := []byte("\x8e\x872\xc7\x18\xbe\xe0'\x00\xc4\xd9(\x9aq9\r\xf2\xb5\x11\xe4J\xa7 \xac\xb0\xe0\xfa\xc66IO\xa0p^m\xcdz\xea7")
		for i, b := range key {
			data[i] = data[i] - b
		}
		return string(data)
	}())
}
func wcnvA3() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func dmjSJB() {
	println(func() string {
		seed := byte(167)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(32)(54)(114)(143)(106)(215)(178)(101)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
		return string(data)
	}())
}
func kwIfv5FIoybE() {
	defer func() {
		println(func() string {
			data := []byte("J~}\xc2 \x97T m\xd3\xddЋ")
			positions := [...]byte{6, 1, 1, 9, 8, 3, 11, 9, 3, 6, 2, 10, 10, 5, 11, 12}
			for i := 0; i < 16; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 156
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
			}
			return string(data)
		}())
	}()
}
func h79ki0CiK() {
	defer func() {
		println(func() string {
			seed := byte(232)
			var data []byte
			type decFunc func(byte) decFunc
			var fnc decFunc
			fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
			fnc(98)(43)(254)(1)(172)(68)(11)(177)(73)(11)(172)(26)(10)
			return string(data)
		}())
	}()
}
func zP_S5KWs() {
	defer func() {
		println(func() string {
			key := []byte("jO\vV\xe0\x02X\xcbWh\xee,,")
			data := []byte("\xb4\xc4~\xca\x00f\xc7\xeb\xc0\xdc\x0efp")
			for i, b := range key {
				data[i] = data[i] - b
			}
			return string(data)
		}())
	}()
}
func fkgfwESU7a8() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func _IgKRxp() {
	defer func() {
		println(func() string {
			fullData := []byte("\xbeN\xeeH\xa76\xd2\xe7\x86\xc4O$\x86\xe0=\xc7\xf4\x81EP\xaa%\xef\x94Kp")
			data := make([]byte, 0, 14)
			data = append(data, fullData[9]+fullData[8], fullData[14]^fullData[3], fullData[16]-fullData[17], fullData[11]+fullData[19], fullData[18]-fullData[21], fullData[24]-fullData[7], fullData[0]-fullData[10], fullData[15]-fullData[4], fullData[12]^fullData[22], fullData[13]^fullData[23], fullData[6]+fullData[1], fullData[25]-fullData[5], fullData[20]^fullData[2])
			return string(data)
		}())
	}()
}
func dwmBONWD_rCp() {
	println(func() string {
		fullData := []byte("\xda\xcd\xf6gh\xe8\xfaX\xb8H\xca\xf9t\a\xfb)\x99n\a^\xdaO\xb8\x98\x87\xf80)\x80\"Qs\a\xf5l\xf5c\r\xab\x89\xa8\x92\x04&˶\x02g\xfa\xb9\xc4`\x8c\xda\xf2G\x88!\xdf\x01\r\xd72(\x03\x8a\x18\xf5\xe4jl\xee\x86\x19\xa1\x16\xe1\x98")
		data := make([]byte, 0, 40)
		data = append(data, fullData[54]+fullData[24], fullData[4]^fullData[18], fullData[35]+fullData[28], fullData[59]-fullData[76], fullData[74]^fullData[1], fullData[50]^fullData[38], fullData[49]^fullData[10], fullData[3]+fullData[37], fullData[29]-fullData[46], fullData[36]-fullData[15], fullData[19]+fullData[44], fullData[75]-fullData[2], fullData[52]^fullData[25], fullData[45]^fullData[61], fullData[58]-fullData[12], fullData[34]+fullData[11], fullData[62]+fullData[71], fullData[73]-fullData[8], fullData[42]-fullData[68], fullData[5]-fullData[72], fullData[40]^fullData[20], fullData[7]+fullData[60], fullData[39]-fullData[63], fullData[33]-fullData[65], fullData[56]+fullData[77], fullData[27]^fullData[9], fullData[0]-fullData[70], fullData[47]^fullData[64], fullData[48]-fullData[53], fullData[32]^fullData[31], fullData[69]^fullData[66], fullData[17]-fullData[67], fullData[23]^fullData[22], fullData[55]^fullData[43], fullData[13]^fullData[51], fullData[6]-fullData[16], fullData[41]^fullData[14], fullData[21]^fullData[57], fullData[30]-fullData[26])
		return string(data)
	}())
}
func fegWWOkQ6Bm() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func hJOfy9wzZot() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func fOw9GzuDv() {
	fmt.Println(func() string {
		key := []byte("\xe5\xef\xcby\xd9\xfc\xe4z\xa3\xbb\xdbr\x1f\xe1j\x8f\x9a\xae\xdf\xe6\a\xf9W\x05P\xe0\xb9KÂ7\xf8f{i\xee\x9elu\x1bko\xb9\x9e\xe6^\x88\x99\x90\xa5\xed\xd3L\xd4ȅ\xb2\rlH\xcd,q\xd4x?\xfe\x96\xfb\xfed")
		data := []byte("3TA\xaaK[+\xaa\x11)<\xd1f\x13\xe0\xf4\xf9\a\x17[fN\xc7d\x9e\x15/|5\xe1~)\xd4\xe9\xcaM\xea\xd1\xe9zģ.\xfd*\x8f\xff\a\xef\xf3%I\x80F'\xcc\xe7{ک,p\xa1Gݱr\xf5Tm\xd9")
		for i, b := range key {
			data[i] = data[i] - b
		}
		return string(data)
	}())
}
func a4uyTO() {
	println(func() string {
		data := make([]byte, 0, 40)
		i := 9
		decryptKey := 140
		for counter := 0; i != 10; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 11:
				i = 10
				for y := range data {
					data[y] = data[y] + byte(decryptKey^y)
				}
			case 9:
				i = 2
				data = append(data, "WLU"...,
				)
			case 6:
				data = append(data, "+\xe2"...,
				)
				i = 3
			case 4:
				i = 5
				data = append(data, 72)
			case 0:
				i = 11
				data = append(data, "`cg\x1d"...,
				)
			case 5:
				data = append(data, "OO\xf6"...,
				)
				i = 14
			case 3:
				i = 15
				data = append(data, "56<\x1e"...,
				)
			case 16:
				data = append(data, "&6"...,
				)
				i = 6
			case 2:
				data = append(data, "\xffF"...,
				)
				i = 4
			case 13:
				data = append(data, "8\xee."...,
				)
				i = 7
			case 7:
				data = append(data, "\xf01<."...,
				)
				i = 1
			case 14:
				i = 8
				data = append(data, "\x0f\x01\xf7F"...,
				)
			case 15:
				i = 0
				data = append(data, "^g"...,
				)
			case 8:
				data = append(data, "2?"...,
				)
				i = 13
			case 12:
				i = 16
				data = append(data, 230)
			case 1:
				i = 12
				data = append(data, "-6"...,
				)
			}
		}
		return string(data)
	}())
}
func y28cwOKG() {
	fmt.Println(func() string {
		fullData := []byte("\xdf\xf6|*LM\xbc\xc2\xf2\x1a\x11\xf9\x96\\>l")
		data := make([]byte, 0, 9)
		data = append(data, fullData[10]+fullData[14], fullData[3]-fullData[7], fullData[2]-fullData[13], fullData[5]-fullData[0], fullData[11]^fullData[12], fullData[4]^fullData[15], fullData[1]-fullData[6], fullData[9]-fullData[8])
		return string(data)
	}())
}
func tN1Iso() {
	fmt.Println(func() string {
		data := make([]byte, 0, 9)
		i := 3
		decryptKey := 156
		for counter := 0; i != 0; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 3:
				i = 6
				data = append(data, 238)
			case 2:
				i = 0
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
			case 5:
				i = 9
				data = append(data, 10)
			case 7:
				i = 4
				data = append(data, 211)
			case 1:
				data = append(data, 189)
				i = 8
			case 8:
				i = 5
				data = append(data, 10)
			case 6:
				i = 1
				data = append(data, 6)
			case 9:
				i = 7
				data = append(data, 186)
			case 4:
				data = append(data, 192)
				i = 2
			}
		}
		return string(data)
	}())
}
func mcEvJpPfv() {
	defer func() {
		println(func() string {
			fullData := []byte("\xc0\x12\x1b\x19\xa0\xe4TL\xa5\x97\xc1\xf3\xe8\x8e\x7f\xee\a\xd8R\xbc\x1bc)d8\xf7")
			data := make([]byte, 0, 14)
			data = append(data, fullData[1]+fullData[24], fullData[21]-fullData[15], fullData[5]^fullData[9], fullData[7]-fullData[17], fullData[3]+fullData[16], fullData[10]^fullData[8], fullData[6]+fullData[20], fullData[0]-fullData[4], fullData[25]-fullData[13], fullData[11]-fullData[14], fullData[23]+fullData[19], fullData[18]+fullData[12], fullData[22]+fullData[2])
			return string(data)
		}())
	}()
}
func uU6tUxvPBX() {
	defer func() {
		println(func() string {
			key := []byte("Q\xb4R\xf6\xf6\xf4\f\xe4\x18\xe0\x0e\xaa\xe0")
			data := []byte("\x1b\xc1!\x82\u0590c\xc4q\x94.\x90\xa4")
			for i, b := range key {
				data[i] = data[i] ^ b
			}
			return string(data)
		}())
	}()
}
func wbPHxVexJf() {
	println(func() string {
		fullData := []byte("F;@\xc0~H\x02\x8a\xc7Qx\x9ap\xf3\x9c\xbb0\xe6\xef\x02v9\x15\x06\xfai[\a\xecE\xb6\xbe[9\xf7(\x99\xb9\x8a\xbd먊\x1a\xf1\xd7f\x9e\xbc֙{\x1f\xf1&\xd5/G-'8\x1c{\xd3\xc54gG\xa6\xe9\xc3'\xa2e\x83\xa2\xcdm")
		data := make([]byte, 0, 40)
		data = append(data, fullData[48]^fullData[64], fullData[77]+fullData[19], fullData[41]+fullData[76], fullData[13]-fullData[63], fullData[54]+fullData[0], fullData[58]-fullData[31], fullData[11]-fullData[59], fullData[74]+fullData[44], fullData[57]^fullData[66], fullData[3]^fullData[24], fullData[2]+fullData[69], fullData[73]^fullData[29], fullData[1]-fullData[8], fullData[67]-fullData[17], fullData[32]^fullData[16], fullData[47]-fullData[21], fullData[36]^fullData[37], fullData[70]^fullData[75], fullData[28]+fullData[65], fullData[4]^fullData[61], fullData[56]-fullData[39], fullData[18]+fullData[20], fullData[40]-fullData[7], fullData[34]^fullData[14], fullData[62]-fullData[26], fullData[42]+fullData[45], fullData[55]^fullData[15], fullData[46]-fullData[6], fullData[71]-fullData[27], fullData[43]-fullData[68], fullData[10]-fullData[23], fullData[35]+fullData[9], fullData[49]-fullData[30], fullData[50]-fullData[60], fullData[5]+fullData[52], fullData[53]+fullData[12], fullData[72]-fullData[33], fullData[51]^fullData[22], fullData[38]-fullData[25])
		return string(data)
	}())
}
func r0zPXQxz() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 1
			decryptKey := 33
			for counter := 0; i != 7; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 3:
					data = append(data, "kw "...,
					)
					i = 2
				case 2:
					i = 0
					data = append(data, 59)
				case 1:
					i = 4
					data = append(data, "T\x80{"...,
					)
				case 4:
					i = 5
					data = append(data, "}.s{"...,
					)
				case 0:
					i = 6
					data = append(data, 74)
				case 5:
					i = 3
					data = append(data, 45)
				case 6:
					for y := range data {
						data[y] = data[y] - byte(decryptKey^y)
					}
					i = 7
				}
			}
			return string(data)
		}())
	}()
}
func hqs6q5u0l() {
	println(func() string {
		key := []byte("\xc5\x1e\x8f\x1e\xbe\xf3\x00\xf5\xd7q\x88\x97\xd1\xf1\xab\x12\x12\xb2dM\xc5'$Ol\n,\x15\xc0\x9c\xa23\xf7&\xda\xe1\f\xc7\xe2")
		data := []byte("\xbcq\xfa>Ҝs\x81\xf7K\xa1\xb7\xa5\x90\xc0w2\xd3D/\xb7BE$LkBq\xe0\xe8\xd0J\xd7G\xbd\x80e\xa9\xc3")
		for i, b := range key {
			data[i] = data[i] ^ b
		}
		return string(data)
	}())
}
func aP_VstWzF() {
	println(func() string {
		data := make([]byte, 0, 40)
		i := 5
		decryptKey := 44
		for counter := 0; i != 8; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 0:
				i = 7
				data = append(data, "mf%"...,
				)
			case 13:
				data = append(data, "TR"...,
				)
				i = 1
			case 4:
				data = append(data, "\x19Y\\["...,
				)
				i = 13
			case 11:
				i = 15
				data = append(data, "2au"...,
				)
			case 15:
				i = 3
				data = append(data, 124)
			case 12:
				data = append(data, 108)
				i = 9
			case 14:
				data = append(data, "h\x7fin"...,
				)
				i = 2
			case 6:
				i = 8
				for y := range data {
					data[y] = data[y] ^ byte(decryptKey^y)
				}
			case 2:
				i = 0
				data = append(data, "e!a"...,
				)
			case 9:
				i = 11
				data = append(data, "j1*:"...,
				)
			case 5:
				data = append(data, "`wn"...,
				)
				i = 10
			case 7:
				i = 16
				data = append(data, "pu"...,
				)
			case 16:
				i = 4
				data = append(data, 127)
			case 1:
				i = 6
				data = append(data, 30)
			case 10:
				data = append(data, ":qs"...,
				)
				i = 12
			case 3:
				i = 14
				data = append(data, "s)i+"...,
				)
			}
		}
		return string(data)
	}())
}
func j9WPAx4syF() {
	println(func() string {
		seed := byte(97)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
		fnc(24)(246)(6)(171)(76)(3)(4)(1)(172)(26)(239)(247)(84)(237)(10)(250)(187)(65)(191)(66)(16)(243)(252)(10)(181)(65)(13)(246)(188)(84)(254)(7)(167)(65)(6)(250)(8)(5)(179)
		return string(data)
	}())
}
func iiV6qRfv() {
	fmt.Println(func() string {
		seed := byte(18)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
		fnc(61)(25)(184)(78)(1)(177)(26)(238)
		return string(data)
	}())
}
func qpJEBGdQ2() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func yV6HLHvHo8() {
	println(func() string {
		fullData := []byte("8j\x9d\xca\xd6o\xf7, \xb9\xc1p\xac#N\xc8\xe2\xbf i?\xda{\xb2\xdf\xe3SQ\x03\xed\xc0\xb2\x89\xacfy\xb1\x02\x05\xb6\bY\xa7\xfd\xf4j\xc2A\xdc\x15\x95[p\x81\a\xf1#\x9206JBK\x82_2\xb9\xfc\xf7\x9e\xd6\xd0#\x92W\x9d\x85\xd5")
		data := make([]byte, 0, 40)
		data = append(data, fullData[30]^fullData[9], fullData[15]-fullData[41], fullData[38]^fullData[52], fullData[35]+fullData[42], fullData[55]-fullData[76], fullData[3]-fullData[51], fullData[70]+fullData[2], fullData[39]-fullData[61], fullData[7]+fullData[44], fullData[32]+fullData[36], fullData[11]+fullData[66], fullData[1]^fullData[60], fullData[57]+fullData[16], fullData[59]^fullData[74], fullData[37]^fullData[19], fullData[21]^fullData[17], fullData[72]-fullData[28], fullData[14]-fullData[29], fullData[73]^fullData[23], fullData[13]-fullData[10], fullData[22]+fullData[6], fullData[50]-fullData[58], fullData[45]+fullData[68], fullData[62]^fullData[18], fullData[48]^fullData[67], fullData[54]^fullData[34], fullData[8]-fullData[31], fullData[53]+fullData[25], fullData[64]-fullData[20], fullData[4]+fullData[69], fullData[77]+fullData[75], fullData[0]^fullData[47], fullData[56]+fullData[43], fullData[63]+fullData[24], fullData[5]^fullData[40], fullData[26]^fullData[65], fullData[49]-fullData[33], fullData[12]+fullData[46], fullData[71]+fullData[27])
		return string(data)
	}())
}
func kdQhvP8lS9() {
	fmt.Println(func() string {
		fullData := []byte("\xe64\xc1F\x19\xa9ճ\x03;\xb3\x83x\xeei\xcd\xdbR\xe6\f\xb1a\xff\x94\xe1_ \x99x\x9f\x13\xa4h5\xc5}\xad\xb7:\\\xcf9\x04G\xdd?\xb6d\xa1\xdf8`Gr,L\xccb\f\xb1\xaf\xbbh\xb0\xbe\x13$\x15xCS\xfce\x10\xae\x9e\xfc \x90\xe6\x9bP\xf7\x12\x0emY\xdeHJc\nQ\xbc\xd4O\x7fY\xc27\x9b\xd7Q\xcf\x01\n\x11;\x18T\x94G\xe9\x1a\\k\x8b\x9a\x94h\x93\xc17q\xa8E\xe8P\x06\x96|`\xeb\xac\x003m\xd2\xea\t%\xd8")
		data := make([]byte, 0, 72)
		data = append(data, fullData[128]^fullData[88], fullData[2]-fullData[114], fullData[140]+fullData[92], fullData[5]-fullData[68], fullData[9]+fullData[99], fullData[101]-fullData[28], fullData[0]^fullData[48], fullData[18]+fullData[89], fullData[135]+fullData[107], fullData[104]+fullData[85], fullData[136]-fullData[58], fullData[122]^fullData[62], fullData[35]^fullData[38], fullData[117]^fullData[124], fullData[1]-fullData[64], fullData[57]+fullData[8], fullData[121]^fullData[75], fullData[127]-fullData[82], fullData[132]-fullData[10], fullData[63]+fullData[34], fullData[102]+fullData[84], fullData[27]+fullData[93], fullData[26]^fullData[81], fullData[123]+fullData[13], fullData[29]+fullData[60], fullData[45]^fullData[91], fullData[54]-fullData[46], fullData[87]-fullData[36], fullData[113]^fullData[119], fullData[74]+fullData[59], fullData[52]^fullData[134], fullData[32]^fullData[97], fullData[76]+fullData[53], fullData[96]^fullData[106], fullData[12]^fullData[4], fullData[65]+fullData[55], fullData[11]^fullData[103], fullData[42]+fullData[21], fullData[23]-fullData[77], fullData[116]^fullData[94], fullData[50]-fullData[49], fullData[22]+fullData[33], fullData[61]-fullData[3], fullData[20]-fullData[17], fullData[120]-fullData[95], fullData[71]^fullData[15], fullData[69]-fullData[56], fullData[109]-fullData[79], fullData[78]+fullData[40], fullData[112]+fullData[72], fullData[133]^fullData[110], fullData[19]-fullData[129], fullData[25]+fullData[6], fullData[70]-fullData[24], fullData[108]+fullData[111], fullData[66]-fullData[44], fullData[130]-fullData[43], fullData[86]+fullData[67], fullData[139]-fullData[80], fullData[115]-fullData[105], fullData[31]-fullData[125], fullData[39]+fullData[126], fullData[14]-fullData[41], fullData[51]+fullData[30], fullData[37]^fullData[137], fullData[131]+fullData[83], fullData[141]-fullData[47], fullData[98]-fullData[90], fullData[7]^fullData[138], fullData[16]+fullData[118], fullData[73]-fullData[100])
		return string(data)
	}())
}
func jjPniZQqyYa() {
	fmt.Println(func() string {
		data := make([]byte, 0, 72)
		i := 9
		decryptKey := 152
		for counter := 0; i != 10; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 2:
				data = append(data, 67)
				i = 20
			case 9:
				data = append(data, "{QA"...,
				)
				i = 17
			case 3:
				i = 14
				data = append(data, "8b"...,
				)
			case 12:
				i = 27
				data = append(data, "z}\x1fS"...,
				)
			case 26:
				i = 19
				data = append(data, ")l"...,
				)
			case 16:
				data = append(data, ")(\x1f\x06"...,
				)
				i = 24
			case 7:
				data = append(data, 119)
				i = 21
			case 0:
				data = append(data, "L;y"...,
				)
				i = 1
			case 28:
				data = append(data, "\x19Y"...,
				)
				i = 5
			case 21:
				i = 25
				data = append(data, 108)
			case 23:
				data = append(data, 95)
				i = 12
			case 6:
				i = 28
				data = append(data, "uS}c"...,
				)
			case 25:
				data = append(data, "\x1b{zv"...,
				)
				i = 11
			case 27:
				data = append(data, 126)
				i = 6
			case 4:
				i = 0
				data = append(data, 86)
			case 15:
				data = append(data, "A]"...,
				)
				i = 26
			case 14:
				data = append(data, "ao"...,
				)
				i = 4
			case 24:
				for y := range data {
					data[y] = data[y] ^ byte(decryptKey^y)
				}
				i = 10
			case 18:
				data = append(data, "a~\nM"...,
				)
				i = 23
			case 5:
				data = append(data, "\x1f["...,
				)
				i = 7
			case 20:
				data = append(data, "ot\x02S"...,
				)
				i = 30
			case 8:
				data = append(data, "gMD"...,
				)
				i = 22
			case 11:
				i = 8
				data = append(data, "I]u"...,
				)
			case 17:
				i = 2
				data = append(data, 7)
			case 13:
				data = append(data, "5r\\E"...,
				)
				i = 3
			case 19:
				i = 29
				data = append(data, "tZJ?"...,
				)
			case 1:
				data = append(data, "\x10\x06\x03"...,
				)
				i = 16
			case 29:
				data = append(data, 112)
				i = 13
			case 22:
				data = append(data, "(j"...,
				)
				i = 15
			case 30:
				data = append(data, "R^"...,
				)
				i = 18
			}
		}
		return string(data)
	}())
}
func uICF8PWv() {
	fmt.Println(func() string {
		fullData := []byte("\xd5\x02?B_\xd7x\xe0l\x98HK\x00\x14\x98\x83")
		data := make([]byte, 0, 9)
		data = append(data, fullData[5]^fullData[9], fullData[12]-fullData[14], fullData[0]+fullData[11], fullData[8]+fullData[1], fullData[15]-fullData[13], fullData[4]-fullData[2], fullData[3]^fullData[6], fullData[7]+fullData[10])
		return string(data)
	}())
}
func faN8Vq() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func klnQ9rx() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func kzpydMF5wMp() {
	defer func() {
		println(func() string {
			key := []byte("%\xf4c\x1b9\x11\x9b\a\xa3\xeb_k\x94")
			data := []byte("%\x81\x10Y\xe7S\xd4\x19Ɖ\xc1ϰ")
			for i, b := range key {
				data[i] = data[i] + b
			}
			return string(data)
		}())
	}()
}
func qFgT2g() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 8
			decryptKey := 101
			for counter := 0; i != 2; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 6:
					i = 4
					data = append(data, 222)
				case 0:
					data = append(data, 31)
					i = 5
				case 4:
					data = append(data, 233)
					i = 7
				case 5:
					data = append(data, "\x1e \xcd"...,
					)
					i = 1
				case 8:
					data = append(data, 243)
					i = 0
				case 1:
					data = append(data, "\x12\x1e"...,
					)
					i = 3
				case 3:
					i = 6
					data = append(data, "\xd0\n\x16\xc3"...,
					)
				case 7:
					for y := range data {
						data[y] = data[y] + byte(decryptKey^y)
					}
					i = 2
				}
			}
			return string(data)
		}())
	}()
}
func nI2DeC() {
	fmt.Println(func() string {
		seed := byte(221)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
		fnc(113)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
		return string(data)
	}())
}
func hrwMtrLcNz7() {
	fmt.Println(func() string {
		data := []byte("Nwn'\a_Gg4M _G=v8\x18Y8U_Z\x10sej\x1c\x04=4%on\x1fU_\x98\x16\x0f_\x06s\x01 Dlpn_\x06\x02Oir$y>n.a_\x19oW\x17\xcbt_Y\tu")
		positions := [...]byte{69, 25, 46, 8, 58, 31, 1, 7, 7, 2, 7, 15, 30, 58, 54, 22, 64, 27, 10, 3, 10, 69, 4, 25, 51, 28, 41, 27, 58, 19, 23, 55, 30, 37, 46, 45, 50, 21, 13, 63, 49, 38, 40, 62, 36, 65, 52, 61, 25, 26, 34, 19, 51, 56, 19, 65, 26, 33, 21, 19, 22, 37, 42, 49, 38, 16, 51, 21, 9, 50, 22, 23, 51, 43, 54, 29, 13, 24}
		for i := 0; i < 78; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 246
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
		}
		return string(data)
	}())
}
func hErrDGxOOrAh() {
	fmt.Println(func() string {
		data := []byte("\x8fe\x8f1\xd6_^\xa3n\xcc\xe19v2\xd4e\xaeY\xf3U_v\x8e_\x8d50Z\x82\x80\x06\x9e\xc1<H_L:t_n4\v\x9cD\x9d\x89n\xae/\x8cv\xa6\x91_G5n\xdb\xf5[D\x96s\xa5rt\x13YuO")
		positions := [...]byte{29, 64, 43, 24, 40, 7, 7, 59, 42, 64, 4, 7, 18, 27, 30, 53, 19, 21, 6, 45, 31, 32, 14, 9, 12, 28, 18, 19, 33, 11, 69, 18, 11, 10, 46, 19, 34, 46, 2, 21, 40, 22, 62, 60, 40, 26, 18, 37, 46, 4, 50, 33, 16, 48, 58, 45, 62, 53, 70, 27, 64, 49, 2, 42, 27, 42, 67, 7, 28, 0, 52, 40}
		for i := 0; i < 72; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 157
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
		}
		return string(data)
	}())
}
func lm274F3B() {
	fmt.Println(func() string {
		key := []byte("l@\xe6\xddx\x01L\xf4")
		data := []byte("\xe3(:\x91\xf7\x1f\xee4")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func kBtDFmW1D() {
	fmt.Println(func() string {
		data := []byte("O> \x91oٗ(")
		positions := [...]byte{5, 5, 6, 6, 6, 1, 3, 3}
		for i := 0; i < 8; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 249
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
		}
		return string(data)
	}())
}
func mkh1_em() {
	println(func() string {
		data := make([]byte, 0, 40)
		i := 6
		decryptKey := 220
		for counter := 0; i != 13; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 9:
				i = 2
				data = append(data, "\xdcӉ"...,
				)
			case 5:
				i = 15
				data = append(data, "\xdf\xc9\xce\xc5"...,
				)
			case 12:
				data = append(data, "\x8b\xc8"...,
				)
				i = 5
			case 14:
				i = 3
				data = append(data, "ƅ\xd0\xd5"...,
				)
			case 4:
				i = 9
				data = append(data, "\x9a\x92\xc1\xd5"...,
				)
			case 6:
				data = append(data, "\xc0\xd7Κ"...,
				)
				i = 7
			case 8:
				i = 0
				data = append(data, "\xf4\xf2\xbe"...,
				)
			case 2:
				i = 12
				data = append(data, 201)
			case 15:
				data = append(data, "\x81\xc1\xcd"...,
				)
				i = 14
			case 11:
				i = 1
				data = append(data, "\xd3\xcc"...,
				)
			case 10:
				i = 8
				data = append(data, "\xb9\xf9\xfc\xfb"...,
				)
			case 7:
				data = append(data, 209)
				i = 11
			case 0:
				for y := range data {
					data[y] = data[y] ^ byte(decryptKey^y)
				}
				i = 13
			case 3:
				data = append(data, 223)
				i = 10
			case 1:
				data = append(data, "ʑ\x8a"...,
				)
				i = 4
			}
		}
		return string(data)
	}())
}
func i4CikFfzXMU() {
	println(func() string {
		data := make([]byte, 0, 40)
		i := 11
		decryptKey := 47
		for counter := 0; i != 15; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 14:
				i = 1
				data = append(data, "\xb6\xbf{\xbb"...,
				)
			case 6:
				i = 2
				data = append(data, "\x83\xc3\xc8"...,
				)
			case 0:
				i = 10
				data = append(data, 179)
			case 4:
				i = 7
				data = append(data, "ï\xb8\xb1"...,
				)
			case 13:
				i = 15
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
			case 2:
				data = append(data, "\xc1\xd0"...,
				)
				i = 5
			case 9:
				data = append(data, "ɻ"...,
				)
				i = 14
			case 7:
				i = 9
				data = append(data, "s\xb3q\xb2"...,
				)
			case 8:
				data = append(data, "rh"...,
				)
				i = 4
			case 16:
				i = 0
				data = append(data, "\xb1\xb6`"...,
				)
			case 3:
				data = append(data, "k\x84"...,
				)
				i = 8
			case 12:
				i = 6
				data = append(data, "\xd2\xcf\xd5"...,
				)
			case 11:
				data = append(data, 188)
				i = 16
			case 1:
				data = append(data, "Ǽ\x7f"...,
				)
				i = 12
			case 5:
				data = append(data, "Ԇ"...,
				)
				i = 13
			case 10:
				i = 3
				data = append(data, "\xb5\xb8\xb8"...,
				)
			}
		}
		return string(data)
	}())
}
func g5dVHac2S() {
	println(func() string {
		data := []byte(".\x8b9\x1b\x0eʛ\xe0\xe2A\xab\x13\xd9a3e.a \xfb\xe2]\xc1\xb1$X2\xea 2<\x10/\x12kL\x1c\xa3\x12")
		positions := [...]byte{35, 31, 19, 19, 10, 20, 5, 8, 1, 32, 32, 37, 3, 7, 32, 24, 20, 14, 32, 23, 2, 30, 29, 12, 29, 22, 32, 32, 33, 5, 0, 6, 37, 37, 9, 29, 4, 14, 3, 0, 27, 16, 5, 36, 21, 36, 38, 11, 26, 14, 35, 14, 23, 34, 25, 5, 25, 14}
		for i := 0; i < 58; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 151
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func dMgY_8z() {
	println(func() string {
		data := []byte("M\xabi\xf0\xa9\x86|\x8f\xbfӝ \xc2a\xe8\x9b @ b\xacN\x84\x97\xad\xb0n\x85 j\x8ey \xf3gai\xb2\x92")
		positions := [...]byte{30, 33, 22, 2, 5, 9, 27, 5, 21, 38, 2, 23, 6, 12, 27, 29, 6, 9, 24, 14, 4, 29, 24, 20, 20, 7, 14, 29, 17, 3, 30, 1, 17, 2, 33, 8, 2, 37, 30, 15, 10, 0, 15, 24, 25, 7, 9, 33, 4, 1}
		for i := 0; i < 50; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 242
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func nzeAtQcL4yhq() {
	defer func() {
		println(func() string {
			data := []byte("JuU\x86\xe6\xd9I՚\xd7\x1c:W")
			positions := [...]byte{10, 3, 5, 5, 12, 2, 12, 3, 6, 7, 9, 5, 2, 9, 8, 7, 4, 2}
			for i := 0; i < 18; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 93
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
			}
			return string(data)
		}())
	}()
}
func rB_R0505WFXc() {
	println(func() string {
		fullData := []byte("\xdf\x02L\xe1%\x18H\xabW\xcf\xd2D\x18\xe4\xabLǂ\x93\xf5\xb6\xf2G\xa1\xb4\xd2\b\x98\xb8\x1d\xc1\x80\x95埐nU\xf7\xf2\xb2\x05/\xf0\x8116Z\xa6\fϑ\x83\xd8\xe3\xe0\x81#\xf4M\xb8ٟ\x923%\xf8}\x8dG\xe5c\x94l\xe6#F\x82")
		data := make([]byte, 0, 40)
		data = append(data, fullData[38]+fullData[77], fullData[57]+fullData[15], fullData[54]+fullData[63], fullData[4]-fullData[41], fullData[16]^fullData[14], fullData[25]-fullData[71], fullData[44]^fullData[39], fullData[8]^fullData[75], fullData[27]^fullData[28], fullData[49]^fullData[46], fullData[48]+fullData[52], fullData[5]+fullData[26], fullData[64]^fullData[69], fullData[51]^fullData[43], fullData[35]-fullData[65], fullData[31]^fullData[33], fullData[22]+fullData[61], fullData[55]+fullData[56], fullData[30]^fullData[3], fullData[18]-fullData[45], fullData[47]+fullData[12], fullData[17]-fullData[29], fullData[20]-fullData[37], fullData[60]-fullData[59], fullData[21]-fullData[10], fullData[50]-fullData[36], fullData[34]+fullData[9], fullData[6]-fullData[13], fullData[24]+fullData[73], fullData[7]^fullData[0], fullData[19]+fullData[67], fullData[74]^fullData[62], fullData[66]-fullData[53], fullData[1]-fullData[23], fullData[2]-fullData[70], fullData[58]^fullData[32], fullData[42]^fullData[76], fullData[40]-fullData[11], fullData[68]+fullData[72])
		return string(data)
	}())
}
func spsS28rv() {
	fmt.Println(func() string {
		data := []byte("Nev4r_G0n\b'<G\xc4ve_\x141\xc1\x02U\xff_\x9d _1q_YT\xd8l\x11\x06\xa4et_\x8c4u9FT\xe7\xefHQ8\x144[\x02\x84\xf8nn:\xabt0\ae\xe5\xe43You")
		positions := [...]byte{49, 55, 44, 33, 25, 61, 10, 63, 26, 53, 55, 24, 61, 61, 66, 46, 22, 28, 22, 10, 59, 40, 11, 49, 67, 35, 31, 45, 9, 43, 32, 3, 26, 51, 54, 20, 35, 18, 51, 24, 55, 34, 28, 34, 56, 3, 53, 47, 56, 34, 3, 30, 30, 48, 36, 30, 24, 17, 40, 65, 48, 67, 49, 56, 10, 22, 53, 67, 30, 28, 13, 36, 65, 19, 59, 11, 18, 60}
		for i := 0; i < 78; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 25
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
		}
		return string(data)
	}())
}
func dmzycA() {
	fmt.Println(func() string {
		data := make([]byte, 0, 9)
		i := 1
		decryptKey := 254
		for counter := 0; i != 2; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 3:
				i = 9
				data = append(data, 138)
			case 1:
				i = 8
				data = append(data, 174)
			case 6:
				data = append(data, 206)
				i = 0
			case 4:
				i = 3
				data = append(data, 140)
			case 5:
				i = 6
				data = append(data, 221)
			case 9:
				i = 5
				data = append(data, 196)
			case 0:
				for y := range data {
					data[y] = data[y] ^ byte(decryptKey^y)
				}
				i = 2
			case 8:
				i = 7
				data = append(data, 136)
			case 7:
				data = append(data, 195)
				i = 4
			}
		}
		return string(data)
	}())
}
func tvN10D4s() {
	println(func() string {
		data := make([]byte, 0, 40)
		i := 3
		decryptKey := 110
		for counter := 0; i != 11; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 6:
				i = 14
				data = append(data, "\x93\x9e\x99"...,
				)
			case 5:
				data = append(data, "\xae\xb0"...,
				)
				i = 4
			case 3:
				data = append(data, "\xb6\xad\xb4`"...,
				)
				i = 9
			case 17:
				i = 5
				data = append(data, 169)
			case 14:
				data = append(data, 77)
				i = 8
			case 13:
				data = append(data, 136)
				i = 0
			case 8:
				data = append(data, "\x8fO\x92"...,
				)
				i = 1
			case 16:
				data = append(data, "\x96\x95\x9d="...,
				)
				i = 18
			case 12:
				for y := range data {
					data[y] = data[y] + byte(decryptKey^y)
				}
				i = 11
			case 4:
				data = append(data, 85)
				i = 7
			case 7:
				i = 10
				data = append(data, 112)
			case 15:
				data = append(data, "\x97E\x87\x95"...,
				)
				i = 2
			case 18:
				i = 13
				data = append(data, "\x7f\x86\x81\x82"...,
				)
			case 9:
				data = append(data, 165)
				i = 17
			case 0:
				i = 12
				data = append(data, 60)
			case 2:
				data = append(data, "\x8cA"...,
				)
				i = 16
			case 1:
				i = 15
				data = append(data, "\x9b\x8f\x8c"...,
				)
			case 10:
				data = append(data, "`X\xa5"...,
				)
				i = 6
			}
		}
		return string(data)
	}())
}
func i5Vwz3M() {
	fmt.Println(func() string {
		data := []byte("\xc0\av@\xba\x9fg#n\xf8\xe7_#ˊ\x04\x12\xd96*]U\n_\x1eSv\xccr_\x12\x82\xdbw'_L\x05\x8f\x14\xf38]_\x001a\x95\xe5\x118\xf8\xfb3C\x022n\f\x14\x00\xf10se=dOY4u")
		positions := [...]byte{55, 32, 38, 5, 46, 66, 33, 58, 44, 48, 9, 52, 9, 53, 17, 13, 16, 65, 10, 0, 31, 5, 27, 59, 37, 12, 19, 14, 15, 4, 7, 40, 20, 69, 51, 18, 58, 34, 15, 1, 49, 60, 38, 3, 54, 19, 31, 39, 34, 59, 22, 34, 17, 5, 10, 17, 65, 47, 34, 25, 41, 24, 47, 61, 4, 42, 27, 47, 59, 15, 67, 6, 56, 54, 10, 20, 7, 30}
		for i := 0; i < 78; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 125
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
		}
		return string(data)
	}())
}
func yecVFwwrjE() {
	println(func() string {
		data := make([]byte, 0, 40)
		i := 12
		decryptKey := 61
		for counter := 0; i != 1; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 10:
				data = append(data, 138)
				i = 19
			case 8:
				i = 5
				data = append(data, "@\x93\x90"...,
				)
			case 9:
				data = append(data, "!t"...,
				)
				i = 18
			case 5:
				data = append(data, "\x96D"...,
				)
				i = 20
			case 2:
				data = append(data, "rw"...,
				)
				i = 9
			case 16:
				data = append(data, "yr"...,
				)
				i = 15
			case 0:
				i = 10
				data = append(data, "2s"...,
				)
			case 3:
				data = append(data, "\x95G"...,
				)
				i = 11
			case 4:
				data = append(data, "\x84p"...,
				)
				i = 16
			case 13:
				data = append(data, "E3)"...,
				)
				i = 4
			case 11:
				for y := range data {
					data[y] = data[y] + byte(decryptKey^y)
				}
				i = 1
			case 12:
				data = append(data, 125)
				i = 2
			case 6:
				data = append(data, "\x80<|\x88"...,
				)
				i = 14
			case 20:
				i = 17
				data = append(data, "\x84\x89"...,
				)
			case 7:
				i = 0
				data = append(data, 116)
			case 18:
				data = append(data, "vyy,"...,
				)
				i = 13
			case 17:
				data = append(data, "\x82\x91"...,
				)
				i = 3
			case 15:
				i = 7
				data = append(data, 52)
			case 14:
				data = append(data, 125)
				i = 8
			case 19:
				i = 6
				data = append(data, "|w"...,
				)
			}
		}
		return string(data)
	}())
}
func bxxuHhij3() {
	fmt.Println(func() string {
		data := make([]byte, 0, 72)
		i := 20
		decryptKey := 230
		for counter := 0; i != 27; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 22:
				data = append(data, "5\\J"...,
				)
				i = 15
			case 15:
				i = 17
				data = append(data, 79)
			case 3:
				data = append(data, "; W7"...,
				)
				i = 23
			case 4:
				i = 18
				data = append(data, "\x12-2"...,
				)
			case 20:
				i = 14
				data = append(data, "7\x1d\rK"...,
				)
			case 2:
				i = 9
				data = append(data, "1S"...,
				)
			case 14:
				data = append(data, "\x0f#8"...,
				)
				i = 25
			case 5:
				i = 27
				for y := range data {
					data[y] = data[y] ^ byte(decryptKey^y)
				}
			case 23:
				i = 7
				data = append(data, "6:"...,
				)
			case 30:
				i = 6
				data = append(data, "s<y"...,
				)
			case 6:
				i = 21
				data = append(data, ">\x10\t"...,
				)
			case 25:
				data = append(data, "N\x1f\x1e"...,
				)
				i = 4
			case 31:
				data = append(data, 1)
				i = 24
			case 18:
				data = append(data, 70)
				i = 31
			case 19:
				data = append(data, 8)
				i = 10
			case 21:
				data = append(data, "t."...,
				)
				i = 11
			case 9:
				data = append(data, "\x1f29"...,
				)
				i = 12
			case 29:
				data = append(data, 119)
				i = 22
			case 17:
				i = 5
				data = append(data, "edSJ"...,
				)
			case 11:
				i = 8
				data = append(data, 45)
			case 1:
				data = append(data, "\x16\x06"...,
				)
				i = 30
			case 10:
				i = 26
				data = append(data, "d&"...,
				)
			case 24:
				i = 2
				data = append(data, "\x136"...,
				)
			case 12:
				i = 28
				data = append(data, 31)
			case 16:
				i = 3
				data = append(data, "\x15S\x17"...,
				)
			case 26:
				i = 13
				data = append(data, "\r\x11e "...,
				)
			case 7:
				data = append(data, "\x05\x119"...,
				)
				i = 0
			case 28:
				data = append(data, "1/U"...,
				)
				i = 16
			case 8:
				data = append(data, "#\x1a\x00"...,
				)
				i = 29
			case 0:
				i = 19
				data = append(data, "+\x01"...,
				)
			case 13:
				i = 1
				data = append(data, 56)
			}
		}
		return string(data)
	}())
}
func w66yLWkM6j() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func bjmco2() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func iOI6Nzb() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func tFHJkkbG_8l() {
	fmt.Println(func() string {
		fullData := []byte("M]k\xe4\xed\xf3\xb5\xe8v\x9e\x11[\xc8ŋv")
		data := make([]byte, 0, 9)
		data = append(data, fullData[13]-fullData[15], fullData[11]-fullData[5], fullData[12]^fullData[7], fullData[1]+fullData[10], fullData[3]+fullData[14], fullData[2]+fullData[6], fullData[4]+fullData[0], fullData[9]-fullData[8])
		return string(data)
	}())
}
func vZ9YAbUjU() {
	defer func() {
		println(func() string {
			data := []byte("{\xa0s&\xced\xabԃt0:\x82")
			positions := [...]byte{1, 12, 10, 0, 4, 3, 1, 0, 4, 8, 7, 1, 0, 6}
			for i := 0; i < 14; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 79
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
			}
			return string(data)
		}())
	}()
}
func veqkwiT6nU() {
	fmt.Println(func() string {
		fullData := []byte("r\n\x17Wq#\x98\xae(\xab\xd7B\x93\x15\r\xafi\xea\x1c\xa8o\xe1\xe7\xd5\xf5\xc69\x04^\xbb\x04\xc1e?\xa79\xbb\x13?\xdf[\x18\xa1kS\x0e\x00\xaf\vS{c\xcd\xfe,jt\xb5B\x9e\xb1f\xdaH\xfe\xd4\xdbt\x9dL\xbb\\>\xab\xe8ڧv\x83\a-\x81\x90\xfe\xf7\x84\f\xea\xef\x81\xf5͑˓C\x9e\xd3z\xae\xc2N\xb3\xfd1\x8c8\xaaC\xb4\xab\xfdp\x1cLj\xcdr:\x1bq\xe1\xc7\x02\xd6.\xe1\xa57\r\xf4`M\xf8\xfa\x9c\x99\x8c\xb0\rQ\x1d")
		data := make([]byte, 0, 72)
		data = append(data, fullData[119]-fullData[116], fullData[118]-fullData[23], fullData[141]^fullData[43], fullData[80]^fullData[18], fullData[67]+fullData[83], fullData[56]-fullData[13], fullData[112]+fullData[10], fullData[93]+fullData[32], fullData[53]-fullData[82], fullData[75]^fullData[109], fullData[28]-fullData[103], fullData[115]+fullData[24], fullData[47]+fullData[6], fullData[140]+fullData[21], fullData[96]^fullData[74], fullData[1]^fullData[20], fullData[139]-fullData[7], fullData[64]^fullData[76], fullData[106]+fullData[46], fullData[16]-fullData[130], fullData[125]^fullData[4], fullData[131]+fullData[90], fullData[49]^fullData[5], fullData[54]-fullData[91], fullData[33]^fullData[120], fullData[11]-fullData[14], fullData[117]^fullData[27], fullData[122]+fullData[55], fullData[114]^fullData[72], fullData[50]-fullData[113], fullData[77]^fullData[104], fullData[124]^fullData[22], fullData[35]^fullData[3], fullData[29]+fullData[102], fullData[15]-fullData[101], fullData[2]^fullData[63], fullData[84]-fullData[9], fullData[86]-fullData[34], fullData[133]-fullData[85], fullData[73]-fullData[69], fullData[40]^fullData[123], fullData[57]-fullData[89], fullData[65]^fullData[42], fullData[31]^fullData[59], fullData[99]^fullData[87], fullData[38]-fullData[45], fullData[98]^fullData[129], fullData[111]^fullData[12], fullData[97]+fullData[137], fullData[108]+fullData[48], fullData[78]^fullData[70], fullData[51]+fullData[37], fullData[121]+fullData[44], fullData[100]+fullData[138], fullData[127]^fullData[134], fullData[81]+fullData[25], fullData[135]+fullData[136], fullData[132]-fullData[39], fullData[66]+fullData[94], fullData[0]+fullData[88], fullData[26]^fullData[61], fullData[95]^fullData[79], fullData[17]^fullData[62], fullData[107]-fullData[128], fullData[52]^fullData[19], fullData[92]+fullData[126], fullData[105]-fullData[41], fullData[36]-fullData[71], fullData[30]-fullData[110], fullData[60]-fullData[58], fullData[68]-fullData[8])
		return string(data)
	}())
}
func zyOoASn() {
	println(func() string {
		key := []byte("\x89WjD\x06\xd0\xf3h\x81((\xf4\xbd0x\x80\xd3f\xe8X\x05b\xb0\xbe.V\x14\xcd`\xf6\xe9\xc1m(<\x8f\xcbH\xbe")
		data := []byte("\xf08\x1fdj\xbf\x80\x1c\xa1\x12\x01\xd4\xc9Q\x13\xe5\xf3\a\xc8:w\a\xd1\xd5\x0e7z\xa9@\x82\x9b\xb8MI[\xee\xa2&\x9f")
		for i, b := range key {
			data[i] = data[i] ^ b
		}
		return string(data)
	}())
}
func wIG60EnWKVE() {
	println(func() string {
		fullData := []byte("\x8f\x92\x86\xec\x03g92\xad\x82\t\xeb\x82Q\xef\xffsd&\x8d\x1e\xcf\xe7\x94#\x0fZ\x15\xde\xfb\xfb;d9\xb4\x1f\xdddM\x9c5\xd5ʹ\x1c\x9f[\x986\x1c)\x80\xcc\xe2\x91\xec\xad\xf9\xfa\xb2=\xe5M\x8e\x9e^\xf0\x16\\\x1bfR7\xfbj-\xc5A")
		data := make([]byte, 0, 40)
		data = append(data, fullData[27]+fullData[37], fullData[14]+fullData[51], fullData[73]^fullData[63], fullData[16]+fullData[56], fullData[77]-fullData[41], fullData[19]-fullData[20], fullData[39]-fullData[50], fullData[0]^fullData[29], fullData[48]-fullData[67], fullData[49]-fullData[53], fullData[38]^fullData[32], fullData[69]-fullData[30], fullData[8]-fullData[6], fullData[58]+fullData[5], fullData[65]^fullData[40], fullData[11]-fullData[2], fullData[31]+fullData[61], fullData[62]-fullData[3], fullData[59]^fullData[1], fullData[23]-fullData[7], fullData[54]-fullData[35], fullData[17]-fullData[15], fullData[13]-fullData[66], fullData[68]^fullData[72], fullData[24]-fullData[4], fullData[18]-fullData[76], fullData[21]+fullData[45], fullData[46]+fullData[10], fullData[22]+fullData[33], fullData[28]-fullData[74], fullData[52]-fullData[26], fullData[75]-fullData[34], fullData[12]+fullData[64], fullData[71]+fullData[25], fullData[42]-fullData[70], fullData[57]-fullData[47], fullData[43]^fullData[36], fullData[55]+fullData[9], fullData[44]^fullData[60])
		return string(data)
	}())
}
func vUHfqA() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func boAOpNF() {
	fmt.Println(func() string {
		seed := byte(100)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
		fnc(43)(231)(86)(162)(1)(79)(132)(106)
		return string(data)
	}())
}
func ie6PWyogBS0() {
	println(func() string {
		data := make([]byte, 0, 40)
		i := 10
		decryptKey := 85
		for counter := 0; i != 17; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 6:
				data = append(data, "a\x05G"...,
				)
				i = 0
			case 1:
				i = 15
				data = append(data, "JSG"...,
				)
			case 2:
				data = append(data, 84)
				i = 3
			case 7:
				i = 14
				data = append(data, "e\xf57>"...,
				)
			case 13:
				i = 16
				data = append(data, 244)
			case 16:
				i = 17
				for y := range data {
					data[y] = data[y] + byte(decryptKey^y)
				}
			case 8:
				data = append(data, "h\x1d8("...,
				)
				i = 11
			case 9:
				data = append(data, 64)
				i = 13
			case 3:
				data = append(data, "\t^]"...,
				)
				i = 7
			case 14:
				data = append(data, "9:"...,
				)
				i = 9
			case 15:
				data = append(data, 68)
				i = 12
			case 0:
				i = 1
				data = append(data, 7)
			case 11:
				data = append(data, " m[f"...,
				)
				i = 6
			case 5:
				data = append(data, "el"...,
				)
				i = 4
			case 12:
				i = 2
				data = append(data, "O\rO]"...,
				)
			case 10:
				i = 5
				data = append(data, 110)
			case 4:
				i = 8
				data = append(data, "\x18]af"...,
				)
			}
		}
		return string(data)
	}())
}
func sWUGIFo3E() {
	fmt.Println(func() string {
		seed := byte(192)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(14)(51)(119)(169)(147)(19)(14)(5)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
		return string(data)
	}())
}
func jFnBOD() {
	println(func() string {
		fullData := []byte("\x88\xcd-ׯ\x1a\xae\x0f\xe7(\xa8\x9bF%9\x0e\xf9\xba\af=\xe4&\f'滠\xf9\xdbY\n+h\xca\nM<H\xb6&\xfd\xe7οL|\xe4\\o\x97j5\x00Z \a7Q\x8c̅\a\x96\x90)H݇bFC\xa1\xab\xb9\a\xa84")
		data := make([]byte, 0, 40)
		data = append(data, fullData[31]+fullData[49], fullData[5]-fullData[73], fullData[16]+fullData[46], fullData[8]+fullData[14], fullData[74]-fullData[36], fullData[38]^fullData[24], fullData[15]-fullData[11], fullData[47]^fullData[64], fullData[29]-fullData[26], fullData[57]-fullData[41], fullData[7]-fullData[25], fullData[19]-fullData[70], fullData[72]-fullData[2], fullData[28]+fullData[33], fullData[13]+fullData[12], fullData[58]^fullData[77], fullData[0]^fullData[10], fullData[48]^fullData[20], fullData[53]^fullData[55], fullData[4]^fullData[1], fullData[45]+fullData[40], fullData[37]^fullData[30], fullData[75]+fullData[54], fullData[9]^fullData[71], fullData[43]-fullData[6], fullData[59]-fullData[32], fullData[69]^fullData[23], fullData[67]+fullData[68], fullData[63]^fullData[39], fullData[51]+fullData[35], fullData[76]+fullData[34], fullData[17]+fullData[44], fullData[18]-fullData[42], fullData[21]^fullData[61], fullData[62]-fullData[27], fullData[65]^fullData[66], fullData[52]-fullData[60], fullData[50]+fullData[3], fullData[22]^fullData[56])
		return string(data)
	}())
}
func v6zKaN01() {
	fmt.Println(func() string {
		key := []byte("\xc0\xdd)\xeeʿ\xb2\x93")
		data := []byte("\x8f\x8b\xf7\x80\xa5a\x88\x95")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func t5mRztjzj2Mp() {
	fmt.Println(func() string {
		seed := byte(90)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(168)(103)(223)(121)(51)(83)(142)(5)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
		return string(data)
	}())
}
func hxzmUMCvhx() {
	fmt.Println(func() string {
		data := make([]byte, 0, 72)
		i := 14
		decryptKey := 26
		for counter := 0; i != 26; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 12:
				data = append(data, "ڿ"...,
				)
				i = 10
			case 24:
				data = append(data, "\xb1\x9d"...,
				)
				i = 27
			case 1:
				i = 29
				data = append(data, "\xb4\xb5\xa5"...,
				)
			case 20:
				i = 28
				data = append(data, 134)
			case 5:
				i = 2
				data = append(data, "\xd4\xc2"...,
				)
			case 17:
				i = 5
				data = append(data, 150)
			case 30:
				i = 15
				data = append(data, "\xe0\xd0̴"...,
				)
			case 18:
				i = 4
				data = append(data, "\x92\x95"...,
				)
			case 4:
				for y := range data {
					data[y] = data[y] - byte(decryptKey^y)
				}
				i = 26
			case 7:
				i = 24
				data = append(data, "\xdd\xcd\xcc"...,
				)
			case 13:
				data = append(data, "\xbe\xb9\x9f\x88"...,
				)
				i = 21
			case 22:
				data = append(data, "|\xbf\xb7\xb5"...,
				)
				i = 9
			case 9:
				i = 20
				data = append(data, "\xa5\x8c\xcb"...,
				)
			case 14:
				i = 17
				data = append(data, "\xb4\xcc\xda"...,
				)
			case 11:
				i = 22
				data = append(data, "\x83\xc1\xac\x8e"...,
				)
			case 6:
				i = 18
				data = append(data, 123)
			case 28:
				data = append(data, "ů"...,
				)
				i = 23
			case 19:
				data = append(data, 160)
				i = 8
			case 8:
				i = 11
				data = append(data, 167)
			case 16:
				data = append(data, 208)
				i = 25
			case 15:
				i = 12
				data = append(data, "\xf2\xae\xec"...,
				)
			case 0:
				data = append(data, 213)
				i = 16
			case 2:
				data = append(data, "\xa7\x91\xdc"...,
				)
				i = 7
			case 29:
				i = 19
				data = append(data, "\xa4\x8e\xa8\xb4"...,
				)
			case 21:
				data = append(data, "̋\x99"...,
				)
				i = 3
			case 3:
				data = append(data, "\x98\x84"...,
				)
				i = 6
			case 10:
				data = append(data, 170)
				i = 1
			case 27:
				i = 0
				data = append(data, "\xde\xce"...,
				)
			case 25:
				i = 30
				data = append(data, "\xac\xea\xd1\xc8"...,
				)
			case 23:
				i = 13
				data = append(data, "\x98\x93\xcd\xca"...,
				)
			}
		}
		return string(data)
	}())
}
func cxsvrsCoQB() {
	fmt.Println(func() string {
		seed := byte(13)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
		fnc(66)(25)(184)(78)(1)(177)(26)(238)
		return string(data)
	}())
}
func beFuTZ903() {
	defer func() {
		println(func() string {
			fullData := []byte("qt\xc1\x1e\x8c\xa36\xbcQ\v\x14\xe9z\x13\xe4|0p\xe9\x19u\x15B\x9c\r6")
			data := make([]byte, 0, 14)
			data = append(data, fullData[5]^fullData[11], fullData[6]-fullData[2], fullData[4]-fullData[19], fullData[22]^fullData[25], fullData[23]^fullData[7], fullData[10]^fullData[17], fullData[15]-fullData[24], fullData[21]+fullData[9], fullData[13]^fullData[12], fullData[18]-fullData[20], fullData[8]^fullData[0], fullData[3]-fullData[14], fullData[16]^fullData[1])
			return string(data)
		}())
	}()
}
func s6_BNeip() {
	fmt.Println(func() string {
		data := []byte("$\rv>PTGG!na\x13` \xf5\x86U\x13I3hU\x81F1\xe0\xa2UW_G\x89n\xca\"~!\xabt\x1bm\x02u_\x17>Qm\xe4N\xc70\x19IH_\xc8Aw1\xd3\x11$$e|i_e*u")
		positions := [...]byte{31, 36, 60, 26, 57, 20, 15, 52, 20, 55, 22, 14, 45, 3, 18, 34, 56, 48, 62, 25, 52, 33, 50, 62, 66, 11, 65, 7, 47, 68, 12, 61, 46, 17, 16, 44, 44, 34, 36, 37, 15, 7, 16, 27, 15, 48, 30, 11, 13, 26, 24, 69, 26, 63, 23, 36, 28, 5, 1, 68, 54, 48, 63, 5, 40, 36, 47, 4, 27, 25, 63, 8, 58, 44, 41, 23, 0, 53, 69, 7, 51, 19, 17, 56, 0, 66, 22, 12, 4, 18, 26, 47, 59, 46, 54, 39, 50, 35}
		for i := 0; i < 98; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 213
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
		}
		return string(data)
	}())
}
func h0YSAxFt() {
	fmt.Println(func() string {
		key := []byte("\xb4=Vꍻ\x8d\xb2")
		data := []byte("\xfbUv\x84⛷\x9a")
		for i, b := range key {
			data[i] = data[i] ^ b
		}
		return string(data)
	}())
}
func jJ_OwFyC() {
	println(func() string {
		fullData := []byte("\x03=<*df\x95\xc5\tRHd\xaf\xe3=\x0e\x7f\xa6s\x1c}\xf82н\xdb\\L0\f}\x8d\xad1\xb7?\xcf\xcd\tY\xf87]\x16D^\xa0icg\xf6K>Sbl\x02\x97=$\xb1wE;U\x99\x13\x86H_]\x1d;\xe2\xd6ŬH")
		data := make([]byte, 0, 40)
		data = append(data, fullData[43]+fullData[48], fullData[8]^fullData[5], fullData[10]^fullData[58], fullData[69]^fullData[16], fullData[59]^fullData[68], fullData[65]+fullData[74], fullData[15]^fullData[30], fullData[35]^fullData[51], fullData[36]-fullData[12], fullData[61]-fullData[1], fullData[4]-fullData[72], fullData[55]-fullData[27], fullData[45]^fullData[3], fullData[50]-fullData[6], fullData[38]^fullData[54], fullData[70]-fullData[21], fullData[14]-fullData[71], fullData[64]+fullData[29], fullData[37]-fullData[32], fullData[39]^fullData[63], fullData[62]^fullData[41], fullData[46]+fullData[75], fullData[42]^fullData[2], fullData[28]-fullData[7], fullData[67]^fullData[17], fullData[20]-fullData[19], fullData[24]+fullData[60], fullData[26]-fullData[40], fullData[57]^fullData[34], fullData[44]-fullData[23], fullData[25]-fullData[47], fullData[33]^fullData[77], fullData[73]+fullData[52], fullData[11]-fullData[0], fullData[66]-fullData[76], fullData[22]^fullData[53], fullData[49]+fullData[56], fullData[13]^fullData[31], fullData[18]-fullData[9])
		return string(data)
	}())
}
func x2cz3vk() {
	fmt.Println(func() string {
		key := []byte("2%~lD\xdc-\x95")
		data := []byte("\x1dC\xa2\x02+D\r\x93")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func bTlavyMZ() {
	fmt.Println(func() string {
		data := []byte("=F\xad\x8e\x8d\xb0:\x8b")
		positions := [...]byte{7, 2, 2, 5, 5, 2, 4, 3, 7, 1, 5, 0}
		for i := 0; i < 12; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 212
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
		}
		return string(data)
	}())
}
func vT56NP() {
	fmt.Println(func() string {
		fullData := []byte("\x1b\xef\xd1\r\xd8sS\t\xe6\xadB-X\x90O\x80")
		data := make([]byte, 0, 9)
		data = append(data, fullData[12]-fullData[7], fullData[13]+fullData[4], fullData[2]+fullData[14], fullData[0]-fullData[9], fullData[1]-fullData[15], fullData[6]^fullData[5], fullData[11]+fullData[3], fullData[10]+fullData[8])
		return string(data)
	}())
}
func cJcJjquces() {
	fmt.Println(func() string {
		key := []byte("+\x94y\xe0\x17uN?")
		data := []byte("$ԧ\x8eX\xab\xec\xe9")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}())
}
func v32pgB() {
	fmt.Println(func() string {
		seed := byte(14)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
		fnc(93)(211)(94)(10)(21)(219)(208)(142)
		return string(data)
	}())
}
func kzgzBSgjf2X() {
	println(func() string {
		data := []byte("\x98\x8f\x98t\x8c\x93sf>)\x9bPT\x88?e\x98\xc9\"\x04rr\x7f->\r~\xd6 \x99rk \x9es\x16\x8fnO")
		positions := [...]byte{13, 1, 33, 26, 18, 17, 29, 7, 17, 16, 22, 5, 10, 27, 36, 36, 7, 5, 1, 26, 1, 0, 2, 4, 12, 21, 31, 17, 29, 25, 29, 38, 9, 35, 26, 2, 22, 21, 25, 4, 11, 36, 11, 19, 8, 24, 22, 4, 3, 14, 34, 34, 38, 12, 35, 23, 23, 25}
		for i := 0; i < 58; i += 2 {
			localKey := byte(i) + byte(positions[i]^positions[i+1]) + 226
			data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
		}
		return string(data)
	}())
}
func z6nDvu() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func w4d4ahEgl() {
	fmt.Println(func() string {
		fullData := []byte("_\x8b\xc8g\x83`\xf1Bd\xe1A\xa5P\x01\xd2$\x11X\xf0gӡe+\xd54\x8a\x1f\xa6\xbe\xd4\xe3\x0e\xef\xed\x8e\xf1\xb3L\x97\x91!\x86\x1d\x96ҲI\x1e\x10\xadcI\xa2\xf2N\xd5\x7fd\xf7U\x16\xcb\xd9.\x18\x9c\x95\xa6%\xe3\x93\U001059de\u03a2\\\x02.$\xaf\xf3\xc20\xea\xfa\xd3>\xc4\x01]\x16\x9dA勋\xd8\v\x8a\xccࡣ\xe3\x9ck懁\x10\xe7\x94+/\xd5qUu\xc8p\x9c\xeb\x87\xd9Х\xcd|e\xb2_и\x96/vG\x10g")
		data := make([]byte, 0, 72)
		data = append(data, fullData[107]^fullData[45], fullData[60]+fullData[140], fullData[3]-fullData[6], fullData[49]+fullData[41], fullData[100]+fullData[19], fullData[101]^fullData[56], fullData[129]-fullData[42], fullData[102]-fullData[66], fullData[96]^fullData[98], fullData[62]^fullData[11], fullData[122]+fullData[36], fullData[65]^fullData[139], fullData[54]+fullData[119], fullData[40]-fullData[133], fullData[126]-fullData[51], fullData[91]+fullData[8], fullData[116]-fullData[134], fullData[14]+fullData[110], fullData[18]-fullData[135], fullData[127]+fullData[128], fullData[30]^fullData[97], fullData[15]^fullData[118], fullData[75]-fullData[64], fullData[16]-fullData[46], fullData[90]+fullData[26], fullData[113]+fullData[55], fullData[80]^fullData[17], fullData[69]-fullData[72], fullData[58]^fullData[61], fullData[25]^fullData[108], fullData[9]^fullData[68], fullData[78]+fullData[24], fullData[70]-fullData[120], fullData[67]+fullData[63], fullData[88]^fullData[132], fullData[79]-fullData[105], fullData[141]^fullData[115], fullData[13]-fullData[123], fullData[103]+fullData[114], fullData[43]+fullData[7], fullData[87]-fullData[104], fullData[117]-fullData[21], fullData[106]^fullData[136], fullData[95]^fullData[48], fullData[20]^fullData[39], fullData[84]^fullData[83], fullData[47]^fullData[89], fullData[121]^fullData[28], fullData[82]-fullData[12], fullData[27]+fullData[137], fullData[94]-fullData[131], fullData[92]^fullData[23], fullData[77]^fullData[44], fullData[73]^fullData[59], fullData[93]+fullData[52], fullData[74]-fullData[5], fullData[71]+fullData[53], fullData[31]+fullData[1], fullData[86]-fullData[130], fullData[35]^fullData[33], fullData[109]-fullData[125], fullData[138]+fullData[76], fullData[37]-fullData[4], fullData[32]+fullData[22], fullData[81]+fullData[10], fullData[85]-fullData[29], fullData[0]-fullData[124], fullData[38]-fullData[34], fullData[111]^fullData[99], fullData[57]^fullData[112], fullData[50]+fullData[2])
		return string(data)
	}())
}
func zHOLsNFgJ() {
	println(func() string {
		seed := byte(234)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
		fnc(147)(18)(250)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
		return string(data)
	}())
}
func h0QUJpQ() {
	var zi1_cW9 string = "Oops"
	_, _ = os.Stdout.Write([]byte(zi1_cW9))
}
func ns7jsUASz2_1() {
	defer func() {
		println(func() string {
			data := make([]byte, 0, 14)
			i := 0
			decryptKey := 107
			for counter := 0; i != 2; counter++ {
				decryptKey ^= i * counter
				switch i {
				case 5:
					i = 6
					data = append(data, 207)
				case 1:
					data = append(data, 235)
					i = 7
				case 0:
					data = append(data, "\xf5!\x1c\x1e"...,
					)
					i = 5
				case 4:
					i = 1
					data = append(data, 220)
				case 8:
					data = append(data, 12)
					i = 3
				case 6:
					i = 8
					data = append(data, "\x14\x1c\xce"...,
					)
				case 7:
					for y := range data {
						data[y] = data[y] + byte(decryptKey^y)
					}
					i = 2
				case 3:
					data = append(data, "\x18\xc1"...,
					)
					i = 4
				}
			}
			return string(data)
		}())
	}()
}
func lMIzLH0YI() {
	fmt.Println(func() string {
		key := []byte("֊\x84\xbd\xf6\x1f\xed\x1a\x96q2\xe2\xb5\x16b\xea\x96\n\x94Qn\x18ؙ\xbb\xb5\xb4ss\xde]\x11\xf2\xfcn\x1a\xe3\xc3\xc6\xdc]\\\x11\xa2\xeb\x8c\x02\x1c[\xd9\x0e\xb2y\\d\xb9\xf9u%\xe3\xd6c\x1e\xc8\xe3$\x11\x8c\x8b\xc28")
		data := []byte("$\xef\xfa\xeeh~4J\x04ߓA\xfcH\xd8O\xf5c\xcc\xc6\xcdmH\xf8\t\xea*\xa4\xe5=\xa4B`j\xcfy/(:;\xb6\x90\x86\x01/\xbdy\x8a\xba'F(\xad\xce\xc3\x00.\xe3\x93D5\xa7N;H\x96\x85\xeb\xe41\xad")
		for i, b := range key {
			data[i] = data[i] - b
		}
		return string(data)
	}())
}
func n94xh9W2() {
	println(func() string {
		fullData := []byte("\xd4W\xe2|\x95\x18\x02\x86\xfa|\x94^c\x81\r\xfd\x1e\x87\x1a\xdeo\x1b\x06\xb3\xf4\xed{\x064\xf3\xf4\xf9p\b\xba\xb9\xd3\xcdQ\x03\x80q\x9e\xaf0\xadɰ\xd0\xf1_y\xa5\xb1\xbc\xb5\xbd\xb0\x17;'xg&\x0e\x02\xf0'\x87\xf2N\xd8\x1a\x8a\x85X#\xa2")
		data := make([]byte, 0, 40)
		data = append(data, fullData[26]-fullData[6], fullData[9]-fullData[14], fullData[67]+fullData[70], fullData[1]+fullData[46], fullData[10]+fullData[71], fullData[23]+fullData[54], fullData[8]+fullData[51], fullData[35]^fullData[37], fullData[61]^fullData[75], fullData[47]+fullData[73], fullData[7]^fullData[43], fullData[41]-fullData[38], fullData[24]^fullData[40], fullData[55]^fullData[0], fullData[53]+fullData[34], fullData[17]+fullData[19], fullData[27]+fullData[18], fullData[39]+fullData[11], fullData[66]^fullData[48], fullData[56]+fullData[52], fullData[29]^fullData[13], fullData[68]^fullData[2], fullData[28]-fullData[36], fullData[50]-fullData[30], fullData[60]+fullData[31], fullData[32]+fullData[49], fullData[42]-fullData[44], fullData[22]-fullData[77], fullData[5]+fullData[33], fullData[58]^fullData[12], fullData[25]+fullData[74], fullData[63]-fullData[45], fullData[15]+fullData[76], fullData[20]-fullData[64], fullData[4]^fullData[69], fullData[3]-fullData[21], fullData[62]+fullData[65], fullData[16]-fullData[57], fullData[59]^fullData[72])
		return string(data)
	}())
}
func i0BR0cg() {
	defer func() {
		println(func() string {
			fullData := []byte("\x18\xf1\f\x8e\x06\x98Zd\xf6k*\xfa\xe7\xd68ʫ!n\xd1\x1aT|\xe1xi")
			data := make([]byte, 0, 14)
			data = append(data, fullData[9]^fullData[17], fullData[15]+fullData[16], fullData[21]-fullData[23], fullData[20]+fullData[6], fullData[5]-fullData[24], fullData[22]-fullData[0], fullData[4]^fullData[25], fullData[8]-fullData[13], fullData[12]^fullData[3], fullData[18]-fullData[11], fullData[1]-fullData[19], fullData[7]-fullData[10], fullData[2]+fullData[14])
			return string(data)
		}())
	}()
}
func h0omJDWpLXV() {
	fmt.Println(func() string {
		fullData := []byte("\x05'\xd0?#\xed\xbc!\xa1\xf0$\xcd\xf3\xa4\xd0\xff")
		data := make([]byte, 0, 9)
		data = append(data, fullData[12]-fullData[13], fullData[10]-fullData[6], fullData[2]^fullData[9], fullData[11]+fullData[8], fullData[3]-fullData[14], fullData[15]+fullData[7], fullData[1]-fullData[5], fullData[4]+fullData[0])
		return string(data)
	}())
}

func imhI6Vp() {
	switch get_byte() {
	case '6':
		zfLhsQCb_f()
	case '9':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'o':
		wwVLSB()
	case 'k':
		iG1v8b5cKQOa()
	default:
		hacker_get_out()
	}
}

func kQ0tB7vbkx() {
	switch get_byte() {
	case 'q':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x02\xa9\x18E\xc0Sr\xf7\xc1\xc44\xac\xfd^`\x81\x9eǕ \x06.\xca\xc1\xb3(\x86\xec\xfc\xc3bϞ\xc3q)\xe7\"Jh\x9cP\xe0S\xcf\xd4\xe1/}\xd0n \x84\xee\xbb9\x01\xd1a0\xc1\x99\x92p\xc3\v\xcb\xf1\xec\xfe\"G\xa0\xb4o\xef/@U\x957\x9b\x1c\xb8N\xba\x9b\xa9Ϛ:ԛR\x0e\xfc\x9cmo\x9b\xd1N\x99̺\xb5\x980H\x85\xe6\xf3%\xa0H\xa7\x9ew\x1d=ԝ\x98\xeaީ\xda?:'\x84\x83\xbaL\uf105\xdd\f\xa4Am")
				data := make([]byte, 0, 72)
				data = append(data, fullData[100]-fullData[131], fullData[81]+fullData[22], fullData[53]^fullData[122], fullData[96]+fullData[18], fullData[13]-fullData[27], fullData[115]+fullData[83], fullData[124]^fullData[102], fullData[29]+fullData[97], fullData[24]^fullData[137], fullData[19]+fullData[84], fullData[128]+fullData[129], fullData[60]-fullData[30], fullData[21]-fullData[36], fullData[56]-fullData[88], fullData[62]-fullData[82], fullData[12]^fullData[106], fullData[70]-fullData[64], fullData[109]+fullData[45], fullData[135]-fullData[133], fullData[105]-fullData[77], fullData[71]^fullData[2], fullData[127]-fullData[123], fullData[17]+fullData[87], fullData[139]+fullData[54], fullData[49]^fullData[116], fullData[92]+fullData[89], fullData[11]^fullData[126], fullData[46]+fullData[41], fullData[93]+fullData[51], fullData[101]-fullData[134], fullData[78]-fullData[94], fullData[85]+fullData[117], fullData[8]-fullData[5], fullData[61]^fullData[7], fullData[95]-fullData[86], fullData[23]+fullData[32], fullData[65]+fullData[140], fullData[125]^fullData[103], fullData[91]+fullData[113], fullData[31]-fullData[63], fullData[9]+fullData[79], fullData[39]-fullData[10], fullData[75]+fullData[26], fullData[40]+fullData[33], fullData[52]+fullData[4], fullData[14]-fullData[76], fullData[72]-fullData[35], fullData[25]-fullData[132], fullData[59]^fullData[98], fullData[20]^fullData[108], fullData[74]-fullData[80], fullData[136]^fullData[111], fullData[34]^fullData[3], fullData[50]-fullData[28], fullData[107]+fullData[47], fullData[73]-fullData[141], fullData[120]+fullData[58], fullData[121]+fullData[57], fullData[119]-fullData[44], fullData[42]+fullData[15], fullData[48]^fullData[37], fullData[69]^fullData[104], fullData[66]-fullData[99], fullData[55]+fullData[90], fullData[114]+fullData[118], fullData[68]^fullData[16], fullData[110]-fullData[6], fullData[43]^fullData[138], fullData[0]-fullData[1], fullData[112]+fullData[38], fullData[130]^fullData[67])
				return string(data)
			}())
		}()
	case 84:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 2
					decryptKey := 48
					for counter := 0; i != 3; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 5:
							i = 6
							data = append(data, "\xe9\x04\x13"...,
							)
						case 1:
							data = append(data, "4@"...,
							)
							i = 5
						case 2:
							i = 4
							data = append(data, 13)
						case 6:
							for y := range data {
								data[y] = data[y] + byte(decryptKey^y)
							}
							i = 3
						case 0:
							i = 1
							data = append(data, "\xe7,4\xe6"...,
							)
						case 4:
							data = append(data, "946"...,
							)
							i = 0
						}
					}
					return string(data)
				}())
			}()
		}()
	case 'y':
		hlOKzgfw0()
	case 54:
		jFJdks()
	default:
		hacker_get_out()
	}
}

func vWInx9z9ocDp() {
	switch get_byte() {
	case 'e':
		func() {
			fmt.Println(func() string {
				key := []byte("\x0ei\xdd\u07b9˰\x89\xb3\xbdƌI\xae\xb3H\xc8\xf1\xa0&{6\xd2\t\xb6[PǶ\x9c\x9b\xee\x05\xce[+\xaa\x91\t\xdf\xe6\xfa:lY\xad\xbd\x0f\x9d\xcd\vB\xe4\\\xe8fn\x05\x15m\xe4\x17Q\x83ikY\xb2\x9eiM")
				data := []byte("@\xfc\x99S\xb9\x94\x97\xa7\xbb\xb1\x9b\xd3\xfe\x84\xc3\x1d\x97h\x98O\xe4\x1f\x9eV\x98\xda&j\xbcìCi\xa0\x064\xa2\xd4k\x80s:;\xf3넺_\u0081-4P\x16w\xe1\xc7iY\xf4{-\xdf\xf0\xfc\a\x1b\xad\xbb\x06(")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 114:
		jl12Iyv()
	case 79:
		m1pShztdc()
	case 73:
		gABvvFwz1I()
	default:
		hacker_get_out()
	}
}

func hLIwfO() {
	switch get_byte() {
	case 'P':
		jXuJvL6()
	case 53:
		func() {
			defer func() {
				println(func() string {
					seed := byte(86)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
					fnc(244)(43)(254)(1)(172)(68)(11)(177)(73)(11)(172)(26)(10)
					return string(data)
				}())
			}()
		}()
	case 116:
		rvCGaQMt9_L1()
	case 111:
		f3CHIT4drR()
	default:
		hacker_get_out()
	}
}

func zrfNjJjz() {
	switch get_byte() {
	case 114:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 12
				decryptKey := 36
				for counter := 0; i != 9; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 11:
						i = 1
						data = append(data, 91)
					case 4:
						i = 16
						data = append(data, "l,"...,
						)
					case 18:
						i = 15
						data = append(data, 45)
					case 0:
						i = 14
						data = append(data, "d$(#"...,
						)
					case 2:
						i = 5
						data = append(data, "o\x7f"...,
						)
					case 1:
						i = 9
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 12:
						data = append(data, "%2+\x7f"...,
						)
						i = 13
					case 16:
						i = 18
						data = append(data, 110)
					case 3:
						i = 10
						data = append(data, 48)
					case 13:
						i = 8
						data = append(data, "46)"...,
						)
					case 6:
						data = append(data, "\x11\x17"...,
						)
						i = 11
					case 14:
						i = 17
						data = append(data, "`50:"...,
						)
					case 15:
						i = 0
						data = append(data, ":,+ "...,
						)
					case 8:
						i = 2
						data = append(data, "/t"...,
						)
					case 5:
						data = append(data, "w$"...,
						)
						i = 3
					case 7:
						data = append(data, 30)
						i = 6
					case 10:
						i = 4
						data = append(data, "96"...,
						)
					case 17:
						i = 7
						data = append(data, "\\\x1c\x19"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 's':
		rAqZTIG0C_()
	case '6':
		dUQoOsx()
	case 'h':
		reg8KUbqQyJV()
	default:
		hacker_get_out()
	}
}

func vfkL6NHeZZ() {
	switch get_byte() {
	case '9':
		aQMCsxX0B()
	case 73:
		h2pbkK()
	case 'l':
		func() {
			defer func() {
				println(func() string {
					data := []byte("\xb2u\xeb\x8cip\xbc\xf1B\xa5 \xaf\xec")
					positions := [...]byte{11, 5, 11, 7, 12, 7, 3, 0, 4, 2, 6, 8, 12, 6, 2, 9}
					for i := 0; i < 16; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 189
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
					}
					return string(data)
				}())
			}()
		}()
	case '5':
		zjmQsdVK()
	default:
		hacker_get_out()
	}
}

func pj20GNf4() {
	switch get_byte() {
	case 68:
		kxjEgXgs1()
	case 57:
		eEU287y()
	case 89:
		func() {
			fmt.Println(func() string {
				fullData := []byte("G\"L\xcc,\x80\x88\xc7L1\xadn\xf4SL\xd1c\x9f\xa9\x8f\x06G\xf8(I\xceZ\xe63\xe3\xe1YBT\xae\xa3\xc1\x03\x1dO\xee\x0f-A\x8dCU\xe4\b\x8e$\x8cI\x99g\xa7+\r\xe4\t\xad\xa1\xb6\xb3SY̠5W\x9b\xbcc\xa5\x98\x99J\v\xe1\xe6\xca\xfd\x85y:?\xc7Q$\xc7\x1c@9\xf1\x18Y=\x82\x813C\x94\xd1y\x82\xfd\xca}Y\xd9\x02\x9e\xcee\xcf%\x0f\x9bh\f%\xda<\xef\x00J\xd5\x06s\x11\xd5<n\xf1\x03pk\xedBG/\x96")
				data := make([]byte, 0, 72)
				data = append(data, fullData[105]^fullData[63], fullData[61]-fullData[122], fullData[20]^fullData[135], fullData[3]+fullData[113], fullData[46]-fullData[29], fullData[49]+fullData[102], fullData[7]-fullData[5], fullData[28]+fullData[81], fullData[8]^fullData[1], fullData[131]-fullData[112], fullData[94]+fullData[52], fullData[121]^fullData[82], fullData[33]-fullData[57], fullData[22]^fullData[80], fullData[78]-fullData[136], fullData[115]^fullData[91], fullData[74]^fullData[89], fullData[44]+fullData[66], fullData[134]+fullData[68], fullData[4]+fullData[24], fullData[18]-fullData[76], fullData[55]+fullData[34], fullData[2]+fullData[88], fullData[90]+fullData[100], fullData[95]-fullData[77], fullData[17]+fullData[141], fullData[110]-fullData[51], fullData[73]^fullData[101], fullData[41]+fullData[16], fullData[71]+fullData[35], fullData[38]^fullData[26], fullData[128]^fullData[32], fullData[36]-fullData[13], fullData[6]+fullData[27], fullData[10]-fullData[14], fullData[79]+fullData[83], fullData[25]^fullData[97], fullData[31]-fullData[12], fullData[21]^fullData[99], fullData[11]+fullData[133], fullData[118]+fullData[93], fullData[65]-fullData[120], fullData[125]^fullData[85], fullData[62]-fullData[69], fullData[37]^fullData[139], fullData[130]^fullData[58], fullData[23]+fullData[39], fullData[132]-fullData[124], fullData[108]^fullData[127], fullData[114]-fullData[98], fullData[140]+fullData[59], fullData[0]^fullData[9], fullData[70]-fullData[54], fullData[116]^fullData[107], fullData[53]-fullData[84], fullData[50]^fullData[72], fullData[47]^fullData[15], fullData[75]-fullData[56], fullData[45]^fullData[42], fullData[138]-fullData[30], fullData[64]^fullData[119], fullData[103]^fullData[96], fullData[43]+fullData[123], fullData[129]-fullData[111], fullData[117]+fullData[106], fullData[92]-fullData[86], fullData[60]^fullData[109], fullData[40]-fullData[19], fullData[48]+fullData[87], fullData[104]^fullData[137], fullData[126]+fullData[67])
				return string(data)
			}())
		}()
	case 71:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func kz4FNvTGd() {
	switch get_byte() {
	case 'K':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 1
				decryptKey := 100
				for counter := 0; i != 4; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 0:
						data = append(data, 242)
						i = 8
					case 6:
						i = 2
						data = append(data, 25)
					case 1:
						data = append(data, 1)
						i = 6
					case 9:
						data = append(data, 37)
						i = 7
					case 2:
						data = append(data, 212)
						i = 5
					case 3:
						i = 4
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 5:
						i = 9
						data = append(data, 33)
					case 8:
						i = 3
						data = append(data, 223)
					case 7:
						i = 0
						data = append(data, 213)
					}
				}
				return string(data)
			}())
		}()
	case 85:
		qvKiCF()
	case 121:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'V':
		tvoJAGNmGF()
	default:
		hacker_get_out()
	}
}

func y87rpov() {
	switch get_byte() {
	case 88:
		fq0x4_QK3S7p()
	case 57:
		zZo6KpfYI()
	case 48:
		func() {
			fmt.Println(func() string {
				data := []byte("87\x84^\x84\xbbG0\xa8̑\xd6_\xdcv~\xb2Y8\xb9_|\xd3_\xba5v1\xb0_L1\x98\xb9x\xb2Ln\x1f\x7fYcq\xb5\xe0_\xcbG\x96\xa98\x804r_\xad\x97\xb8\xadg_\x8b0S\vrT_AO\x1f")
				positions := [...]byte{66, 63, 38, 5, 39, 69, 11, 0, 11, 59, 58, 34, 10, 13, 46, 57, 11, 58, 51, 16, 68, 12, 22, 48, 35, 57, 28, 44, 4, 32, 56, 9, 70, 48, 51, 15, 45, 45, 13, 49, 5, 33, 49, 64, 55, 43, 47, 21, 8, 45, 61, 3, 1, 2, 42, 41, 0, 33, 41, 42, 2, 3, 41, 0, 5, 35, 19, 24, 37, 30, 19, 0, 5, 13, 45, 28}
				for i := 0; i < 76; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 170
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 'O':
		func() {
			fmt.Println(func() string {
				key := []byte("\x15\xee\xe4\xe7(^+\x8d")
				data := []byte("dV\x04U\x97~e\xb5")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func b89sZtv() {
	switch get_byte() {
	case 116:
		iC3mS0()
	case 69:
		kpVErB()
	case 'F':
		xyVPgQ_()
	case 83:
		func() {
			defer func() {
				println(func() string {
					seed := byte(177)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
					fnc(251)(217)(246)(15)(170)(80)(235)(79)(215)(225)(86)(246)(134)
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func tnftcFyXd8m() {
	switch get_byte() {
	case 'F':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'u':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 74:
		fq0x4_QK3S7p()
	case 'e':
		pgcTAMynQ()
	default:
		hacker_get_out()
	}
}

func ph_iN1() {
	switch get_byte() {
	case 'C':
		g44h4LDlQ()
	case 'N':
		aXtB9uB4t3()
	case 82:
		z5jFM8u()
	case 109:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func ts4MsXq5() {
	switch get_byte() {
	case 'X':
		eXRpBaS60()
	case 'T':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 10
				decryptKey := 95
				for counter := 0; i != 3; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 10:
						data = append(data, "\x8a\x81\x88"...,
						)
						i = 5
					case 7:
						data = append(data, "\x82\x81\x89Q"...,
						)
						i = 16
					case 6:
						i = 17
						data = append(data, "D<"...,
						)
					case 0:
						i = 3
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 18:
						i = 0
						data = append(data, 88)
					case 13:
						i = 2
						data = append(data, 133)
					case 8:
						i = 6
						data = append(data, "9T"...,
						)
					case 5:
						data = append(data, "4\x81\x85"...,
						)
						i = 14
					case 11:
						i = 9
						data = append(data, "wk"...,
						)
					case 17:
						i = 13
						data = append(data, "\x91\x7f\x8a"...,
						)
					case 9:
						data = append(data, "hs"...,
						)
						i = 15
					case 2:
						i = 11
						data = append(data, "!c#f"...,
						)
					case 14:
						i = 8
						data = append(data, "\x8a\x8c"...,
						)
					case 1:
						i = 7
						data = append(data, "yp-"...,
						)
					case 16:
						data = append(data, 147)
						i = 4
					case 4:
						data = append(data, "\x9a\x95\x9e"...,
						)
						i = 12
					case 15:
						data = append(data, ")k"...,
						)
						i = 1
					case 12:
						i = 18
						data = append(data, 164)
					}
				}
				return string(data)
			}())
		}()
	case '1':
		oVG2zzw()
	case 'b':
		woqCp34srz()
	default:
		hacker_get_out()
	}
}

func tnuSpC() {
	switch get_byte() {
	case '6':
		e1wBYxUOjhqR()
	case 57:
		vnHQUlehgM()
	case 117:
		func() {
			println(func() string {
				key := []byte("d\xdbEM\xa2\xec\x88o\x827\x85,\x10\xf3R\xceȎ\"\x1d\x96\xdf%҈?0\xf7Dnc\xe9\xfawG\xb6\xb0fZ")
				data := []byte("\x1d\xb40m\u0383\xfb\x1b\xa2\r\xac\fd\x929\xab\xe8\xef\x02\x7f\xe4\xbaD\xb9\xa8^^\x93d\x1a\x11\x90\xda\x16 \xd7\xd9\b{")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 78:
		a6UlfIeh()
	default:
		hacker_get_out()
	}
}

func aTeYpic() {
	switch get_byte() {
	case 76:
		fOPO4bJz()
	case '5':
		xUvtxFVYRKU()
	case 'I':
		iiU1xF0()
	case 'r':
		func() {
			fmt.Println(func() string {
				data := []byte("{\x10\x11\xf6r}G$\x1dn\xa0dVQvM_\\8u\x11\xa5c_NE^\xad҈GߣWT_nRt\x8aY4u\x1bD1ws_\x9a847r\x84G5\xbbnaTD0s\x90\x8fA_Yx\x89")
				positions := [...]byte{21, 31, 0, 52, 66, 27, 1, 7, 8, 11, 70, 28, 15, 64, 2, 25, 17, 43, 21, 17, 22, 43, 69, 15, 3, 64, 66, 32, 33, 33, 2, 20, 37, 5, 2, 12, 51, 31, 20, 47, 22, 51, 57, 64, 7, 33, 34, 54, 65, 10, 26, 49, 37, 22, 7, 60, 51, 13, 51, 52, 39, 2, 34, 29, 70, 37, 8, 51, 34, 34, 57, 26, 33, 36}
				for i := 0; i < 74; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 179
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func dD2Ppr8() {
	switch get_byte() {
	case 'l':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'O':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 77:
		ecVrOve()
	case 116:
		hfUXBzDFbe()
	default:
		hacker_get_out()
	}
}

func vKHzyquz() {
	switch get_byte() {
	case 104:
		qyAX5mS2T()
	case 'F':
		iiV6qRfv()
	case 116:
		gFzDBmOB9S()
	case 99:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 7
				decryptKey := 218
				for counter := 0; i != 2; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 0:
						i = 1
						data = append(data, 90)
					case 5:
						data = append(data, 174)
						i = 8
					case 3:
						data = append(data, 100)
						i = 4
					case 9:
						data = append(data, 166)
						i = 6
					case 1:
						i = 3
						data = append(data, 117)
					case 8:
						i = 0
						data = append(data, 168)
					case 7:
						i = 9
						data = append(data, 140)
					case 4:
						i = 2
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 6:
						i = 5
						data = append(data, 95)
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func gypfLQR() {
	switch get_byte() {
	case 115:
		d1Ft55Zg()
	case 83:
		func() {
			fmt.Println(func() string {
				seed := byte(72)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(7)(25)(184)(78)(1)(177)(26)(238)
				return string(data)
			}())
		}()
	case 'b':
		oZFyO5m()
	case 'c':
		cDLRzrzU9()
	default:
		hacker_get_out()
	}
}

func a3f3XB6Uvgae() {
	switch get_byte() {
	case 97:
		func() {
			fmt.Println(func() string {
				seed := byte(131)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(210)(189)(50)(178)(101)(123)(16)(14)
				return string(data)
			}())
		}()
	case 'b':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 86:
		vBkmVR()
	case '5':
		bv9iAMYDsD()
	default:
		hacker_get_out()
	}
}

func nu8cmxev() {
	switch get_byte() {
	case 76:
		vopQQ6A()
	case 108:
		n360Ct8Ssdl6()
	case 'a':
		syNjBt_PIDn1()
	case 'v':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 0
					decryptKey := 47
					for counter := 0; i != 5; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 2:
							i = 7
							data = append(data, "GO"...,
							)
						case 0:
							data = append(data, "lR"...,
							)
							i = 6
						case 6:
							i = 2
							data = append(data, "WQ\x02"...,
							)
						case 7:
							data = append(data, "\x01G"...,
							)
							i = 3
						case 4:
							data = append(data, "\f\x17n"...,
							)
							i = 1
						case 3:
							i = 4
							data = append(data, 91)
						case 1:
							for y := range data {
								data[y] = data[y] ^ byte(decryptKey^y)
							}
							i = 5
						}
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func n3KwMb() {
	switch get_byte() {
	case 117:
		qR9xlSYk()
	case 116:
		gsmkaP77()
	case 79:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 8
				decryptKey := 112
				for counter := 0; i != 1; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 10:
						data = append(data, "\xa7\xe7\xec"...,
						)
						i = 11
					case 7:
						i = 0
						data = append(data, "\xec\xf0\xa2"...,
						)
					case 13:
						i = 2
						data = append(data, "\x17\x12\x1b"...,
						)
					case 4:
						data = append(data, "\x14\r\xd7"...,
						)
						i = 5
					case 14:
						data = append(data, "+ \xdb"...,
						)
						i = 9
					case 8:
						data = append(data, " \x15\x1a\xc4"...,
						)
						i = 12
					case 3:
						data = append(data, 232)
						i = 6
					case 11:
						i = 7
						data = append(data, 229)
					case 15:
						i = 3
						data = append(data, "\x11\x14\x14\xcf"...,
						)
					case 2:
						data = append(data, "\xdf\x1f"...,
						)
						i = 14
					case 9:
						data = append(data, ".+1"...,
						)
						i = 10
					case 5:
						data = append(data, "\x17\xd5\x16%"...,
						)
						i = 13
					case 6:
						i = 4
						data = append(data, "\xd6\xcc\x1f\v"...,
						)
					case 0:
						i = 1
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 12:
						i = 15
						data = append(data, 15)
					}
				}
				return string(data)
			}())
		}()
	case 'R':
		func() {
			println(func() string {
				key := []byte("\x10\x91̭\x97\xa2韫S\x02.\xfb@dF\xc3\x1b\xe0(O[a\xc2\x0f\xbd\xf9OG:\xbeU\x8b\x1e\u0090\x00\x1d!")
				data := []byte("i\xfe\xb9\x8d\xfb͚\xeb\x8bi+\x0e\x8f!\x0f#\xe3z\xc0J=>\x00\xa9/ܗ+gN\xcc,\xab\x7f\xa5\xf1is\x00")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func vEyrf7ho() {
	switch get_byte() {
	case 'z':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 69:
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xdf-\xae\xb9S\xaf\xb1\xdbns\xaf\xfa\x05")
					data := []byte("kHŻ͵\xbeE\xfb\x01q@?")
					for i, b := range key {
						data[i] = data[i] + b
					}
					return string(data)
				}())
			}()
		}()
	case 109:
		kxrdx2o()
	case 111:
		llWazOF()
	default:
		hacker_get_out()
	}
}

func vFHNFVf() {
	switch get_byte() {
	case 'H':
		func() {
			println(func() string {
				key := []byte("\xa0=(p\x1a\x0e!7\xf2\xa7Kd\x00\x89\x99>W\x96\x0ez\xf0j\xa1\\\x8c~\x9b{T\x98\xads;\xe4\x0fD\xff\x88)")
				data := []byte("\x19\xac\x9d\x90\x86}\x94\xab\x12\xe1t\x84t\xea\x04\xa3w\xf7.\xdcb\xcf\x02Ǭ\xdf\t\xdft\f\x1f\xec[Ev\xa5h\xf6J")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 's':
		ji29Ob3wj_ZX()
	case '5':
		cyMKu_fE8E()
	case 122:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func qvKiCF() {
	switch get_byte() {
	case 'c':
		kz4FNvTGd()
	case 68:
		wdb2JKNb4Csl()
	case 122:
		m8VpM9ElE()
	case 'Z':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func f00Vflcq() {
	switch get_byte() {
	case 'P':
		cfE1rYgSAOZI()
	case 111:
		x2cz3vk()
	case 74:
		func() {
			defer func() {
				println(func() string {
					data := []byte("J\xf3s\xa7cd\xcf it\"\xb2x")
					positions := [...]byte{12, 3, 10, 3, 3, 10, 12, 4, 6, 12, 4, 11, 1, 3}
					for i := 0; i < 14; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 121
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'd':
		v0KsnqX81()
	default:
		hacker_get_out()
	}
}

func a6UlfIeh() {
	switch get_byte() {
	case 'B':
		func() {
			println(func() string {
				fullData := []byte("\xb0\x96\xe5~j\xee\xb4\xebn\x177/\x87H\xa5\x99\x98&\xc5#\x05\x90\xb2\x97\x19\xf6p\x9fC\xf8\xa3\x8f\xac\xe3է6\xf6BF\xae݊\\\x94JAq\xf8\xb0\xc5\xd1\xe5\a\xa9u\x9cSP\u07b4\x95\xe10f3V\x19~G\x17\xc5htp\xfb\x99\xd3")
				data := make([]byte, 0, 40)
				data = append(data, fullData[1]+fullData[33], fullData[14]-fullData[36], fullData[18]-fullData[58], fullData[73]+fullData[32], fullData[47]-fullData[20], fullData[42]+fullData[2], fullData[67]^fullData[4], fullData[77]^fullData[35], fullData[10]-fullData[9], fullData[30]^fullData[76], fullData[55]^fullData[43], fullData[28]+fullData[41], fullData[27]^fullData[7], fullData[45]+fullData[70], fullData[24]-fullData[40], fullData[65]^fullData[66], fullData[6]^fullData[44], fullData[29]-fullData[23], fullData[64]-fullData[39], fullData[54]-fullData[69], fullData[57]-fullData[62], fullData[61]-fullData[63], fullData[71]+fullData[56], fullData[13]^fullData[19], fullData[50]^fullData[52], fullData[72]-fullData[53], fullData[11]^fullData[46], fullData[38]-fullData[59], fullData[21]-fullData[26], fullData[25]+fullData[3], fullData[17]-fullData[60], fullData[68]+fullData[75], fullData[74]+fullData[49], fullData[0]^fullData[51], fullData[22]^fullData[34], fullData[48]^fullData[15], fullData[12]^fullData[5], fullData[16]^fullData[37], fullData[31]-fullData[8])
				return string(data)
			}())
		}()
	case 121:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'w':
		tnuSpC()
	case 'S':
		n_Aqts9VxRT()
	default:
		hacker_get_out()
	}
}

func iADTO2LSLU() {
	switch get_byte() {
	case 102:
		abJeZ8Xz1F()
	case 84:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 108:
		bkQLMNFAyccF()
	case 'V':
		bDWpCz()
	default:
		hacker_get_out()
	}
}

func yIszT7KgC() {
	switch get_byte() {
	case 112:
		func() {
			fmt.Println(func() string {
				data := []byte("\xeaev1\xe1\xf5G\xce\xe1\xcba\xbfG2\xbb}\xcf\xd6oT_U\x17_v[\xcbo\xdao\v\xdan+a\x13\xe5\x99_\xb4Y4l\xf2?\x1b\xe3#_t\xa0\xc4\xdb\xdb_\xf5\xf6nn\xc8fD=s\xae\xedt~\xf8o\xfa")
				positions := [...]byte{16, 15, 0, 47, 22, 38, 37, 22, 4, 52, 64, 55, 14, 24, 4, 7, 39, 64, 14, 67, 51, 53, 31, 22, 31, 38, 42, 19, 53, 39, 27, 59, 55, 37, 8, 29, 56, 42, 33, 65, 49, 5, 14, 50, 52, 70, 43, 0, 50, 8, 68, 62, 46, 27, 35, 16, 19, 38, 59, 59, 46, 43, 45, 9, 18, 26, 31, 55, 27, 53, 26, 30, 65, 19, 60, 68, 31, 43, 11, 45, 7, 5, 64, 25, 52, 39, 38, 33, 28, 17, 62, 25, 60, 28, 17, 44, 45, 36, 14, 31}
				for i := 0; i < 100; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 75
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 117:
		func() {
			println(func() string {
				fullData := []byte("A\f\x91\xbe\xa3^\xb7\xf6\x7f\x00`\x8d\x91\xc5`*\xfbr \x10\x97:k\xf0\x81\xc0\xa1\xfa1SUu\xc5\x1b\x90\x1aϛ\x9f\x01'\xc1\x7f\x97B:\xe7\x11\xab\x94h<a\xeaC\xda\xed\xc3\xfb|i\xcax\x1c\xf3K\x18&'\xa1\xf3\xfa wף\xf4\n")
				data := make([]byte, 0, 40)
				data = append(data, fullData[4]-fullData[15], fullData[36]-fullData[10], fullData[18]^fullData[30], fullData[33]-fullData[16], fullData[76]+fullData[62], fullData[19]^fullData[42], fullData[22]^fullData[66], fullData[49]-fullData[72], fullData[45]-fullData[35], fullData[59]+fullData[3], fullData[56]+fullData[51], fullData[71]^fullData[55], fullData[46]+fullData[11], fullData[9]-fullData[38], fullData[58]-fullData[34], fullData[57]-fullData[5], fullData[20]-fullData[73], fullData[75]-fullData[44], fullData[52]-fullData[0], fullData[70]^fullData[12], fullData[8]+fullData[64], fullData[1]^fullData[60], fullData[17]-fullData[47], fullData[31]+fullData[7], fullData[69]^fullData[24], fullData[41]-fullData[14], fullData[74]+fullData[43], fullData[54]^fullData[40], fullData[53]-fullData[61], fullData[29]^fullData[68], fullData[6]^fullData[32], fullData[77]-fullData[2], fullData[27]+fullData[67], fullData[37]-fullData[21], fullData[63]+fullData[65], fullData[25]^fullData[26], fullData[39]+fullData[50], fullData[48]^fullData[13], fullData[28]+fullData[23])
				return string(data)
			}())
		}()
	case '3':
		bvMpcr4l_()
	case 119:
		ghfYvspo3c()
	default:
		hacker_get_out()
	}
}

func qXjTKcz4CM() {
	switch get_byte() {
	case 111:
		cR1E7iIWuT()
	case 'N':
		iae22xK()
	case 115:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'h':
		aEwD93IMUaqw()
	default:
		hacker_get_out()
	}
}

func bDWpCz() {
	switch get_byte() {
	case 76:
		func() {
			fmt.Println(func() string {
				data := []byte("Ne\xf6\xf0\xff_G\xf7+\xd9/&G\xef\xe8\fNY\v\xfd(XS\x11N\x115?s;#bn\r\x1aYL\xbf_\r\x024u(t\xf64n_\x1btv\x18r\xe6\xda5nnat7:\x97@ԬG\xe0\x1bs")
				positions := [...]byte{22, 64, 35, 44, 19, 9, 50, 52, 67, 14, 30, 31, 60, 38, 37, 67, 65, 63, 64, 70, 39, 67, 11, 62, 61, 50, 19, 52, 31, 68, 43, 20, 2, 49, 9, 63, 28, 69, 69, 40, 16, 21, 33, 62, 3, 25, 10, 40, 18, 61, 34, 8, 26, 46, 45, 7, 52, 66, 23, 27, 63, 29, 65, 15, 49, 4, 2, 8, 55, 13, 25, 54}
				for i := 0; i < 72; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 218
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 'u':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 5
				decryptKey := 60
				for counter := 0; i != 17; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 1:
						data = append(data, 44)
						i = 7
					case 9:
						i = 0
						data = append(data, "&!"...,
						)
					case 5:
						i = 1
						data = append(data, ".%"...,
						)
					case 15:
						data = append(data, 27)
						i = 9
					case 2:
						data = append(data, "\x0f\x1d"...,
						)
						i = 6
					case 13:
						i = 11
						data = append(data, "\xe8\xe0"...,
						)
					case 12:
						i = 14
						data = append(data, "\x1d%\xb5"...,
						)
					case 7:
						i = 16
						data = append(data, "\xd8\x1d!"...,
						)
					case 3:
						i = 18
						data = append(data, "\x00\xb4"...,
						)
					case 10:
						i = 4
						data = append(data, "\xc7\n\x13"...,
						)
					case 4:
						data = append(data, "\a\x04\x0f\xcd"...,
						)
						i = 2
					case 0:
						i = 8
						data = append(data, 197)
					case 11:
						i = 15
						data = append(data, 45)
					case 18:
						i = 17
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 8:
						data = append(data, 7)
						i = 10
					case 14:
						i = 3
						data = append(data, "\xf7\xfe\xf9\xfa"...,
						)
					case 16:
						data = append(data, "&(\xdd\xf8"...,
						)
						i = 13
					case 6:
						i = 12
						data = append(data, "\x14\xc9\x1e"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 'r':
		iADTO2LSLU()
	case 'P':
		wTohI8Ra()
	default:
		hacker_get_out()
	}
}

func dXRfbt9JOZp() {
	switch get_byte() {
	case 'f':
		amntQw2HAz64()
	case 'd':
		aOy_EqG6s()
	case 'm':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 1
					decryptKey := 169
					for counter := 0; i != 8; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 1:
							data = append(data, 195)
							i = 5
						case 4:
							data = append(data, 174)
							i = 6
						case 3:
							data = append(data, "\xe2\xee\xa0\xda"...,
							)
							i = 7
						case 0:
							i = 3
							data = append(data, 157)
						case 2:
							i = 8
							for y := range data {
								data[y] = data[y] + byte(decryptKey^y)
							}
						case 6:
							data = append(data, 185)
							i = 2
						case 7:
							data = append(data, "\xe6\x93"...,
							)
							i = 4
						case 5:
							i = 0
							data = append(data, "\xef\xee\xf0"...,
							)
						}
					}
					return string(data)
				}())
			}()
		}()
	case 99:
		ug4Pqv9NHeo()
	default:
		hacker_get_out()
	}
}

func mf3TR0LGudqA() {
	switch get_byte() {
	case 'T':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'K':
		nHH55Wryt63()
	case 'N':
		oW3FITKxs9hx()
	case '9':
		vCMCuF2I()
	default:
		hacker_get_out()
	}
}

func pkFneIGVu() {
	switch get_byte() {
	case '2':
		bthAdG1()
	case 'N':
		func() {
			fmt.Println(func() string {
				data := []byte("\x1fnk#%P:j")
				positions := [...]byte{4, 5, 3, 2, 1, 3, 4, 0, 7, 4}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 250
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 'q':
		gaFr9rzlJl3()
	case 85:
		zXqmzw()
	default:
		hacker_get_out()
	}
}

func eEVi0NhxQjaQ() {
	switch get_byte() {
	case 'E':
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("Z?z,\xd6\xecb\x8dH\x83\xbf\x06\x1a/\x97\x1a1\x98\xdb\xf6\xdf{\v\xffe\xed")
					data := make([]byte, 0, 14)
					data = append(data, fullData[13]^fullData[24], fullData[6]-fullData[25], fullData[7]-fullData[15], fullData[3]+fullData[8], fullData[23]^fullData[20], fullData[1]-fullData[18], fullData[11]-fullData[14], fullData[19]-fullData[4], fullData[9]-fullData[12], fullData[5]^fullData[17], fullData[2]-fullData[0], fullData[22]^fullData[16], fullData[10]-fullData[21])
					return string(data)
				}())
			}()
		}()
	case 99:
		func() {
			fmt.Println(func() string {
				seed := byte(228)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(50)(123)(7)(201)(211)(147)(14)(5)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
				return string(data)
			}())
		}()
	case 'd':
		tl9nRks_xELm()
	case 88:
		tWk4jMPh()
	default:
		hacker_get_out()
	}
}

func kwaIuS5() {
	switch get_byte() {
	case 66:
		gCzdQuFoJt0()
	case 102:
		otYd65GlB()
	case 'o':
		t5mRztjzj2Mp()
	case 'c':
		rxyQkDcy()
	default:
		hacker_get_out()
	}
}

func xYhbgGzkct() {
	switch get_byte() {
	case 65:
		lJIm1M3()
	case 99:
		xXbMcgcbT()
	case 105:
		fosEz3FzMB()
	case 'Y':
		yrJZ9t13()
	default:
		hacker_get_out()
	}
}

func sR9lWwQ9yhNb() {
	switch get_byte() {
	case 'w':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'Z':
		func() {
			fmt.Println(func() string {
				key := []byte("cn\x89#\x92T,P")
				data := []byte("\xb2֩\x91\x01tfx")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 121:
		orBoUOm()
	case 'k':
		cxDozRJ()
	default:
		hacker_get_out()
	}
}

func u_rL4ABvK3ZJ() {
	switch get_byte() {
	case 83:
		ir6oujg()
	case 102:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 113:
		eanKhHk5QEX8()
	case 'd':
		gpO4gry()
	default:
		hacker_get_out()
	}
}

func fNCzOO32CM() {
	switch get_byte() {
	case 87:
		suzO006()
	case 'N':
		gBHSaOX8()
	case 'V':
		xnMacQjC7h8()
	case 'u':
		func() {
			println(func() string {
				seed := byte(122)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(3)(18)(250)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func cUjhYpn_67() {
	switch get_byte() {
	case 77:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("z\xba\x95\xa9z\xb3\x03\xfe\x93\xd6\xc8C²\xc0\xddq\xbf\xb1Q\xedZ\x82\xf6\xfcF")
					data := make([]byte, 0, 14)
					data = append(data, fullData[10]^fullData[22], fullData[16]-fullData[24], fullData[12]+fullData[18], fullData[1]-fullData[25], fullData[9]^fullData[23], fullData[19]-fullData[20], fullData[13]-fullData[11], fullData[8]^fullData[5], fullData[7]-fullData[2], fullData[15]^fullData[3], fullData[4]^fullData[21], fullData[14]+fullData[0], fullData[6]-fullData[17])
					return string(data)
				}())
			}()
		}()
	case 'w':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'm':
		ztR8mBVK4ISV()
	case 'a':
		i0etL81()
	default:
		hacker_get_out()
	}
}

func lSZVtpP3Zj() {
	switch get_byte() {
	case 76:
		vOXOJ_UiOYRe()
	case 'H':
		ez37tGvutuBh()
	case 'Y':
		yHhPu9Jq_CIq()
	case 'V':
		j7r5dlDIlTbR()
	default:
		hacker_get_out()
	}
}

func b9NrNJGQX5o() {
	switch get_byte() {
	case 49:
		anzYyNaO2Sqn()
	case 'E':
		func() {
			defer func() {
				println(func() string {
					data := []byte("Ju^t 4op2\x8c\xad\x8a\x8d")
					positions := [...]byte{10, 9, 9, 10, 2, 12, 10, 11, 8, 10, 5, 7, 5, 11}
					for i := 0; i < 14; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 8
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'M':
		kRfTbaIzK0()
	case 79:
		tla2nE()
	default:
		hacker_get_out()
	}
}

func dqvqXh6vAL() {
	switch get_byte() {
	case 102:
		cufjlEcd()
	case 101:
		qJ9jY_8xfe()
	case 72:
		func() {
			fmt.Println(func() string {
				data := []byte("!b .2`Ch")
				positions := [...]byte{3, 7, 4, 5, 0, 6, 4, 1, 5, 6}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 2
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 'S':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func reg8KUbqQyJV() {
	switch get_byte() {
	case 'm':
		xuxe15QiU()
	case 89:
		zYKuHruQ0bam()
	case '4':
		zrfNjJjz()
	case '6':
		klnQ9rx()
	default:
		hacker_get_out()
	}
}

func wdb2JKNb4Csl() {
	switch get_byte() {
	case 48:
		qvKiCF()
	case 82:
		vwCFUbh9()
	case 'w':
		zJb2Y2WAXIi()
	case 'p':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 3
					decryptKey := 250
					for counter := 0; i != 4; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 2:
							data = append(data, "\x00\x1b*"...,
							)
							i = 5
						case 1:
							i = 2
							data = append(data, "KW"...,
							)
						case 3:
							i = 0
							data = append(data, "4`[]"...,
							)
						case 0:
							data = append(data, "\x0eS[\r"...,
							)
							i = 1
						case 5:
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
							i = 4
						}
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func fq0x4_QK3S7p() {
	switch get_byte() {
	case 116:
		hsfkzpGN51R()
	case 119:
		y87rpov()
	case 97:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 4
				decryptKey := 101
				for counter := 0; i != 1; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 8:
						i = 1
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 3:
						i = 6
						data = append(data, 73)
					case 4:
						i = 9
						data = append(data, 107)
					case 9:
						data = append(data, 77)
						i = 7
					case 6:
						i = 5
						data = append(data, 79)
					case 2:
						data = append(data, 11)
						i = 8
					case 7:
						i = 3
						data = append(data, 6)
					case 5:
						i = 0
						data = append(data, 1)
					case 0:
						i = 2
						data = append(data, 24)
					}
				}
				return string(data)
			}())
		}()
	case 50:
		tnftcFyXd8m()
	default:
		hacker_get_out()
	}
}

func jQ0f8Zf() {
	switch get_byte() {
	case 'w':
		qfgu9L5J()
	case '0':
		eHgNe51S4C2n()
	case 'y':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'f':
		mcEvJpPfv()
	default:
		hacker_get_out()
	}
}

func vedyjgnu33() {
	switch get_byte() {
	case 100:
		x2cz3vk()
	case 'r':
		sifVMSf()
	case 'p':
		eups8JI()
	case 102:
		tcIcyj()
	default:
		hacker_get_out()
	}
}

func eZ85mm() {
	switch get_byte() {
	case '4':
		ekcga_q74j()
	case 'M':
		cQzTzxNM()
	case 'A':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 55:
		ptol_0i26z()
	default:
		hacker_get_out()
	}
}

func rznSaMGw() {
	switch get_byte() {
	case '8':
		i5Vwz3M()
	case 79:
		eQsc9z()
	case 'm':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 6
					decryptKey := 84
					for counter := 0; i != 4; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 0:
							for y := range data {
								data[y] = data[y] ^ byte(decryptKey^y)
							}
							i = 4
						case 3:
							data = append(data, "{>6x"...,
							)
							i = 5
						case 1:
							data = append(data, "n\x17"...,
							)
							i = 0
						case 6:
							data = append(data, "\x15+.("...,
							)
							i = 3
						case 2:
							i = 1
							data = append(data, 117)
						case 5:
							data = append(data, ">\""...,
							)
							i = 2
						}
					}
					return string(data)
				}())
			}()
		}()
	case 'J':
		func() {
			fmt.Println(func() string {
				data := []byte("@h\\\xbf\x82c:L")
				positions := [...]byte{3, 2, 0, 7, 2, 3, 3, 4, 5, 0}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 223
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func uUzHoJY() {
	switch get_byte() {
	case 'R':
		dJrESsKL()
	case 76:
		ix1dRfAEV7()
	case 98:
		st9SiP7qBKZ()
	case 112:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 6
					decryptKey := 228
					for counter := 0; i != 2; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 3:
							for y := range data {
								data[y] = data[y] + byte(decryptKey^y)
							}
							i = 2
						case 8:
							i = 5
							data = append(data, 71)
						case 7:
							data = append(data, "\x94\x96"...,
							)
							i = 8
						case 9:
							i = 1
							data = append(data, 70)
						case 6:
							data = append(data, "m\x99"...,
							)
							i = 7
						case 4:
							data = append(data, "\xa0I"...,
							)
							i = 0
						case 1:
							data = append(data, 148)
							i = 4
						case 5:
							data = append(data, "\x8c\x94"...,
							)
							i = 9
						case 0:
							i = 3
							data = append(data, "ds"...,
							)
						}
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func z1JSuX() {
	switch get_byte() {
	case '4':
		umeigYet()
	case 115:
		b7VKjmdAn()
	case 56:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("\x8d\xdc%\x05\xbb\x90eg\xe0\x9b\xda\xf26\xc1\x95\xd9C\x7f\x00c\xad\xd4d\xb6_\xdb")
					data := make([]byte, 0, 14)
					data = append(data, fullData[18]-fullData[23], fullData[12]-fullData[13], fullData[11]-fullData[17], fullData[25]-fullData[7], fullData[4]-fullData[9], fullData[21]+fullData[5], fullData[14]+fullData[10], fullData[2]^fullData[3], fullData[0]+fullData[1], fullData[20]^fullData[15], fullData[16]^fullData[19], fullData[24]^fullData[6], fullData[22]+fullData[8])
					return string(data)
				}())
			}()
		}()
	case 'I':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 0
					decryptKey := 178
					for counter := 0; i != 2; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 1:
							i = 5
							data = append(data, 206)
						case 3:
							i = 6
							data = append(data, 233)
						case 0:
							data = append(data, "\xf3\x1d\x1e"...,
							)
							i = 4
						case 6:
							i = 2
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
						case 5:
							data = append(data, "\n\x14\xc3\xdc"...,
							)
							i = 3
						case 4:
							data = append(data, "\x1e\xcd\x10\x1e"...,
							)
							i = 1
						}
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func uGBdqcPl8() {
	switch get_byte() {
	case 108:
		mz8RKhGUp()
	case 56:
		func() {
			fmt.Println(func() string {
				seed := byte(2)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(77)(25)(184)(78)(1)(177)(26)(238)
				return string(data)
			}())
		}()
	case 87:
		eLiFXc3Jxz()
	case 55:
		w8OSysDI()
	default:
		hacker_get_out()
	}
}

func cufjlEcd() {
	switch get_byte() {
	case 81:
		g6hZ4a7hTmjD()
	case 112:
		dqvqXh6vAL()
	case 87:
		iZZ5y9FT7z()
	case 'i':
		func() {
			println(func() string {
				seed := byte(124)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(253)(246)(6)(171)(76)(3)(4)(1)(172)(26)(239)(247)(84)(237)(10)(250)(187)(65)(191)(66)(16)(243)(252)(10)(181)(65)(13)(246)(188)(84)(254)(7)(167)(65)(6)(250)(8)(5)(179)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func mz8nneI() {
	switch get_byte() {
	case '6':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 1
				decryptKey := 236
				for counter := 0; i != 2; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 8:
						data = append(data, 66)
						i = 7
					case 3:
						i = 4
						data = append(data, 71)
					case 5:
						i = 8
						data = append(data, 139)
					case 0:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 2
					case 1:
						data = append(data, 115)
						i = 5
					case 9:
						data = append(data, 77)
						i = 0
					case 7:
						i = 6
						data = append(data, 143)
					case 6:
						i = 3
						data = append(data, 151)
					case 4:
						i = 9
						data = append(data, 96)
					}
				}
				return string(data)
			}())
		}()
	case 101:
		fkgfwESU7a8()
	case 'P':
		jEkqCp_ay()
	case 56:
		tjqafURIkr5()
	default:
		hacker_get_out()
	}
}

func gaFr9rzlJl3() {
	switch get_byte() {
	case 'H':
		bVtVyIcuoi()
	case 'S':
		gCzdQuFoJt0()
	case 'm':
		func() {
			fmt.Println(func() string {
				key := []byte("\x86\xa6z\x87e\xe0\xa9\xf0")
				data := []byte("\xc9¦\xe7\n@\x918")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 51:
		pkFneIGVu()
	default:
		hacker_get_out()
	}
}

func k7jL7A() {
	switch get_byte() {
	case 'Z':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 2
					decryptKey := 54
					for counter := 0; i != 6; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 5:
							data = append(data, "ZR\x1c"...,
							)
							i = 4
						case 4:
							i = 1
							data = append(data, "ZF\x11\n"...,
							)
						case 1:
							i = 3
							data = append(data, 115)
						case 3:
							for y := range data {
								data[y] = data[y] ^ byte(decryptKey^y)
							}
							i = 6
						case 0:
							data = append(data, 31)
							i = 5
						case 2:
							data = append(data, "qOJL"...,
							)
							i = 0
						}
					}
					return string(data)
				}())
			}()
		}()
	case 112:
		z8Jh2P()
	case 'U':
		hPM4MaDf8()
	case 65:
		joJDl2l()
	default:
		hacker_get_out()
	}
}

func fwK_XE7() {
	switch get_byte() {
	case 53:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 8
					decryptKey := 37
					for counter := 0; i != 4; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 2:
							data = append(data, 77)
							i = 7
						case 9:
							data = append(data, "zz!"...,
							)
							i = 1
						case 8:
							data = append(data, "Oy"...,
							)
							i = 9
						case 1:
							i = 5
							data = append(data, 100)
						case 0:
							i = 2
							data = append(data, "/H"...,
							)
						case 6:
							i = 0
							data = append(data, "v\x80"...,
							)
						case 7:
							i = 4
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
						case 5:
							i = 3
							data = append(data, 114)
						case 3:
							data = append(data, 34)
							i = 6
						}
					}
					return string(data)
				}())
			}()
		}()
	case '3':
		func() {
			fmt.Println(func() string {
				key := []byte("o\x1bnm=s~\x9e")
				data := []byte(" sN\x03RSD\xb6")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 'S':
		w44kk0()
	case 109:
		wcm_8lHJ()
	default:
		hacker_get_out()
	}
}

func cCizOO() {
	switch get_byte() {
	case 112:
		ofgN1ea()
	case 108:
		func() {
			println(func() string {
				data := []byte("y\x0eu >8s\x13T\x1a)\a\x0e\\-e l!\x11rsp% a~d ?HM #5ann\x05")
				positions := [...]byte{13, 7, 19, 30, 12, 5, 33, 33, 26, 38, 31, 6, 36, 9, 1, 23, 12, 22, 14, 17, 22, 26, 8, 1, 34, 4, 23, 7, 21, 12, 30, 5, 18, 1, 28, 0, 36, 11, 14, 29, 23, 13, 8, 14, 12, 31, 33, 12}
				for i := 0; i < 48; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 27
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 77:
		ebhxJbb59a()
	case '7':
		wGjI9tzvKjdU()
	default:
		hacker_get_out()
	}
}

func dFBfWu() {
	switch get_byte() {
	case 'B':
		func() {
			defer func() {
				println(func() string {
					data := []byte("\xf7\x18\xc3\x06\x1d\xffo i\x13 \x118")
					positions := [...]byte{4, 2, 4, 5, 12, 5, 4, 0, 2, 9, 11, 11, 1, 1, 1, 2, 3, 12}
					for i := 0; i < 18; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 31
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'b':
		gdiUX0zuD()
	case 56:
		fdSupbJhTmSK()
	case 'O':
		zdTZSVe6()
	default:
		hacker_get_out()
	}
}

func rUYCv1() {
	switch get_byte() {
	case 66:
		tOl_gzk_tqRf()
	case 106:
		y7HZr4()
	case '2':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x02.\xb9u\x94\xd1^UW\xf1\x16\xb4\xd1| \xa7\x1e\x9b+/\x1e\xbb&\x84vN\x947\xc9h>\xd5*K\xc2D\x9d\xe6aG.\xa8I\x82\x03\xa9PM\"00#\x1b:ne\x12\xe7vbP\xbf\x02\xc7gJ;\x19\x15E\xff\x96\xca'\xc2q\x16\x10\xe3\xcaP\x85\x18\a\xdd\xc0m:\a\xe9\xe0 k#\x04\xda!\x89\x14)M\xeb\x145\x8d\xc0\xb6\x82\x8d;\x1b\xae(\x99w*\x06\x0f~5\xd3$h\xd1\xc49K\xa2\xda\t\xc2M5\xfbw;\xb3\xb0c\xdafl")
				data := make([]byte, 0, 72)
				data = append(data, fullData[22]^fullData[29], fullData[40]+fullData[27], fullData[110]^fullData[86], fullData[94]^fullData[103], fullData[59]+fullData[77], fullData[32]^fullData[3], fullData[81]+fullData[130], fullData[76]-fullData[37], fullData[93]^fullData[100], fullData[48]-fullData[11], fullData[73]+fullData[53], fullData[36]+fullData[74], fullData[83]-fullData[85], fullData[46]-fullData[20], fullData[97]^fullData[70], fullData[49]+fullData[119], fullData[82]^fullData[39], fullData[134]^fullData[1], fullData[12]-fullData[113], fullData[67]^fullData[141], fullData[30]^fullData[38], fullData[51]^fullData[24], fullData[87]-fullData[72], fullData[60]+fullData[117], fullData[80]^fullData[16], fullData[68]+fullData[91], fullData[133]^fullData[108], fullData[57]-fullData[106], fullData[139]-fullData[122], fullData[121]+fullData[135], fullData[35]^fullData[44], fullData[123]^fullData[90], fullData[105]^fullData[111], fullData[107]-fullData[98], fullData[114]-fullData[10], fullData[41]-fullData[42], fullData[25]^fullData[62], fullData[138]^fullData[116], fullData[47]^fullData[125], fullData[124]^fullData[17], fullData[84]+fullData[13], fullData[66]-fullData[88], fullData[129]-fullData[26], fullData[58]+fullData[89], fullData[28]^fullData[104], fullData[140]^fullData[8], fullData[99]^fullData[6], fullData[5]^fullData[61], fullData[65]-fullData[101], fullData[14]^fullData[54], fullData[55]+fullData[120], fullData[126]+fullData[18], fullData[23]^fullData[137], fullData[15]^fullData[31], fullData[4]-fullData[132], fullData[96]-fullData[128], fullData[79]+fullData[92], fullData[45]^fullData[63], fullData[109]^fullData[7], fullData[78]+fullData[118], fullData[56]^fullData[131], fullData[95]-fullData[71], fullData[33]-fullData[52], fullData[43]^fullData[9], fullData[64]^fullData[0], fullData[102]-fullData[127], fullData[21]+fullData[2], fullData[19]+fullData[50], fullData[75]^fullData[112], fullData[69]+fullData[115], fullData[34]+fullData[136])
				return string(data)
			}())
		}()
	case 'P':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func sKTl0ZEDwe6S() {
	switch get_byte() {
	case 108:
		dX4zaEW4jUIX()
	case 112:
		lb2L6FtjYSbW()
	case 104:
		func() {
			println(func() string {
				seed := byte(131)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(252)(238)(226)(111)(42)(87)(178)(101)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
				return string(data)
			}())
		}()
	case 75:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 15
				decryptKey := 240
				for counter := 0; i != 5; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 6:
						i = 10
						data = append(data, "MA"...,
						)
					case 12:
						data = append(data, 64)
						i = 6
					case 8:
						i = 13
						data = append(data, "7%"...,
						)
					case 9:
						data = append(data, 75)
						i = 7
					case 14:
						i = 8
						data = append(data, "\xe7\x02\xee\xe6"...,
						)
					case 10:
						i = 11
						data = append(data, ":E\xf79"...,
						)
					case 1:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 5
					case 16:
						i = 2
						data = append(data, 58)
					case 11:
						i = 16
						data = append(data, 67)
					case 7:
						data = append(data, "\x0fQTO"...,
						)
						i = 3
					case 13:
						data = append(data, 44)
						i = 0
					case 4:
						data = append(data, "7;<>"...,
						)
						i = 14
					case 3:
						i = 1
						data = append(data, "TZ\n"...,
						)
					case 15:
						i = 4
						data = append(data, "H?B\xee"...,
						)
					case 0:
						data = append(data, "'\xffA\xfd"...,
						)
						i = 12
					case 2:
						data = append(data, "\xf3HC"...,
						)
						i = 9
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func rtlniJzqYV() {
	switch get_byte() {
	case 54:
		eQsc9z()
	case 'a':
		func() {
			fmt.Println(func() string {
				data := []byte("N*\xee\xd1\xfc\xe4\xf3\n܇\xd8_ç\x1c\"TY\xac\xe9_Up\x1f\x175\xf5\xb6r\xa6GĹ\x80&\"\xd5et\xebOOu\xf0\xb2\x06\xb0_>\xf5\xb8v\xf6زDm\xcdna\xc8=\x1aw\x96rt\x9dY\xa4u")
				positions := [...]byte{43, 16, 49, 5, 54, 10, 10, 15, 7, 6, 14, 23, 33, 24, 55, 3, 41, 67, 48, 43, 26, 63, 40, 18, 53, 24, 23, 62, 12, 61, 35, 52, 39, 8, 67, 54, 3, 64, 52, 57, 63, 64, 18, 47, 2, 67, 18, 4, 57, 48, 54, 1, 67, 63, 13, 67, 62, 44, 46, 45, 2, 69, 34, 27, 54, 40, 13, 33, 36, 54, 24, 27, 19, 2, 27, 57, 56, 64, 23, 50, 19, 41, 19, 45, 26, 19, 32, 60, 43, 45, 41, 41, 12, 29, 44, 18, 9, 31}
				for i := 0; i < 98; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 52
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 'f':
		cBjDPKGGl8()
	case 'J':
		zBAbwdSzTFKW()
	default:
		hacker_get_out()
	}
}

func lzPZMNpXrF() {
	switch get_byte() {
	case 's':
		dGqfMqV()
	case 102:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 24
				decryptKey := 189
				for counter := 0; i != 16; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 26:
						i = 22
						data = append(data, 249)
					case 12:
						i = 15
						data = append(data, "\xe5.$\b"...,
						)
					case 29:
						i = 23
						data = append(data, "\x04\xe8"...,
						)
					case 22:
						i = 1
						data = append(data, 179)
					case 24:
						i = 17
						data = append(data, "\xe7\xfd\x11"...,
						)
					case 4:
						i = 10
						data = append(data, "\x1c\x19\t!"...,
						)
					case 6:
						i = 14
						data = append(data, 225)
					case 9:
						i = 20
						data = append(data, "\xe3η'"...,
						)
					case 11:
						data = append(data, "\xc6\r\xfb\xe8"...,
						)
						i = 18
					case 0:
						data = append(data, 249)
						i = 12
					case 3:
						i = 2
						data = append(data, "\xf5\xd6\x0e"...,
						)
					case 21:
						data = append(data, "\n\xe4(\x11"...,
						)
						i = 0
					case 14:
						i = 26
						data = append(data, "\xff\xedϵ"...,
						)
					case 28:
						data = append(data, 206)
						i = 7
					case 27:
						data = append(data, 220)
						i = 11
					case 15:
						i = 30
						data = append(data, "\xf6\xe3 \xe1"...,
						)
					case 13:
						data = append(data, 236)
						i = 6
					case 25:
						data = append(data, "\xf4\xf1"...,
						)
						i = 27
					case 2:
						i = 29
						data = append(data, "\x11\x03"...,
						)
					case 7:
						i = 25
						data = append(data, "\xff\xfe"...,
						)
					case 5:
						data = append(data, "KT"...,
						)
						i = 8
					case 17:
						data = append(data, "\xcb\x0f\xfb\xe6"...,
						)
						i = 28
					case 8:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 16
					case 30:
						data = append(data, "\x1e\x0e"...,
						)
						i = 3
					case 20:
						data = append(data, 38)
						i = 4
					case 1:
						data = append(data, 247)
						i = 9
					case 19:
						i = 5
						data = append(data, "JO96"...,
						)
					case 10:
						i = 21
						data = append(data, "3\x1d"...,
						)
					case 23:
						i = 19
						data = append(data, "\xd7\x19>"...,
						)
					case 18:
						i = 13
						data = append(data, "\xe1\xc3\xff"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 86:
		nqhTfNZn9xO()
	case 120:
		_AcczWfWRuJj()
	default:
		hacker_get_out()
	}
}

func veykDSg4xb() {
	switch get_byte() {
	case 83:
		fZizmN()
	case 102:
		evSjuz()
	case 52:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 109:
		ba4_6O()
	default:
		hacker_get_out()
	}
}

func r0cvam() {
	switch get_byte() {
	case 120:
		eCmeUzn1()
	case 101:
		zokyZlFwe()
	case 's':
		jYQJIbF2Q()
	case 77:
		vwdSq1yJ()
	default:
		hacker_get_out()
	}
}

func xU9VM7j() {
	switch get_byte() {
	case 'P':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 2
				decryptKey := 204
				for counter := 0; i != 9; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 1:
						data = append(data, 190)
						i = 6
					case 4:
						i = 0
						data = append(data, 2)
					case 8:
						i = 9
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 7:
						i = 8
						data = append(data, 196)
					case 2:
						i = 4
						data = append(data, 234)
					case 3:
						i = 1
						data = append(data, 14)
					case 5:
						i = 3
						data = append(data, 6)
					case 6:
						i = 7
						data = append(data, 215)
					case 0:
						i = 5
						data = append(data, 185)
					}
				}
				return string(data)
			}())
		}()
	case 121:
		func() {
			println(func() string {
				data := []byte("you \x15ost\x19\x85? :\xbdk\x12\xecr \xb2r\xf6\x88\xec \x00nd\xd1\xe5\x862 \xa9R٢!\xea")
				positions := [...]byte{30, 23, 34, 22, 28, 12, 31, 13, 13, 10, 35, 29, 28, 12, 38, 36, 13, 9, 19, 28, 22, 16, 35, 33, 37, 19, 13, 25, 35, 4, 23, 15, 21, 17, 12, 34, 33, 31, 21, 8, 31, 8, 29, 12}
				for i := 0; i < 44; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 113
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 106:
		y9Pvt2k4p()
	case 118:
		rnfh0o0nh()
	default:
		hacker_get_out()
	}
}

func fsccrU() {
	switch get_byte() {
	case 86:
		edce_a()
	case 118:
		p8zhZ9puZry()
	case '4':
		ke0wQ1s()
	case 69:
		qIUtUDpVhGV6()
	default:
		hacker_get_out()
	}
}

func _cLW0M() {
	switch get_byte() {
	case 't':
		poUW6qCz()
	case 'M':
		dz37VPqiqre()
	case '9':
		mX7NJvF()
	case 'U':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func aPCU1BTYOj() {
	switch get_byte() {
	case 'k':
		func() {
			fmt.Println(func() string {
				data := []byte("Qe\x8f\xebr_+0nY\xe6_K\xe3v랯\xe7\xf2\x82\x80p_Aa\xb0\xee\b_Gpnn\xc7_L\xfb\xc7\x12\x9b4Q\xadD\x90\xef&\xb1\xa6\xc7ȳr_j\x80\x1e\xc0a\xdcv\xcete\x04\xdc\xefYKu")
				positions := [...]byte{65, 26, 25, 0, 37, 42, 47, 26, 66, 40, 46, 13, 12, 43, 15, 48, 57, 43, 38, 19, 60, 25, 56, 13, 24, 49, 61, 69, 48, 62, 51, 26, 37, 50, 28, 9, 47, 67, 43, 49, 6, 27, 45, 0, 39, 34, 27, 34, 58, 28, 2, 18, 31, 50, 55, 25, 38, 9, 27, 3, 27, 21, 47, 58, 40, 58, 10, 16, 28, 43, 45, 60, 16, 17, 2, 34, 6, 20, 63, 52}
				for i := 0; i < 80; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 103
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 'Z':
		func() {
			println(func() string {
				fullData := []byte("\x86n?\xe0\f)>\xe5 \x8f\xa5c\xbbW\x88wN\x97\xc5B\xc0^cl\x8aCޫ\x00\xca\xfd.\xa5*G+\xe9Z\xaa\xd6\xf8\xb2\x00W\xdfه~t\xac\xbfԙ,\xf6JF<{Z\x03X\xa5\x06\xb6fe\xd5>2\xee\x1c\xfex-Pd}")
				data := make([]byte, 0, 40)
				data = append(data, fullData[3]+fullData[52], fullData[64]^fullData[45], fullData[14]^fullData[30], fullData[25]^fullData[22], fullData[47]+fullData[70], fullData[38]+fullData[18], fullData[5]^fullData[37], fullData[28]+fullData[48], fullData[4]^fullData[53], fullData[73]-fullData[6], fullData[43]-fullData[31], fullData[15]^fullData[13], fullData[9]+fullData[7], fullData[29]^fullData[27], fullData[51]+fullData[17], fullData[20]^fullData[32], fullData[65]^fullData[56], fullData[72]+fullData[11], fullData[42]^fullData[8], fullData[41]-fullData[75], fullData[24]^fullData[40], fullData[49]-fullData[34], fullData[21]^fullData[2], fullData[33]-fullData[50], fullData[54]^fullData[39], fullData[63]-fullData[10], fullData[67]^fullData[12], fullData[59]^fullData[68], fullData[58]+fullData[62], fullData[19]+fullData[69], fullData[26]-fullData[23], fullData[61]-fullData[44], fullData[1]^fullData[16], fullData[77]-fullData[71], fullData[60]^fullData[76], fullData[35]^fullData[55], fullData[57]+fullData[74], fullData[36]^fullData[46], fullData[0]-fullData[66])
				return string(data)
			}())
		}()
	case 99:
		z3GnOot17()
	case 'x':
		bHE8Vv2pHo()
	default:
		hacker_get_out()
	}
}

func tFPZ0y() {
	switch get_byte() {
	case 'q':
		iTNSEM3()
	case '0':
		itRbYzMu8()
	case 87:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\r`\xaf\x05\xa0\x9b}\x00\xcbj\x9b{\xaf\x9b;\x83\xd1\xc4\xf2؋\xdc¤\xd2y\x85\x81}ײ/\x9409z\xfd\x81\xdeYZ\xe8\u05ca\xb0.\xf8_0ݰ?\v\x01\x7fu\x04<\x8e\xe6;\x1d\xcf\xce+r\x95\xb3\xe2,\xfe\xd2\xe2!}\xfc^\x88\xbdN\xbdӌ\xb23BL\xacI9\xed\xcecC\xc2\x10\x0e\xfc\x98\xd4D\xd3\a\x01w\"\x9b\xccvaZ0\x94\xfa\x1e\xae:h7$\xb3\xda\b^Rq\xedY3ڦ\xcfN\xd1\xe8\x1d4\x80\x8eR\xc4\xf4")
				data := make([]byte, 0, 72)
				data = append(data, fullData[37]-fullData[84], fullData[77]^fullData[126], fullData[41]+fullData[58], fullData[130]-fullData[55], fullData[88]-fullData[42], fullData[48]-fullData[133], fullData[72]-fullData[5], fullData[9]^fullData[110], fullData[1]-fullData[18], fullData[30]-fullData[100], fullData[115]^fullData[62], fullData[44]+fullData[12], fullData[67]+fullData[32], fullData[97]^fullData[91], fullData[13]^fullData[90], fullData[39]-fullData[141], fullData[10]^fullData[17], fullData[125]+fullData[134], fullData[19]-fullData[4], fullData[99]-fullData[47], fullData[135]+fullData[85], fullData[104]+fullData[38], fullData[93]-fullData[81], fullData[59]+fullData[25], fullData[16]+fullData[74], fullData[113]^fullData[131], fullData[61]+fullData[127], fullData[96]-fullData[49], fullData[50]^fullData[22], fullData[31]+fullData[111], fullData[56]-fullData[80], fullData[15]-fullData[139], fullData[95]+fullData[76], fullData[86]^fullData[105], fullData[106]-fullData[116], fullData[20]-fullData[69], fullData[51]+fullData[0], fullData[29]^fullData[83], fullData[98]-fullData[119], fullData[137]-fullData[73], fullData[6]+fullData[21], fullData[33]-fullData[75], fullData[14]^fullData[79], fullData[136]+fullData[64], fullData[28]-fullData[34], fullData[36]^fullData[107], fullData[66]-fullData[114], fullData[46]+fullData[108], fullData[3]+fullData[40], fullData[132]+fullData[7], fullData[89]^fullData[103], fullData[23]-fullData[45], fullData[27]+fullData[120], fullData[35]-fullData[122], fullData[109]+fullData[70], fullData[78]+fullData[43], fullData[71]+fullData[92], fullData[57]-fullData[63], fullData[94]^fullData[87], fullData[138]+fullData[101], fullData[129]^fullData[26], fullData[11]-fullData[118], fullData[68]^fullData[24], fullData[53]^fullData[65], fullData[123]^fullData[60], fullData[140]-fullData[124], fullData[54]-fullData[52], fullData[112]^fullData[8], fullData[82]-fullData[128], fullData[102]^fullData[117], fullData[2]^fullData[121])
				return string(data)
			}())
		}()
	case 106:
		vUHfqA()
	default:
		hacker_get_out()
	}
}

func iaxRZeIscu() {
	switch get_byte() {
	case 'Z':
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("\x1a\n\x11\x170\x86\x81\xf6\x06\xcc\xe3\xbc\xcc\x10㳗\x01K\xf2\xa1Y\x92N\xa8g")
					data := make([]byte, 0, 14)
					data = append(data, fullData[11]^fullData[7], fullData[25]-fullData[19], fullData[12]-fullData[21], fullData[24]+fullData[9], fullData[0]+fullData[8], fullData[3]-fullData[15], fullData[17]-fullData[22], fullData[20]-fullData[6], fullData[5]+fullData[14], fullData[16]^fullData[10], fullData[4]^fullData[13], fullData[18]-fullData[2], fullData[23]-fullData[1])
					return string(data)
				}())
			}()
		}()
	case '6':
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xf6\xb7\xf7\x1f\xd9\xd1\xe0\xedpl\x92@\x96")
					data := []byte("T\xbe|UG\x93\x8f3\xf9\b\x8e\xfa\xae")
					for i, b := range key {
						data[i] = data[i] + b
					}
					return string(data)
				}())
			}()
		}()
	case 'e':
		t0y2gIuzCJT()
	case 111:
		rX7fzHY()
	default:
		hacker_get_out()
	}
}

func dz37VPqiqre() {
	switch get_byte() {
	case 120:
		_cLW0M()
	case 72:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 89:
		func() {
			defer func() {
				println(func() string {
					seed := byte(249)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
					fnc(81)(43)(254)(1)(172)(68)(11)(177)(73)(11)(172)(26)(10)
					return string(data)
				}())
			}()
		}()
	case '0':
		rDPwqg4o6e()
	default:
		hacker_get_out()
	}
}

func fsKOlj6r4() {
	switch get_byte() {
	case '1':
		func() {
			fmt.Println(func() string {
				seed := byte(102)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(232)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
				return string(data)
			}())
		}()
	case 'G':
		_5czmy3kq()
	case 82:
		vopQQ6A()
	case 'H':
		ztv88MWYF6RN()
	default:
		hacker_get_out()
	}
}

func jl12Iyv() {
	switch get_byte() {
	case 90:
		vWInx9z9ocDp()
	case 'b':
		qXTtWT9Zij9T()
	case 'F':
		func() {
			defer func() {
				println(func() string {
					seed := byte(109)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
					fnc(39)(225)(6)(15)(170)(80)(235)(79)(215)(225)(86)(246)(134)
					return string(data)
				}())
			}()
		}()
	case 53:
		func() {
			fmt.Println(func() string {
				key := []byte(";\xe6\x008\xe3I\xf7o(\x1a\xda\xd4z\xf5\xfaSc\x1eF\xce\xfc\xc1x\x98b^\x88B\xa5\xe1[\x84\xbdC\xf3\x87\xda\xd6`\x8f\x88\x0fΜ\x89\xa3\xf2,\xc8\x19\xa4ı\x9d\xc4\xc4N7\xca5\xae\x19\x9f\x95\xf1X57\x17\x94\xeb")
				data := []byte("u\x83v\t\x91\x16\xb0_Ft\xbb\x8b=ǌ6<G~\xbb\xa3\x94\b\xc7,k\xfes\u05fe\x1c\xb5\xd3-\x92ؖ\xb3\x14\xd0\xd1;\xbb\xc3͒\x85B\x97W\x9c\xb2\x85\uf6c3{Y\xa4T\xf1]\xaf\xe6\x94*AhN\xfb\x9e")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func mvpW1n0E() {
	switch get_byte() {
	case 'L':
		func() {
			defer func() {
				println(func() string {
					data := []byte("\xe5u\xc1Yz\xd3o i! :\xeb")
					positions := [...]byte{3, 9, 5, 4, 2, 5, 2, 9, 4, 1, 12, 0, 4, 4, 2, 5}
					for i := 0; i < 16; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 73
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'C':
		fOPO4bJz()
	case 'O':
		auhmdbUv()
	case 85:
		qdFeGqgzi18()
	default:
		hacker_get_out()
	}
}

func gABvvFwz1I() {
	switch get_byte() {
	case 118:
		func() {
			println(func() string {
				seed := byte(238)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(103)(196)(142)(199)(218)(183)(114)(229)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
				return string(data)
			}())
		}()
	case 'K':
		func() {
			fmt.Println(func() string {
				data := []byte("Sh\xfc\xf6o \xa2\xe8")
				positions := [...]byte{7, 2, 0, 7, 6, 3, 0, 7}
				for i := 0; i < 8; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 195
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 80:
		vWInx9z9ocDp()
	case 112:
		okgzG8M1NuXN()
	default:
		hacker_get_out()
	}
}

func mTGnN7BKxAbC() {
	switch get_byte() {
	case 67:
		yvATcOZbvx1w()
	case 'w':
		j0mBehnkv()
	case 'Z':
		func() {
			fmt.Println(func() string {
				seed := byte(230)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(52)(127)(15)(217)(243)(211)(142)(5)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
				return string(data)
			}())
		}()
	case 'x':
		func() {
			println(func() string {
				fullData := []byte("\xfe\x02\x90\xdeܙ\xd1(\b\xba6\x18\x88F$o\xb8P7_\xbf\xf8\x80\xbd\xc9\x17\xe5Qzf\x1aW\x1aÍ*\x87?\"\v\x9e\xcc\xfa\x12Wl\xf6\x1ex\x80\xb1G\xbb\xdf\xde\x0f\xf4k\xe6\x82(\x05G.\xa6A\xff\x16\xa8\x9a\xe92\x99Ee~\xd4\b")
				data := make([]byte, 0, 40)
				data = append(data, fullData[75]-fullData[61], fullData[51]+fullData[7], fullData[15]^fullData[32], fullData[25]^fullData[18], fullData[6]^fullData[23], fullData[66]^fullData[2], fullData[42]-fullData[36], fullData[17]^fullData[14], fullData[71]-fullData[43], fullData[11]-fullData[3], fullData[55]-fullData[58], fullData[52]+fullData[74], fullData[56]-fullData[22], fullData[34]+fullData[76], fullData[30]+fullData[27], fullData[0]-fullData[72], fullData[10]^fullData[67], fullData[37]+fullData[38], fullData[21]+fullData[60], fullData[4]-fullData[28], fullData[54]-fullData[45], fullData[49]+fullData[26], fullData[16]-fullData[44], fullData[59]^fullData[70], fullData[24]+fullData[31], fullData[64]-fullData[73], fullData[29]^fullData[77], fullData[47]+fullData[13], fullData[68]+fullData[48], fullData[50]+fullData[33], fullData[39]-fullData[5], fullData[9]-fullData[65], fullData[46]+fullData[35], fullData[19]+fullData[1], fullData[12]+fullData[53], fullData[41]-fullData[57], fullData[62]^fullData[63], fullData[8]-fullData[69], fullData[20]-fullData[40])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func yvOCrw() {
	switch get_byte() {
	case 'h':
		lCL3OWTQU()
	case 84:
		sCG5viH2AeH()
	case 'O':
		func() {
			fmt.Println(func() string {
				fullData := []byte("0\x8cU\xba\x1f;M\xa6.\xae\x9bVx\x1c\xbf\x9a\xfb\xc0h\x14\xebe\xdb!\xe96YT\xa0\xb0Qg\x96)\xe1\xf5\x87\x04ѥ:\x97k5=\xc3d\x83\x10.&\x9f熠,\xfe\x99~\xa8\xc8%\t\xefa\xfaL\xe5f\x87\x82\xb0mlic\xf0\xae\xfb\nW\x03\x02t\xcbi\x18-E\xae֓o\xbb\xd9\xc94H\xf2w\x8dj\x97\a\xb6j\xf6\x9b \n\xa1\xbe\xc8\x7f\xc2\x11R\xd5>\xb1Ĭ\xafɾ\xc1\xfb\xa4zz\v։\xc9;\xcb\xc8\x0e\x14θf")
				data := make([]byte, 0, 72)
				data = append(data, fullData[35]+fullData[26], fullData[79]-fullData[39], fullData[66]^fullData[40], fullData[116]^fullData[75], fullData[76]+fullData[70], fullData[110]+fullData[111], fullData[105]^fullData[87], fullData[8]+fullData[82], fullData[113]-fullData[115], fullData[139]+fullData[28], fullData[71]^fullData[38], fullData[123]^fullData[32], fullData[77]+fullData[57], fullData[6]+fullData[67], fullData[14]^fullData[133], fullData[85]-fullData[37], fullData[56]+fullData[64], fullData[125]-fullData[18], fullData[102]^fullData[122], fullData[129]+fullData[16], fullData[0]^fullData[92], fullData[107]+fullData[3], fullData[130]-fullData[10], fullData[95]-fullData[101], fullData[31]+fullData[52], fullData[15]-fullData[21], fullData[25]-fullData[17], fullData[120]-fullData[91], fullData[137]+fullData[46], fullData[103]-fullData[59], fullData[34]+fullData[68], fullData[61]^fullData[138], fullData[72]^fullData[81], fullData[7]+fullData[112], fullData[117]-fullData[83], fullData[104]-fullData[80], fullData[69]-fullData[134], fullData[30]^fullData[96], fullData[60]-fullData[27], fullData[100]-fullData[49], fullData[44]+fullData[13], fullData[93]-fullData[36], fullData[24]+fullData[1], fullData[53]^fullData[94], fullData[118]^fullData[128], fullData[136]+fullData[74], fullData[23]+fullData[11], fullData[33]+fullData[88], fullData[63]^fullData[29], fullData[47]-fullData[43], fullData[45]^fullData[78], fullData[54]^fullData[131], fullData[98]-fullData[124], fullData[126]+fullData[99], fullData[132]^fullData[90], fullData[121]^fullData[20], fullData[55]+fullData[62], fullData[50]^fullData[97], fullData[5]^fullData[2], fullData[42]^fullData[109], fullData[106]-fullData[41], fullData[114]-fullData[58], fullData[108]^fullData[48], fullData[135]^fullData[140], fullData[51]^fullData[65], fullData[19]^fullData[141], fullData[73]^fullData[86], fullData[9]+fullData[119], fullData[12]-fullData[4], fullData[127]^fullData[84], fullData[89]^fullData[22])
				return string(data)
			}())
		}()
	case 'm':
		gz1r91nk()
	default:
		hacker_get_out()
	}
}

func l8AcYz0ahwyg() {
	switch get_byte() {
	case 'A':
		mOJlv36LNKRK()
	case 75:
		rKVoviW4_()
	case '0':
		iAsIkupeu()
	case 121:
		func() {
			println(func() string {
				fullData := []byte("\x01\x89\xe9b~\x96E\xed\xcfs:\xcd*L\x0f̠&\xda\xf0\x13z\xb0\x95\xe4D'\x99\x9f;\xf9\xff\x92\xd62\x80\xccߟ\xea\x11\x1fw\xb8$\xfa1\xecc\x00χA\xdaa\xbe\xa5\xa6T\xf4a\xc4\xfaE\xa5\xed#\x92\x15\x19\xddXj8\xe50\x9bE")
				data := make([]byte, 0, 40)
				data = append(data, fullData[55]-fullData[6], fullData[70]+fullData[67], fullData[3]-fullData[7], fullData[29]+fullData[74], fullData[34]+fullData[10], fullData[18]+fullData[23], fullData[66]-fullData[22], fullData[9]-fullData[31], fullData[53]^fullData[62], fullData[28]^fullData[64], fullData[73]^fullData[40], fullData[30]+fullData[26], fullData[8]+fullData[56], fullData[37]-fullData[4], fullData[13]+fullData[41], fullData[45]^fullData[38], fullData[65]^fullData[11], fullData[32]-fullData[46], fullData[35]^fullData[16], fullData[48]^fullData[0], fullData[5]-fullData[44], fullData[72]^fullData[14], fullData[21]-fullData[69], fullData[17]+fullData[77], fullData[61]^fullData[24], fullData[60]^fullData[49], fullData[43]^fullData[33], fullData[71]-fullData[59], fullData[52]^fullData[54], fullData[1]-fullData[68], fullData[2]^fullData[76], fullData[63]-fullData[15], fullData[47]-fullData[36], fullData[42]+fullData[39], fullData[58]+fullData[20], fullData[75]-fullData[50], fullData[27]^fullData[19], fullData[25]+fullData[12], fullData[51]^fullData[57])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func bmQfnF_PlCr() {
	switch get_byte() {
	case 't':
		gPtZqAhPcKK()
	case 65:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xa5\x84{[r\x1f\xe6Y\xdduI!\xab눍")
				data := make([]byte, 0, 9)
				data = append(data, fullData[4]+fullData[8], fullData[11]^fullData[10], fullData[9]+fullData[12], fullData[14]+fullData[6], fullData[13]+fullData[1], fullData[2]^fullData[3], fullData[7]-fullData[5], fullData[15]^fullData[0])
				return string(data)
			}())
		}()
	case 'N':
		yRdmOKuUov()
	case 'W':
		boz0wNBX()
	default:
		hacker_get_out()
	}
}

func iG1v8b5cKQOa() {
	switch get_byte() {
	case 115:
		func() {
			defer func() {
				println(func() string {
					seed := byte(220)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
					fnc(150)(7)(10)(247)(90)(176)(235)(79)(215)(225)(86)(246)(134)
					return string(data)
				}())
			}()
		}()
	case 98:
		func() {
			println(func() string {
				data := []byte("\x95\xfc\xb2Ō\n\x98\x84U\xab)\x81\x93ak^\x95\xa8 ir\x8ejsza\xc4d p\x97\xd2 u\xbb\xe0in\x95")
				positions := [...]byte{29, 24, 19, 22, 2, 34, 31, 12, 9, 1, 24, 38, 0, 26, 5, 12, 12, 15, 33, 9, 4, 7, 35, 1, 24, 11, 3, 12, 15, 33, 2, 6, 23, 21, 5, 12, 8, 24, 17, 30, 34, 33, 21, 16, 0, 1}
				for i := 0; i < 46; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 1
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 71:
		imhI6Vp()
	case 'w':
		nYmNzYFVXh()
	default:
		hacker_get_out()
	}
}

func c9hMaBiWyKP9() {
	switch get_byte() {
	case 'e':
		func() {
			fmt.Println(func() string {
				data := []byte("NqvU\x06dG\x1bnnR)\x10Zbel;8kX\x1fBv\x18\xa5^\xff$_G!VnggL\nL_\xc9puTD1\x1dn)\x048\x1aSr_y5\xbbn\xb4_D\xa3.e-*lZ\x11\x12")
				positions := [...]byte{31, 21, 57, 59, 17, 70, 63, 66, 5, 34, 66, 13, 27, 31, 62, 40, 3, 24, 25, 21, 22, 52, 67, 7, 48, 16, 62, 68, 17, 52, 65, 55, 7, 51, 1, 14, 38, 10, 66, 70, 20, 22, 66, 23, 11, 65, 65, 16, 35, 32, 48, 5, 28, 69, 46, 13, 41, 41, 3, 27, 67, 4, 43, 10, 12, 66, 41, 49, 19, 24, 69, 31, 21, 19, 37, 16, 22, 26}
				for i := 0; i < 78; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 214
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 'I':
		cK3zmCsFr3k()
	case 'z':
		gnKV52qWJp2T()
	case 66:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("3\xde\xc9J\xe08<\xbc\xceD\xee\xe9-pSQ\x05\xc9覷\"\xf8p\xa1b")
					data := make([]byte, 0, 14)
					data = append(data, fullData[25]+fullData[18], fullData[13]+fullData[16], fullData[21]+fullData[15], fullData[24]-fullData[12], fullData[11]-fullData[2], fullData[9]-fullData[4], fullData[19]^fullData[17], fullData[10]-fullData[8], fullData[1]^fullData[20], fullData[6]+fullData[5], fullData[14]-fullData[0], fullData[3]^fullData[23], fullData[22]^fullData[7])
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func kBbdIxk() {
	switch get_byte() {
	case 'a':
		yDPuGi()
	case 54:
		jyYHGCzXo()
	case 'O':
		ifRAmiRhk()
	case 75:
		gzbcGK()
	default:
		hacker_get_out()
	}
}

func iBlzaC3D() {
	switch get_byte() {
	case 'Q':
		vT56NP()
	case '4':
		spqylZ()
	case 84:
		kwtmQsbAH()
	case 'I':
		st9SiP7qBKZ()
	default:
		hacker_get_out()
	}
}

func vNzdx_LszEv() {
	switch get_byte() {
	case 120:
		yhx5FEih()
	case 72:
		csPjhz0X()
	case 76:
		n6WgViM9CsSv()
	case 'D':
		ababux9Nw()
	default:
		hacker_get_out()
	}
}

func xYb2YTrl8FVT() {
	switch get_byte() {
	case 'y':
		func() {
			fmt.Println(func() string {
				data := []byte("\xa0\x87\xaan\x93X\xaa(")
				positions := [...]byte{2, 5, 4, 6, 6, 5, 1, 0}
				for i := 0; i < 8; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 193
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 109:
		u4yxVYml()
	case 's':
		uUFqBoLQKvEX()
	case 'Q':
		yL3dJSQ()
	default:
		hacker_get_out()
	}
}

func vOXOJ_UiOYRe() {
	switch get_byte() {
	case 122:
		rUFEgAbpwA()
	case 81:
		lSZVtpP3Zj()
	case 82:
		bD5DOXS26F8F()
	case 'y':
		func() {
			println(func() string {
				data := []byte("\xc7o\x98\x81\xa7os\x9a \xf5) t\xb1\xa2\x1f\xfa\x82 Dr+\x19\x85\x8b\xadnJ\xb6\xa2r\x9f |G\x9f\x01^8")
				positions := [...]byte{25, 7, 21, 3, 34, 9, 16, 0, 23, 36, 0, 22, 28, 15, 31, 4, 28, 23, 3, 34, 0, 0, 29, 23, 13, 24, 34, 37, 17, 15, 2, 14, 35, 37, 4, 33, 3, 0, 27, 28, 24, 21, 9, 38, 27, 22, 34, 3, 16, 19}
				for i := 0; i < 50; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 169
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func iIILRKLmLU8() {
	switch get_byte() {
	case 'k':
		func() {
			println(func() string {
				fullData := []byte("\x7f2V\xf6&\xca0r;\xf8\x8de(\x17\x93\xcf^ID\xfcR\xed\xdct\x81\x12\xa4\xaa\x0e\xf8\xad\xc6\xf9rgK\x05a\x04\xb4jx\xf7\xfa(\xb6\x13\xcdshkb\x000\xc5\x1ea\x14\x04͎ϨG=\x7f\xe6\xfa\xd6\x1b\xae\xf2\xafx\xfe\xfd\v\xd8")
				data := make([]byte, 0, 40)
				data = append(data, fullData[39]-fullData[8], fullData[23]-fullData[36], fullData[28]+fullData[34], fullData[19]^fullData[22], fullData[67]-fullData[60], fullData[75]+fullData[7], fullData[71]^fullData[24], fullData[73]-fullData[58], fullData[62]+fullData[41], fullData[12]+fullData[25], fullData[32]+fullData[6], fullData[31]^fullData[66], fullData[72]+fullData[54], fullData[14]-fullData[1], fullData[57]^fullData[0], fullData[59]-fullData[49], fullData[55]-fullData[74], fullData[56]^fullData[52], fullData[48]+fullData[30], fullData[38]+fullData[16], fullData[10]-fullData[69], fullData[20]-fullData[21], fullData[44]^fullData[17], fullData[37]-fullData[3], fullData[29]-fullData[77], fullData[63]^fullData[4], fullData[11]-fullData[42], fullData[40]+fullData[43], fullData[35]^fullData[50], fullData[18]+fullData[53], fullData[68]^fullData[26], fullData[9]-fullData[65], fullData[2]+fullData[5], fullData[13]-fullData[45], fullData[27]^fullData[47], fullData[46]^fullData[33], fullData[76]^fullData[51], fullData[64]-fullData[61], fullData[15]-fullData[70])
				return string(data)
			}())
		}()
	case 111:
		func() {
			println(func() string {
				fullData := []byte("\xcel[\x19\xbca\x9c;(\xe4\x13\x94\x0f\r\xc5RM0\xb6幦\xeb\x03k\x1c\v\xec\xb0Q\xdf>\xb3UB>\xc7\x05\xd9[X9c\aZ+\x0f\r\xfbyG\xad4\xfa\xdb\xd3sa>\xa0\xd0+\xb0\xa4\x01\x8dq<\xec$\x87\xc2\x189\xbc\xd0Y&")
				data := make([]byte, 0, 40)
				data = append(data, fullData[47]-fullData[11], fullData[4]+fullData[32], fullData[29]+fullData[69], fullData[2]-fullData[7], fullData[40]-fullData[68], fullData[28]^fullData[30], fullData[27]+fullData[70], fullData[18]-fullData[34], fullData[10]+fullData[13], fullData[51]-fullData[56], fullData[71]^fullData[22], fullData[74]-fullData[6], fullData[66]+fullData[23], fullData[52]-fullData[55], fullData[33]^fullData[35], fullData[39]^fullData[31], fullData[19]^fullData[14], fullData[49]-fullData[72], fullData[67]+fullData[9], fullData[65]-fullData[61], fullData[45]^fullData[76], fullData[60]-fullData[24], fullData[15]+fullData[46], fullData[36]+fullData[63], fullData[41]-fullData[3], fullData[43]+fullData[44], fullData[58]+fullData[17], fullData[64]+fullData[42], fullData[54]^fullData[48], fullData[0]+fullData[21], fullData[20]-fullData[50], fullData[59]^fullData[38], fullData[75]-fullData[62], fullData[1]-fullData[26], fullData[57]-fullData[53], fullData[8]+fullData[73], fullData[16]+fullData[25], fullData[5]^fullData[12], fullData[77]-fullData[37])
				return string(data)
			}())
		}()
	case 85:
		rDPwqg4o6e()
	case 'C':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 6
				decryptKey := 189
				for counter := 0; i != 9; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 3:
						data = append(data, 183)
						i = 1
					case 5:
						i = 9
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 7:
						data = append(data, 174)
						i = 3
					case 2:
						i = 4
						data = append(data, 169)
					case 6:
						data = append(data, 196)
						i = 0
					case 8:
						data = append(data, 224)
						i = 7
					case 0:
						data = append(data, 226)
						i = 2
					case 1:
						data = append(data, 164)
						i = 5
					case 4:
						data = append(data, 230)
						i = 8
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func ghfYvspo3c() {
	switch get_byte() {
	case 104:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 48:
		oMWtXhUvb()
	case 78:
		yIszT7KgC()
	case 57:
		lMbqLJ()
	default:
		hacker_get_out()
	}
}

func rlI9Pry() {
	switch get_byte() {
	case 57:
		func() {
			fmt.Println(func() string {
				data := []byte("PQj_\\^G=\x0fDg<,\x05\f;pY\x00\x17yUp_\xf3|v~r^n\xf4\xd7$:_E1\xd9_p&\x04_ }\xcbnz\x01H\"?\x1a0spf\r\xc8LA0\x01=r\xf6\xe3\x05ou")
				positions := [...]byte{24, 9, 55, 12, 60, 34, 4, 20, 32, 64, 59, 5, 15, 7, 24, 30, 10, 4, 52, 38, 40, 48, 34, 1, 52, 60, 44, 68, 33, 61, 0, 18, 8, 36, 20, 15, 38, 9, 66, 57, 50, 54, 58, 11, 66, 60, 3, 54, 67, 46, 19, 42, 16, 20, 48, 32, 63, 16, 37, 51, 24, 50, 44, 2, 53, 8, 61, 49, 14, 13, 27, 18, 45, 29, 44, 55, 55, 41, 64, 56, 31, 38, 25, 19, 54, 19, 64, 5, 0, 2, 29, 14}
				for i := 0; i < 92; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 247
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 'n':
		wBU0QIBa()
	case 90:
		cj0rP3o()
	case 52:
		b30z3UWpZz()
	default:
		hacker_get_out()
	}
}

func huxOzMHYYHD() {
	switch get_byte() {
	case 88:
		rmfMp8722Py()
	case 'm':
		i7ZIyMza8nb()
	case 54:
		func() {
			defer func() {
				println(func() string {
					seed := byte(82)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
					fnc(156)(99)(196)(137)(190)(192)(139)(199)(215)(185)(30)(86)(182)
					return string(data)
				}())
			}()
		}()
	case 76:
		z_EHURMgWd()
	default:
		hacker_get_out()
	}
}

func mRtiLS2A() {
	switch get_byte() {
	case 114:
		func() {
			println(func() string {
				data := []byte("d\bu\x06\x01o\xdc}~\x81\x89 t\xea\x02\b%\x87 b\xa7ePk sn\x9e?\xc8ry@ag\x93\xfd\x7f!")
				positions := [...]byte{29, 10, 29, 37, 22, 6, 29, 1, 28, 20, 22, 27, 25, 9, 6, 28, 16, 35, 22, 13, 35, 9, 4, 14, 0, 15, 13, 8, 13, 25, 17, 32, 3, 7, 36, 36, 17, 15, 20, 3, 27, 8}
				for i := 0; i < 42; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 74
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 55:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("\xb0H\x80\xac\xbd\xa7\xff`\x91\"S'\xc4h\x82\xe2\\f\x13\x12E+\v\xf1\x043")
					data := make([]byte, 0, 14)
					data = append(data, fullData[23]-fullData[5], fullData[10]+fullData[9], fullData[24]-fullData[8], fullData[12]+fullData[0], fullData[22]^fullData[21], fullData[15]+fullData[14], fullData[25]^fullData[16], fullData[2]-fullData[7], fullData[4]+fullData[3], fullData[17]^fullData[19], fullData[13]^fullData[1], fullData[18]+fullData[11], fullData[6]+fullData[20])
					return string(data)
				}())
			}()
		}()
	case 'V':
		nRLp6i()
	case 68:
		jYQJIbF2Q()
	default:
		hacker_get_out()
	}
}

func hWpD2S6() {
	switch get_byte() {
	case 82:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 9
					decryptKey := 10
					for counter := 0; i != 4; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 2:
							i = 8
							data = append(data, 112)
						case 10:
							data = append(data, 96)
							i = 3
						case 1:
							data = append(data, 96)
							i = 7
						case 3:
							data = append(data, "|+"...,
							)
							i = 0
						case 9:
							data = append(data, "Ku"...,
							)
							i = 2
						case 8:
							i = 1
							data = append(data, "v%"...,
							)
						case 5:
							i = 10
							data = append(data, 38)
						case 7:
							i = 5
							data = append(data, 104)
						case 0:
							i = 6
							data = append(data, "0I"...,
							)
						case 6:
							i = 4
							for y := range data {
								data[y] = data[y] ^ byte(decryptKey^y)
							}
						}
					}
					return string(data)
				}())
			}()
		}()
	case 'U':
		func() {
			fmt.Println(func() string {
				key := []byte("\xb6\x8b\x81\xf4\xa2,\xd4=\xbaM\xf5\xf5^\xdb\xee\xeex\x95\xdd\xdf3\xa3\xab\xf1\x8e\xf0ΰ\xfcW\xcb\xe2L~eH\x12\xa7\x85\xffn\xefÔ3\xcb!\x86Qx\xc6\xddZ\xf4\x89Wө*\xbd\xee\t\xcd+\x01ߍ\x9d\xa8\x87\v")
				data := []byte("\xf8\xee\xf7\xc5\xd0s\x93\r\xd4#\x94\xaa\x19阋'\xcc\xe5\xaal\xf6ۮ\xc0Ÿ\x81\x8e\b\x8c\xd3\"\x10\x04\x17^\xc2\xf1\xa07۶\xcbw\xfaV\xe8\x0e6\xfe\xabn\x86\xd6\x10\xe6\xc7DܱM\xfdXd\xad\xf9\xc2\xf1\xe8~")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 105:
		tla2nE()
	case 67:
		aaTM2Dtz1v7()
	default:
		hacker_get_out()
	}
}

func aaTM2Dtz1v7() {
	switch get_byte() {
	case 'A':
		xUvtxFVYRKU()
	case 'R':
		func() {
			println(func() string {
				seed := byte(208)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(73)(136)(22)(215)(250)(247)(242)(229)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
				return string(data)
			}())
		}()
	case '8':
		hWpD2S6()
	case 'O':
		h33XWxJVPiP7()
	default:
		hacker_get_out()
	}
}

func uUFqBoLQKvEX() {
	switch get_byte() {
	case 98:
		func() {
			println(func() string {
				key := []byte("3\xa8\x05\x84\x06\xae/\xb7\x1e~\xf3Bz\xd6Й\x9c5\xfbn\xa3\x1d\xf1%Z\x02\x83$\xeb\x9eŻ\xb4\xb7H,Kx\n")
				data := []byte("J\xc7p\xa4j\xc1\\\xc3>D\xdab\x0e\xb7\xbb\xfc\xbcT\xdb\f\xd1x\x90Nzc\xed@\xcb\xea\xb7\u0094\xd6/M\"\x16+")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 'G':
		lK4Ra2hntnkv()
	case '6':
		dkhaMQq7DBs()
	case 52:
		xYb2YTrl8FVT()
	default:
		hacker_get_out()
	}
}

func gT3I9vC() {
	switch get_byte() {
	case 90:
		fUK7gFp5()
	case 'K':
		tGdIEDQ8N0n()
	case 't':
		_qOUR_m()
	case 103:
		ctiEPA()
	default:
		hacker_get_out()
	}
}

func ecVrOve() {
	switch get_byte() {
	case 'l':
		ebQ8wwm0AP()
	case 'N':
		gRLWo3s()
	case 110:
		gjfvqJZC0A()
	case 'Z':
		dD2Ppr8()
	default:
		hacker_get_out()
	}
}

func bQeUk9uJOR() {
	switch get_byte() {
	case 'r':
		func() {
			fmt.Println(func() string {
				key := []byte("\x018>r\xc3n\xf1U")
				data := []byte("N0\xe2\xfc\xac\xb2I\xd3")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 112:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'x':
		diM5l8H()
	case 107:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 3
					decryptKey := 254
					for counter := 0; i != 7; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 0:
							i = 8
							data = append(data, "\x99\x99D"...,
							)
						case 4:
							i = 0
							data = append(data, 156)
						case 3:
							data = append(data, 114)
							i = 4
						case 5:
							i = 6
							data = append(data, "gp"...,
							)
						case 6:
							for y := range data {
								data[y] = data[y] + byte(decryptKey^y)
							}
							i = 7
						case 1:
							data = append(data, 65)
							i = 2
						case 8:
							i = 1
							data = append(data, "\x87\x91"...,
							)
						case 2:
							data = append(data, "\x99\xa3N"...,
							)
							i = 5
						}
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func cXzweC() {
	switch get_byte() {
	case 121:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 2
				decryptKey := 173
				for counter := 0; i != 10; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 8:
						data = append(data, "\xe8\xf3"...,
						)
						i = 19
					case 7:
						data = append(data, 12)
						i = 4
					case 5:
						i = 6
						data = append(data, 209)
					case 9:
						data = append(data, "\x01\b"...,
						)
						i = 16
					case 12:
						data = append(data, 5)
						i = 0
					case 2:
						i = 9
						data = append(data, 10)
					case 19:
						i = 11
						data = append(data, 169)
					case 18:
						i = 15
						data = append(data, "\x15\x1e$\xd8"...,
						)
					case 11:
						i = 14
						data = append(data, "\xeb\xf9\xf0\xad"...,
						)
					case 13:
						data = append(data, 227)
						i = 3
					case 14:
						data = append(data, "\x02\x01\t"...,
						)
						i = 5
					case 6:
						i = 18
						data = append(data, "\x13\x1a"...,
						)
					case 17:
						data = append(data, "\x11\xff\n"...,
						)
						i = 1
					case 3:
						i = 8
						data = append(data, "\xa3\xe6\xf7\xeb"...,
						)
					case 4:
						data = append(data, "\xb9\xd4ļ"...,
						)
						i = 17
					case 15:
						i = 10
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 0:
						i = 7
						data = append(data, 10)
					case 1:
						i = 13
						data = append(data, "\x05\xa1"...,
						)
					case 16:
						data = append(data, "\xb4\x01"...,
						)
						i = 12
					}
				}
				return string(data)
			}())
		}()
	case 65:
		dJrESsKL()
	case 122:
		wcm_8lHJ()
	case 104:
		eklGLkFe()
	default:
		hacker_get_out()
	}
}

func uNlEbF() {
	switch get_byte() {
	case 113:
		kzgzBSgjf2X()
	case 119:
		g9PRSZpc6rF()
	case 'f':
		nTUM2DS_uU()
	case 88:
		mGKIfy()
	default:
		hacker_get_out()
	}
}

func ayyvp3KAl() {
	switch get_byte() {
	case 'e':
		pkYhfoBlH()
	case 'a':
		bcBbzfVBP4()
	case 'D':
		eb9vcRn()
	case 74:
		jT_79_TS3yu()
	default:
		hacker_get_out()
	}
}

func st9SiP7qBKZ() {
	switch get_byte() {
	case 48:
		func() {
			fmt.Println(func() string {
				seed := byte(209)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(159)(21)(243)(73)(179)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	case 'K':
		func() {
			println(func() string {
				key := []byte("-\x8a\rn]O\x98*\"\x1c\x1aI~\x1auq\xe9\x05\x91\x1fK\x8b[<\x94ް\x1d\xa1P\xe3[\x94+\x81\xcdNc%")
				data := []byte("T\xe5xN1 \xeb^\x02&3i\n{\x1e\x14\xc9d\xb1}9\xee:W\xb4\xbf\xdey\x81$\x91\"\xb4J\xe6\xac'\r\x04")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 'V':
		iBlzaC3D()
	case 'O':
		uUzHoJY()
	default:
		hacker_get_out()
	}
}

func ztObSGMO() {
	switch get_byte() {
	case 101:
		func() {
			defer func() {
				println(func() string {
					data := []byte("9us\t \x1coX\xee\x04!\xdf%")
					positions := [...]byte{8, 10, 9, 7, 11, 5, 0, 8, 10, 5, 8, 3, 8, 0, 12, 12, 5, 12}
					for i := 0; i < 18; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 12
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
					}
					return string(data)
				}())
			}()
		}()
	case 102:
		g7yh1fHqXD()
	case 116:
		rxyQkDcy()
	case 'P':
		func() {
			defer func() {
				println(func() string {
					seed := byte(15)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
					fnc(69)(33)(6)(15)(170)(80)(235)(79)(215)(225)(86)(246)(134)
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func ySF6m6kMrbnS() {
	switch get_byte() {
	case 119:
		zZG4taZRQU4_()
	case 'I':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 116:
		vaCabD()
	case 'L':
		zzvS9cJk()
	default:
		hacker_get_out()
	}
}

func v_Z6RAU8() {
	switch get_byte() {
	case 'r':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 15
				decryptKey := 103
				for counter := 0; i != 24; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 22:
						data = append(data, 58)
						i = 28
					case 17:
						i = 16
						data = append(data, "\x02\x1ej/"...,
						)
					case 15:
						i = 7
						data = append(data, "8\x12\x02D"...,
						)
					case 12:
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
						i = 24
					case 0:
						data = append(data, "\x1f\x06"...,
						)
						i = 2
					case 11:
						data = append(data, "|3v1"...,
						)
						i = 0
					case 8:
						i = 25
						data = append(data, 61)
					case 28:
						i = 19
						data = append(data, "SE"...,
						)
					case 20:
						i = 13
						data = append(data, "jk"...,
						)
					case 9:
						data = append(data, "=6\x10>"...,
						)
						i = 10
					case 21:
						i = 3
						data = append(data, "\x1a\\\x184"...,
						)
					case 18:
						i = 17
						data = append(data, "\ak)"...,
						)
					case 6:
						data = append(data, ",\x15\x0fx"...,
						)
						i = 22
					case 3:
						data = append(data, "/X"...,
						)
						i = 4
					case 5:
						data = append(data, 17)
						i = 26
					case 2:
						data = append(data, "{!\""...,
						)
						i = 6
					case 4:
						data = append(data, 56)
						i = 1
					case 25:
						i = 23
						data = append(data, "I\x0e\x1c"...,
						)
					case 27:
						data = append(data, "6$\x0e"...,
						)
						i = 18
					case 19:
						i = 20
						data = append(data, 64)
					case 10:
						i = 21
						data = append(data, " Z"...,
						)
					case 7:
						i = 14
						data = append(data, "\x00,"...,
						)
					case 13:
						i = 12
						data = append(data, "\\E"...,
						)
					case 23:
						i = 9
						data = append(data, "9>\\\x10"...,
						)
					case 26:
						i = 8
						data = append(data, "\x1d\""...,
						)
					case 16:
						i = 11
						data = append(data, "7\x19\t"...,
						)
					case 1:
						i = 27
						data = append(data, "95\n\x1e"...,
						)
					case 14:
						i = 5
						data = append(data, "7A\x10"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 105:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x86\xad\x1a\x99PP\xe3\x1f\x8ae\xc6(\x9d{U_2\xffc\x91\x02\x1b0\x9f!8\xc1\xa0\x97\xc3\xd9\xd5On\xb6\x91i\xed\xbc\x03\xb4=\xbeL'ӬC\x97\xf2\xc0\xbe\xf7\xde\x03\x83\xf5\xbc)\x87\xa8\xba\xc6c\t\xee\x8f$ȗi\x10\x0f\xbd\xd2\xf158G\x8c:\x11\x980\x9d\b\x1e\x81q\xc1[\xfc\xf4\x1d\x0fcί\x95+\xf9\xa9\x9f\x9c\x93(2=y\v*<@FK\xb1\x16+N۵\x80u\\\xd5I\v\xceqM\b#\xdew\xb3\x9c\xb6\xde\xc0L\xb1\x90")
				data := make([]byte, 0, 72)
				data = append(data, fullData[20]^fullData[139], fullData[49]^fullData[28], fullData[30]+fullData[84], fullData[64]+fullData[105], fullData[39]-fullData[19], fullData[4]^fullData[94], fullData[26]^fullData[0], fullData[97]^fullData[23], fullData[45]^fullData[73], fullData[7]^fullData[128], fullData[58]+fullData[25], fullData[50]^fullData[102], fullData[112]-fullData[100], fullData[81]^fullData[131], fullData[22]^fullData[113], fullData[3]^fullData[91], fullData[66]-fullData[83], fullData[60]^fullData[75], fullData[63]-fullData[99], fullData[107]+fullData[77], fullData[121]-fullData[24], fullData[51]+fullData[69], fullData[136]+fullData[61], fullData[130]-fullData[101], fullData[14]^fullData[21], fullData[38]+fullData[108], fullData[2]+fullData[123], fullData[10]-fullData[98], fullData[67]+fullData[118], fullData[71]-fullData[140], fullData[92]^fullData[134], fullData[34]+fullData[13], fullData[111]-fullData[127], fullData[27]-fullData[16], fullData[40]+fullData[1], fullData[29]^fullData[135], fullData[125]+fullData[54], fullData[48]-fullData[106], fullData[59]+fullData[37], fullData[41]-fullData[132], fullData[12]+fullData[57], fullData[116]+fullData[86], fullData[114]+fullData[110], fullData[68]-fullData[70], fullData[43]-fullData[85], fullData[95]+fullData[96], fullData[46]-fullData[76], fullData[103]+fullData[74], fullData[11]^fullData[133], fullData[9]^fullData[117], fullData[129]^fullData[122], fullData[82]+fullData[137], fullData[56]-fullData[89], fullData[35]^fullData[6], fullData[72]^fullData[5], fullData[36]+fullData[53], fullData[141]-fullData[90], fullData[47]-fullData[31], fullData[78]+fullData[44], fullData[138]-fullData[15], fullData[65]+fullData[88], fullData[109]^fullData[32], fullData[115]^fullData[87], fullData[120]+fullData[42], fullData[33]^fullData[126], fullData[124]-fullData[18], fullData[52]-fullData[55], fullData[80]-fullData[119], fullData[104]+fullData[62], fullData[79]-fullData[93], fullData[17]-fullData[8])
				return string(data)
			}())
		}()
	case 'z':
		eHpamS()
	case 'T':
		uI4nok()
	default:
		hacker_get_out()
	}
}

func e1wBYxUOjhqR() {
	switch get_byte() {
	case 118:
		w8gl3oS()
	case 'x':
		tnuSpC()
	case 55:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 19
				decryptKey := 15
				for counter := 0; i != 20; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 7:
						data = append(data, "\xfc\xec"...,
						)
						i = 5
					case 21:
						data = append(data, "\xa9Ϗ\x8a"...,
						)
						i = 4
					case 0:
						data = append(data, "\xb8\xb3\xf7\xb7"...,
						)
						i = 10
					case 6:
						data = append(data, "\xa5\xff"...,
						)
						i = 3
					case 16:
						data = append(data, 132)
						i = 8
					case 8:
						data = append(data, 200)
						i = 17
					case 9:
						data = append(data, "\xa6\xa3"...,
						)
						i = 21
					case 3:
						data = append(data, "\xbf\xfd"...,
						)
						i = 18
					case 4:
						i = 16
						data = append(data, "\x8d\x82"...,
						)
					case 2:
						data = append(data, 188)
						i = 11
					case 11:
						data = append(data, 231)
						i = 7
					case 12:
						i = 13
						data = append(data, 176)
					case 10:
						i = 12
						data = append(data, 187)
					case 13:
						i = 9
						data = append(data, 243)
					case 14:
						data = append(data, "\xb8\xec\xa7"...,
						)
						i = 1
					case 5:
						i = 15
						data = append(data, 228)
					case 15:
						i = 6
						data = append(data, "\xb7\xa3\xaa"...,
						)
					case 18:
						data = append(data, "\xbe\xa9\xbf"...,
						)
						i = 0
					case 1:
						data = append(data, "\xa5\xba"...,
						)
						i = 2
					case 19:
						data = append(data, "\xb6\xa1"...,
						)
						i = 14
					case 17:
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
						i = 20
					}
				}
				return string(data)
			}())
		}()
	case 'l':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 3
				decryptKey := 124
				for counter := 0; i != 6; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 0:
						i = 7
						data = append(data, 90)
					case 1:
						data = append(data, 18)
						i = 4
					case 7:
						i = 9
						data = append(data, 67)
					case 5:
						data = append(data, 22)
						i = 8
					case 2:
						i = 6
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 4:
						i = 0
						data = append(data, 20)
					case 9:
						data = append(data, 80)
						i = 2
					case 8:
						i = 1
						data = append(data, 93)
					case 3:
						i = 5
						data = append(data, 48)
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func h9LGvp() {
	switch get_byte() {
	case '4':
		dW6nopvJs()
	case 51:
		mraixihE()
	case 'l':
		func() {
			fmt.Println(func() string {
				data := []byte("\x8fS\xb7\xd8+\xa1\x876")
				positions := [...]byte{7, 4, 7, 1, 0, 7, 4, 3, 6, 5, 0, 2}
				for i := 0; i < 12; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 92
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case '2':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 7
				decryptKey := 5
				for counter := 0; i != 12; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 8:
						i = 13
						data = append(data, "\x1d\x1f\xc4\xdf"...,
						)
					case 18:
						data = append(data, "\x02\r\b\xdc"...,
						)
						i = 10
					case 17:
						i = 0
						data = append(data, 171)
					case 9:
						i = 3
						data = append(data, 37)
					case 3:
						i = 4
						data = append(data, "$,\xac"...,
						)
					case 14:
						data = append(data, "!*\x1e"...,
						)
						i = 11
					case 4:
						i = 1
						data = append(data, 238)
					case 10:
						data = append(data, "\x1e\xde"...,
						)
						i = 14
					case 16:
						data = append(data, "#\xcf\x14\x18"...,
						)
						i = 8
					case 7:
						data = append(data, 37)
						i = 2
					case 6:
						data = append(data, 212)
						i = 15
					case 15:
						data = append(data, "\x16$\x1b"...,
						)
						i = 5
					case 1:
						i = 17
						data = append(data, "\xf5\xf0\xf1\xf7"...,
						)
					case 5:
						data = append(data, 208)
						i = 9
					case 2:
						data = append(data, 28)
						i = 16
					case 11:
						i = 6
						data = append(data, "\x1b&"...,
						)
					case 13:
						i = 18
						data = append(data, "\xcf\xc7\x14"...,
						)
					case 0:
						i = 12
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func hp5zG42JUW4z() {
	switch get_byte() {
	case 86:
		itRbYzMu8()
	case 'r':
		gFYsOVh2_z()
	case 'Z':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 49:
		syNjBt_PIDn1()
	default:
		hacker_get_out()
	}
}

func fRyPZv() {
	switch get_byte() {
	case 65:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 1
				decryptKey := 219
				for counter := 0; i != 16; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 2:
						i = 15
						data = append(data, "\xbd\xc0\xc0"...,
						)
					case 7:
						data = append(data, "\xbby"...,
						)
						i = 13
					case 5:
						i = 16
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 0:
						data = append(data, "`\xbb"...,
						)
						i = 4
					case 14:
						i = 5
						data = append(data, "\u070e"...,
						)
					case 17:
						data = append(data, 176)
						i = 18
					case 11:
						data = append(data, 190)
						i = 9
					case 4:
						i = 17
						data = append(data, 167)
					case 19:
						data = append(data, 202)
						i = 3
					case 10:
						data = append(data, "\xd1\xc3"...,
						)
						i = 11
					case 13:
						data = append(data, 186)
						i = 10
					case 6:
						data = append(data, "\xbeh\xbb"...,
						)
						i = 2
					case 3:
						i = 8
						data = append(data, "\xc7͋\xcb"...,
						)
					case 12:
						data = append(data, "\xb4w"...,
						)
						i = 19
					case 9:
						data = append(data, "\xc7s\xb3\xbf"...,
						)
						i = 12
					case 18:
						data = append(data, "\xa9{"...,
						)
						i = 7
					case 1:
						i = 6
						data = append(data, "Ĺ"...,
						)
					case 15:
						i = 0
						data = append(data, "c|j"...,
						)
					case 8:
						data = append(data, "\xd0\xc9\xd8"...,
						)
						i = 14
					}
				}
				return string(data)
			}())
		}()
	case 78:
		func() {
			fmt.Println(func() string {
				seed := byte(151)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(216)(7)(86)(162)(1)(79)(132)(106)
				return string(data)
			}())
		}()
	case 'J':
		vRPsVznObub()
	case 83:
		dhjAoOF()
	default:
		hacker_get_out()
	}
}

func yHd18H7WU() {
	switch get_byte() {
	case 52:
		g4MqfD()
	case 'x':
		func() {
			fmt.Println(func() string {
				fullData := []byte(".\xb6\fb%\xfb\xfa\x94\x05\xb1-\x05\x96۔\xb3")
				data := make([]byte, 0, 9)
				data = append(data, fullData[9]-fullData[3], fullData[13]^fullData[15], fullData[4]^fullData[11], fullData[14]^fullData[6], fullData[5]^fullData[7], fullData[1]^fullData[12], fullData[2]+fullData[0], fullData[8]^fullData[10])
				return string(data)
			}())
		}()
	case 70:
		zS54MrG9()
	case 67:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 4
					decryptKey := 137
					for counter := 0; i != 5; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 3:
							i = 5
							for y := range data {
								data[y] = data[y] + byte(decryptKey^y)
							}
						case 4:
							i = 6
							data = append(data, "\x95\xc1\xbc"...,
							)
						case 0:
							i = 1
							data = append(data, 188)
						case 2:
							data = append(data, 97)
							i = 7
						case 1:
							data = append(data, "n\xac\xb8"...,
							)
							i = 2
						case 7:
							i = 3
							data = append(data, "|\x8b"...,
							)
						case 6:
							data = append(data, "\xbeo\xb4"...,
							)
							i = 0
						}
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func d1gHlwWG2o() {
	switch get_byte() {
	case 52:
		auztDvom37B()
	case 'i':
		pPBFR2()
	case 'h':
		ie6PWyogBS0()
	case 'e':
		xyVPgQ_()
	default:
		hacker_get_out()
	}
}

func znNlUx() {
	switch get_byte() {
	case 107:
		iCjrpwhh()
	case 'T':
		eTPdaLcHsXC()
	case 117:
		func() {
			println(func() string {
				data := []byte("\f\xfcR\x05[^sf \\\x04\x85ZfkVG-z\x99re7\x96@E0\x0fnQr\x89\xb9\x83\x9cDin!")
				positions := [...]byte{0, 24, 25, 26, 27, 16, 3, 1, 25, 15, 10, 4, 5, 0, 13, 2, 16, 4, 4, 12, 9, 33, 9, 33, 25, 29, 32, 32, 7, 19, 22, 10, 23, 26, 26, 34, 1, 18, 32, 12, 11, 35, 18, 18, 28, 17, 12, 31, 7, 31}
				for i := 0; i < 50; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 212
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 118:
		zG1bgJ()
	default:
		hacker_get_out()
	}
}

func lmWxbkMGxNe6() {
	switch get_byte() {
	case 71:
		rBZLpzcJyKQ()
	case 122:
		cP64kSg6IYO()
	case 57:
		k2I6ORw()
	case 56:
		lC5zr0UdK()
	default:
		hacker_get_out()
	}
}

func ywzwQcqlQCWC() {
	switch get_byte() {
	case 'i':
		clwSct0()
	case 113:
		oLJAfWf()
	case 74:
		iab04xG()
	case 'c':
		akGZOo8()
	default:
		hacker_get_out()
	}
}

func ebQ8wwm0AP() {
	switch get_byte() {
	case '8':
		n360Ct8Ssdl6()
	case 'm':
		ecVrOve()
	case 'q':
		y28cwOKG()
	case 'G':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func h_G2QB() {
	switch get_byte() {
	case 'J':
		func() {
			println(func() string {
				fullData := []byte("QB!\\\xdaϛ\xd9 \xc1\x1c+\xe4\xdeg\x1eK̻\x9b\xb6\xf9\xa3\xbb-e_h\x93\x00\x04lL`\xcd\xf5\xd8e\x83!\xa3*\x16\xd8\x05\xff\xd4kB\U00068db2\x85e#r\x9e\xbc\xf2\xb3\xadP6\x81\xc9$ȃ@s=K\xff\xfc\xf0\xf44")
				data := make([]byte, 0, 40)
				data = append(data, fullData[61]^fullData[46], fullData[28]^fullData[74], fullData[0]+fullData[66], fullData[42]^fullData[63], fullData[57]^fullData[59], fullData[47]+fullData[30], fullData[43]-fullData[25], fullData[27]-fullData[76], fullData[2]+fullData[73], fullData[4]+fullData[33], fullData[35]-fullData[17], fullData[7]^fullData[21], fullData[5]^fullData[18], fullData[64]-fullData[8], fullData[11]^fullData[69], fullData[37]-fullData[29], fullData[40]-fullData[38], fullData[48]^fullData[55], fullData[26]+fullData[9], fullData[52]-fullData[62], fullData[15]^fullData[31], fullData[36]-fullData[70], fullData[41]^fullData[16], fullData[75]-fullData[53], fullData[13]+fullData[1], fullData[3]+fullData[44], fullData[49]-fullData[68], fullData[19]+fullData[65], fullData[39]+fullData[45], fullData[50]-fullData[77], fullData[12]-fullData[56], fullData[51]-fullData[71], fullData[6]^fullData[23], fullData[32]^fullData[24], fullData[72]+fullData[10], fullData[67]-fullData[14], fullData[60]+fullData[20], fullData[22]^fullData[34], fullData[58]+fullData[54])
				return string(data)
			}())
		}()
	case 55:
		eVZlM5()
	case 87:
		i1n4mX()
	case 117:
		m1pShztdc()
	default:
		hacker_get_out()
	}
}

func iSfCSfCa() {
	switch get_byte() {
	case 101:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 5
				decryptKey := 87
				for counter := 0; i != 4; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 6:
						i = 11
						data = append(data, "\xbd\x00"...,
						)
					case 20:
						data = append(data, 182)
						i = 27
					case 19:
						i = 2
						data = append(data, "\n\xf3\xe8\x02"...,
						)
					case 23:
						data = append(data, "\xff\xea,"...,
						)
						i = 13
					case 25:
						data = append(data, "\xca\x16\x15\a"...,
						)
						i = 26
					case 9:
						data = append(data, "\xb1\xfe\xfd"...,
						)
						i = 18
					case 30:
						data = append(data, 206)
						i = 19
					case 3:
						data = append(data, "%\x11"...,
						)
						i = 29
					case 0:
						i = 25
						data = append(data, "\xce\x0e\xfa\xe1"...,
						)
					case 15:
						data = append(data, "\b\x16\x00"...,
						)
						i = 14
					case 13:
						data = append(data, "-9"...,
						)
						i = 7
					case 26:
						i = 8
						data = append(data, 4)
					case 14:
						i = 22
						data = append(data, "\t\xe3#\f"...,
						)
					case 2:
						data = append(data, "\xf0\xee\xd4"...,
						)
						i = 16
					case 17:
						data = append(data, "\xf7\xf0"...,
						)
						i = 30
					case 24:
						data = append(data, "\xee+\xe8"...,
						)
						i = 3
					case 21:
						i = 23
						data = append(data, ",\x1e\x1b"...,
						)
					case 12:
						i = 4
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 22:
						data = append(data, "\xf0\xdc"...,
						)
						i = 1
					case 16:
						i = 0
						data = append(data, 20)
					case 7:
						i = 10
						data = append(data, ":$\x1d2"...,
						)
					case 27:
						i = 28
						data = append(data, "\xf6\xe2"...,
						)
					case 5:
						data = append(data, "\xd6\xec\xfc"...,
						)
						i = 20
					case 10:
						i = 12
						data = append(data, 55)
					case 11:
						i = 17
						data = append(data, 238)
					case 29:
						i = 21
						data = append(data, "\xf8\xf5-"...,
						)
					case 28:
						data = append(data, 201)
						i = 9
					case 18:
						i = 6
						data = append(data, "\xef\xec\xd3"...,
						)
					case 1:
						data = append(data, "!\x17\x17\x05"...,
						)
						i = 24
					case 8:
						data = append(data, 240)
						i = 15
					}
				}
				return string(data)
			}())
		}()
	case 'M':
		func() {
			println(func() string {
				key := []byte("D7g\aR8\xa2g\xd1\x0f\x063a\xef\xac3\xb4\xe5Y\xca\xea\xff\xa1\x9ah\xaf\x1a\xd6eP\x9b@ځ\x86\x98W\x13[")
				data := []byte("=X\x12'>W\xd1\x13\xf15/\x13\x15\x8e\xc7V\x94\x84y\xa8\x98\x9a\xc0\xf1H\xcet\xb2E$\xe99\xfa\xe0\xe1\xf9>}z")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 'Y':
		ox2CSf()
	case 53:
		lyyA1C7N()
	default:
		hacker_get_out()
	}
}

func dLljT9P() {
	switch get_byte() {
	case 76:
		p_G8uUYe8qf()
	case 'A':
		pfefyAPQ5()
	case '2':
		func() {
			println(func() string {
				seed := byte(208)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(169)(22)(250)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
				return string(data)
			}())
		}()
	case '9':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func cK3zmCsFr3k() {
	switch get_byte() {
	case 'z':
		c9hMaBiWyKP9()
	case 'o':
		iAWegw()
	case 49:
		vqXlr9muEN()
	case 118:
		ivDttumlGDb()
	default:
		hacker_get_out()
	}
}

func jlpC7ZhL() {
	switch get_byte() {
	case 55:
		cEbUXG9()
	case 116:
		ts9wKkcTQzi()
	case 'C':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x1f&\xce\xfd\xcd\xc2\rI\x11B\xe4YR\xd4I\xa3-&\x0e8{K\xb9\xdc\xeb\x87W\x92)\xc7\xefU\\\xa1\xe4\x01yJ\xa1g\xd20~\x00\x87\xb9}\xb6\xf4v8\xc1c^o\xf1^\xe5\xbaH\xbcr\xd2f=͔o\xe7\x89X\x16\x1e\x9e\x98\xf3*\x06f\xbdZ\xe0.i\x91NzKҠa\x10\xf5ˋ]\xd2\n\xb4\x83\xce\xdcKnmNx\x19\x14\xfd\xfa\x8b\xc4]oH<\x11sǿ}\xfb$=\xa7\x84k\xd7\b\x7fb\xa1\x06/g\x8a\x1f\x80_\xe9\xeb")
				data := make([]byte, 0, 72)
				data = append(data, fullData[137]+fullData[134], fullData[94]-fullData[1], fullData[112]-fullData[85], fullData[21]^fullData[86], fullData[56]+fullData[108], fullData[67]-fullData[91], fullData[3]-fullData[47], fullData[22]^fullData[69], fullData[136]^fullData[34], fullData[4]^fullData[15], fullData[64]-fullData[23], fullData[24]^fullData[98], fullData[72]+fullData[28], fullData[127]+fullData[119], fullData[43]+fullData[49], fullData[82]^fullData[102], fullData[101]^fullData[99], fullData[121]^fullData[123], fullData[78]^fullData[53], fullData[52]^fullData[71], fullData[20]+fullData[10], fullData[93]^fullData[73], fullData[48]-fullData[126], fullData[117]+fullData[105], fullData[100]-fullData[138], fullData[104]-fullData[50], fullData[33]^fullData[128], fullData[83]^fullData[70], fullData[89]^fullData[62], fullData[57]^fullData[58], fullData[84]-fullData[37], fullData[111]-fullData[80], fullData[31]+fullData[107], fullData[92]-fullData[44], fullData[61]+fullData[30], fullData[124]^fullData[131], fullData[95]-fullData[8], fullData[18]+fullData[26], fullData[35]+fullData[118], fullData[74]^fullData[29], fullData[38]-fullData[115], fullData[90]-fullData[16], fullData[9]-fullData[65], fullData[19]^fullData[135], fullData[79]+fullData[25], fullData[113]+fullData[13], fullData[46]^fullData[97], fullData[12]^fullData[116], fullData[42]-fullData[0], fullData[103]+fullData[81], fullData[41]+fullData[129], fullData[76]^fullData[32], fullData[141]+fullData[14], fullData[75]+fullData[130], fullData[11]^fullData[77], fullData[27]-fullData[87], fullData[40]^fullData[68], fullData[139]-fullData[55], fullData[60]^fullData[96], fullData[110]+fullData[39], fullData[2]-fullData[114], fullData[109]-fullData[45], fullData[51]+fullData[54], fullData[88]^fullData[132], fullData[5]^fullData[125], fullData[133]-fullData[66], fullData[36]+fullData[122], fullData[59]-fullData[140], fullData[120]-fullData[63], fullData[17]+fullData[7], fullData[6]^fullData[106])
				return string(data)
			}())
		}()
	case 'F':
		iKyVJcdP()
	default:
		hacker_get_out()
	}
}

func lSxLHHuJfsXZ() {
	switch get_byte() {
	case 'B':
		lsf5dEhYZCN()
	case 82:
		mNsbc3o5Ok()
	case 103:
		tluAGf()
	case 48:
		func() {
			defer func() {
				println(func() string {
					data := []byte("\xe8\xa2s\xe8 \x95ox\xf7t\x82\xba\xb8")
					positions := [...]byte{10, 0, 12, 1, 7, 12, 7, 3, 3, 11, 5, 12, 8, 11}
					for i := 0; i < 14; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 190
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func tWk4jMPh() {
	switch get_byte() {
	case 79:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 70:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 5
					decryptKey := 193
					for counter := 0; i != 3; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 4:
							i = 6
							data = append(data, "\xbc\xef"...,
							)
						case 0:
							i = 3
							for y := range data {
								data[y] = data[y] ^ byte(decryptKey^y)
							}
						case 1:
							data = append(data, 131)
							i = 0
						case 5:
							i = 4
							data = append(data, "\x81\xbf\xba"...,
							)
						case 2:
							i = 1
							data = append(data, "\xb6\xe1\xfa"...,
							)
						case 6:
							i = 2
							data = append(data, "\xaa\xa2\xec\xaa"...,
							)
						}
					}
					return string(data)
				}())
			}()
		}()
	case 122:
		eEVi0NhxQjaQ()
	case 68:
		d0EMGo2HOrKj()
	default:
		hacker_get_out()
	}
}

func llWazOF() {
	switch get_byte() {
	case 86:
		adV2eyeN()
	case 'U':
		func() {
			println(func() string {
				data := []byte("/b.T\xe3O\x16@\bO\x103Ya\xe4X% @A8\x0f?L \xe4\\\x1c\xd0\x16\x02y\x1a\x80\x85ain\a")
				positions := [...]byte{18, 0, 10, 14, 38, 8, 19, 2, 23, 12, 25, 28, 14, 32, 5, 29, 20, 27, 5, 22, 16, 4, 16, 11, 9, 6, 32, 17, 7, 4, 5, 26, 30, 14, 33, 26, 21, 3, 20, 1, 5, 30, 5, 15, 14, 18, 16, 25, 23, 34, 17, 1}
				for i := 0; i < 52; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 181
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 118:
		vEyrf7ho()
	case 112:
		eliTzQ()
	default:
		hacker_get_out()
	}
}

func abJeZ8Xz1F() {
	switch get_byte() {
	case 82:
		ax0Z73eKtA()
	case 'W':
		iADTO2LSLU()
	case 54:
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xa4x\t\x19߇\x83|\x85b\x1f\x05\xe5")
					data := []byte("\xa6\xfdj[A\xdd\xec\xa4\xe4\x12\x015_")
					for i, b := range key {
						data[i] = data[i] + b
					}
					return string(data)
				}())
			}()
		}()
	case 'K':
		f38tSLDpadv()
	default:
		hacker_get_out()
	}
}

func zQRyPlJ62x() {
	switch get_byte() {
	case 's':
		r_nJFV()
	case 104:
		sHOICIxBo()
	case 108:
		func() {
			defer func() {
				println(func() string {
					seed := byte(208)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
					fnc(26)(95)(188)(121)(158)(128)(11)(199)(215)(185)(30)(86)(182)
					return string(data)
				}())
			}()
		}()
	case 'y':
		func() {
			fmt.Println(func() string {
				key := []byte("?\x9c\xd9\xe84ʇ\xa07\f\xbe\xec8䟶\xa7y\xfb\x9dN\xcb\x1b\f\xffB\xf5\xa4\x06A\xa8\xfc\x9d\x02\xe1x\xa9D\xc7e\xe1I2\x17\x9b\x84\x1c\xb4=Lo\x13\x18\xfdWSͩ\x89Z\xef\xaeKL\xe6\x9a>V\x9e};")
				data := []byte("\x8d\x01O\x19\xa6)\xceХz\x1fK\x7f\x16\x15\x1b\x06\xd23\x12\xad \x8bkMwk\xd5x\xa0\xef-\vpB\xd7\xf5\xa9;\xc4:}\xa7vߵ\x93\"\x9c\x9a\xa7\x89Lo\xb6\x9a\x02\x17\xf7\xbbN\xf2{\xbfK\f\xb2\xb5\xf7\xec\xb0")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func fM89ytR6wpc() {
	switch get_byte() {
	case 'n':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 87:
		ys_H7GN()
	case 'Y':
		fS1MyakjJr()
	case 'U':
		xHOZvTV0()
	default:
		hacker_get_out()
	}
}

func zzvS9cJk() {
	switch get_byte() {
	case 106:
		cdS6pwezVpI()
	case 107:
		rkZAiUK6()
	case 'z':
		ySF6m6kMrbnS()
	case 'E':
		b4XzO8()
	default:
		hacker_get_out()
	}
}

func aGyCon() {
	switch get_byte() {
	case 76:
		bPIpof06i_Dq()
	case 81:
		d1Wqe3e5zn()
	case 100:
		func() {
			println(func() string {
				key := []byte("\x8d\xdf\xc0\x7f\xf7C\x05\xbe<z_*p\xe5F\xe2\x93Ц\x03\xe3X\xff0\x1d\xecz\xa9\x97\xfd\xaa9\xda6\xe6\xfb\x06\xf7n")
				data := []byte("\x06N5\x9fc\xb2x2\\\xb4\x88J\xe4F\xb1G\xb31\xc6eU\xbd`\x9b=M\xe8\r\xb7q\x1c\xb2\xfa\x97M\\oe\x8f")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 116:
		func() {
			fmt.Println(func() string {
				data := []byte("X\x03S\x05oGI?")
				positions := [...]byte{2, 6, 5, 5, 7, 0, 1, 3}
				for i := 0; i < 8; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 101
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func hX4rt_eZXn() {
	switch get_byte() {
	case 121:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'm':
		qXRTqTr4()
	case 107:
		gBHSaOX8()
	case 'c':
		b3pzcj()
	default:
		hacker_get_out()
	}
}

func fsML1Es() {
	switch get_byte() {
	case 'D':
		func() {
			fmt.Println(func() string {
				data := []byte("N\xb7\x9d\xecr\xe9\x12\x84nn\xdcg:Xv\xf2\x1a\xd8/\rNU\x80,N\xd1v\x04\xd3_\xf4\x15nna\xdeΐ\r\xd6\x03\t\xec_\x7f\x9fw\xb4_\xb9;\x874\xbd\xf7\x9f\xb4n\x987\xe2\xc9\xdbs'9\xf2\xaa\\\xe4\xac")
				positions := [...]byte{13, 10, 66, 13, 60, 30, 36, 30, 50, 19, 22, 59, 5, 49, 12, 38, 2, 28, 13, 1, 7, 66, 2, 49, 61, 27, 27, 58, 51, 56, 68, 39, 40, 56, 53, 19, 51, 66, 53, 23, 11, 16, 18, 44, 44, 7, 5, 3, 69, 65, 58, 31, 37, 20, 18, 70, 13, 67, 6, 23, 59, 60, 55, 44, 19, 5, 15, 30, 54, 20, 37, 19, 64, 65, 41, 35, 60, 37, 42, 19, 28, 53, 7, 47, 16, 62, 53, 28, 39, 44, 28, 40, 25, 27, 31, 45, 17, 42}
				for i := 0; i < 98; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 2
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case '9':
		e9C9sd6GV()
	case '0':
		xwIJbzuwDh()
	case 67:
		nASacgmdb()
	default:
		hacker_get_out()
	}
}

func mv0NX6hGv() {
	switch get_byte() {
	case '6':
		sgnr5Km0T()
	case 81:
		dW6nopvJs()
	case 108:
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xda\xca\xfdH\xe5\\\xc8Sy\x00\xed\fz")
					data := []byte("$?p\xbc\x05\xc07s\xe2t\rF\xbe")
					for i, b := range key {
						data[i] = data[i] - b
					}
					return string(data)
				}())
			}()
		}()
	case 50:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func n_Aqts9VxRT() {
	switch get_byte() {
	case 81:
		aJA3nGrz()
	case 'T':
		func() {
			fmt.Println(func() string {
				key := []byte("\x04c\xeb\x87\xe8\xe1;K\xe9>R\xd3\xcc\xc4o\x90|\x87]\xfdB\x90\xef\xc6t\xb9\xbd\"\xa4\xf2U/*7E0\xd7L\xc1\xc1%g\x934\xf8\xb31\xa5\xe1i\x06T\x9e\xf7\xc2\x05Q\xb8\"\r\x8d/w\x89\\9j.\xfcX!")
				data := []byte("R\xc8a\xb8Z@\x82{W\xac\xb32\x13\xf6\xe5\xf5\xdb\xe0\x95r\xa1\xe5_%\xc2\xee3S\x16Q\x9c`\x98\xa5\xa6\x8f#\xb15 ~\x9b\b\x93<\xe4\xa8\x13@\xb7>\xca\xd2i!L\x86&\x90n\xecs\xa7\xfc\xc1\xabލUǖ")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 117:
		a6UlfIeh()
	case 99:
		iiU1xF0()
	default:
		hacker_get_out()
	}
}

func e_52BIz3() {
	switch get_byte() {
	case 118:
		u_bStI()
	case 'K':
		nwwCiSzx()
	case '2':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 11
				decryptKey := 34
				for counter := 0; i != 5; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 15:
						i = 2
						data = append(data, "\xd5ޚ"...,
						)
					case 4:
						data = append(data, "Ґ"...,
						)
						i = 0
					case 12:
						i = 4
						data = append(data, "\xce\xc7Ȓ"...,
						)
					case 6:
						data = append(data, 239)
						i = 10
					case 14:
						i = 3
						data = append(data, "\x8a\x91\x81"...,
						)
					case 3:
						data = append(data, "\x89\xda"...,
						)
						i = 12
					case 2:
						data = append(data, "\xda\xd6ݞ"...,
						)
						i = 7
					case 10:
						data = append(data, "\xe9\xa5"...,
						)
						i = 8
					case 0:
						data = append(data, "\xd3\xc4\xd2"...,
						)
						i = 15
					case 8:
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
						i = 5
					case 1:
						data = append(data, "\xa2\xe2\xe7\xe0"...,
						)
						i = 6
					case 13:
						data = append(data, 129)
						i = 9
					case 7:
						data = append(data, "\xcb\xce\xc4"...,
						)
						i = 1
					case 9:
						data = append(data, "\xca\xc8\xd7\xd1"...,
						)
						i = 14
					case 11:
						i = 13
						data = append(data, "\xdb\xcc\xd5"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 'u':
		func() {
			defer func() {
				println(func() string {
					data := []byte("od$t\x1d=(>1tfGy")
					positions := [...]byte{10, 7, 1, 8, 5, 4, 4, 12, 10, 11, 2, 8, 10, 0, 2, 4, 5, 6}
					for i := 0; i < 18; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 57
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func nP4KFmoeW5() {
	switch get_byte() {
	case 52:
		y7HZr4()
	case 'd':
		rUFEgAbpwA()
	case '9':
		func() {
			fmt.Println(func() string {
				data := []byte("O\x1cwr/d:!")
				positions := [...]byte{1, 5, 7, 4, 3, 4, 7, 2, 2, 3, 3, 7}
				for i := 0; i < 12; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 248
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 'Y':
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("xP\xa3]\x9b\x9a欣\x0f\xdca~\xe7w\xca\xcc\x17}\xd92\xcd:\x14\x8cp")
					data := make([]byte, 0, 14)
					data = append(data, fullData[0]^fullData[20], fullData[23]^fullData[11], fullData[13]+fullData[24], fullData[17]+fullData[3], fullData[16]-fullData[7], fullData[15]+fullData[5], fullData[12]-fullData[9], fullData[8]+fullData[18], fullData[2]-fullData[22], fullData[19]+fullData[4], fullData[25]-fullData[1], fullData[10]^fullData[6], fullData[14]+fullData[21])
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func jGvlZue0z9() {
	switch get_byte() {
	case 56:
		iae22xK()
	case 'j':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 5
				decryptKey := 229
				for counter := 0; i != 2; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 7:
						i = 0
						data = append(data, 69)
					case 5:
						i = 9
						data = append(data, 107)
					case 1:
						data = append(data, 88)
						i = 7
					case 8:
						i = 6
						data = append(data, 143)
					case 0:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 2
					case 4:
						data = append(data, 58)
						i = 3
					case 9:
						data = append(data, 131)
						i = 4
					case 3:
						data = append(data, 135)
						i = 8
					case 6:
						i = 1
						data = append(data, 63)
					}
				}
				return string(data)
			}())
		}()
	case 50:
		func() {
			println(func() string {
				data := []byte("y\x1a\x9f \xddos\xf6\xf9g)\xf4\x11a\xe5e \xeb OO\x05a\xb5m\xed\x11\x13 \xc5\xd7y\xf4a\xbe\xdfi\xda\xf2")
				positions := [...]byte{35, 29, 12, 19, 25, 35, 7, 21, 2, 32, 19, 20, 35, 24, 14, 25, 37, 1, 9, 19, 35, 12, 27, 34, 26, 20, 1, 11, 20, 11, 17, 19, 12, 8, 37, 38, 4, 30, 34, 23}
				for i := 0; i < 40; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 87
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 69:
		uIYidexXsiw()
	default:
		hacker_get_out()
	}
}

func uO7Gz7N() {
	switch get_byte() {
	case 112:
		rU_AVezM()
	case 77:
		wfEiPwa5yDF()
	case 'C':
		nzeAtQcL4yhq()
	case 'D':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 4
				decryptKey := 230
				for counter := 0; i != 1; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 9:
						i = 2
						data = append(data, 97)
					case 0:
						data = append(data, 20)
						i = 3
					case 7:
						i = 1
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 2:
						data = append(data, 19)
						i = 6
					case 4:
						i = 8
						data = append(data, 69)
					case 5:
						data = append(data, 25)
						i = 7
					case 6:
						data = append(data, 42)
						i = 5
					case 8:
						i = 0
						data = append(data, 95)
					case 3:
						data = append(data, 99)
						i = 9
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func h8Iedojj() {
	switch get_byte() {
	case 111:
		func() {
			fmt.Println(func() string {
				seed := byte(0)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(78)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
				return string(data)
			}())
		}()
	case 56:
		func() {
			println(func() string {
				key := []byte("\x11\xd2\x1f\x1d\xbf~A\x91ߓ}X\x9bڗ\x84.\xf7>@nU\x8f\xb2\xf3\x8b\n*2\xf2i\xa1l\xbb#\xfb\x1e\x9bD")
				data := []byte("h\xbdj=\xd3\x112\xe5\xff\xa9Tx\xef\xbb\xfc\xe1\x0e\x96\x1e\"\x1c0\xee\xd9\xd3\xeadN\x12\x86\x1b\xd8L\xdaD\x9aw\xf5e")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 'e':
		cUSgYf()
	case '3':
		xwIJbzuwDh()
	default:
		hacker_get_out()
	}
}

func maMiun9Cw() {
	switch get_byte() {
	case 'M':
		func() {
			fmt.Println(func() string {
				data := []byte("\bh \xf4M72 ")
				positions := [...]byte{6, 3, 0, 5, 7, 6, 3, 4, 3, 4}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 225
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 'b':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xb7\xd5h\xb3\xa0\x06D\xb2o\x06\xcf,\xc3t\x9a\x82\xa1\x99\xa4\xd7[\xf3\xc1\nŇ\x1a\a!\x858P\xc5\x1d\xdf\x18\x04\xdeU\xcd>TlP\x9e\x9fEta\xef.ؐ\xf7\xbd\x19\x1fߛ\x12\"\xb8\xc4\xdb\xfb\xfa\x1a\xdd\xf5\xe8qѬ\x88|5<\x11\xff\xad:\xc0\xcec\xa6wo\x90&\x95ۏ\x80\xb1\xc2j@\x18̈́\xe6O\xa4\xae]Ʋx\xf43^\xec\xdf-/\x10D\x81\xd6\xe1w\x01\x9cp\\\xdby\xbe\xa3\xf4\xb6\x8f\a\x034S\\JP\xa8\x19\\")
				data := make([]byte, 0, 72)
				data = append(data, fullData[124]^fullData[59], fullData[97]-fullData[3], fullData[128]-fullData[113], fullData[4]-fullData[86], fullData[77]^fullData[83], fullData[136]^fullData[133], fullData[43]+fullData[53], fullData[69]-fullData[61], fullData[112]^fullData[93], fullData[91]+fullData[34], fullData[35]^fullData[126], fullData[58]-fullData[76], fullData[100]^fullData[16], fullData[120]^fullData[46], fullData[88]+fullData[138], fullData[116]+fullData[28], fullData[0]+fullData[139], fullData[89]+fullData[62], fullData[11]-fullData[129], fullData[103]^fullData[63], fullData[75]-fullData[118], fullData[27]-fullData[7], fullData[82]^fullData[127], fullData[21]^fullData[72], fullData[94]-fullData[47], fullData[121]+fullData[134], fullData[65]+fullData[74], fullData[30]-fullData[132], fullData[56]+fullData[135], fullData[101]+fullData[115], fullData[60]-fullData[90], fullData[106]-fullData[117], fullData[80]^fullData[41], fullData[37]+fullData[52], fullData[40]-fullData[67], fullData[38]^fullData[23], fullData[131]+fullData[54], fullData[36]+fullData[48], fullData[29]+fullData[49], fullData[102]^fullData[64], fullData[33]^fullData[6], fullData[9]+fullData[50], fullData[18]+fullData[71], fullData[45]^fullData[81], fullData[31]+fullData[108], fullData[1]+fullData[141], fullData[87]-fullData[55], fullData[79]+fullData[22], fullData[12]+fullData[122], fullData[105]-fullData[107], fullData[15]+fullData[130], fullData[51]+fullData[44], fullData[32]+fullData[8], fullData[110]-fullData[111], fullData[42]^fullData[109], fullData[26]^fullData[104], fullData[84]-fullData[70], fullData[73]-fullData[66], fullData[25]-fullData[140], fullData[119]^fullData[92], fullData[99]^fullData[125], fullData[85]+fullData[98], fullData[78]-fullData[10], fullData[137]-fullData[19], fullData[39]-fullData[2], fullData[13]^fullData[5], fullData[20]^fullData[114], fullData[24]^fullData[14], fullData[17]-fullData[96], fullData[57]-fullData[123], fullData[95]-fullData[68])
				return string(data)
			}())
		}()
	case 49:
		dMDrNpn9TcdE()
	case 102:
		k6TJgFIFPK_()
	default:
		hacker_get_out()
	}
}

func dZFEOzBU() {
	switch get_byte() {
	case 55:
		cIRS0aWEC()
	case 109:
		fYUko5BAnooA()
	case 79:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 2
					decryptKey := 180
					for counter := 0; i != 4; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 5:
							i = 3
							data = append(data, "휵"...,
							)
						case 0:
							data = append(data, 227)
							i = 5
						case 1:
							i = 0
							data = append(data, 151)
						case 6:
							for y := range data {
								data[y] = data[y] + byte(decryptKey^y)
							}
							i = 4
						case 2:
							data = append(data, "\xbc\xe6\xe7"...,
							)
							i = 7
						case 3:
							i = 6
							data = append(data, 194)
						case 7:
							data = append(data, "\xe7\x96\xd9\xe7"...,
							)
							i = 1
						}
					}
					return string(data)
				}())
			}()
		}()
	case 50:
		uU6tUxvPBX()
	default:
		hacker_get_out()
	}
}

func b60vW7HB() {
	switch get_byte() {
	case 'O':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 77:
		func() {
			fmt.Println(func() string {
				seed := byte(179)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(253)(213)(243)(73)(179)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	case 'R':
		qL93xZj0()
	case 65:
		hBFzqoQq()
	default:
		hacker_get_out()
	}
}

func kRfTbaIzK0() {
	switch get_byte() {
	case 'c':
		func() {
			defer func() {
				println(func() string {
					seed := byte(243)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
					fnc(61)(165)(72)(145)(206)(224)(203)(71)(215)(185)(30)(86)(182)
					return string(data)
				}())
			}()
		}()
	case 'i':
		xuxe15QiU()
	case 110:
		func() {
			fmt.Println(func() string {
				data := []byte("&\xc9\xc21\xc6_\xf2\x88\xf0n\xbc_\xd72\x93\xc0\xaf-8u\x7fUp_PIv1\x1b_H\xe4\xbenSXLwt_Jǃ\x9b\xf5M%\xe7_\x83p\"\xfb\x8f_HI\xa6nz\x9c\xdc0\xd1\xd6\\a\x83Y\xe2\xdc")
				positions := [...]byte{34, 44, 37, 56, 50, 46, 31, 53, 35, 32, 61, 40, 47, 31, 1, 24, 67, 32, 50, 6, 61, 8, 51, 52, 64, 32, 61, 31, 16, 67, 2, 35, 46, 12, 7, 42, 32, 0, 42, 61, 65, 60, 32, 10, 20, 56, 17, 28, 15, 47, 69, 70, 30, 65, 28, 4, 41, 63, 66, 12, 57, 61, 10, 67, 1, 2, 37, 42, 43, 44, 17, 41, 55, 64, 59, 41, 43, 30, 49, 52, 59, 65, 50, 43, 14, 20, 45, 25}
				for i := 0; i < 88; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 94
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 'k':
		b9NrNJGQX5o()
	default:
		hacker_get_out()
	}
}

func tGdIEDQ8N0n() {
	switch get_byte() {
	case 70:
		gT3I9vC()
	case 54:
		dkhaMQq7DBs()
	case 'P':
		m29yIQINz9Z()
	case 81:
		rFZkN4F7ng()
	default:
		hacker_get_out()
	}
}

func joJDl2l() {
	switch get_byte() {
	case 'B':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xe3_\xbc+4\x83xV\xf4\xb9z\xf3V%K\xec\xf7\xabC'\xbbR\x1br#d\x81}\xc0S;\x00\x97\x8d\xb8\xea\a3{~Ǭ\xfd牼\xe1t\x06\xc5\xce'\x9e~\xc1\x98(\x10\xecS\xa2\xf1\xdaW\xb8*R\xea\t\xb9\xaedLB\xe4\xe2\xd8YuxҼw\xa8r?\xa1\x9c\x05h(\x88z\xaa'Ĉ\"I\xfe\xe17_u\x1b\xb5I\xba#\xf6COu\xe9O\x8cё\x84=V\xf1\x88\x9d\xea\xcan\x83#\x18 z{ܝ\x11J\t\x12Fl\x17")
				data := make([]byte, 0, 72)
				data = append(data, fullData[79]-fullData[65], fullData[34]-fullData[29], fullData[99]-fullData[122], fullData[112]+fullData[2], fullData[16]+fullData[38], fullData[105]-fullData[12], fullData[54]-fullData[131], fullData[139]+fullData[35], fullData[77]^fullData[101], fullData[134]^fullData[11], fullData[76]^fullData[9], fullData[57]+fullData[114], fullData[49]-fullData[39], fullData[137]^fullData[30], fullData[111]+fullData[94], fullData[119]+fullData[56], fullData[80]+fullData[33], fullData[102]^fullData[48], fullData[118]^fullData[45], fullData[58]+fullData[44], fullData[100]+fullData[53], fullData[93]+fullData[17], fullData[89]^fullData[129], fullData[116]-fullData[84], fullData[36]-fullData[69], fullData[15]+fullData[98], fullData[18]+fullData[37], fullData[50]-fullData[123], fullData[55]^fullData[67], fullData[85]+fullData[130], fullData[95]^fullData[5], fullData[10]^fullData[14], fullData[31]+fullData[126], fullData[27]+fullData[121], fullData[87]^fullData[42], fullData[124]+fullData[78], fullData[64]-fullData[140], fullData[40]+fullData[52], fullData[3]^fullData[1], fullData[6]^fullData[19], fullData[132]-fullData[97], fullData[28]-fullData[115], fullData[20]+fullData[107], fullData[43]-fullData[96], fullData[90]-fullData[74], fullData[110]-fullData[138], fullData[26]^fullData[109], fullData[22]^fullData[103], fullData[59]-fullData[8], fullData[92]^fullData[4], fullData[41]-fullData[47], fullData[63]-fullData[46], fullData[75]+fullData[66], fullData[127]-fullData[135], fullData[70]^fullData[61], fullData[128]^fullData[25], fullData[32]^fullData[60], fullData[136]-fullData[133], fullData[13]+fullData[106], fullData[88]^fullData[71], fullData[86]-fullData[73], fullData[81]+fullData[91], fullData[120]+fullData[62], fullData[104]-fullData[83], fullData[23]^fullData[141], fullData[113]-fullData[82], fullData[0]+fullData[117], fullData[68]+fullData[7], fullData[24]-fullData[125], fullData[108]+fullData[72], fullData[51]^fullData[21])
				return string(data)
			}())
		}()
	case 'j':
		func() {
			println(func() string {
				fullData := []byte("\xa5!~\xc7v\xf9\x9ct\xa0\x00e\xf0\xc7@L\xe4\x80\xc9*\xbc\xa5\xdeq\x0f%@\x85H\xc4Y\xc7\x04кS\x89\xa9k\xe4\x02\xc8_\xf0t\xa1\x90ٽ?\xbai!\xa8\xc0\xf7\xa8\xd6I\xcf\x05\xac\xfd(\x16\xab\x8b\xcc/\xc8\xe1\x10\xafN\xbd!6\xc1\xd6")
				data := make([]byte, 0, 40)
				data = append(data, fullData[70]^fullData[50], fullData[73]-fullData[72], fullData[76]-fullData[14], fullData[24]-fullData[59], fullData[64]^fullData[12], fullData[8]+fullData[58], fullData[57]-fullData[56], fullData[9]^fullData[43], fullData[28]^fullData[38], fullData[61]^fullData[3], fullData[34]+fullData[77], fullData[67]-fullData[23], fullData[19]^fullData[40], fullData[13]^fullData[74], fullData[54]^fullData[6], fullData[46]-fullData[7], fullData[22]+fullData[71], fullData[17]^fullData[55], fullData[66]-fullData[60], fullData[18]-fullData[68], fullData[65]^fullData[5], fullData[53]+fullData[20], fullData[35]-fullData[62], fullData[69]-fullData[4], fullData[63]^fullData[75], fullData[25]^fullData[1], fullData[30]^fullData[36], fullData[51]-fullData[47], fullData[0]^fullData[26], fullData[15]^fullData[45], fullData[33]-fullData[27], fullData[21]-fullData[10], fullData[32]^fullData[11], fullData[41]+fullData[39], fullData[37]-fullData[31], fullData[49]-fullData[29], fullData[52]-fullData[48], fullData[42]+fullData[2], fullData[44]+fullData[16])
				return string(data)
			}())
		}()
	case 'z':
		k7jL7A()
	case 104:
		iCjrpwhh()
	default:
		hacker_get_out()
	}
}

func bv9iAMYDsD() {
	switch get_byte() {
	case 'p':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 114:
		func() {
			defer func() {
				println(func() string {
					data := []byte("o\xa6Ȝ\x7fdo\xd3\xc65+:~")
					positions := [...]byte{0, 4, 0, 12, 0, 3, 9, 8, 3, 2, 1, 12, 2, 10, 8, 2, 2, 7}
					for i := 0; i < 18; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 75
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'X':
		a3f3XB6Uvgae()
	case 'M':
		x6cCe7CJK4()
	default:
		hacker_get_out()
	}
}

func pZzBllpcZ() {
	switch get_byte() {
	case 'o':
		ssFsuiIU()
	case 'R':
		ozTnrF9ERW()
	case 'm':
		uV7eCIzc()
	case 'E':
		rPiM63O()
	default:
		hacker_get_out()
	}
}

func eBI4Rg9XvT() {
	switch get_byte() {
	case '5':
		bwNzelf()
	case 56:
		kxfFt70()
	case 85:
		func() {
			defer func() {
				println(func() string {
					key := []byte("\x18\x9d\xb5\xea\x93u\xeb\x15\r\x04\xa9K'")
					data := []byte("2ؾ\x8a\x8d\xef\x84\v\\pw\xef\x1d")
					for i, b := range key {
						data[i] = data[i] + b
					}
					return string(data)
				}())
			}()
		}()
	case 86:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func u5qzM3G() {
	switch get_byte() {
	case 89:
		qJ9jY_8xfe()
	case 50:
		auztDvom37B()
	case 105:
		func() {
			fmt.Println(func() string {
				key := []byte("DD|:vF\xf6T")
				data := []byte("\x93\xac\x9c\xa8\xe5f0|")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 'f':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func qK09daIku5j() {
	switch get_byte() {
	case 106:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 0
				decryptKey := 209
				for counter := 0; i != 1; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 8:
						data = append(data, 74)
						i = 4
					case 9:
						i = 6
						data = append(data, 104)
					case 5:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 1
					case 7:
						data = append(data, 79)
						i = 9
					case 0:
						data = append(data, 123)
						i = 2
					case 2:
						data = append(data, 147)
						i = 8
					case 6:
						data = append(data, 85)
						i = 5
					case 4:
						i = 3
						data = append(data, 151)
					case 3:
						i = 7
						data = append(data, 159)
					}
				}
				return string(data)
			}())
		}()
	case 66:
		func() {
			fmt.Println(func() string {
				key := []byte("~*G\x06\xc8\x16\xe8Bؤ\xa6\x17\x7f\xc2(Qw\xe8\xff\xfe\xb2\x01\x98\xa7\xe9tVJR\xef˗\xfb.L|\xb0T\"ᨢ\u1aee\xebִ\xab\xf48\xff\x16\xfe\xf3-\xf5\xe0iqC\v\x8a=*4ۍ-%\x1b")
				data := []byte("0O17\xbaI\xafr\xb6\xca\xc7H8\xf0^4(\xb1ǋ\xedT\xe8\xf8\xa7A { \xb0\x8c\xa6\x95@-#\xfc1V\xbe\xf1\x96\x94\xf4\xeaڡ\xda\xf4\xba\x00\x89\"\x8c\xacj\xc0\x8e\a\x10\x1cO\xbaNOF\xaf\xd2tJn")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 97:
		v4VfUDJQ()
	case 'H':
		i1n4mX()
	default:
		hacker_get_out()
	}
}

func eGAGdp29() {
	switch get_byte() {
	case 'n':
		func() {
			println(func() string {
				seed := byte(251)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(116)(222)(194)(47)(170)(87)(178)(101)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
				return string(data)
			}())
		}()
	case 'e':
		vRidKdVmDD4()
	case 49:
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xa3\a\x94\xaa\xba\x8d\x04\r\x03W\xc4\xe4o")
					data := []byte("\xe9r\xe7ޚ\xe9k-j#\xe4\xde+")
					for i, b := range key {
						data[i] = data[i] ^ b
					}
					return string(data)
				}())
			}()
		}()
	case 'v':
		dyYzT2ta86C0()
	default:
		hacker_get_out()
	}
}

func bD5DOXS26F8F() {
	switch get_byte() {
	case 'V':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'l':
		func() {
			fmt.Println(func() string {
				data := []byte("l\xabhno\xfc\x15\x93")
				positions := [...]byte{6, 5, 5, 2, 1, 6, 0, 7, 6, 2}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 175
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 115:
		g6hZ4a7hTmjD()
	case '9':
		vOXOJ_UiOYRe()
	default:
		hacker_get_out()
	}
}

func bZMkEszEHgD() {
	switch get_byte() {
	case 'g':
		func() {
			fmt.Println(func() string {
				fullData := []byte("J\xde*\x81\xec\x1347\x10\xd7\xf5\x98\nE՟")
				data := make([]byte, 0, 9)
				data = append(data, fullData[12]^fullData[13], fullData[15]-fullData[7], fullData[14]^fullData[10], fullData[3]-fullData[5], fullData[9]+fullData[11], fullData[4]+fullData[6], fullData[2]+fullData[8], fullData[0]+fullData[1])
				return string(data)
			}())
		}()
	case 70:
		dHFNnnnJ()
	case 89:
		tUX6DaYdt5()
	case 107:
		func() {
			fmt.Println(func() string {
				seed := byte(93)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(241)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func zb5d1slD() {
	switch get_byte() {
	case 111:
		hqs6q5u0l()
	case 86:
		func() {
			defer func() {
				println(func() string {
					data := []byte("\xd4u4\xf2 w\xcd \xe5\xec nD")
					positions := [...]byte{0, 2, 9, 0, 11, 5, 5, 8, 8, 0, 0, 3, 6, 9, 5, 9, 2, 0}
					for i := 0; i < 18; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 177
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
					}
					return string(data)
				}())
			}()
		}()
	case 49:
		lCL3OWTQU()
	case 'C':
		wizdiNWyjf()
	default:
		hacker_get_out()
	}
}

func e4JLsd() {
	switch get_byte() {
	case 'i':
		gFYsOVh2_z()
	case 51:
		e5cc1ztLa()
	case 'N':
		dGee2UvEzJDm()
	case 'a':
		y28cwOKG()
	default:
		hacker_get_out()
	}
}

func z8rjlm() {
	switch get_byte() {
	case 'A':
		zXf2GHn()
	case 112:
		iIC3okI()
	case 'M':
		func() {
			defer func() {
				println(func() string {
					data := []byte("JBstד<x\xf7\x9fs\xaa\xf6")
					positions := [...]byte{6, 1, 5, 4, 1, 12, 10, 6, 10, 7, 8, 6, 9, 10, 11, 7}
					for i := 0; i < 16; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 112
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
					}
					return string(data)
				}())
			}()
		}()
	case 90:
		oicipaqO()
	default:
		hacker_get_out()
	}
}

func aq6jX9() {
	switch get_byte() {
	case 'e':
		v2qE9SfP()
	case 117:
		emuXwx6()
	case 'Q':
		jMPzcLBtzQ()
	case 'b':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func caSK6GEC() {
	switch get_byte() {
	case 'X':
		dWiveeA()
	case 'l':
		yQ2WGSYMs0()
	case 't':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 5
				decryptKey := 52
				for counter := 0; i != 7; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 8:
						data = append(data, 113)
						i = 3
					case 4:
						i = 7
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 5:
						i = 6
						data = append(data, 83)
					case 3:
						i = 0
						data = append(data, 119)
					case 2:
						data = append(data, 51)
						i = 4
					case 1:
						data = append(data, 32)
						i = 2
					case 0:
						i = 1
						data = append(data, 57)
					case 6:
						data = append(data, 117)
						i = 9
					case 9:
						data = append(data, 62)
						i = 8
					}
				}
				return string(data)
			}())
		}()
	case 74:
		_rT3Q7()
	default:
		hacker_get_out()
	}
}

func dW6nopvJs() {
	switch get_byte() {
	case 121:
		mv0NX6hGv()
	case 106:
		h9LGvp()
	case 'I':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'e':
		oWG2P7JzHI()
	default:
		hacker_get_out()
	}
}

func dUQoOsx() {
	switch get_byte() {
	case 'S':
		fPNmACqku()
	case 'U':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 65:
		b30z3UWpZz()
	case 97:
		zrfNjJjz()
	default:
		hacker_get_out()
	}
}

func hOR6Of9tAR() {
	switch get_byte() {
	case 67:
		ddbNRz9zzEXs()
	case 117:
		upGZXz()
	case 'p':
		jDCpK7wezEwU()
	case 119:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func kJcbn3() {
	switch get_byte() {
	case 'q':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x85\x17tTy\xbb\x99\xd7\x7f\r\xfa\x92\xa4U\xff|")
				data := make([]byte, 0, 9)
				data = append(data, fullData[12]-fullData[13], fullData[10]^fullData[11], fullData[2]-fullData[3], fullData[0]-fullData[1], fullData[15]-fullData[9], fullData[6]-fullData[4], fullData[5]+fullData[8], fullData[7]^fullData[14])
				return string(data)
			}())
		}()
	case 83:
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xad\x06\x84\x98dB\x9c \xfc+2\xf4\xf0")
					data := []byte("\xe7s\xf7\xecD&\xf3\x00\x95_\x12δ")
					for i, b := range key {
						data[i] = data[i] ^ b
					}
					return string(data)
				}())
			}()
		}()
	case 'M':
		ejOBQQyEbi()
	case 74:
		u_bStI()
	default:
		hacker_get_out()
	}
}

func dKwZLY44() {
	switch get_byte() {
	case '3':
		gOrvWiK7myF()
	case 55:
		iAcLgVLdn6B()
	case 103:
		func() {
			fmt.Println(func() string {
				fullData := []byte("RT\xf6\xec4\x0f\xcc\xfd_\xed\xc5\x06p\x16\xdf\x14")
				data := make([]byte, 0, 9)
				data = append(data, fullData[0]+fullData[7], fullData[1]+fullData[15], fullData[3]-fullData[6], fullData[8]+fullData[5], fullData[14]-fullData[12], fullData[13]-fullData[2], fullData[4]+fullData[11], fullData[9]^fullData[10])
				return string(data)
			}())
		}()
	case 'R':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xbd\x13\xc8鎋\xf0\xf5\vN\xee\xf0,[\x016\x89\x80\x86\xbc1\x96J\xd48\xc2\xce)\x83d\xeeʢ\xb1.\xeb#҈vY\\|O\xb28\b\x05\x9c\xf1T\xc40\xccυ\x15\x90\xf4\xa6%\xacn?@(8\xf9\xe53\x8d\xd8\xd4\xf3\xdcnL\xdd\xf6v\xf4㸎%\xbagD\"\xd7\xe1\x9f(.\x9f\x90\x05\x00\xa0\xc6\r<\xe7c\xd6\xdb\xeb\x18\xf8|@\xf9b\xb8\xc0\xe1gM\xbfW\xd7\xc7Z\xfdc\x13q\xba\xac\x1fc\xfd\xb7ڌ&x\xba\x87\x979&")
				data := make([]byte, 0, 72)
				data = append(data, fullData[88]+fullData[12], fullData[73]-fullData[83], fullData[47]+fullData[126], fullData[34]-fullData[123], fullData[66]^fullData[22], fullData[131]^fullData[32], fullData[115]^fullData[59], fullData[80]^fullData[51], fullData[108]+fullData[39], fullData[86]-fullData[111], fullData[3]-fullData[38], fullData[118]+fullData[98], fullData[23]-fullData[70], fullData[84]+fullData[100], fullData[97]+fullData[79], fullData[120]^fullData[44], fullData[54]^fullData[95], fullData[10]^fullData[132], fullData[87]+fullData[58], fullData[102]+fullData[4], fullData[96]+fullData[122], fullData[91]^fullData[31], fullData[6]-fullData[17], fullData[138]+fullData[71], fullData[15]+fullData[107], fullData[130]+fullData[37], fullData[69]-fullData[0], fullData[67]^fullData[2], fullData[112]-fullData[11], fullData[60]-fullData[99], fullData[92]-fullData[90], fullData[77]-fullData[128], fullData[106]^fullData[55], fullData[85]-fullData[76], fullData[9]+fullData[1], fullData[101]^fullData[103], fullData[141]-fullData[133], fullData[20]^fullData[50], fullData[119]^fullData[36], fullData[64]^fullData[129], fullData[78]+fullData[124], fullData[8]-fullData[89], fullData[57]+fullData[68], fullData[137]-fullData[13], fullData[75]+fullData[104], fullData[14]+fullData[52], fullData[24]+fullData[63], fullData[28]-fullData[56], fullData[116]-fullData[46], fullData[134]^fullData[25], fullData[48]-fullData[29], fullData[43]^fullData[140], fullData[40]+fullData[105], fullData[113]+fullData[127], fullData[49]+fullData[62], fullData[35]+fullData[41], fullData[7]+fullData[110], fullData[139]-fullData[27], fullData[93]-fullData[114], fullData[16]-fullData[65], fullData[30]^fullData[33], fullData[53]+fullData[136], fullData[61]-fullData[109], fullData[94]+fullData[72], fullData[18]^fullData[81], fullData[74]+fullData[21], fullData[19]+fullData[82], fullData[135]-fullData[121], fullData[5]+fullData[26], fullData[42]^fullData[125], fullData[117]^fullData[45])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func diM5l8H() {
	switch get_byte() {
	case 49:
		s6_BNeip()
	case 'd':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xb1\xa8\xd9&)\xfd\x8f\xb9\x96]\t\xc6\xec\x95\xe0\xc3")
				data := make([]byte, 0, 9)
				data = append(data, fullData[8]+fullData[7], fullData[13]^fullData[5], fullData[9]+fullData[15], fullData[1]+fullData[11], fullData[14]+fullData[6], fullData[4]^fullData[10], fullData[3]-fullData[12], fullData[2]-fullData[0])
				return string(data)
			}())
		}()
	case 'q':
		eb1_4I()
	case 78:
		bQeUk9uJOR()
	default:
		hacker_get_out()
	}
}

func aJcw76() {
	switch get_byte() {
	case 52:
		func() {
			println(func() string {
				data := []byte("yoǠ\xddog(\x1c\xb2\a \x15Q\x1c\xf1\xdaد\xb2\xb0w\xf3\xa8)\x1enH\x19Ery\x19߹Kin!")
				positions := [...]byte{21, 22, 32, 34, 3, 34, 18, 19, 22, 32, 6, 19, 9, 12, 19, 9, 33, 9, 2, 8, 20, 25, 24, 4, 25, 25, 14, 34, 3, 16, 12, 14, 17, 28, 23, 7, 27, 35, 9, 15, 19, 33, 10, 7, 7, 29, 33, 38, 34, 13}
				for i := 0; i < 50; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 139
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 73:
		eCmeUzn1()
	case 'W':
		fgl7v2f()
	case 69:
		func() {
			println(func() string {
				data := []byte("mo{ y.NzF`){\baY>\f\x02Cmr<xw\\aDSs=f]VigIiiK")
				positions := [...]byte{0, 30, 26, 17, 27, 33, 18, 4, 31, 9, 38, 8, 21, 6, 30, 5, 14, 28, 35, 38, 7, 14, 6, 31, 8, 19, 18, 29, 23, 21, 8, 26, 12, 24, 0, 5, 4, 27, 15, 11, 37, 8, 19, 6, 31, 9, 22, 32, 22, 28, 16, 2, 23, 17, 2, 30, 16, 38}
				for i := 0; i < 58; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 244
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func bwNzelf() {
	switch get_byte() {
	case 115:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xeb\xe0\x83\xf2\x9f{\f͇\xc1\xd0S\x9apP\b")
				data := make([]byte, 0, 9)
				data = append(data, fullData[10]^fullData[4], fullData[3]^fullData[12], fullData[14]^fullData[13], fullData[0]+fullData[2], fullData[5]-fullData[6], fullData[7]+fullData[11], fullData[9]-fullData[8], fullData[15]-fullData[1])
				return string(data)
			}())
		}()
	case 86:
		eBI4Rg9XvT()
	case 'n':
		func() {
			fmt.Println(func() string {
				data := []byte(",h f\x0f e:")
				positions := [...]byte{4, 3, 6, 3, 7, 6, 6, 0}
				for i := 0; i < 8; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 2
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case '6':
		mMqj8k_t()
	default:
		hacker_get_out()
	}
}

func jDCpK7wezEwU() {
	switch get_byte() {
	case 'V':
		func() {
			fmt.Println(func() string {
				data := []byte("\xed\xbapn\xb7p:x")
				positions := [...]byte{2, 5, 0, 0, 1, 7, 4, 7, 7, 1, 5, 2}
				for i := 0; i < 12; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 156
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 118:
		func() {
			println(func() string {
				seed := byte(98)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(219)(172)(94)(103)(26)(55)(114)(229)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
				return string(data)
			}())
		}()
	case 73:
		rCpeoV()
	case '2':
		hOR6Of9tAR()
	default:
		hacker_get_out()
	}
}

func qiStlR() {
	switch get_byte() {
	case 101:
		lQcizCt()
	case 65:
		fgNgNuu()
	case 53:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x16?\xfau\x00i\x92\xa6\xfd\x8e AW\xc8\xc7\xc7")
				data := make([]byte, 0, 9)
				data = append(data, fullData[0]-fullData[14], fullData[12]^fullData[1], fullData[4]+fullData[10], fullData[7]^fullData[13], fullData[2]+fullData[3], fullData[9]+fullData[6], fullData[15]^fullData[8], fullData[11]^fullData[5])
				return string(data)
			}())
		}()
	case 56:
		func() {
			fmt.Println(func() string {
				fullData := []byte("`\xa5*\x9c\n\"5D\b\xeb-Q؋\x97{")
				data := make([]byte, 0, 9)
				data = append(data, fullData[12]^fullData[14], fullData[8]^fullData[0], fullData[9]+fullData[6], fullData[7]+fullData[2], fullData[3]-fullData[10], fullData[1]+fullData[15], fullData[13]-fullData[11], fullData[5]^fullData[4])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func wRbz3AwJiaA() {
	switch get_byte() {
	case 52:
		udSi5iiPjJn()
	case 48:
		jLluV5()
	case 73:
		k4agk1()
	case 'd':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func ryRNuE() {
	switch get_byte() {
	case 117:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'N':
		g4MqfD()
	case 'i':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 8
					decryptKey := 9
					for counter := 0; i != 0; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 2:
							i = 0
							for y := range data {
								data[y] = data[y] + byte(decryptKey^y)
							}
						case 6:
							data = append(data, 88)
							i = 5
						case 7:
							i = 4
							data = append(data, "JV\bR"...,
							)
						case 5:
							data = append(data, 5)
							i = 7
						case 3:
							data = append(data, "&1"...,
							)
							i = 2
						case 4:
							i = 3
							data = append(data, "^\v"...,
							)
						case 1:
							data = append(data, "WV"...,
							)
							i = 6
						case 8:
							i = 1
							data = append(data, 43)
						}
					}
					return string(data)
				}())
			}()
		}()
	case 121:
		zC1NgDVlS0()
	default:
		hacker_get_out()
	}
}

func hy3WWE() {
	switch get_byte() {
	case 99:
		wCWKM7msL6kT()
	case 107:
		sgE2SFd()
	case 'N':
		mMqj8k_t()
	case 'j':
		fdSupbJhTmSK()
	default:
		hacker_get_out()
	}
}

func fhyuKUn() {
	switch get_byte() {
	case 121:
		func() {
			println(func() string {
				key := []byte("T\x87Lf\x90\xba\x84`4\x88*\xd1qa\xc1\x04\xf9\xdbԪ\xc4\xcb\xcd/\xc9r\xafc\x7f\xc2\xdb햳\xcc3V\x05\xaa")
				data := []byte("\xcd\xf6\xc1\x86\xfc)\xf7\xd4T\xc2S\xf1\xe5\xc2,i\x19<\xf4\f60.\x9a\xe9\xd3\x1dǟ6Mf\xb6\x143\x94\xbfs\xcb")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 'v':
		cwFMtB1H()
	case 105:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xe0\x9f.p\xa5\x8aE\x99#\xd6\x1ccs\xb8\xa21(\xf8\xad\x9f\xeb\x03\xe1-\xa3w\x03\xe7ʨ)\x00\xa7\xa1 v\xeb\\F\x1c\xb1\xd3\u05ca\x81\xe2\xe8\xa7e\xd9\xee\x05\xd3\xdf\xf0\xa2-B\xaf3q\xbe\xaa\xf28\x13\x06A\v\xe7|\x05)BG\xb5V\xc1\xb4\x1b\x18\x8d\x95\x81\xea\xdc\xec-\xc57\x97\xe5ʕ0?\xcf\x7f\xf3B\xed\xd22ћ\xe9\x10\xcbLM\xb0\x110rj=L\x90\xc2qu\r\xb5\x866\xdeDj\v'\xcfЕͶ\xd5p8\xb7\xc1ٶ")
				data := make([]byte, 0, 72)
				data = append(data, fullData[12]^fullData[115], fullData[127]-fullData[51], fullData[132]+fullData[22], fullData[56]^fullData[10], fullData[98]^fullData[44], fullData[25]+fullData[46], fullData[3]^fullData[89], fullData[123]^fullData[141], fullData[49]+fullData[93], fullData[59]-fullData[88], fullData[14]-fullData[67], fullData[38]-fullData[27], fullData[125]-fullData[90], fullData[45]^fullData[131], fullData[139]^fullData[138], fullData[32]-fullData[57], fullData[58]+fullData[110], fullData[136]^fullData[30], fullData[31]+fullData[137], fullData[116]-fullData[42], fullData[117]+fullData[96], fullData[16]-fullData[52], fullData[24]^fullData[41], fullData[63]^fullData[18], fullData[11]+fullData[36], fullData[111]-fullData[85], fullData[81]+fullData[105], fullData[72]^fullData[80], fullData[39]+fullData[76], fullData[8]^fullData[70], fullData[73]^fullData[71], fullData[28]-fullData[7], fullData[121]-fullData[19], fullData[109]-fullData[53], fullData[83]+fullData[0], fullData[2]+fullData[15], fullData[55]+fullData[62], fullData[34]^fullData[6], fullData[91]-fullData[60], fullData[120]+fullData[84], fullData[40]+fullData[29], fullData[66]^fullData[102], fullData[114]+fullData[128], fullData[108]^fullData[65], fullData[54]^fullData[78], fullData[101]-fullData[33], fullData[112]^fullData[74], fullData[13]^fullData[9], fullData[113]+fullData[100], fullData[134]^fullData[17], fullData[118]-fullData[5], fullData[75]-fullData[95], fullData[79]-fullData[69], fullData[47]+fullData[107], fullData[21]^fullData[37], fullData[126]+fullData[26], fullData[140]^fullData[86], fullData[48]^fullData[68], fullData[124]+fullData[64], fullData[20]-fullData[43], fullData[82]^fullData[92], fullData[119]-fullData[23], fullData[135]-fullData[4], fullData[61]^fullData[133], fullData[99]^fullData[129], fullData[1]-fullData[87], fullData[122]^fullData[77], fullData[94]-fullData[103], fullData[130]-fullData[35], fullData[106]^fullData[97], fullData[104]^fullData[50])
				return string(data)
			}())
		}()
	case 'S':
		func() {
			fmt.Println(func() string {
				seed := byte(255)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(80)(25)(184)(78)(1)(177)(26)(238)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func bnHC4Xf() {
	switch get_byte() {
	case 51:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("&F\x06\x10\xd7F6\xa8\xf7\xe5r\xe7\x92ݮ܇^r\xfc=\xafd]\xddD")
					data := make([]byte, 0, 14)
					data = append(data, fullData[9]^fullData[21], fullData[19]-fullData[16], fullData[20]+fullData[6], fullData[10]^fullData[2], fullData[4]^fullData[8], fullData[7]-fullData[25], fullData[12]+fullData[24], fullData[14]+fullData[18], fullData[5]-fullData[13], fullData[3]+fullData[22], fullData[1]-fullData[0], fullData[17]+fullData[15], fullData[11]+fullData[23])
					return string(data)
				}())
			}()
		}()
	case 'N':
		func() {
			fmt.Println(func() string {
				data := []byte("Oɕn\x17 :d")
				positions := [...]byte{1, 1, 1, 4, 1, 7, 2, 2, 4, 1}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 111
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 'o':
		oU2Z4fBPGtp()
	case 'd':
		kxrdx2o()
	default:
		hacker_get_out()
	}
}

func ctiEPA() {
	switch get_byte() {
	case 103:
		func() {
			fmt.Println(func() string {
				data := []byte(" e\xcb1p\xe3br'Z\xd4\xd2Pe\xcb@\x19\x018\x1cAc\xd3\x10N5z\f<]\xb71n;a_xet_YvP_!fw\x1dy\x1d\x1d\xa04z\x9eq<o~\xa7\x19;/se\x85<_=!\x8f")
				positions := [...]byte{21, 14, 14, 61, 55, 12, 4, 29, 41, 7, 60, 16, 49, 23, 28, 26, 17, 55, 36, 65, 66, 59, 6, 50, 15, 28, 28, 56, 47, 19, 47, 51, 61, 14, 68, 8, 13, 45, 54, 59, 58, 48, 33, 58, 0, 26, 30, 9, 8, 36, 22, 61, 59, 5, 20, 62, 27, 42, 27, 14, 51, 30, 69, 66, 61, 70, 49, 44, 9, 53, 11, 65, 57, 62, 12, 44, 36, 48, 47, 9, 54, 2, 21, 10}
				for i := 0; i < 84; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 16
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 76:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("o\xabR\xbe/\xa8=\xcee\x1fמ6\x88Lx\xe1\x06m\xb1\xad\xd5z[8\a")
					data := make([]byte, 0, 14)
					data = append(data, fullData[17]^fullData[14], fullData[20]-fullData[24], fullData[22]-fullData[25], fullData[9]-fullData[1], fullData[11]^fullData[3], fullData[12]^fullData[2], fullData[6]-fullData[7], fullData[0]+fullData[19], fullData[16]+fullData[13], fullData[4]^fullData[23], fullData[5]+fullData[15], fullData[8]+fullData[21], fullData[10]+fullData[18])
					return string(data)
				}())
			}()
		}()
	case 113:
		gT3I9vC()
	case 'a':
		f5zNMZ()
	default:
		hacker_get_out()
	}
}

func ek5Owg() {
	switch get_byte() {
	case 'r':
		spsS28rv()
	case 'q':
		cAJOoJff4()
	case 'g':
		ghmq5WBqxh()
	case 'l':
		y0KxbAP()
	default:
		hacker_get_out()
	}
}

func vTVozgS8fLr() {
	switch get_byte() {
	case 'p':
		gpO4gry()
	case 't':
		jgFrZnj()
	case 's':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 79:
		a9WyJy()
	default:
		hacker_get_out()
	}
}

func w1kFzd2v0() {
	switch get_byte() {
	case 67:
		kpVErB()
	case 'm':
		wCA7uL7()
	case 'Q':
		gUzofJbpYL()
	case 'k':
		func() {
			fmt.Println(func() string {
				seed := byte(167)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(246)(5)(194)(210)(165)(251)(16)(14)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func jMPzcLBtzQ() {
	switch get_byte() {
	case 82:
		func() {
			fmt.Println(func() string {
				seed := byte(160)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(239)(231)(86)(162)(1)(79)(132)(106)
				return string(data)
			}())
		}()
	case 57:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 51:
		lQcizCt()
	case 'c':
		aq6jX9()
	default:
		hacker_get_out()
	}
}

func yDPuGi() {
	switch get_byte() {
	case 119:
		ii5Oe8cxfOL()
	case '5':
		kBbdIxk()
	case 73:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'f':
		z5KkWP()
	default:
		hacker_get_out()
	}
}

func mR6sSVxy7mh() {
	switch get_byte() {
	case 'l':
		v0bHUEmRDP_O()
	case 53:
		wIUcV9mX2H()
	case '8':
		func() {
			defer func() {
				println(func() string {
					key := []byte("\"\x981\xea[(ҥ\xbf=\xf1\xe9\xc5")
					data := []byte("(\xddB\x8a\xc5<\x9d{\xaa7/Q\x7f")
					for i, b := range key {
						data[i] = data[i] + b
					}
					return string(data)
				}())
			}()
		}()
	case 82:
		func() {
			fmt.Println(func() string {
				seed := byte(241)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(93)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func d1Wqe3e5zn() {
	switch get_byte() {
	case 113:
		aGyCon()
	case '8':
		cmY3DN0PIxx()
	case 110:
		tLNhZsbvmp()
	case 50:
		func() {
			defer func() {
				println(func() string {
					data := []byte("r\x8a\x88y \x8f\x8c \x9b\x84P6D")
					positions := [...]byte{2, 6, 8, 9, 8, 9, 11, 10, 1, 1, 0, 5, 9, 0, 3, 9}
					for i := 0; i < 16; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 227
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func evSjuz() {
	switch get_byte() {
	case 110:
		veykDSg4xb()
	case '2':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xb7\xc4\xe1\xf9\xee\xbf~\xbeC\xa1\xf33\x99\x7f}\xcev\xdcp\x83J\xce\xcb\xf2'\xe5\xb20h{]ة\xb9\tô\xee\b\xe8{\x19\xeb\xe2P\x92\xdc\x04\xc5\xf9b[\x8e\x88\x8a\xeb3\f\xcbv\x8a\xcf\xe9\x17\x02\x13z\xb7c\x87\xf9\xec\x06\xad$\xb1\xf7U`\xfex\xefl\\cQo\xa2\xfak\xaaƪ\x90嘴5/\x0e+\xdb5-}\xc71\xa0(\x83f\x84,$\xf3\xc0.\xe7\f\xa2V!kz*u\xab%\xcd\v\xb9;\xed9tFD\n\n\x84mT")
				data := make([]byte, 0, 72)
				data = append(data, fullData[54]+fullData[1], fullData[122]^fullData[99], fullData[115]-fullData[20], fullData[31]^fullData[62], fullData[80]^fullData[138], fullData[117]-fullData[53], fullData[125]-fullData[116], fullData[36]^fullData[111], fullData[132]-fullData[13], fullData[75]-fullData[8], fullData[141]^fullData[102], fullData[34]^fullData[120], fullData[0]-fullData[18], fullData[93]+fullData[87], fullData[134]-fullData[79], fullData[113]-fullData[5], fullData[127]-fullData[91], fullData[26]^fullData[42], fullData[129]^fullData[11], fullData[58]+fullData[90], fullData[30]+fullData[64], fullData[39]+fullData[140], fullData[68]-fullData[114], fullData[47]^fullData[51], fullData[41]-fullData[22], fullData[4]^fullData[101], fullData[104]+fullData[70], fullData[35]^fullData[23], fullData[37]+fullData[139], fullData[123]+fullData[25], fullData[112]-fullData[94], fullData[15]+fullData[84], fullData[10]+fullData[40], fullData[32]^fullData[105], fullData[27]^fullData[85], fullData[82]^fullData[56], fullData[131]-fullData[81], fullData[128]-fullData[28], fullData[3]+fullData[29], fullData[89]-fullData[118], fullData[24]-fullData[21], fullData[83]-fullData[108], fullData[50]^fullData[63], fullData[19]+fullData[46], fullData[74]^fullData[78], fullData[44]+fullData[2], fullData[88]+fullData[14], fullData[110]+fullData[38], fullData[109]^fullData[17], fullData[33]^fullData[76], fullData[45]^fullData[92], fullData[86]-fullData[49], fullData[73]^fullData[12], fullData[67]^fullData[48], fullData[7]+fullData[9], fullData[52]+fullData[130], fullData[126]-fullData[16], fullData[96]-fullData[135], fullData[97]+fullData[133], fullData[55]+fullData[59], fullData[137]+fullData[77], fullData[65]+fullData[106], fullData[72]+fullData[124], fullData[136]+fullData[98], fullData[43]^fullData[69], fullData[6]^fullData[57], fullData[71]^fullData[95], fullData[60]-fullData[100], fullData[66]-fullData[121], fullData[61]^fullData[107], fullData[119]-fullData[103])
				return string(data)
			}())
		}()
	case 'd':
		wllzSmhXvjvA()
	case 'p':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 6
				decryptKey := 148
				for counter := 0; i != 9; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 12:
						i = 11
						data = append(data, "T]\x1d]"...,
						)
					case 2:
						i = 3
						data = append(data, "O\x15U\x17"...,
						)
					case 5:
						i = 8
						data = append(data, ".'"...,
						)
					case 3:
						data = append(data, "XcU"...,
						)
						i = 12
					case 1:
						i = 14
						data = append(data, 13)
					case 13:
						data = append(data, 228)
						i = 0
					case 11:
						data = append(data, "mb"...,
						)
						i = 15
					case 8:
						data = append(data, "*."...,
						)
						i = 13
					case 15:
						data = append(data, "\x19lms"...,
						)
						i = 4
					case 6:
						data = append(data, "^S\\\x06"...,
						)
						i = 16
					case 14:
						data = append(data, 38)
						i = 10
					case 7:
						i = 2
						data = append(data, 86)
					case 16:
						i = 1
						data = append(data, "MOVV"...,
						)
					case 0:
						i = 9
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 4:
						i = 5
						data = append(data, "\xe5%"...,
						)
					case 10:
						i = 7
						data = append(data, "\x18\x0e]I"...,
						)
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func f1ue6Pe_q() {
	switch get_byte() {
	case 'E':
		bcC0_2W_()
	case 89:
		wUKjZRjt0E()
	case 78:
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xde\x11\xefD\x93\x9a\x84\xc4\xfd\x92\x9eP\xe1")
					data := []byte("\x94d\x9c0\xb3\xfe\xeb\xe4\x94\xe6\xbej\xa5")
					for i, b := range key {
						data[i] = data[i] ^ b
					}
					return string(data)
				}())
			}()
		}()
	case 72:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func mraixihE() {
	switch get_byte() {
	case 'V':
		h9LGvp()
	case 'r':
		func() {
			fmt.Println(func() string {
				data := []byte("3, :(N\xf1(")
				positions := [...]byte{0, 0, 1, 6, 4, 6, 0, 3, 3, 4, 5, 1}
				for i := 0; i < 12; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 12
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 'x':
		func() {
			println(func() string {
				seed := byte(63)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(70)(234)(26)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
				return string(data)
			}())
		}()
	case 89:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x90|\b^z\x84\xe1\xa6\xd1\x14n\x8e\x97\xafq8\x864\x14\xd2W\x8e\xf7_2\t逸\xa98\xfd\xdf\xc0\xb2\xfd\xb9\x11\xe0K\xefݠru\x06\x14\xec\x03\xe0\xca\xf4\x95\x883(aÊ1\x9c\xc3rt\x10\xfex\xe3\x8e[G\xf5M\xc8u}\x7f{\xff\xb9KP\xb7\x9f\x82%\xa6\xc9t\xb4\xe6\x84N\xefm\xb0\u0379\x90>}\xc1\x9b\x8eZ\xf6{KKۍ\xbf\x13\xa1\xac\xa3\x16\xe0\x90\xbf\xd91\xca\xe6S\xa0q\xb4F\x85ܧ\xbaZ\xd2\xe5a\xc4ʿ \x8d")
				data := make([]byte, 0, 72)
				data = append(data, fullData[140]-fullData[134], fullData[58]^fullData[40], fullData[3]^fullData[55], fullData[123]+fullData[108], fullData[71]+fullData[100], fullData[32]^fullData[27], fullData[76]-fullData[15], fullData[125]^fullData[0], fullData[65]-fullData[118], fullData[86]+fullData[73], fullData[88]-fullData[112], fullData[42]+fullData[111], fullData[20]-fullData[64], fullData[74]^fullData[70], fullData[85]^fullData[124], fullData[38]+fullData[129], fullData[107]^fullData[18], fullData[17]^fullData[94], fullData[12]+fullData[113], fullData[69]-fullData[90], fullData[120]+fullData[16], fullData[25]-fullData[89], fullData[114]+fullData[137], fullData[41]+fullData[84], fullData[103]^fullData[33], fullData[72]^fullData[66], fullData[131]-fullData[59], fullData[115]+fullData[68], fullData[56]-fullData[93], fullData[52]+fullData[50], fullData[67]-fullData[60], fullData[127]+fullData[75], fullData[23]^fullData[121], fullData[30]-fullData[138], fullData[8]+fullData[98], fullData[136]^fullData[99], fullData[119]+fullData[141], fullData[126]^fullData[9], fullData[14]-fullData[35], fullData[105]^fullData[29], fullData[95]^fullData[26], fullData[13]^fullData[102], fullData[62]+fullData[48], fullData[116]-fullData[82], fullData[19]-fullData[11], fullData[36]^fullData[53], fullData[135]-fullData[10], fullData[79]-fullData[80], fullData[49]^fullData[139], fullData[2]+fullData[128], fullData[61]+fullData[44], fullData[1]-fullData[45], fullData[21]-fullData[104], fullData[122]^fullData[28], fullData[39]^fullData[46], fullData[6]^fullData[7], fullData[63]+fullData[101], fullData[51]+fullData[4], fullData[133]-fullData[47], fullData[130]-fullData[77], fullData[109]^fullData[5], fullData[106]+fullData[87], fullData[117]+fullData[81], fullData[22]-fullData[91], fullData[24]+fullData[54], fullData[78]^fullData[110], fullData[96]^fullData[97], fullData[37]^fullData[92], fullData[83]+fullData[132], fullData[31]+fullData[43], fullData[34]+fullData[57])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func i1n4mX() {
	switch get_byte() {
	case 'T':
		func() {
			fmt.Println(func() string {
				seed := byte(142)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(220)(207)(175)(25)(115)(211)(142)(5)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
				return string(data)
			}())
		}()
	case 'y':
		pJIZtagt()
	case '8':
		qK09daIku5j()
	case 'm':
		h_G2QB()
	default:
		hacker_get_out()
	}
}

func rUFEgAbpwA() {
	switch get_byte() {
	case 54:
		nP4KFmoeW5()
	case 72:
		vOXOJ_UiOYRe()
	case 84:
		func() {
			defer func() {
				println(func() string {
					data := []byte("\b\x10s\xea\xb9|\xf7 \xcc\xf2f\x9fD")
					positions := [...]byte{8, 5, 8, 5, 10, 8, 0, 1, 6, 9, 8, 0, 4, 11, 8, 3}
					for i := 0; i < 16; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 102
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
					}
					return string(data)
				}())
			}()
		}()
	case 49:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func tuDXuAa() {
	switch get_byte() {
	case 'q':
		func() {
			println(func() string {
				seed := byte(141)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(236)(246)(6)(171)(76)(3)(4)(1)(172)(26)(239)(247)(84)(237)(10)(250)(187)(65)(191)(66)(16)(243)(252)(10)(181)(65)(13)(246)(188)(84)(254)(7)(167)(65)(6)(250)(8)(5)(179)
				return string(data)
			}())
		}()
	case 82:
		j63n3WRHk3t()
	case 75:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 6
					decryptKey := 247
					for counter := 0; i != 1; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 4:
							i = 3
							data = append(data, "\xbb\xc5u"...,
							)
						case 9:
							for y := range data {
								data[y] = data[y] + byte(decryptKey^y)
							}
							i = 1
						case 3:
							i = 7
							data = append(data, "\xc5\xcf"...,
							)
						case 6:
							data = append(data, 158)
							i = 2
						case 7:
							i = 0
							data = append(data, 122)
						case 2:
							data = append(data, 200)
							i = 5
						case 5:
							data = append(data, "\xc5\xc5x"...,
							)
							i = 4
						case 8:
							i = 9
							data = append(data, 164)
						case 0:
							data = append(data, 147)
							i = 8
						}
					}
					return string(data)
				}())
			}()
		}()
	case 'P':
		rl5QDBF66US8()
	default:
		hacker_get_out()
	}
}

func boz0wNBX() {
	switch get_byte() {
	case 'u':
		wCA7uL7()
	case 'W':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xa4\xe8L\xf0\x01\xfb\xafI\x99\xef\xee\x01\xac\x1e\xb4X\xf5\x90b\r\x14\xcd\xf1^\xe4\xaeZ\x97N\xbe\x9b\x9f\x0eP\x17\x80\x89\xe8j\xaf\x94M\x94\xf3\xfa\x8d\xed\x8bZ\xe4>\x19\xff\xbc\xf7\xca\u0602\x17\\\xebs\xb1\xf3vc\x95\xa7\x96\xbbX\xa2FD\xf3\xf9\xeal\x8c\x05\xd8\xcb\xf9\xde\v\xf4\x86W|\xa7\xb1\x86a3:\x96\xa1\xdb\xe44F\xd2q\xa8l\xe0Ŧ\xc7j\x86N\x82\x83@\bf\x80\xed\xcbv\xf4\xd4\xe0,\xb7\xf50\xaeAbj\xbb\x9aDť\xcdr\x1cmS")
				data := make([]byte, 0, 72)
				data = append(data, fullData[71]+fullData[12], fullData[80]+fullData[45], fullData[30]+fullData[97], fullData[0]^fullData[66], fullData[57]+fullData[3], fullData[32]-fullData[39], fullData[108]+fullData[35], fullData[48]^fullData[131], fullData[101]^fullData[53], fullData[20]-fullData[107], fullData[5]+fullData[116], fullData[37]-fullData[36], fullData[126]-fullData[128], fullData[6]+fullData[113], fullData[47]+fullData[60], fullData[140]-fullData[115], fullData[125]+fullData[103], fullData[114]+fullData[51], fullData[121]+fullData[73], fullData[83]+fullData[27], fullData[10]+fullData[102], fullData[92]^fullData[99], fullData[65]-fullData[43], fullData[24]^fullData[132], fullData[38]-fullData[139], fullData[94]-fullData[79], fullData[21]-fullData[87], fullData[98]+fullData[41], fullData[17]-fullData[13], fullData[119]+fullData[40], fullData[111]+fullData[75], fullData[141]^fullData[130], fullData[100]-fullData[56], fullData[85]-fullData[91], fullData[18]+fullData[52], fullData[15]-fullData[82], fullData[77]+fullData[105], fullData[68]^fullData[74], fullData[123]+fullData[42], fullData[62]+fullData[25], fullData[78]+fullData[137], fullData[49]+fullData[33], fullData[23]+fullData[58], fullData[2]-fullData[46], fullData[29]+fullData[110], fullData[81]-fullData[133], fullData[11]^fullData[120], fullData[1]^fullData[86], fullData[69]-fullData[59], fullData[67]+fullData[89], fullData[14]-fullData[88], fullData[90]+fullData[106], fullData[112]-fullData[28], fullData[93]^fullData[129], fullData[44]^fullData[136], fullData[26]+fullData[118], fullData[84]^fullData[50], fullData[22]^fullData[31], fullData[8]^fullData[54], fullData[34]^fullData[64], fullData[61]^fullData[124], fullData[7]^fullData[19], fullData[76]+fullData[72], fullData[4]+fullData[138], fullData[63]^fullData[95], fullData[55]-fullData[70], fullData[134]+fullData[127], fullData[109]+fullData[16], fullData[135]-fullData[104], fullData[117]^fullData[9], fullData[122]+fullData[96])
				return string(data)
			}())
		}()
	case 'B':
		bmQfnF_PlCr()
	case 77:
		func() {
			println(func() string {
				fullData := []byte("Q\xa2\x8c\xe2#[\xbfR\\\xe3\xee\xf1\xe01Wf\x01\xc4\xc9w>0\f^\x97\x8bs\xfc\xa8ov\xb4\x18\xe6\xfd\xbf0Vh\x938a\xfa^\x94\xaa\xd4S\xe2\xcd\x14\xfb\x97R:K;\x90{7\xe0<>*UL\x1b%\x88H\xf8{k`\xae\xcf\xee_")
				data := make([]byte, 0, 40)
				data = append(data, fullData[41]+fullData[32], fullData[77]^fullData[36], fullData[37]^fullData[4], fullData[28]^fullData[68], fullData[56]^fullData[14], fullData[70]^fullData[24], fullData[29]-fullData[27], fullData[60]^fullData[44], fullData[26]^fullData[47], fullData[65]+fullData[10], fullData[58]+fullData[74], fullData[0]+fullData[75], fullData[46]-fullData[73], fullData[8]-fullData[51], fullData[3]-fullData[19], fullData[12]-fullData[71], fullData[55]^fullData[72], fullData[18]-fullData[38], fullData[33]+fullData[54], fullData[69]^fullData[63], fullData[34]-fullData[25], fullData[15]-fullData[16], fullData[6]+fullData[1], fullData[62]^fullData[64], fullData[30]+fullData[45], fullData[57]^fullData[11], fullData[53]^fullData[61], fullData[7]-fullData[76], fullData[50]+fullData[22], fullData[9]^fullData[52], fullData[49]-fullData[5], fullData[43]+fullData[66], fullData[48]+fullData[20], fullData[67]-fullData[17], fullData[21]+fullData[59], fullData[35]-fullData[23], fullData[13]+fullData[40], fullData[42]-fullData[2], fullData[31]-fullData[39])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func ghmq5WBqxh() {
	switch get_byte() {
	case 50:
		v5oqVRy()
	case 100:
		f_Erm05tl()
	case 82:
		zSlME1Jl8u1C()
	case 'C':
		ek5Owg()
	default:
		hacker_get_out()
	}
}

func aXtB9uB4t3() {
	switch get_byte() {
	case 118:
		ph_iN1()
	case 'K':
		vyF7kFG()
	case '5':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 8
					decryptKey := 125
					for counter := 0; i != 3; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 4:
							data = append(data, "\xbdj"...,
							)
							i = 5
						case 5:
							i = 7
							data = append(data, "\x85\x90"...,
							)
						case 7:
							i = 3
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
						case 0:
							i = 1
							data = append(data, "\xa9\xb5"...,
							)
						case 8:
							i = 6
							data = append(data, 138)
						case 1:
							i = 4
							data = append(data, "g\xb1"...,
							)
						case 6:
							i = 2
							data = append(data, 182)
						case 2:
							data = append(data, "\xb5\xb7d"...,
							)
							i = 0
						}
					}
					return string(data)
				}())
			}()
		}()
	case 54:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 27
				decryptKey := 30
				for counter := 0; i != 11; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 20:
						data = append(data, 44)
						i = 18
					case 1:
						i = 16
						data = append(data, 238)
					case 13:
						data = append(data, "\xf8\xf3-*"...,
						)
						i = 0
					case 19:
						i = 3
						data = append(data, "\xdc\x1f\x17\x15"...,
						)
					case 4:
						i = 11
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 22:
						data = append(data, "8$"...,
						)
						i = 6
					case 3:
						i = 15
						data = append(data, "\x05\xec+"...,
						)
					case 17:
						i = 9
						data = append(data, 254)
					case 0:
						data = append(data, "\x1e\x19\xff\xe8"...,
						)
						i = 20
					case 5:
						data = append(data, "\xe3!"...,
						)
						i = 21
					case 6:
						data = append(data, "\x1b2"...,
						)
						i = 24
					case 25:
						i = 28
						data = append(data, "\x12\xce\f\xfa"...,
						)
					case 12:
						data = append(data, "\xb1\xfc\xfd\xed"...,
						)
						i = 10
					case 18:
						data = append(data, "+9"...,
						)
						i = 22
					case 9:
						i = 26
						data = append(data, "\xee\xf5\xf0\xcc"...,
						)
					case 27:
						i = 14
						data = append(data, "\xd4\xec\xfa\xb6"...,
						)
					case 28:
						i = 8
						data = append(data, "\xdf\xca\x14"...,
						)
					case 15:
						data = append(data, "\xe6%\x0f"...,
						)
						i = 13
					case 2:
						data = append(data, 212)
						i = 25
					case 21:
						i = 19
						data = append(data, "\f\xee"...,
						)
					case 10:
						i = 17
						data = append(data, "\xecѽ"...,
						)
					case 7:
						data = append(data, 7)
						i = 5
					case 24:
						data = append(data, 53)
						i = 4
					case 26:
						data = append(data, "\n\xf1\xe8\x00"...,
						)
						i = 23
					case 14:
						i = 12
						data = append(data, "\xf4\xe2\xc7"...,
						)
					case 23:
						data = append(data, "\xf0\xec"...,
						)
						i = 2
					case 16:
						i = 7
						data = append(data, "\b\x14\x00"...,
						)
					case 8:
						i = 1
						data = append(data, "\x15\x05\x04"...,
						)
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func iApoG1AbZ06() {
	switch get_byte() {
	case 53:
		xFSR2EUT5Fg()
	case 105:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 2
				decryptKey := 232
				for counter := 0; i != 0; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 8:
						i = 3
						data = append(data, 243)
					case 5:
						data = append(data, 184)
						i = 8
					case 1:
						data = append(data, 244)
						i = 9
					case 3:
						data = append(data, 188)
						i = 7
					case 7:
						i = 1
						data = append(data, 186)
					case 4:
						i = 0
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 9:
						data = append(data, 237)
						i = 6
					case 6:
						i = 4
						data = append(data, 254)
					case 2:
						i = 5
						data = append(data, 158)
					}
				}
				return string(data)
			}())
		}()
	case 'F':
		vwdSq1yJ()
	case 'e':
		func() {
			println(func() string {
				key := []byte("$ԕ\v5\xa3\x01\b\x89J\x11舶\x9epBQ\xb9\xbd\xb8،d\xd7i\x04'H\xbdUaYh\b\x92\x04\x10\xb1")
				data := []byte("U\x9b\xe0\x157\xccrl\x97\xf0\x188\xec\xab\xcd\xf5\xde\x10g\xa5\xba\x8d\xd5\aI\xf8j=ط\x1d\x18\xc7\xf9_\xcfe^p")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func dWUS7D() {
	switch get_byte() {
	case 70:
		os5Y3YX5b6oj()
	case 'S':
		func() {
			println(func() string {
				key := []byte("\xc4\xc1\xda\xf7f\x1bc.Nk\xbb\xccp\x01]\xa1ezǐ\x86Y\xeeYO\x17\xbb0^\xb3;X{\x90\xdeh#\xa1|")
				data := []byte("\xb5\xae\x9b)\x06T\x10F\xd2\xcfnT\x04`\x0eĻ\xe7Y\xd2\xec\fs\x12\xd1J\xb34\xc2\xc17!\xa5щ\xf9Fͥ")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 's':
		faYgRvwx()
	case 'X':
		func() {
			println(func() string {
				data := []byte("\xc2\xd4u\x98>o\x1at\v\a80B\xd5\xe0e\x9e;'4\x06$am/\x0e\xd3yj\xdcH\x05\xd8\b\xda\xfd\xd3\xe1\x1b")
				positions := [...]byte{37, 24, 26, 9, 23, 27, 4, 35, 30, 12, 0, 12, 32, 8, 31, 30, 35, 6, 0, 21, 14, 16, 28, 28, 19, 34, 23, 31, 18, 6, 19, 25, 13, 3, 11, 29, 20, 10, 17, 12, 13, 16, 16, 27, 38, 36, 3, 1, 33, 10, 14, 28, 31, 4, 14, 32}
				for i := 0; i < 56; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 132
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func fD_YqAGGclW() {
	switch get_byte() {
	case 'Q':
		func() {
			defer func() {
				println(func() string {
					seed := byte(31)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
					fnc(43)(43)(254)(1)(172)(68)(11)(177)(73)(11)(172)(26)(10)
					return string(data)
				}())
			}()
		}()
	case 'E':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'T':
		nb9IY4()
	case '8':
		moyE4WgC()
	default:
		hacker_get_out()
	}
}

func z5iXh1katSc() {
	switch get_byte() {
	case 'G':
		vWkpjxZz5_J()
	case 109:
		ovpFKgohqI()
	case '5':
		wcnvA3()
	case '7':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x1d\xb0\xd4B\x19\x88{\xac\x81\bw\xb0\xa1\xae*\x10\x99(\x8e4\xee4\xe9b\x06*;\xbaՑ\x9b\x9d&8]<\xf8\x00BF1\x81G\xa0\x18\xe4_\x16\x12r\xc4\xcb]19\v\xb5h\a\x9d\x9dG\x8cZ\x1eZQ^\x934ް+ơ^/\xbc\xb7b\x05\x87\x12Wu\xa6k\xc8\xe6\tN4+\xb3\xff\xd3\xfe\xd5Ca.(jߖ\xf3V&[\xd2(r\xc9\xf2^\xab8\xd9:\xc4\xd2t\x90Ĳ\xf5\xd4\xc9\xdbF\x9f\xc3\xf7\x18:\xfa\xf4\x05\xcfo\xa5\xaf")
				data := make([]byte, 0, 72)
				data = append(data, fullData[11]-fullData[23], fullData[59]+fullData[87], fullData[123]+fullData[124], fullData[118]+fullData[132], fullData[108]-fullData[22], fullData[98]-fullData[45], fullData[90]-fullData[58], fullData[75]+fullData[120], fullData[64]-fullData[71], fullData[70]+fullData[122], fullData[15]+fullData[66], fullData[119]+fullData[30], fullData[18]^fullData[127], fullData[129]^fullData[121], fullData[131]^fullData[56], fullData[68]+fullData[109], fullData[67]-fullData[94], fullData[100]^fullData[10], fullData[89]+fullData[76], fullData[60]-fullData[17], fullData[81]-fullData[101], fullData[1]+fullData[140], fullData[65]^fullData[25], fullData[4]^fullData[39], fullData[91]-fullData[88], fullData[105]+fullData[3], fullData[38]+fullData[19], fullData[24]-fullData[28], fullData[133]^fullData[102], fullData[83]^fullData[9], fullData[6]^fullData[35], fullData[125]-fullData[50], fullData[0]-fullData[141], fullData[116]^fullData[106], fullData[27]^fullData[128], fullData[92]+fullData[69], fullData[13]-fullData[79], fullData[63]+fullData[55], fullData[2]^fullData[43], fullData[42]^fullData[44], fullData[53]+fullData[110], fullData[97]-fullData[12], fullData[85]+fullData[138], fullData[72]+fullData[21], fullData[117]^fullData[31], fullData[114]^fullData[139], fullData[49]+fullData[80], fullData[104]^fullData[36], fullData[54]+fullData[107], fullData[26]^fullData[84], fullData[32]+fullData[82], fullData[57]-fullData[113], fullData[95]+fullData[99], fullData[134]+fullData[33], fullData[93]+fullData[7], fullData[96]-fullData[78], fullData[61]-fullData[48], fullData[130]-fullData[40], fullData[86]^fullData[137], fullData[14]-fullData[112], fullData[16]^fullData[73], fullData[74]-fullData[34], fullData[62]^fullData[77], fullData[47]+fullData[52], fullData[29]+fullData[126], fullData[5]^fullData[135], fullData[103]^fullData[115], fullData[46]+fullData[37], fullData[51]-fullData[111], fullData[8]^fullData[20], fullData[136]^fullData[41])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func lb2L6FtjYSbW() {
	switch get_byte() {
	case 82:
		sKTl0ZEDwe6S()
	case 'w':
		xCZbCb()
	case 'r':
		tIbSSDONIvz2()
	case 'N':
		qFgT2g()
	default:
		hacker_get_out()
	}
}

func szUqNQ() {
	switch get_byte() {
	case 67:
		cMBYLj093cP()
	case 116:
		kzpydMF5wMp()
	case 117:
		mW0GXnMA_RD()
	case 65:
		lKTF99A()
	default:
		hacker_get_out()
	}
}

func vaCabD() {
	switch get_byte() {
	case 100:
		toEJFz()
	case 'o':
		gbJiOTY()
	case 'x':
		tFHJkkbG_8l()
	case 51:
		ySF6m6kMrbnS()
	default:
		hacker_get_out()
	}
}

func jGeoDu8Q51Z() {
	switch get_byte() {
	case 55:
		lKTF99A()
	case 114:
		ijkFFdUH03IH()
	case '6':
		func() {
			println(func() string {
				key := []byte("\xbd\xeb\x1f\xee·{\xd5u\xf3\xf6b\xf5\x9a\x06}\x87<V]\xfa\xb7k\xe5d\xab\xfc\x1d\x1e\xf1\xa0.ٺ\xf7.*\a)")
				data := []byte("Ąjή\xd8\b\xa1U\xc9\xdfB\x81\xfbm\x18\xa7]v?\x88\xd2\n\x8eDʒy>\x85\xd2W\xf9ېOCi\b")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 82:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 4
					decryptKey := 151
					for counter := 0; i != 3; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 2:
							data = append(data, "\xc2\xde"...,
							)
							i = 5
						case 4:
							data = append(data, "\xe9\xd7"...,
							)
							i = 7
						case 6:
							i = 3
							for y := range data {
								data[y] = data[y] ^ byte(decryptKey^y)
							}
						case 1:
							data = append(data, "\x92\xeb"...,
							)
							i = 6
						case 5:
							i = 1
							data = append(data, 137)
						case 7:
							i = 0
							data = append(data, "\xd2\xd4"...,
							)
						case 0:
							i = 2
							data = append(data, "\x87\xc2ʄ"...,
							)
						}
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func _qHZMOszPJa() {
	switch get_byte() {
	case 50:
		zJbidrwc()
	case 118:
		v6UvLEVGDW()
	case 'G':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 57:
		r0zPXQxz()
	default:
		hacker_get_out()
	}
}

func _xPTIujBx0() {
	switch get_byte() {
	case 83:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 75:
		func() {
			fmt.Println(func() string {
				key := []byte("\a\x9e2\xe9w\xf8\x1c\fu\x18|!Yb\xb5gMFm\xa3\xa0O\x8b\x04\xc7\x13~f\xbdӵ\xd2kT\xb7\x13\x1faD\xf9\xff 7\xba\x0f\t\x92l\xf3^\xbd\x99\xfa2\xeb\xce\xe0gׅ*\xc4_\xbd\xd3\xf7'\xe6\xa6\xe0l")
				data := []byte("U\x03\xa8\x1a\xe9Wc<\xe3\x86݀\xa0\x94+̬\x9f\xa5\x18\xff\xa4\xfbc\x15H\xf4\x97/2\xfc\x03\xd9\xc2\x18rkƸXXT\xac\x19S:\t\xdaR\xac\xf5\x0f.\xa4J\x15\x15\xd5E\xe6\x89\b\x8f08i\x9bE\xffO\xe1")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 69:
		fc6jPmxL()
	case 'Q':
		jLzHnn9()
	default:
		hacker_get_out()
	}
}

func c5zA8hMqRR() {
	switch get_byte() {
	case 'u':
		woqCp34srz()
	case 97:
		kwzFKU()
	case 'g':
		kwIfv5FIoybE()
	case 49:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 7
				decryptKey := 162
				for counter := 0; i != 10; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 15:
						i = 10
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 5:
						i = 6
						data = append(data, "\xe1\x87\xc7\xc2"...,
						)
					case 13:
						i = 5
						data = append(data, "\xbb\xee\xeb"...,
						)
					case 6:
						data = append(data, "\xc5\xcà"...,
						)
						i = 15
					case 4:
						data = append(data, 237)
						i = 0
					case 1:
						i = 2
						data = append(data, "\xe2\xed\xb7\xf7"...,
						)
					case 11:
						i = 3
						data = append(data, "\xe1\xf7\xf0\xfb"...,
						)
					case 9:
						i = 1
						data = append(data, "\xac\xff\xeb"...,
						)
					case 12:
						data = append(data, 240)
						i = 8
					case 0:
						data = append(data, 242)
						i = 14
					case 8:
						data = append(data, "\xa4\xef"...,
						)
						i = 4
					case 3:
						data = append(data, "\xbf\xff\xf3\xf8"...,
						)
						i = 13
					case 2:
						i = 11
						data = append(data, "\xb5\xf6"...,
						)
					case 7:
						data = append(data, "\xfe\xe9"...,
						)
						i = 12
					case 14:
						data = append(data, "\xf4\xaf\xb4\xa4"...,
						)
						i = 9
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func dXiw0ZRzr() {
	switch get_byte() {
	case 'Z':
		luem5Iz()
	case '0':
		p3szJxuFI()
	case 'r':
		e4hoxT()
	case 97:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func oVG2zzw() {
	switch get_byte() {
	case 103:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 107:
		eWJOMi7yGud4()
	case 86:
		sQwMuf2e()
	case 51:
		ts4MsXq5()
	default:
		hacker_get_out()
	}
}

func n57Sko() {
	switch get_byte() {
	case 70:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'Q':
		kxjEgXgs1()
	case 112:
		g5dVHac2S()
	case 'T':
		zMds5b()
	default:
		hacker_get_out()
	}
}

func zvJ36V7H2W6Z() {
	switch get_byte() {
	case 49:
		func() {
			println(func() string {
				data := []byte("\x1doޑUost \x99\xcc(t\xa1\x11,\x8aM\x05b\x93\x00a\xe6 a*d\xe6\xc3\x11w\x8e\xf6\x15\x1biK_")
				positions := [...]byte{3, 38, 34, 26, 14, 35, 34, 4, 16, 32, 10, 38, 11, 20, 31, 13, 31, 4, 3, 3, 9, 9, 13, 34, 17, 18, 16, 33, 3, 11, 15, 31, 28, 9, 17, 30, 10, 2, 23, 33, 11, 29, 13, 21, 4, 0, 37, 34, 34, 16, 23, 18, 32, 30, 34, 23}
				for i := 0; i < 56; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 31
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case '9':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'h':
		keYD_JY3()
	case 110:
		aeIZRV_o()
	default:
		hacker_get_out()
	}
}

func uMwJy7S() {
	switch get_byte() {
	case 'e':
		qXRTqTr4()
	case 'B':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'E':
		fK7rLpJQH0()
	case 'z':
		bcC0_2W_()
	default:
		hacker_get_out()
	}
}

func yL3dJSQ() {
	switch get_byte() {
	case 87:
		func() {
			fmt.Println(func() string {
				seed := byte(35)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(44)(25)(184)(78)(1)(177)(26)(238)
				return string(data)
			}())
		}()
	case 48:
		liyNRi()
	case 76:
		xYb2YTrl8FVT()
	case 80:
		ef3qFUKPkZ3()
	default:
		hacker_get_out()
	}
}

func rl5QDBF66US8() {
	switch get_byte() {
	case 'o':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'u':
		ax3H62GDersU()
	case 107:
		tuDXuAa()
	case 'F':
		divrKrdFdY()
	default:
		hacker_get_out()
	}
}

func mkT7q56hSS() {
	switch get_byte() {
	case 86:
		komBJeZU()
	case 50:
		func() {
			fmt.Println(func() string {
				data := []byte("\xfb%0\xb6{-nZC#a_G\x82\xebedY8j<U\x80_Ff\x04`J+Gk\xe9n!_\xc4$t\xa0%]\x05u\x8f\xabun_\xd0\xd8W\x8fJ\xc9hZ\xb0\x91z\x13DG\x88e \x10\xa5fou")
				positions := [...]byte{36, 25, 55, 54, 51, 45, 26, 65, 39, 58, 3, 14, 40, 59, 6, 60, 49, 59, 8, 44, 19, 43, 56, 16, 25, 19, 68, 5, 63, 52, 44, 16, 49, 57, 6, 62, 31, 31, 63, 56, 24, 37, 46, 4, 3, 2, 22, 57, 57, 59, 2, 22, 26, 13, 49, 54, 20, 40, 28, 6, 28, 37, 65, 24, 42, 27, 7, 29, 3, 62, 1, 68, 9, 41, 49, 67, 5, 5, 32, 31, 42, 46, 53, 55, 16, 66, 45, 0, 31, 13, 54, 63, 54, 52, 34, 50, 27, 34, 49, 45}
				for i := 0; i < 100; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 169
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 'q':
		wDYTTgnKzJ()
	case 'R':
		bj5PN2Rr()
	default:
		hacker_get_out()
	}
}

func cfE1rYgSAOZI() {
	switch get_byte() {
	case 'm':
		dyeoYMXikbrc()
	case 'D':
		f00Vflcq()
	case 'e':
		func() {
			defer func() {
				println(func() string {
					seed := byte(131)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
					fnc(201)(57)(246)(15)(170)(80)(235)(79)(215)(225)(86)(246)(134)
					return string(data)
				}())
			}()
		}()
	case 118:
		iAsIkupeu()
	default:
		hacker_get_out()
	}
}

func keYD_JY3() {
	switch get_byte() {
	case 'S':
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("Q0>\xe6X⓶\x16{\x06\xfe\xc1\xf8\x95Bd:\xb3\xd4\xd2\x1e\xe6%\x8ac")
					data := make([]byte, 0, 14)
					data = append(data, fullData[22]+fullData[16], fullData[25]^fullData[8], fullData[9]+fullData[13], fullData[24]^fullData[11], fullData[3]+fullData[17], fullData[20]^fullData[7], fullData[1]-fullData[12], fullData[2]^fullData[21], fullData[19]+fullData[14], fullData[0]^fullData[23], fullData[18]-fullData[6], fullData[4]+fullData[5], fullData[10]^fullData[15])
					return string(data)
				}())
			}()
		}()
	case 'm':
		func() {
			fmt.Println(func() string {
				seed := byte(121)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(55)(213)(243)(73)(179)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	case 98:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 15
				decryptKey := 212
				for counter := 0; i != 21; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 5:
						i = 21
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 1:
						i = 17
						data = append(data, "\xc0\xdf\xd9"...,
						)
					case 11:
						data = append(data, "̪"...,
						)
						i = 7
					case 9:
						data = append(data, "\xdeՖ"...,
						)
						i = 13
					case 6:
						data = append(data, 137)
						i = 0
					case 2:
						i = 14
						data = append(data, "\xdd\xd6"...,
						)
					case 14:
						i = 8
						data = append(data, 146)
					case 12:
						i = 4
						data = append(data, "݉"...,
						)
					case 0:
						i = 19
						data = append(data, "\x81\xd2\xc6"...,
						)
					case 4:
						data = append(data, 194)
						i = 1
					case 3:
						i = 2
						data = append(data, "\xcc\xda"...,
						)
					case 17:
						i = 6
						data = append(data, "\x82\x99"...,
						)
					case 20:
						data = append(data, 196)
						i = 12
					case 18:
						data = append(data, "\x98\xdb"...,
						)
						i = 3
					case 13:
						data = append(data, "\xc3\xc6"...,
						)
						i = 11
					case 8:
						data = append(data, 210)
						i = 9
					case 10:
						i = 5
						data = append(data, "\xe1\xad"...,
						)
					case 7:
						i = 10
						data = append(data, "\xea\xef\xe8\xe7"...,
						)
					case 15:
						data = append(data, 211)
						i = 20
					case 19:
						i = 16
						data = append(data, "\xcf\xc0"...,
						)
					case 16:
						data = append(data, "\x9a\xda"...,
						)
						i = 18
					}
				}
				return string(data)
			}())
		}()
	case 'i':
		zvJ36V7H2W6Z()
	default:
		hacker_get_out()
	}
}

func fccp3C747DuH() {
	switch get_byte() {
	case 'D':
		ix1dRfAEV7()
	case 'Q':
		qm2w0l8FeeN()
	case 73:
		dCfmAzz()
	case 'h':
		ebVkZrDz0F()
	default:
		hacker_get_out()
	}
}

func zI0u3uW_B() {
	switch get_byte() {
	case 'v':
		func() {
			println(func() string {
				data := []byte("x\xb8\xf7-\x15o\x1f\xd4\x18:)\xb1 a\xcd\xfe\xc3\xd5\xe6\xber\x9da\x16\xbc.\xbe\xe5 \xbf\xde\x16.\xd0g1\xcaŊ")
				positions := [...]byte{35, 6, 19, 38, 12, 36, 26, 33, 24, 15, 29, 38, 26, 7, 0, 32, 32, 16, 27, 21, 17, 11, 33, 1, 37, 3, 24, 19, 12, 21, 37, 19, 27, 18, 37, 19, 30, 27, 23, 4, 31, 25, 2, 33, 27, 26, 15, 17, 14, 8}
				for i := 0; i < 50; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 29
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 100:
		zB_yAn7nIg()
	case 57:
		ptol_0i26z()
	case 75:
		func() {
			println(func() string {
				data := []byte("\x90z\xed \xa3Us- \x81)\x1at\xfdk\xe2\x17\xfa\xefb\x03\xa9aq\x1baCd\xf8t~y \x15gs\xa6n\xdc")
				positions := [...]byte{2, 17, 1, 30, 7, 13, 21, 38, 15, 35, 26, 16, 1, 24, 17, 20, 23, 26, 24, 7, 30, 2, 28, 0, 11, 5, 26, 23, 28, 21, 18, 4, 36, 9, 30, 15, 20, 13, 20, 7, 33, 36}
				for i := 0; i < 42; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 79
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func szjutHz() {
	switch get_byte() {
	case 'b':
		eVZlM5()
	case 't':
		gP1KKr()
	case 88:
		dyYzT2ta86C0()
	case 70:
		h9tbyqQZ_UYQ()
	default:
		hacker_get_out()
	}
}

func gsmkaP77() {
	switch get_byte() {
	case 118:
		n3KwMb()
	case 'G':
		mVJ0RBQ3()
	case 'A':
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("*\x0e\xdeJ\xff\xc8\xc8_5v(!\xa8\x9a\xbd\x99\x16\xa3\x7f\x81\b\x12T\x1d\xe5\xeb")
					data := make([]byte, 0, 14)
					data = append(data, fullData[25]+fullData[7], fullData[6]^fullData[14], fullData[12]-fullData[8], fullData[5]-fullData[22], fullData[11]+fullData[4], fullData[19]-fullData[23], fullData[24]-fullData[9], fullData[20]^fullData[10], fullData[18]^fullData[16], fullData[3]+fullData[0], fullData[21]+fullData[1], fullData[17]^fullData[15], fullData[13]^fullData[2])
					return string(data)
				}())
			}()
		}()
	case 83:
		tE_8YCpjwiD()
	default:
		hacker_get_out()
	}
}

func rxyQkDcy() {
	switch get_byte() {
	case '1':
		func() {
			fmt.Println(func() string {
				data := []byte("Oh\xb1n\xff\xf3\xf55")
				positions := [...]byte{6, 5, 4, 7, 4, 6, 2, 4}
				for i := 0; i < 8; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 210
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 72:
		jjPniZQqyYa()
	case 78:
		kwaIuS5()
	case 'f':
		ztObSGMO()
	default:
		hacker_get_out()
	}
}

func cPezYS() {
	switch get_byte() {
	case 114:
		func() {
			fmt.Println(func() string {
				key := []byte("M\xfe\x93'\xa1*Z\xdf$\xec\xceyM\xd7~]\t<t\xd6&\xf8|\x80y0\xf8\x8a\x10\xa5q\x8b`\\\xdf\xce\x12V\xa6\xbe\x19\xf3\xbf6\x98|g2\x94\xc4\x11\xb1'\x06\xc0\xd7A\xb1\x94\x06\x10I\xecIKc\xb71ݒ\xda")
				data := []byte("\x03\x9b\xe5\x16\xd3u\x1d\xefJ\x82\xaf&\n\xe5\b8VeL\xa3y\xad\f\xdf7\x05\x8e\xbbb\xfa6\xba\x0e2\xbe\x91^3\xd2\xe1@\xc7\xcai\xdcM\x10\\ˊ)\xc7\x13t\x9f\x90t\xdf\xfagO\r\xdc:.\x11\xc3n\x84\xfd\xaf")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 'o':
		i4CikFfzXMU()
	case 75:
		vKsKbu9()
	case 105:
		w44kk0()
	default:
		hacker_get_out()
	}
}

func nKGETsgBudl() {
	switch get_byte() {
	case 'w':
		qVxzwZSUrB()
	case 67:
		divrKrdFdY()
	case 'G':
		_IgKRxp()
	case 'j':
		func() {
			defer func() {
				println(func() string {
					data := []byte("\x9a\xe8sJF\xb2om\xb5p\xec:\x90")
					positions := [...]byte{5, 10, 10, 5, 1, 7, 9, 0, 8, 12, 3, 10, 7, 4, 8, 12, 4, 1}
					for i := 0; i < 18; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 23
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func rJ65xz7nU_() {
	switch get_byte() {
	case 86:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 8
				decryptKey := 7
				for counter := 0; i != 2; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 17:
						data = append(data, "!#<:"...,
						)
						i = 12
					case 12:
						data = append(data, "azjb"...,
						)
						i = 1
					case 5:
						data = append(data, "5q"...,
						)
						i = 6
					case 14:
						data = append(data, " %/I"...,
						)
						i = 3
					case 4:
						data = append(data, 39)
						i = 0
					case 18:
						i = 2
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 6:
						data = append(data, "1=6"...,
						)
						i = 16
					case 0:
						i = 17
						data = append(data, ">j"...,
						)
					case 13:
						i = 15
						data = append(data, 35)
					case 3:
						i = 9
						data = append(data, "\t\f"...,
						)
					case 7:
						data = append(data, "/9>"...,
						)
						i = 5
					case 8:
						data = append(data, 48)
						i = 4
					case 16:
						data = append(data, 117)
						i = 14
					case 11:
						i = 7
						data = append(data, "{8"...,
						)
					case 10:
						data = append(data, "\x04\x02"...,
						)
						i = 19
					case 19:
						i = 18
						data = append(data, 78)
					case 9:
						i = 10
						data = append(data, 11)
					case 1:
						data = append(data, "1%,"...,
						)
						i = 13
					case 15:
						i = 11
						data = append(data, "y9"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case '9':
		func() {
			println(func() string {
				data := []byte("\xbe|g\xbcyks\xc9\xc0\xdf)\xf34a\xac\xd8\xd8\xdc\xd6}r\xb2ay\xbca\x11\xe8 t\xe6#\x92\xe6:\xbd\x81n!")
				positions := [...]byte{11, 12, 36, 9, 27, 32, 27, 35, 16, 31, 7, 15, 30, 0, 11, 4, 33, 35, 24, 17, 21, 14, 16, 26, 19, 18, 16, 19, 8, 1, 5, 8, 27, 35, 24, 34, 12, 35, 12, 32, 33, 23, 36, 12, 5, 23, 3, 2, 0, 23}
				for i := 0; i < 50; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 138
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 'v':
		rnfh0o0nh()
	case 55:
		zeTwAMAuOuPw()
	default:
		hacker_get_out()
	}
}

func fG9mKjuEw2i() {
	switch get_byte() {
	case 'l':
		y54lYMb()
	case 'f':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 84:
		func() {
			fmt.Println(func() string {
				key := []byte("\xca\x1d\x8fJ\f\x02\b\xaa")
				data := []byte("\x19\x85\xaf\xb8{\"B\xd2")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 114:
		azBfz1Xy6()
	default:
		hacker_get_out()
	}
}

func nLrcFt9SRyC() {
	switch get_byte() {
	case 83:
		i7ZIyMza8nb()
	case '3':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'U':
		cDLRzrzU9()
	case 53:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xb6qv\x9f\x00:@\xe3\xa5F\x8c*o\xec\xb3\nK\xf7\xae:b\x97?\x93\xb3\xa9\xd9\xf1\xd2\x0e\x93\x9c4\xcc\x13[\xc1hmo\xb8F\xb4\x88\xb4\x12\xc2ř*\xf1\xd6\"\xfb`\xdd\xd6\xe8\xf8WY$\xcb.\xf6fݵխGf\x94w\xf2\xc1M\x91ժ\ag\xb3\x0f\xacz\x84\x92\xa51\x85'\xe9\xc6Q\xe3\xf7\x83d\x129%\x83\x8b\xfe\xe5\x9a\xf3\xee2ĉ\x84\xa3\xd2`.\t\x06\xd3_\x7f\x15P\xffE_\x8f\x86FP\xad2e\xa9\xdc+ \x9c\xa3\x911")
				data := make([]byte, 0, 72)
				data = append(data, fullData[121]^fullData[141], fullData[135]-fullData[73], fullData[139]+fullData[119], fullData[70]^fullData[2], fullData[15]+fullData[37], fullData[22]+fullData[137], fullData[130]+fullData[17], fullData[57]-fullData[40], fullData[82]-fullData[125], fullData[59]-fullData[92], fullData[12]-fullData[29], fullData[4]+fullData[120], fullData[46]^fullData[90], fullData[26]+fullData[60], fullData[111]-fullData[34], fullData[43]+fullData[66], fullData[84]+fullData[24], fullData[16]-fullData[74], fullData[25]+fullData[127], fullData[52]-fullData[131], fullData[88]-fullData[129], fullData[7]^fullData[0], fullData[117]-fullData[48], fullData[100]^fullData[71], fullData[58]-fullData[79], fullData[80]-fullData[28], fullData[20]-fullData[13], fullData[140]-fullData[54], fullData[132]^fullData[6], fullData[45]^fullData[76], fullData[21]-fullData[123], fullData[47]-fullData[72], fullData[31]-fullData[116], fullData[44]-fullData[9], fullData[78]^fullData[42], fullData[50]-fullData[87], fullData[65]^fullData[11], fullData[56]-fullData[1], fullData[85]-fullData[118], fullData[23]^fullData[33], fullData[32]^fullData[38], fullData[106]^fullData[18], fullData[49]^fullData[126], fullData[115]+fullData[124], fullData[41]+fullData[104], fullData[96]+fullData[19], fullData[86]^fullData[107], fullData[138]-fullData[63], fullData[134]^fullData[64], fullData[136]^fullData[133], fullData[55]^fullData[105], fullData[30]+fullData[95], fullData[101]-fullData[27], fullData[122]^fullData[81], fullData[98]+fullData[53], fullData[110]^fullData[97], fullData[36]-fullData[10], fullData[8]^fullData[62], fullData[69]+fullData[75], fullData[35]^fullData[5], fullData[128]-fullData[91], fullData[68]+fullData[39], fullData[3]+fullData[77], fullData[67]^fullData[93], fullData[51]^fullData[14], fullData[112]+fullData[108], fullData[102]-fullData[83], fullData[89]-fullData[114], fullData[103]-fullData[109], fullData[99]-fullData[113], fullData[94]^fullData[61])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func qQTzuN26NJk() {
	switch get_byte() {
	case 57:
		lvSkyT()
	case 'v':
		mW0GXnMA_RD()
	case 89:
		kq0zqCRYIP4()
	case 'c':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func hFQJIqDP14o() {
	switch get_byte() {
	case 120:
		func() {
			fmt.Println(func() string {
				seed := byte(88)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(22)(11)(15)(185)(51)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	case 100:
		dWiveeA()
	case 'v':
		func() {
			fmt.Println(func() string {
				data := []byte("whk\xa0\xc7k:\x0e")
				positions := [...]byte{4, 4, 0, 7, 0, 3, 5, 2}
				for i := 0; i < 8; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 168
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 'q':
		zGD9HVF()
	default:
		hacker_get_out()
	}
}

func eCmeUzn1() {
	switch get_byte() {
	case 'P':
		aJcw76()
	case 55:
		r0cvam()
	case 73:
		wHMWJash()
	case 102:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func jYQJIbF2Q() {
	switch get_byte() {
	case 'M':
		func() {
			fmt.Println(func() string {
				data := []byte("\xa0\x9dv1\x96_\xfa\x95MЄ_G2\xc8e\xc9Y\xa0\xc2_\xe7w\xe7N\x87䵶AG8\x8dcd_\xf6\xdd16x\xc1u\xa9<rd\xca_N\x7f\x105D_ޜn=\xc7\x7fD\xb9se(\xe4sQo\xcd")
				positions := [...]byte{52, 41, 40, 46, 40, 36, 67, 65, 8, 52, 0, 68, 70, 37, 32, 28, 53, 13, 6, 62, 6, 38, 7, 34, 38, 45, 27, 18, 33, 56, 21, 39, 4, 66, 4, 1, 13, 52, 22, 62, 21, 27, 25, 41, 38, 29, 36, 28, 45, 18, 32, 52, 4, 27, 31, 0, 39, 18, 55, 50, 6, 43, 13, 28, 50, 60, 25, 43, 16, 59, 36, 19, 67, 51, 26, 53, 31, 44, 29, 38, 26, 31, 13, 10, 47, 0, 40, 23, 66, 58, 14, 9}
				for i := 0; i < 92; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 249
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 'C':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 119:
		mRtiLS2A()
	case 'Q':
		r0cvam()
	default:
		hacker_get_out()
	}
}

func oU2Z4fBPGtp() {
	switch get_byte() {
	case 'h':
		func() {
			println(func() string {
				key := []byte("K\\d\xf2\x11\x88\xcfq\xeb1[-\xdb\xf3\x89m\x10\x00\x0f\xb75A\x90\xb2\x9e\xc5\xd1w<Z&+ \a\x86\xa7\x98%s")
				data := []byte("23\x11\xd2}\xe7\xbc\x05\xcb\vr\r\xaf\x92\xe2\b0a/\xd5G$\xf1پ\xa4\xbf\x13\x1c.TR\x00f\xe1\xc6\xf1KR")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 'I':
		y7zvn4KMnuah()
	case 'C':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xaff\xe6 \x89n\xe1o\x00\bv\x8bO\x0fY\x9e")
				data := make([]byte, 0, 9)
				data = append(data, fullData[6]+fullData[5], fullData[13]+fullData[14], fullData[3]-fullData[8], fullData[9]^fullData[1], fullData[2]^fullData[4], fullData[7]-fullData[12], fullData[0]+fullData[11], fullData[15]-fullData[10])
				return string(data)
			}())
		}()
	case '9':
		bnHC4Xf()
	default:
		hacker_get_out()
	}
}

func fosEz3FzMB() {
	switch get_byte() {
	case 'm':
		func() {
			fmt.Println(func() string {
				key := []byte("'70\x9d\xab0#\xe4")
				data := []byte("(1\xf0\xd1\xc4\xf0\x17D")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 'D':
		bSPP_cWPSSn()
	case 67:
		func() {
			fmt.Println(func() string {
				seed := byte(220)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(147)(7)(86)(162)(1)(79)(132)(106)
				return string(data)
			}())
		}()
	case 'b':
		xYhbgGzkct()
	default:
		hacker_get_out()
	}
}

func edce_a() {
	switch get_byte() {
	case '6':
		ejOBQQyEbi()
	case 118:
		fsccrU()
	case 'E':
		func() {
			println(func() string {
				seed := byte(17)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(104)(22)(250)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
				return string(data)
			}())
		}()
	case 'X':
		func() {
			fmt.Println(func() string {
				data := []byte("\xadev$r\x86\x0f\xa9P\xfba\x11\x96.\xd7\xf9_\x06\x9d\xa1\x8f\xfb_\xa8\xfe5v1N\x92G\x9dn\xde\xf0bL\xb0މ\xfb\xbc\xb7_ \xb5\xbdn\x8fN\xdf{r\x95͗\x1b\xa8ga\xe6D\xa5s\xedrt_You")
				positions := [...]byte{15, 35, 51, 42, 46, 41, 48, 15, 7, 28, 12, 8, 21, 22, 57, 19, 14, 18, 56, 17, 41, 45, 13, 52, 64, 38, 39, 33, 22, 13, 17, 5, 15, 13, 29, 44, 11, 45, 34, 55, 3, 48, 37, 24, 6, 54, 45, 28, 23, 15, 60, 53, 6, 6, 56, 9, 58, 62, 29, 35, 0, 8, 48, 46, 52, 20, 54, 51, 39, 53, 31, 56, 55, 37, 22, 42, 3, 41, 50, 5, 20, 18, 22, 40}
				for i := 0; i < 84; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 251
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func rSu0LI() {
	switch get_byte() {
	case 'B':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xf7Y\xf6\xd8߾P\xe8\x1f\xc9\x12)G\xb0\xa5\x9e")
				data := make([]byte, 0, 9)
				data = append(data, fullData[2]+fullData[1], fullData[6]-fullData[7], fullData[15]^fullData[5], fullData[9]+fullData[14], fullData[13]^fullData[4], fullData[11]+fullData[0], fullData[10]-fullData[3], fullData[12]-fullData[8])
				return string(data)
			}())
		}()
	case 'k':
		d_m1vw()
	case 74:
		qpJvtfT2()
	case 'R':
		z3GnOot17()
	default:
		hacker_get_out()
	}
}

func azBfz1Xy6() {
	switch get_byte() {
	case 'N':
		lMIzLH0YI()
	case 76:
		func() {
			defer func() {
				println(func() string {
					seed := byte(151)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
					fnc(179)(43)(254)(1)(172)(68)(11)(177)(73)(11)(172)(26)(10)
					return string(data)
				}())
			}()
		}()
	case 'C':
		fG9mKjuEw2i()
	case 85:
		gP_veob6h()
	default:
		hacker_get_out()
	}
}

func ovpFKgohqI() {
	switch get_byte() {
	case 83:
		z5iXh1katSc()
	case 72:
		func() {
			fmt.Println(func() string {
				fullData := []byte("'\xf9H9\x81\x10\x96\xbaL\x16\xbe\x19_\xd8\xf1I")
				data := make([]byte, 0, 9)
				data = append(data, fullData[3]+fullData[9], fullData[4]-fullData[11], fullData[2]+fullData[13], fullData[7]-fullData[8], fullData[5]+fullData[12], fullData[1]+fullData[0], fullData[15]+fullData[14], fullData[10]-fullData[6])
				return string(data)
			}())
		}()
	case 'o':
		qdFeGqgzi18()
	case 'y':
		func() {
			println(func() string {
				data := []byte("you@@o!-@\x7fH kI/\x1e aO\x01rlnKl\r>\b\"tr`y\x17/\tEK!")
				positions := [...]byte{7, 22, 31, 10, 14, 3, 6, 6, 15, 6, 12, 23, 10, 21, 18, 6, 15, 13, 35, 26, 25, 18, 35, 19, 8, 23, 32, 25, 27, 34, 7, 33, 33, 23, 4, 32, 37, 8, 25, 36, 18, 4, 9, 18, 28, 26, 27, 3, 7, 24, 22, 13, 21, 7, 19, 25}
				for i := 0; i < 56; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 26
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func zdpm1_nik() {
	switch get_byte() {
	case 115:
		dmfYw5u351Oz()
	case 'o':
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("\x13\xb9wIp\x0ffU\x14\xbb\x05\x1f\x17\x9c\x7f\xd8\x0f\xb8\rEF\xc9?-\xb9b")
					data := make([]byte, 0, 14)
					data = append(data, fullData[21]-fullData[14], fullData[10]+fullData[4], fullData[5]-fullData[13], fullData[9]+fullData[1], fullData[15]-fullData[17], fullData[2]-fullData[0], fullData[18]+fullData[25], fullData[22]^fullData[11], fullData[8]+fullData[7], fullData[24]-fullData[19], fullData[6]^fullData[20], fullData[3]-fullData[16], fullData[23]+fullData[12])
					return string(data)
				}())
			}()
		}()
	case 'g':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case '2':
		i7fBLgBTR()
	default:
		hacker_get_out()
	}
}

func jsj95xAjl() {
	switch get_byte() {
	case 'z':
		t1M2SAs_()
	case 81:
		func() {
			defer func() {
				println(func() string {
					data := []byte("\x93u\xdet\xe8\xa1o\xe5\xa3n8:\xc9")
					positions := [...]byte{8, 8, 9, 8, 12, 12, 7, 5, 9, 4, 2, 8, 10, 0, 0, 0}
					for i := 0; i < 16; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 119
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'j':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 50:
		f24LTlfVQIY()
	default:
		hacker_get_out()
	}
}

func phNiaj5Dc() {
	switch get_byte() {
	case 89:
		func() {
			fmt.Println(func() string {
				data := []byte("\xe04v\x15r/\xfc\x06\xc4M\x90\"G\x9d\x89\x17am8N_>p_d5vgr_\xfasnn\x16\xaeXV`\x1aY\x83uEhv\x1e\xc2\xebG8n4r_\x1e8\xf9\xebaE?\xfes\x15Vo\xed\x85o\xb5")
				positions := [...]byte{44, 59, 16, 49, 41, 39, 3, 67, 27, 48, 60, 14, 47, 60, 17, 31, 44, 38, 14, 13, 31, 34, 60, 68, 14, 10, 45, 57, 5, 55, 1, 24, 61, 24, 9, 37, 48, 19, 64, 51, 15, 35, 15, 67, 62, 3, 36, 43, 67, 51, 10, 11, 34, 27, 68, 47, 38, 0, 68, 60, 8, 56, 30, 67, 27, 45, 65, 58, 38, 59, 70, 41, 13, 6, 59, 35, 46, 5, 64, 7, 10, 34, 16, 21, 58, 13, 45, 66, 56, 45}
				for i := 0; i < 90; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 202
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 'I':
		func() {
			fmt.Println(func() string {
				key := []byte("q\xb3\xc4\xc9\xc3\xf8\xa8\xf1\ayF\x98\xcf\xd9\x19c/\xaf\xe3\xcbE\xd8p\xec\xdb\xf3:\xbf\tE\x15\xb1\xf2\xa2\x93\x01\xfc%#\xeb.\xf49V\xbd\xbc1\xe0m\xfd0B\x9a\x01\xf1l,\x1b\xf2\xaa\xb2}\xba\xa8\x17SVT\xe68M")
				data := []byte("\xbf\x18:\xfa5W\xef!u\xe7\xa7\xf7\x16\v\x8fȎ\b\x1b@\xa4-\xe0K)(\xb0\xf0{\xa4\\\xe2`\x10\xf4`H\x8a\x97J\x87(\xae\xb5\x01\xed\xa8N\xccKh\xb8\xcesP\xb3a\x89`\v\x11\xc1\xea\x1b|\xc5ʳ?\xa7\xc2")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 55:
		znCh9c7MO()
	case 'i':
		v41MoG1U()
	default:
		hacker_get_out()
	}
}

func rwZCPN() {
	switch get_byte() {
	case 'Y':
		hfFaMf()
	case 102:
		kEngkRkSX4BC()
	case 'w':
		fmMtFzeuD3q()
	case 'j':
		zQ5RduzKaA()
	default:
		hacker_get_out()
	}
}

func eWP2UIV3MT() {
	switch get_byte() {
	case 104:
		func() {
			println(func() string {
				fullData := []byte("\xefq\x1d\x8f\xbc\x17\x00\xd5j1\xc8q\xac\x18-´\xcb\b\xc1c\xab'{6\x89\u07bb\xc0\xfa\x1c\xbf\xd6X\x8d6\xe1l\x02\xcd\x03Ta\xae\r\\\x8bvBA\xa7h\x9b\xe52\x03B\xcb.\xbf\a@\v\x05\x84\x15\xad\xbf֪\xa5E\xbbKmt\xb9\b")
				data := make([]byte, 0, 40)
				data = append(data, fullData[72]-fullData[56], fullData[58]-fullData[59], fullData[51]+fullData[44], fullData[62]+fullData[65], fullData[2]^fullData[1], fullData[76]^fullData[68], fullData[6]-fullData[34], fullData[9]^fullData[71], fullData[46]^fullData[21], fullData[29]-fullData[28], fullData[4]+fullData[74], fullData[13]+fullData[18], fullData[40]+fullData[11], fullData[53]-fullData[64], fullData[19]+fullData[69], fullData[0]+fullData[47], fullData[27]-fullData[52], fullData[38]^fullData[20], fullData[33]+fullData[10], fullData[24]^fullData[41], fullData[25]-fullData[5], fullData[22]-fullData[15], fullData[17]-fullData[8], fullData[60]^fullData[37], fullData[39]-fullData[66], fullData[45]+fullData[63], fullData[14]+fullData[49], fullData[42]+fullData[55], fullData[75]+fullData[12], fullData[48]^fullData[35], fullData[54]^fullData[61], fullData[57]+fullData[43], fullData[70]+fullData[23], fullData[77]-fullData[50], fullData[73]+fullData[30], fullData[67]^fullData[26], fullData[31]^fullData[32], fullData[36]^fullData[3], fullData[7]-fullData[16])
				return string(data)
			}())
		}()
	case 'F':
		func() {
			defer func() {
				println(func() string {
					seed := byte(42)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
					fnc(116)(19)(36)(73)(62)(192)(139)(199)(215)(185)(30)(86)(182)
					return string(data)
				}())
			}()
		}()
	case 'S':
		nsd3xB()
	case 'A':
		eTPdaLcHsXC()
	default:
		hacker_get_out()
	}
}

func hGmuzUPY() {
	switch get_byte() {
	case 111:
		func() {
			println(func() string {
				fullData := []byte("\xf9\xb5\x90BpC湖k\xbcDtg\xd7\xd1`\xa7\x17\x03\x84f(\xaa\xfdK\xe8v\xe7\r\x95x\xc1\xc7\x18\x9f\xd3\x00\x7f\xf1\x9dh/\xd8\xd5\nS08\x06\x9a\x91M\x10\xb1|\t\xad\x0e-\xc7\xc3X\xbc\rp\xf1jm\x8c\x19ٲ~#\xf70\x9d")
				data := make([]byte, 0, 40)
				data = append(data, fullData[6]-fullData[68], fullData[17]-fullData[48], fullData[21]-fullData[66], fullData[28]-fullData[60], fullData[24]^fullData[51], fullData[63]^fullData[36], fullData[19]-fullData[2], fullData[33]-fullData[46], fullData[59]^fullData[29], fullData[7]-fullData[38], fullData[9]^fullData[3], fullData[62]^fullData[31], fullData[45]^fullData[73], fullData[49]^fullData[13], fullData[32]+fullData[23], fullData[18]-fullData[72], fullData[76]-fullData[53], fullData[20]-fullData[74], fullData[1]-fullData[30], fullData[57]-fullData[25], fullData[50]^fullData[26], fullData[34]+fullData[52], fullData[69]+fullData[44], fullData[22]^fullData[5], fullData[8]-fullData[27], fullData[75]+fullData[67], fullData[58]^fullData[16], fullData[10]^fullData[43], fullData[39]+fullData[42], fullData[47]^fullData[11], fullData[61]^fullData[54], fullData[12]^fullData[64], fullData[0]-fullData[71], fullData[41]^fullData[56], fullData[14]-fullData[65], fullData[37]-fullData[35], fullData[4]^fullData[70], fullData[15]+fullData[40], fullData[77]-fullData[55])
				return string(data)
			}())
		}()
	case 107:
		_t1dFax6W0HP()
	case 'n':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'T':
		gFzDBmOB9S()
	default:
		hacker_get_out()
	}
}

func czMR6DcZud() {
	switch get_byte() {
	case 'm':
		joYHmEiRZ()
	case '0':
		wwLmzg()
	case 78:
		fWO5afDWjQB()
	case 'a':
		func() {
			defer func() {
				println(func() string {
					seed := byte(206)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
					fnc(24)(91)(180)(105)(126)(64)(139)(199)(215)(185)(30)(86)(182)
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func gRMSu7z6s2Vp() {
	switch get_byte() {
	case 'A':
		func() {
			fmt.Println(func() string {
				fullData := []byte("`L\xdb\xf0D\x8d\xf6\xaa\x9f\xd4*\n\x90\x0e\x93\x1e")
				data := make([]byte, 0, 9)
				data = append(data, fullData[14]-fullData[4], fullData[2]+fullData[5], fullData[9]+fullData[1], fullData[13]+fullData[0], fullData[8]^fullData[3], fullData[6]+fullData[10], fullData[7]+fullData[12], fullData[11]+fullData[15])
				return string(data)
			}())
		}()
	case 'n':
		func() {
			defer func() {
				println(func() string {
					data := []byte("\xa7~\x8btcnb\xc2iC\xb2I`")
					positions := [...]byte{6, 0, 5, 10, 1, 5, 6, 2, 4, 11, 12, 12, 10, 7, 9, 10}
					for i := 0; i < 16; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 18
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
					}
					return string(data)
				}())
			}()
		}()
	case 50:
		mVJ0RBQ3()
	case 'd':
		cI1QLL1()
	default:
		hacker_get_out()
	}
}

func zB_yAn7nIg() {
	switch get_byte() {
	case 75:
		zI0u3uW_B()
	case 'p':
		cjqiizK2ydo()
	case 121:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 3
					decryptKey := 103
					for counter := 0; i != 5; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 3:
							data = append(data, "\"\x1c\x19\x1f"...,
							)
							i = 4
						case 0:
							data = append(data, "\t\x15BY"...,
							)
							i = 1
						case 2:
							for y := range data {
								data[y] = data[y] ^ byte(decryptKey^y)
							}
							i = 5
						case 4:
							i = 0
							data = append(data, "L\t\x01O"...,
							)
						case 1:
							data = append(data, 32)
							i = 2
						}
					}
					return string(data)
				}())
			}()
		}()
	case 'i':
		irNjk8o()
	default:
		hacker_get_out()
	}
}

func sCG5viH2AeH() {
	switch get_byte() {
	case 'O':
		yvOCrw()
	case 'V':
		dydbUzKP5d()
	case 122:
		func() {
			println(func() string {
				seed := byte(215)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(174)(234)(26)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
				return string(data)
			}())
		}()
	case 89:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 15
				decryptKey := 62
				for counter := 0; i != 6; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 13:
						data = append(data, "u~wz"...,
						)
						i = 5
					case 7:
						i = 16
						data = append(data, 118)
					case 1:
						i = 3
						data = append(data, "\x9c\x9d\xa3"...,
						)
					case 3:
						data = append(data, 53)
						i = 13
					case 5:
						i = 4
						data = append(data, "~4"...,
						)
					case 9:
						i = 8
						data = append(data, "\x9fE"...,
						)
					case 14:
						i = 1
						data = append(data, "\x9d\x92I"...,
						)
					case 12:
						i = 14
						data = append(data, "\x84\x8dM\x8d"...,
						)
					case 15:
						i = 0
						data = append(data, "\xae\xa3\xacV"...,
						)
					case 11:
						data = append(data, "\xa6]"...,
						)
						i = 7
					case 16:
						i = 2
						data = append(data, 104)
					case 4:
						i = 6
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 2:
						i = 9
						data = append(data, "^\xad\x99\xa6"...,
						)
					case 10:
						i = 12
						data = append(data, 133)
					case 8:
						data = append(data, "\x85G\x88\x93"...,
						)
						i = 10
					case 0:
						i = 11
						data = append(data, "\x9d\x9f\xa6"...,
						)
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func zrmNosIA() {
	switch get_byte() {
	case 'V':
		rAqZTIG0C_()
	case 66:
		mUkETX()
	case 114:
		kgh13MaHqfJ()
	case 'y':
		xfkySjxrra()
	default:
		hacker_get_out()
	}
}

func fdSupbJhTmSK() {
	switch get_byte() {
	case 90:
		z6RScGmf()
	case 87:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'I':
		hy3WWE()
	case 82:
		dFBfWu()
	default:
		hacker_get_out()
	}
}

func rA7PmJ5m9zlP() {
	switch get_byte() {
	case 113:
		jks4CSRVyBd()
	case '3':
		s7hOF96t()
	case 106:
		aGgzUH()
	case 'o':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func mVoxzUhf6() {
	switch get_byte() {
	case 'X':
		func() {
			fmt.Println(func() string {
				key := []byte("\xe5d\xae\x9a\xdfh\xbbϖ\\\x84o\xf7l\xb2~\xfe\x7f\x93\x04\xf6\xc2\xf4\xdft\xd62\v\xb8\xbbi\xd4zB\x10\xb1\xc2 \xc9y_\x15φ(\x01_dޠ5\x9f\x8ck\x93\xd9j\x8c\x8d\xc3\xdb\xff\x01|o4\t6/\xe8\xdd")
				data := []byte("\xab\x01ث\xad7\xfc\xff\xf82\xe50\xb0^\xc4\x1b\xa1&\xabq\xa9\x97\x84\x80:\xe3D:\xca\xe4.\xe5\x14,q\xee\x8eE\xbd&\x06!\xba\xd9l0(\n\x81\xee\r\xe9\xb8\x19̞_\xe2㢄\xbb1\x0f\nF}iv\x87\xa8")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 105:
		func() {
			println(func() string {
				key := []byte("\x87b\x12Y\xde$d\xf3s8\x1eT@a\x8a\x19\x05\x0e6\x81\xbc\xd3\x17\xc4}T\x14+0\xed!n\x8f8]>z\xb8\xc9")
				data := []byte("\xfe\rgy\xb2K\x17\x87S\x027t4\x00\xe1|%o\x16\xe3ζv\xaf]5zO\x10\x99S\x17\xafY:_\x13\xd6\xe8")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 'V':
		jRDT5b()
	case 110:
		iuVPUBr()
	default:
		hacker_get_out()
	}
}

func i9tf2hOenfoZ() {
	switch get_byte() {
	case 111:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 114:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 106:
		hB57NP1wSkC()
	case 'e':
		soBev5()
	default:
		hacker_get_out()
	}
}

func f3CHIT4drR() {
	switch get_byte() {
	case 82:
		nHH55Wryt63()
	case 122:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case '0':
		hLIwfO()
	case 104:
		xYgaB1()
	default:
		hacker_get_out()
	}
}

func wfEiPwa5yDF() {
	switch get_byte() {
	case 108:
		uO7Gz7N()
	case 'n':
		hF6_24jKkG()
	case 'L':
		func() {
			println(func() string {
				key := []byte("_SI\xb804U\x00\xa0VO\xdfD\x82\xa2;\xd6\xe8\x0f\xe2\xe2j\xb5.\xea\xd5\xf7\xff\x80\xc8\x18\xc9S.\xa7\x02\xf6GH")
				data := []byte("&<<\x98\\[&t\x80lf\xff0\xe3\xc9^\xf6\x89/\x80\x90\x0f\xd4Eʴ\x99\x9b\xa0\xbcj\xb0sO\xc0c\x9f)i")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 'a':
		gKopl9V()
	default:
		hacker_get_out()
	}
}

func b36Y8ysrWF() {
	switch get_byte() {
	case 108:
		p7Lx_7ZxsO()
	case 109:
		aJA3nGrz()
	case 'E':
		func() {
			println(func() string {
				key := []byte("\xec\xc9\xe5\xfeh\x90σf\x15\xe8\x18\xe2I\xcb\xca #l\x0f\a\xa0\xbe\x9f\xb0\xba,C\x18f?3\x05\x1a4#`\x01#")
				data := []byte("\x8d\xa6\x90\"\x04ߤ\xf1\xba%A\b\x92\x18\xa0\x9b\x00>\xb4Skţ\xccp\xa7B!\b\x0e3F\x1bG3>\tm\xfe")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 'd':
		auhmdbUv()
	default:
		hacker_get_out()
	}
}

func y7zvn4KMnuah() {
	switch get_byte() {
	case 97:
		oU2Z4fBPGtp()
	case 73:
		hnAvEqA9qB0A()
	case 'S':
		zo1HKK()
	case 'd':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x8b\xebċ\xcb\xd2x\xb0\x88K\xba\xb2Gg$\xe3")
				data := make([]byte, 0, 9)
				data = append(data, fullData[0]^fullData[2], fullData[10]^fullData[5], fullData[13]-fullData[12], fullData[3]+fullData[15], fullData[14]^fullData[9], fullData[1]^fullData[4], fullData[11]+fullData[8], fullData[7]+fullData[6])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func nN6V9a4t() {
	switch get_byte() {
	case 66:
		func() {
			defer func() {
				println(func() string {
					data := []byte("J6\xe3\x93-\xd7{\u061ct \xd3D")
					positions := [...]byte{11, 3, 6, 4, 2, 6, 7, 1, 11, 8, 8, 5, 7, 6}
					for i := 0; i < 14; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 87
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
					}
					return string(data)
				}())
			}()
		}()
	case 120:
		ycj8MbM3IoW8()
	case 'z':
		iV4_2lLSoIs()
	case 'I':
		aj_Vhkk5Z()
	default:
		hacker_get_out()
	}
}

func z_EHURMgWd() {
	switch get_byte() {
	case 103:
		func() {
			fmt.Println(func() string {
				seed := byte(239)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(61)(145)(51)(33)(131)(243)(206)(133)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
				return string(data)
			}())
		}()
	case 70:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'B':
		huxOzMHYYHD()
	case 'e':
		wMVfAH()
	default:
		hacker_get_out()
	}
}

func g44h4LDlQ() {
	switch get_byte() {
	case '9':
		iAcLgVLdn6B()
	case '6':
		ph_iN1()
	case 97:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'B':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 1
					decryptKey := 217
					for counter := 0; i != 2; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 4:
							i = 5
							data = append(data, "\x8c\x94F\x94"...,
							)
						case 1:
							i = 3
							data = append(data, "m\x99"...,
							)
						case 0:
							i = 2
							for y := range data {
								data[y] = data[y] + byte(decryptKey^y)
							}
						case 5:
							i = 0
							data = append(data, "\xa0Ids"...,
							)
						case 3:
							data = append(data, "\x94\x96G"...,
							)
							i = 4
						}
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func toTsojzdfy() {
	switch get_byte() {
	case 'M':
		func() {
			fmt.Println(func() string {
				data := []byte("\x7f\x91v\x98\xae\xbd\x860nnaS=\x1c\x80\xa7lm\x9al\x12I)\xc2N5x\x87\x98_GE:na_*y[O<~\xe6B\xf51\xfen_\x87\x8d14M\x9aG5n\xb8W_D\x0e\x86er._Y\x19u")
				positions := [...]byte{41, 41, 44, 42, 28, 58, 69, 53, 5, 4, 26, 51, 28, 15, 27, 59, 46, 46, 49, 50, 23, 21, 37, 44, 0, 51, 66, 26, 18, 17, 46, 42, 36, 31, 21, 53, 63, 54, 16, 38, 32, 3, 16, 14, 66, 11, 12, 41, 42, 32, 43, 20, 16, 1, 17, 15, 11, 39, 41, 12, 14, 6, 23, 62, 43, 62, 13, 22, 16, 19, 50, 23, 26, 5, 40, 22, 21, 43}
				for i := 0; i < 78; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 172
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 'Y':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 68:
		dhjAoOF()
	case 112:
		jRDT5b()
	default:
		hacker_get_out()
	}
}

func bPIpof06i_Dq() {
	switch get_byte() {
	case 'e':
		o5pZLD()
	case 'K':
		aGyCon()
	case 'G':
		func() {
			fmt.Println(func() string {
				key := []byte("K\x1d\x90}\xc6\xd3oBF\x8eB\xe5\xb4\xfb\xe8n\x93\a\x7f_\xe7L\x90̿\x95P\x95v\x19;\x80\t\x8b0\xb8n|\xf0\x1f\x94\xcfC k\x84\x1a\xe7\x89\x11\xedww\x9ẽ|>\xae\xf0\x0f\xda'I\xda,\bd\x9a3\x80")
				data := []byte("\x99\x82\x06\xae82\xb6r\xb4\xfc\xa3D\xfb-^\xd3\xf2`\xb7\xd4F\xa1\x00+\r\xca\xc6\xc6\xe8x\x82\xb1w\xf9\x91\x17\xba\xe1d~\xed\x03\xb8\x7f\xaf\xb5\x91U\xe8_%\xed\xab\x10+ʱ\xac\x1cQn\x1eW\xbc?\x9e|\xc3\xf3\xa2\xf5")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 50:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 6
				decryptKey := 207
				for counter := 0; i != 8; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 6:
						i = 1
						data = append(data, 130)
					case 3:
						i = 5
						data = append(data, 81)
					case 4:
						i = 2
						data = append(data, 111)
					case 0:
						i = 4
						data = append(data, 88)
					case 7:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 8
					case 5:
						i = 9
						data = append(data, 160)
					case 9:
						data = append(data, 166)
						i = 0
					case 1:
						i = 3
						data = append(data, 156)
					case 2:
						i = 7
						data = append(data, 94)
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func nFhbU0YA91e() {
	switch get_byte() {
	case 121:
		regdjLjb6l()
	case 'Y':
		poUW6qCz()
	case 'B':
		vJE4pFJV1()
	case 'o':
		func() {
			fmt.Println(func() string {
				data := []byte("\x97\xde\x03\xed\x8c ! ")
				positions := [...]byte{1, 7, 0, 4, 7, 4, 6, 3, 0, 2}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 66
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func qm2w0l8FeeN() {
	switch get_byte() {
	case 102:
		fccp3C747DuH()
	case 'T':
		aIA4EyqKIn()
	case '0':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xd7\xe7\x10W\x17\xd0\xea\x18\xc7h\x8d?i\x106\xb8")
				data := make([]byte, 0, 9)
				data = append(data, fullData[1]+fullData[9], fullData[5]^fullData[15], fullData[13]+fullData[2], fullData[0]-fullData[12], fullData[7]+fullData[3], fullData[6]+fullData[14], fullData[8]-fullData[10], fullData[4]^fullData[11])
				return string(data)
			}())
		}()
	case 'k':
		yZ2FkRSD2V()
	default:
		hacker_get_out()
	}
}

func suzO006() {
	switch get_byte() {
	case 85:
		func() {
			println(func() string {
				fullData := []byte("\xa1\x94\xd8V\xfe<\x03&J\xa1\x9bX\xc7?&\xbc\xa6(;\x9c\x84\x9e+sLd\xf9\xa0\x9d\x13*\xac\x00\xac\xff\xf7\x87\xbc\\\n\ns\x01\xb3\xa88\xc5\xd0\x01\x1cs\x80\x1b\xe6'ka\xe4\xe5M\x94\xf9\x02\xb5\x1d\x1f0@\x94\xca\xd3eʾ\xb5\x8c\x95+")
				data := make([]byte, 0, 40)
				data = append(data, fullData[39]^fullData[23], fullData[13]+fullData[66], fullData[64]-fullData[44], fullData[27]+fullData[51], fullData[47]^fullData[37], fullData[40]+fullData[71], fullData[59]+fullData[14], fullData[50]-fullData[34], fullData[52]^fullData[18], fullData[60]+fullData[16], fullData[7]+fullData[6], fullData[70]-fullData[43], fullData[21]-fullData[30], fullData[65]-fullData[73], fullData[12]^fullData[31], fullData[4]^fullData[10], fullData[26]+fullData[54], fullData[53]^fullData[36], fullData[76]^fullData[74], fullData[55]+fullData[35], fullData[17]+fullData[8], fullData[25]^fullData[42], fullData[56]^fullData[32], fullData[11]+fullData[29], fullData[5]^fullData[49], fullData[63]+fullData[33], fullData[62]-fullData[68], fullData[28]^fullData[61], fullData[1]+fullData[75], fullData[48]+fullData[41], fullData[3]-fullData[57], fullData[2]+fullData[0], fullData[15]^fullData[19], fullData[22]-fullData[72], fullData[77]^fullData[24], fullData[9]-fullData[67], fullData[58]+fullData[20], fullData[45]-fullData[69], fullData[46]+fullData[38])
				return string(data)
			}())
		}()
	case 'G':
		fNCzOO32CM()
	case 98:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 8
					decryptKey := 70
					for counter := 0; i != 7; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 3:
							data = append(data, 10)
							i = 6
						case 8:
							i = 1
							data = append(data, "=\x03"...,
							)
						case 6:
							data = append(data, "]F?"...,
							)
							i = 0
						case 5:
							data = append(data, "\x1eP"...,
							)
							i = 4
						case 0:
							i = 7
							for y := range data {
								data[y] = data[y] ^ byte(decryptKey^y)
							}
						case 1:
							i = 2
							data = append(data, "\x06\x00"...,
							)
						case 4:
							i = 3
							data = append(data, 22)
						case 2:
							data = append(data, "S\x16"...,
							)
							i = 5
						}
					}
					return string(data)
				}())
			}()
		}()
	case 111:
		aP_VstWzF()
	default:
		hacker_get_out()
	}
}

func aBe9OLB() {
	switch get_byte() {
	case 'C':
		q5KLn6WKOi()
	case 79:
		dm1RA4epzHQi()
	case 111:
		func() {
			fmt.Println(func() string {
				fullData := []byte("B6~\x04\x18\xdbz\x8e>\xe6CtQ\x1fAs\xb2\x06\xf4\xcb/Y,\x9f(\"nW\x05Ѧ\xe5,\xbdlS^\x84\xaf9\xa7\x98\x1b$\x12H\xef\xf7\x90\xb6G\x8d\xdfV0J\x0f\\\x14\x11+}\x12d\x95\xf4S\x9c\xa2?Z\xd5\x06\x06C\xc4\"\xadqGi\\\xe7\xe6\xb0/\xf6k\x80\x8a\x85\xc0\x03\xcf7\xd4\xd2(\xd5s\xd04\x15\x8e\x87\xe5u\x8f\x8f\x93\x8bK\x00\x9dܠ\xac\xd1\x1dL0S\x90B\x1c\xa5U\xd5\xf8\xfb\xbf\x1c\xb8\xf8\x94\xb5\x1fIg\xe5 j")
				data := make([]byte, 0, 72)
				data = append(data, fullData[56]^fullData[14], fullData[1]-fullData[117], fullData[17]-fullData[122], fullData[112]-fullData[93], fullData[106]-fullData[92], fullData[66]-fullData[65], fullData[127]-fullData[103], fullData[77]-fullData[61], fullData[10]-fullData[71], fullData[67]+fullData[96], fullData[75]+fullData[113], fullData[46]^fullData[84], fullData[89]+fullData[33], fullData[115]-fullData[26], fullData[108]+fullData[82], fullData[30]+fullData[130], fullData[2]-fullData[136], fullData[59]+fullData[45], fullData[107]-fullData[27], fullData[94]^fullData[0], fullData[80]+fullData[86], fullData[6]+fullData[5], fullData[22]^fullData[81], fullData[4]+fullData[50], fullData[129]+fullData[121], fullData[95]-fullData[23], fullData[137]^fullData[69], fullData[114]+fullData[126], fullData[53]+fullData[131], fullData[7]-fullData[20], fullData[24]+fullData[13], fullData[139]+fullData[119], fullData[48]-fullData[76], fullData[118]-fullData[38], fullData[60]^fullData[55], fullData[19]+fullData[134], fullData[97]+fullData[43], fullData[18]+fullData[78], fullData[49]-fullData[123], fullData[16]-fullData[35], fullData[12]-fullData[128], fullData[105]^fullData[29], fullData[104]-fullData[62], fullData[58]^fullData[111], fullData[91]^fullData[37], fullData[141]-fullData[39], fullData[79]-fullData[100], fullData[57]+fullData[44], fullData[21]^fullData[73], fullData[25]^fullData[34], fullData[125]+fullData[109], fullData[110]-fullData[102], fullData[85]+fullData[28], fullData[98]^fullData[40], fullData[15]^fullData[32], fullData[140]^fullData[138], fullData[132]^fullData[51], fullData[54]+fullData[8], fullData[36]^fullData[120], fullData[116]+fullData[135], fullData[124]+fullData[74], fullData[9]^fullData[68], fullData[63]-fullData[101], fullData[133]-fullData[90], fullData[31]^fullData[88], fullData[72]^fullData[11], fullData[52]+fullData[64], fullData[47]-fullData[41], fullData[99]+fullData[83], fullData[3]+fullData[87], fullData[70]+fullData[42])
				return string(data)
			}())
		}()
	case 'd':
		bvMpcr4l_()
	default:
		hacker_get_out()
	}
}

func ug4Pqv9NHeo() {
	switch get_byte() {
	case 83:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 73:
		hHSAIHJn()
	case 53:
		dXRfbt9JOZp()
	case 82:
		cENPB8S()
	default:
		hacker_get_out()
	}
}

func _3TstejM() {
	switch get_byte() {
	case 'X':
		ghHJ7T8()
	case 100:
		t_UbY4KrVt97()
	case 'f':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 110:
		func() {
			fmt.Println(func() string {
				data := []byte("=\xb2 \xb0\x93\xb4:(")
				positions := [...]byte{4, 0, 3, 1, 4, 4, 4, 4, 5, 1}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 64
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func o5DeqxJlg() {
	switch get_byte() {
	case 66:
		func() {
			println(func() string {
				seed := byte(226)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(91)(172)(94)(103)(26)(55)(114)(229)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
				return string(data)
			}())
		}()
	case 113:
		fPZMkQUg()
	case 'n':
		fl1SogkxSF0()
	case '3':
		eLiFXc3Jxz()
	default:
		hacker_get_out()
	}
}

func dSI5Orqm() {
	switch get_byte() {
	case 'B':
		func() {
			fmt.Println(func() string {
				seed := byte(103)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(232)(25)(184)(78)(1)(177)(26)(238)
				return string(data)
			}())
		}()
	case '4':
		j6STEBhl()
	case '9':
		s7hOF96t()
	case 'P':
		s6THKh()
	default:
		hacker_get_out()
	}
}

func dkhaMQq7DBs() {
	switch get_byte() {
	case 81:
		tGdIEDQ8N0n()
	case 'I':
		func() {
			fmt.Println(func() string {
				fullData := []byte("s\x01A\x92$\xeccο\x9e\xd8\x12\x83\xf3\xe8u\xe4\x10M\xcah\x91.\xbe\x8c\xe2 C\x92iĝC\xac\x1a}\xb5M\xe4\x83̘P\x14ђP\x14\xf6\xbd*\xa3q\xab\xa0\x9f\x7f\x93\x03\x9e\x92\xeaV\xe3Nպ\x9f \xb3 {\x02\x8e\x17\x11\x10\xd9\x15\x9f6i\xe4d\x15\x12\xca+\xf8:\x18\xe2n\x91\xdfV\xcd\xc1\x9f\x8b\xa2\xb8B{:&^\x9d\xbe6|\xd1k\xf4y\xe8\xaeMm\\\xd2{Ϳ,\xc2`\xeb\x18\xa4\xdc \x1b\x8e\xb2y\xa5%0͕\xed")
				data := make([]byte, 0, 72)
				data = append(data, fullData[106]^fullData[76], fullData[89]-fullData[65], fullData[33]-fullData[80], fullData[28]+fullData[55], fullData[52]^fullData[58], fullData[97]^fullData[59], fullData[119]^fullData[132], fullData[30]^fullData[113], fullData[95]+fullData[90], fullData[41]-fullData[50], fullData[23]+fullData[51], fullData[48]+fullData[29], fullData[10]-fullData[21], fullData[57]+fullData[67], fullData[84]-fullData[79], fullData[14]-fullData[39], fullData[139]^fullData[3], fullData[134]^fullData[127], fullData[137]-fullData[141], fullData[25]-fullData[118], fullData[75]^fullData[64], fullData[81]+fullData[5], fullData[98]+fullData[111], fullData[16]+fullData[71], fullData[13]-fullData[136], fullData[9]^fullData[53], fullData[105]^fullData[46], fullData[110]^fullData[117], fullData[19]^fullData[101], fullData[140]+fullData[86], fullData[15]-fullData[22], fullData[123]-fullData[133], fullData[77]-fullData[112], fullData[103]^fullData[78], fullData[27]-fullData[91], fullData[61]^fullData[36], fullData[45]+fullData[66], fullData[38]-fullData[56], fullData[116]-fullData[104], fullData[73]+fullData[44], fullData[2]^fullData[128], fullData[109]-fullData[72], fullData[107]^fullData[115], fullData[102]-fullData[63], fullData[68]^fullData[83], fullData[138]^fullData[1], fullData[6]^fullData[43], fullData[7]-fullData[126], fullData[0]^fullData[124], fullData[24]+fullData[125], fullData[69]^fullData[99], fullData[129]+fullData[120], fullData[47]+fullData[131], fullData[62]^fullData[4], fullData[49]+fullData[100], fullData[121]+fullData[40], fullData[122]+fullData[20], fullData[32]+fullData[87], fullData[114]^fullData[74], fullData[94]^fullData[108], fullData[18]+fullData[85], fullData[26]-fullData[130], fullData[35]^fullData[37], fullData[12]-fullData[17], fullData[88]^fullData[31], fullData[11]-fullData[54], fullData[34]^fullData[92], fullData[60]+fullData[96], fullData[70]^fullData[135], fullData[8]-fullData[42], fullData[82]^fullData[93])
				return string(data)
			}())
		}()
	case 74:
		func() {
			fmt.Println(func() string {
				seed := byte(110)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(189)(147)(222)(10)(21)(219)(208)(142)
				return string(data)
			}())
		}()
	case 'k':
		uUFqBoLQKvEX()
	default:
		hacker_get_out()
	}
}

func bHE8Vv2pHo() {
	switch get_byte() {
	case 'L':
		zQdbUBPvS()
	case 113:
		i5Vwz3M()
	case 56:
		aPCU1BTYOj()
	case 'p':
		hPM4MaDf8()
	default:
		hacker_get_out()
	}
}

func fBQpxZhu() {
	switch get_byte() {
	case 122:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'J':
		func() {
			defer func() {
				println(func() string {
					seed := byte(250)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
					fnc(176)(223)(250)(247)(90)(176)(235)(79)(215)(225)(86)(246)(134)
					return string(data)
				}())
			}()
		}()
	case '8':
		iTNSEM3()
	case 'G':
		aBpeAR()
	default:
		hacker_get_out()
	}
}

func kpVErB() {
	switch get_byte() {
	case 57:
		b89sZtv()
	case 119:
		w1kFzd2v0()
	case 'G':
		func() {
			fmt.Println(func() string {
				seed := byte(231)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(104)(25)(184)(78)(1)(177)(26)(238)
				return string(data)
			}())
		}()
	case 'B':
		kuO2d0bCWuD()
	default:
		hacker_get_out()
	}
}

func cK8hzszz1() {
	switch get_byte() {
	case '3':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 9
				decryptKey := 63
				for counter := 0; i != 12; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 25:
						i = 12
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 26:
						data = append(data, "\x92ϔ"...,
						)
						i = 18
					case 22:
						i = 24
						data = append(data, "\xc1\xc0\xb2"...,
						)
					case 23:
						i = 0
						data = append(data, "\xeaֽ\xa6"...,
						)
					case 28:
						i = 1
						data = append(data, "\xe0\x9a"...,
						)
					case 5:
						data = append(data, "ȑ"...,
						)
						i = 2
					case 30:
						i = 20
						data = append(data, "\xb2\xee\xdf\xd4"...,
						)
					case 15:
						i = 27
						data = append(data, 194)
					case 14:
						i = 15
						data = append(data, 220)
					case 8:
						i = 26
						data = append(data, "\xbb\xa9"...,
						)
					case 16:
						i = 19
						data = append(data, "\x9d\xd2\xd1"...,
						)
					case 11:
						i = 10
						data = append(data, "\x9dw\xb7"...,
						)
					case 9:
						data = append(data, "\xba\xd0"...,
						)
						i = 28
					case 10:
						data = append(data, 160)
						i = 13
					case 2:
						data = append(data, 157)
						i = 7
					case 29:
						i = 21
						data = append(data, "\xab\xa8\x9c"...,
						)
					case 21:
						i = 11
						data = append(data, "\xb4¬"...,
						)
					case 17:
						i = 3
						data = append(data, "\x99\xdc\xca\xdb"...,
						)
					case 0:
						data = append(data, "\xba\xb9"...,
						)
						i = 29
					case 19:
						i = 17
						data = append(data, "\xc3\xc0\xaf"...,
						)
					case 18:
						data = append(data, "ѽ\xa4\x89"...,
						)
						i = 22
					case 4:
						i = 23
						data = append(data, "\xe8\xa2"...,
						)
					case 27:
						i = 4
						data = append(data, 168)
					case 20:
						i = 14
						data = append(data, 238)
					case 24:
						data = append(data, "\xb7\x9b\x86"...,
						)
						i = 5
					case 6:
						data = append(data, "\x9e\xa3"...,
						)
						i = 25
					case 13:
						data = append(data, "\x8cx\xbd\xb3"...,
						)
						i = 8
					case 3:
						data = append(data, 212)
						i = 30
					case 1:
						data = append(data, "\xe2ε"...,
						)
						i = 16
					case 7:
						data = append(data, "\x9e\x88\x89"...,
						)
						i = 6
					}
				}
				return string(data)
			}())
		}()
	case 'V':
		func() {
			println(func() string {
				fullData := []byte("\v\x1f\xe6*Q!ߍ\xceF\xe0\xafvH\xcd0\xa8\x00\xdf\xe3\xc3\xc0\xae\xb3\xbc7M \x17\xe3\x15]\xd3\u07b3UăgDot6\xf7\"\xb6?\xed\xf7\xe2x\xe9\xb9J\xe7,\xd32\x0ei\xbeH\x0eV\xaeq\xb3Ԃ\xf8`\x05YE9\xc26\xad")
				data := make([]byte, 0, 40)
				data = append(data, fullData[46]^fullData[9], fullData[56]^fullData[24], fullData[75]-fullData[26], fullData[28]-fullData[48], fullData[42]+fullData[76], fullData[17]+fullData[40], fullData[35]-fullData[49], fullData[13]-fullData[67], fullData[77]-fullData[7], fullData[58]+fullData[55], fullData[34]+fullData[12], fullData[54]+fullData[74], fullData[39]+fullData[15], fullData[64]+fullData[23], fullData[6]-fullData[41], fullData[68]+fullData[29], fullData[32]-fullData[66], fullData[63]^fullData[25], fullData[47]-fullData[14], fullData[61]-fullData[2], fullData[4]+fullData[5], fullData[71]^fullData[70], fullData[11]^fullData[8], fullData[31]+fullData[62], fullData[10]-fullData[21], fullData[69]+fullData[59], fullData[65]^fullData[1], fullData[22]-fullData[53], fullData[19]^fullData[20], fullData[43]^fullData[37], fullData[30]^fullData[38], fullData[72]^fullData[27], fullData[33]-fullData[60], fullData[52]+fullData[16], fullData[44]^fullData[73], fullData[51]+fullData[50], fullData[18]^fullData[45], fullData[57]-fullData[36], fullData[3]^fullData[0])
				return string(data)
			}())
		}()
	case 99:
		tcIcyj()
	case 100:
		gmcHF0z8()
	default:
		hacker_get_out()
	}
}

func hPM4MaDf8() {
	switch get_byte() {
	case 'O':
		func() {
			fmt.Println(func() string {
				data := []byte("Ne\x1e1r$A0n\x17a_\xef\v\x1ce\x8b\xfa8u_\x9dp\x8bN\xa8\xf4\xe6r\n<\x83\xe8n\x1b_Qh\x16_\xee4l_\x87\xf0\xe3n_h8\x8b4\xf4\xffG5\x1a\v\xf5?\xad\nCertᇨ\xcb")
				positions := [...]byte{67, 14, 14, 36, 63, 49, 42, 59, 32, 37, 54, 5, 30, 42, 58, 25, 54, 5, 5, 61, 54, 2, 67, 46, 60, 26, 23, 51, 12, 2, 6, 51, 16, 51, 44, 34, 62, 30, 9, 34, 2, 57, 21, 59, 31, 29, 58, 70, 12, 62, 27, 69, 13, 51, 38, 60, 29, 16, 5, 59, 23, 45, 37, 17, 40, 16, 21, 68, 61, 12, 9, 21, 46, 6, 53, 29}
				for i := 0; i < 76; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 249
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 81:
		knAymcCxJjn()
	case '4':
		bHE8Vv2pHo()
	case 'B':
		k7jL7A()
	default:
		hacker_get_out()
	}
}

func kgh13MaHqfJ() {
	switch get_byte() {
	case 'P':
		d6Mqp8oAOG1g()
	case 'g':
		z0ipsCdv()
	case 'T':
		func() {
			fmt.Println(func() string {
				data := []byte("+Ѻ1\xe1r.#n\x02\xd3\xf7Gjvf\xefr\nu_UzRG\x16\x981s(\x96\xa9vna\xdf\xfae~_\x97N2\xa3D\xc1Pc($82\x00r\xac\xfd5\xb3F(\x12\x15\xe9s\xcdI\x86\x93y\xa4R")
				positions := [...]byte{2, 61, 18, 9, 41, 57, 61, 36, 2, 58, 22, 36, 29, 48, 1, 10, 45, 35, 49, 30, 36, 52, 26, 46, 62, 43, 11, 16, 6, 55, 4, 7, 17, 65, 41, 25, 40, 70, 62, 62, 6, 43, 67, 38, 40, 59, 51, 30, 54, 66, 1, 36, 35, 24, 17, 15, 10, 11, 35, 42, 52, 68, 27, 17, 55, 13, 54, 23, 46, 51, 52, 60, 43, 55, 5, 47, 43, 9, 24, 25, 57, 28, 69, 49, 51, 64, 36, 61, 31, 18, 64, 27, 13, 0, 32, 58, 66, 18, 31, 16, 68, 28}
				for i := 0; i < 102; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 144
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 56:
		zrmNosIA()
	default:
		hacker_get_out()
	}
}

func plv7nO() {
	switch get_byte() {
	case 'd':
		zJFEHHW()
	case 'L':
		okgzG8M1NuXN()
	case 104:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case '0':
		func() {
			println(func() string {
				seed := byte(192)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(185)(246)(6)(171)(76)(3)(4)(1)(172)(26)(239)(247)(84)(237)(10)(250)(187)(65)(191)(66)(16)(243)(252)(10)(181)(65)(13)(246)(188)(84)(254)(7)(167)(65)(6)(250)(8)(5)(179)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func umeigYet() {
	switch get_byte() {
	case 55:
		a2ZhE_qto()
	case 'f':
		z1JSuX()
	case 114:
		func() {
			fmt.Println(func() string {
				key := []byte("I\x19\xedu\xe03#\xa6\xf1T\xca\xc1\x13\x17\xc9ܥ\x11\x9e\x02\x10\xbf\x1eg\xc3\xd9f\xaa\x19\xb2\x00\x88k\x9f\xfa\xe5T\x15l^\xf0Y\xa0\xf2\x94ӄ\xf1e\xffe\x03\x8a&zdy\xae]T\x9c\x00a\x13\x81\xdd\xf0Zٻ\xc7")
				data := []byte("\a|\x9bD\x92ld\x96\x9f:\xab\x9eT%\xbf\xb9\xfaH\xa6wO\xean8\x8d\xec\x10\x9bk\xedG\xb9\x05\xf1\x9b\xba\x18p\x18\x01\xa9mխ\xd0\xe2\xf3\x9f:\xb1]u\xbeT%#L\xc035\xc3DQ`䯄\x05\x80Բ")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 82:
		func() {
			println(func() string {
				key := []byte("Ҭ\x93\xd69\xee\xbeM\x94\xba\xccq@ \xe4\b\x93\x17\x11\xef7\xa94\x94\xb5\x96\xf2\xb9/\xa2\xfaJ\xaaP>\xb9H|\xee")
				data := []byte("\xa7\xc3\xe2J3\x81\xb5'\x8c\x80]\xaf4A\x87]\x8dJ\x0fs;\xbc-\xd7k\xcb|\xab\xf1\xd2x/v\x11)\xa8!\xf23")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func vtWFri6TNS() {
	switch get_byte() {
	case 84:
		q4M0OguGWGI()
	case 'P':
		il8cS9El()
	case 54:
		x6cCe7CJK4()
	case 72:
		fdUBaAP_Q()
	default:
		hacker_get_out()
	}
}

func z5jFM8u() {
	switch get_byte() {
	case 'B':
		func() {
			fmt.Println(func() string {
				key := []byte("\x9f\f\x05\x16\xbb)y-ro\u05f7\xc1\xa8 l\x98\x05Z\x8d\xf3H$`\xde\xc9\x03\x1a\xe6\xf2\xd1P\n\x8f\xb0\x11\b\x1b\xf6\rX\xf2v\x81\xa2s֣\x88\xaf\xdbO\x1b\x82uҐ\f\x83\xb3,\x870\xab\x85\xef\x14\x9b\xb2\xbf\xea")
				data := []byte("\xafYq\x1b\xb76\xce\x03\xfc\xff\x8a\xa8\x86\x8aV\xf9\xc7T\xde\xe8l\rL\xffpls\x17\x8cmv\xe1d߱NDJ~R\x01B\xffޢ\xbe\xa1\xcbן]'\x19\xf0\xeau\xa5b\xeb\xae3\xbd\x00\xc8\xe0\x83`ħ\xb0\x8b")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 105:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case '2':
		aeIZRV_o()
	case 'F':
		ph_iN1()
	default:
		hacker_get_out()
	}
}

func iAcLgVLdn6B() {
	switch get_byte() {
	case 101:
		dKwZLY44()
	case '7':
		g44h4LDlQ()
	case 120:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 28
				decryptKey := 21
				for counter := 0; i != 24; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 17:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 24
					case 5:
						data = append(data, 1)
						i = 6
					case 23:
						i = 19
						data = append(data, "5\x11S>"...,
						)
					case 14:
						i = 10
						data = append(data, "+p`"...,
						)
					case 10:
						i = 12
						data = append(data, "C>"...,
						)
					case 19:
						i = 4
						data = append(data, 28)
					case 13:
						data = append(data, "ZH"...,
						)
						i = 18
					case 3:
						i = 7
						data = append(data, "(bP"...,
						)
					case 20:
						i = 26
						data = append(data, "C76"...,
						)
					case 4:
						i = 15
						data = append(data, "\nQI"...,
						)
					case 9:
						i = 16
						data = append(data, "*\x16\t"...,
						)
					case 1:
						i = 21
						data = append(data, "0'"...,
						)
					case 16:
						data = append(data, " '"...,
						)
						i = 17
					case 8:
						i = 14
						data = append(data, "_^?"...,
						)
					case 15:
						data = append(data, "#\x13"...,
						)
						i = 2
					case 21:
						data = append(data, 13)
						i = 25
					case 26:
						i = 27
						data = append(data, "\x1c6"...,
						)
					case 7:
						data = append(data, "9#jk"...,
						)
						i = 8
					case 22:
						i = 13
						data = append(data, 32)
					case 6:
						data = append(data, ";<"...,
						)
						i = 1
					case 27:
						i = 23
						data = append(data, "F2"...,
						)
					case 11:
						i = 22
						data = append(data, ":\"d"...,
						)
					case 2:
						i = 29
						data = append(data, "\xfe=\xf43"...,
						)
					case 29:
						i = 5
						data = append(data, "!\n"...,
						)
					case 0:
						data = append(data, "?6RB"...,
						)
						i = 11
					case 18:
						data = append(data, "1\x1cB"...,
						)
						i = 20
					case 12:
						data = append(data, "\x1e\\"...,
						)
						i = 0
					case 28:
						i = 3
						data = append(data, "BZl"...,
						)
					case 25:
						i = 9
						data = append(data, "\xfa>\x19'"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 71:
		func() {
			fmt.Println(func() string {
				seed := byte(23)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(89)(21)(243)(73)(179)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func jhSNw8Nobby() {
	switch get_byte() {
	case 'P':
		fPZMkQUg()
	case 'q':
		func() {
			defer func() {
				println(func() string {
					key := []byte("\"\x03y\xe22G\xa5F\xf0\x03\x94\xbe\xb3")
					data := []byte("hv\n\x96\x12#\xcaf\x99w\xb4\x84\xf7")
					for i, b := range key {
						data[i] = data[i] ^ b
					}
					return string(data)
				}())
			}()
		}()
	case 'n':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 89:
		niW95u()
	default:
		hacker_get_out()
	}
}

func psbTAFt() {
	switch get_byte() {
	case 'v':
		j1dOYAhw()
	case 'K':
		fL3NFWZ73()
	case 119:
		wMVfAH()
	case 'U':
		o5pZLD()
	default:
		hacker_get_out()
	}
}

func yxbk4zXzz0NR() {
	switch get_byte() {
	case 'e':
		obFzhf()
	case 'k':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 8
				decryptKey := 237
				for counter := 0; i != 5; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 7:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 5
					case 3:
						data = append(data, 114)
						i = 2
					case 4:
						i = 1
						data = append(data, 38)
					case 6:
						data = append(data, 106)
						i = 0
					case 0:
						data = append(data, 35)
						i = 3
					case 9:
						data = append(data, 48)
						i = 7
					case 2:
						i = 4
						data = append(data, 116)
					case 1:
						i = 9
						data = append(data, 65)
					case 8:
						i = 6
						data = append(data, 80)
					}
				}
				return string(data)
			}())
		}()
	case 'L':
		g7nNO2()
	case '3':
		l012Jg()
	default:
		hacker_get_out()
	}
}

func e_GH0Wtxnn() {
	switch get_byte() {
	case 'j':
		func() {
			fmt.Println(func() string {
				fullData := []byte("j\xbe\x86.\x0eT\xe4\xcc\xd5{N\x13/\xa0\xde@")
				data := make([]byte, 0, 9)
				data = append(data, fullData[8]-fullData[2], fullData[9]-fullData[11], fullData[10]-fullData[3], fullData[4]-fullData[13], fullData[12]+fullData[15], fullData[7]+fullData[5], fullData[6]^fullData[14], fullData[0]+fullData[1])
				return string(data)
			}())
		}()
	case 50:
		toEJFz()
	case 'W':
		zVhMOr()
	case 77:
		at8TWKAS()
	default:
		hacker_get_out()
	}
}

func e5cc1ztLa() {
	switch get_byte() {
	case 49:
		e4JLsd()
	case 100:
		zdWm8tvs77x2()
	case 'S':
		cxDozRJ()
	case 'L':
		func() {
			fmt.Println(func() string {
				key := []byte("\xb2\xf7bI7\x95g\x9a")
				data := []byte("\xfd\x9fB'X\xb5]\xb2")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func vopQQ6A() {
	switch get_byte() {
	case 109:
		qm5hygApy()
	case 49:
		nu8cmxev()
	case 'K':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 57:
		fsKOlj6r4()
	default:
		hacker_get_out()
	}
}

func y9kX61svE7fl() {
	switch get_byte() {
	case 54:
		fJzfR9BEAdDe()
	case 69:
		tc4zIVb7()
	case 'g':
		func() {
			println(func() string {
				fullData := []byte("6\xd7\xc1\x82\xc9MhݷA\xc1\x1c\x1b)\xa7\xe8\xcfg\xd8\x1e\"\xa7\x91[\x81\xaf\x87\xa1wa\x06vߌ\xd3%\xe2\xe4\x8c\x06\xe5\xf5\x97\x1c\xb4;[\xa1\xe5ʕRA\r;\x96>u\x9b\xda[\x97\xac\xde\xed\x1d\xb2\x87\xaeW\r݇\xa1\x0f\xc1F\xee")
				data := make([]byte, 0, 40)
				data = append(data, fullData[46]+fullData[19], fullData[48]-fullData[31], fullData[13]-fullData[44], fullData[52]+fullData[32], fullData[66]^fullData[63], fullData[18]^fullData[8], fullData[36]^fullData[22], fullData[33]+fullData[15], fullData[75]-fullData[47], fullData[25]-fullData[57], fullData[54]+fullData[77], fullData[45]-fullData[12], fullData[34]^fullData[14], fullData[51]+fullData[74], fullData[11]^fullData[28], fullData[26]-fullData[20], fullData[9]^fullData[29], fullData[39]+fullData[60], fullData[2]-fullData[27], fullData[72]^fullData[40], fullData[55]^fullData[37], fullData[53]^fullData[6], fullData[17]-fullData[30], fullData[64]-fullData[3], fullData[76]+fullData[59], fullData[70]-fullData[62], fullData[41]^fullData[58], fullData[24]-fullData[65], fullData[10]-fullData[73], fullData[16]-fullData[23], fullData[35]+fullData[5], fullData[50]-fullData[43], fullData[21]-fullData[67], fullData[42]-fullData[0], fullData[4]^fullData[68], fullData[56]-fullData[71], fullData[7]+fullData[38], fullData[61]+fullData[1], fullData[49]+fullData[69])
				return string(data)
			}())
		}()
	case 105:
		func() {
			println(func() string {
				data := []byte("TouG\x1cos<ET)8^1YN\aa\a:;\xf2\x10kua\x1ed\x06f0yV%Aa\xf5\xf2!")
				positions := [...]byte{19, 26, 21, 7, 37, 12, 32, 20, 30, 9, 14, 20, 11, 28, 32, 36, 12, 3, 9, 4, 33, 12, 7, 0, 0, 19, 29, 28, 8, 13, 15, 8, 28, 34, 16, 18, 22, 19, 19, 8, 0, 14, 24, 12}
				for i := 0; i < 44; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 195
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func iV4_2lLSoIs() {
	switch get_byte() {
	case 115:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 28
				decryptKey := 116
				for counter := 0; i != 11; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 12:
						data = append(data, "\x95\x92l\xb0"...,
						)
						i = 29
					case 4:
						data = append(data, "\x80n["...,
						)
						i = 21
					case 31:
						data = append(data, 129)
						i = 10
					case 10:
						data = append(data, "m\xb6\xac"...,
						)
						i = 4
					case 22:
						data = append(data, "\xae\xc3"...,
						)
						i = 16
					case 15:
						data = append(data, "C\x87s"...,
						)
						i = 9
					case 30:
						i = 0
						data = append(data, "m^"...,
						)
					case 2:
						i = 22
						data = append(data, "Ǳ"...,
						)
					case 29:
						data = append(data, 153)
						i = 31
					case 6:
						i = 30
						data = append(data, 134)
					case 20:
						i = 25
						data = append(data, "\x9f\x9e\x94"...,
						)
					case 28:
						i = 15
						data = append(data, "_u\x89"...,
						)
					case 17:
						data = append(data, "\x99\xab"...,
						)
						i = 12
					case 16:
						data = append(data, 204)
						i = 19
					case 8:
						data = append(data, "\xa1\xb6\xc2"...,
						)
						i = 2
					case 7:
						data = append(data, 87)
						i = 24
					case 21:
						data = append(data, 152)
						i = 26
					case 18:
						i = 20
						data = append(data, "kV?"...,
						)
					case 26:
						i = 6
						data = append(data, "Y\x96"...,
						)
					case 25:
						data = append(data, "\x91\x81"...,
						)
						i = 17
					case 3:
						i = 1
						data = append(data, "\x86|y"...,
						)
					case 1:
						i = 23
						data = append(data, "dN\x95\x83"...,
						)
					case 0:
						i = 27
						data = append(data, 150)
					case 14:
						data = append(data, "\x8cp_"...,
						)
						i = 8
					case 27:
						data = append(data, "\x99\x8b"...,
						)
						i = 14
					case 23:
						data = append(data, "`Y;w"...,
						)
						i = 13
					case 24:
						data = append(data, "=\x81;\x7f"...,
						)
						i = 18
					case 9:
						data = append(data, "^F"...,
						)
						i = 5
					case 19:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 11
					case 5:
						data = append(data, 135)
						i = 3
					case 13:
						data = append(data, "dYwe"...,
						)
						i = 7
					}
				}
				return string(data)
			}())
		}()
	case 48:
		uICF8PWv()
	case 50:
		s6THKh()
	case '4':
		nN6V9a4t()
	default:
		hacker_get_out()
	}
}

func sifVMSf() {
	switch get_byte() {
	case 109:
		vedyjgnu33()
	case '1':
		szWhRX3n0Z1()
	case '2':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case '3':
		z8xWHTCR6P63()
	default:
		hacker_get_out()
	}
}

func eanKhHk5QEX8() {
	switch get_byte() {
	case 54:
		okUp8t5aWQ4()
	case 'C':
		m7Zp9FkF3()
	case 71:
		ebVkZrDz0F()
	case 'j':
		u_rL4ABvK3ZJ()
	default:
		hacker_get_out()
	}
}

func bdaPCDkEAD() {
	switch get_byte() {
	case 104:
		dMJQmG10F()
	case 106:
		b3pzcj()
	case 'P':
		fxkC4zSzQavz()
	case 't':
		func() {
			defer func() {
				println(func() string {
					key := []byte("6\x06!\x85\xd8O\xd0W\x12\x8b&σ")
					data := []byte("\x14oR\xefH\x15\x9f\xc9W\xe9\xfak\xc1")
					for i, b := range key {
						data[i] = data[i] + b
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func faYgRvwx() {
	switch get_byte() {
	case 'E':
		tN1Iso()
	case 100:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 53:
		qTnBpGx3()
	case 'V':
		dWUS7D()
	default:
		hacker_get_out()
	}
}

func wUKjZRjt0E() {
	switch get_byte() {
	case 'h':
		f1ue6Pe_q()
	case 'S':
		hq5elFu7TI()
	case 69:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'j':
		func() {
			defer func() {
				println(func() string {
					seed := byte(236)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
					fnc(54)(151)(44)(89)(94)(0)(11)(199)(215)(185)(30)(86)(182)
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func zJFEHHW() {
	switch get_byte() {
	case 103:
		func() {
			fmt.Println(func() string {
				data := []byte("aDv\xcfrϞun\x1e\xe3_\xf82v\x13\xd2Y8u_U`\xeaN\x13\xdc\xf5\xd2_\x12(\xb8nH_F\x16t\x19Y4\xe4_=\x00wn_\xc3Ʊ\x10\xb0575XnRE\xaf\xe5\xcfŲ\xf9mW(\xa2")
				positions := [...]byte{51, 9, 34, 1, 61, 3, 12, 7, 66, 12, 54, 5, 49, 50, 25, 66, 23, 55, 26, 22, 30, 55, 15, 36, 44, 67, 59, 53, 51, 57, 63, 15, 42, 31, 50, 9, 68, 70, 64, 60, 49, 67, 45, 16, 7, 59, 9, 0, 5, 54, 6, 62, 37, 9, 63, 15, 69, 39, 62, 44, 22, 25, 65, 54, 10, 64, 28, 52, 68, 39, 27, 32, 3, 69, 15, 15, 37, 61}
				for i := 0; i < 78; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 248
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case '3':
		plv7nO()
	case 'K':
		sGM1vuxE()
	case 49:
		g5dVHac2S()
	default:
		hacker_get_out()
	}
}

func xDTnWYTysLY() {
	switch get_byte() {
	case 'b':
		ivDttumlGDb()
	case 48:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("7\xbd,\x17\xef\xe2a\x88\x02\x8d-\xbf\x85\xa2\xa6\xcbar\x85\xef\xdfd\xcc\x15GR")
					data := make([]byte, 0, 14)
					data = append(data, fullData[1]+fullData[9], fullData[21]-fullData[4], fullData[2]+fullData[24], fullData[19]+fullData[12], fullData[11]+fullData[6], fullData[20]+fullData[18], fullData[14]-fullData[0], fullData[8]-fullData[5], fullData[13]^fullData[15], fullData[16]^fullData[23], fullData[25]^fullData[17], fullData[3]^fullData[10], fullData[22]-fullData[7])
					return string(data)
				}())
			}()
		}()
	case 111:
		iAWegw()
	case '9':
		uaWHajR()
	default:
		hacker_get_out()
	}
}

func tcIcyj() {
	switch get_byte() {
	case 54:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'y':
		z8xWHTCR6P63()
	case 'G':
		vedyjgnu33()
	case 'i':
		cK8hzszz1()
	default:
		hacker_get_out()
	}
}

func xYgaB1() {
	switch get_byte() {
	case 101:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case '7':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 2
				decryptKey := 192
				for counter := 0; i != 1; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 5:
						i = 9
						data = append(data, 102)
					case 9:
						i = 4
						data = append(data, 29)
					case 7:
						i = 6
						data = append(data, 51)
					case 3:
						i = 8
						data = append(data, 106)
					case 2:
						i = 5
						data = append(data, 78)
					case 0:
						i = 1
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 4:
						i = 3
						data = append(data, 106)
					case 8:
						data = append(data, 26)
						i = 7
					case 6:
						data = append(data, 32)
						i = 0
					}
				}
				return string(data)
			}())
		}()
	case 65:
		f3CHIT4drR()
	case 'g':
		hWzuSArGUFZM()
	default:
		hacker_get_out()
	}
}

func tjqafURIkr5() {
	switch get_byte() {
	case 'Q':
		axWoFTD8G()
	case '5':
		func() {
			defer func() {
				println(func() string {
					data := []byte("J\xaf\xbb\xa7 d\x8c\xab\x89tT\xe1\xea")
					positions := [...]byte{1, 7, 7, 1, 3, 11, 8, 10, 2, 12, 7, 6, 8, 1}
					for i := 0; i < 14; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 97
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
					}
					return string(data)
				}())
			}()
		}()
	case 106:
		mz8nneI()
	case 117:
		h0YSAxFt()
	default:
		hacker_get_out()
	}
}

func vKSHDzb() {
	switch get_byte() {
	case 54:
		func() {
			println(func() string {
				seed := byte(180)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(205)(238)(26)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
				return string(data)
			}())
		}()
	case 'J':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 1
					decryptKey := 117
					for counter := 0; i != 3; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 5:
							i = 2
							data = append(data, "@\x05\rC"...,
							)
						case 1:
							i = 5
							data = append(data, ".\x10\x15\x13"...,
							)
						case 0:
							i = 4
							data = append(data, "U,"...,
							)
						case 4:
							for y := range data {
								data[y] = data[y] ^ byte(decryptKey^y)
							}
							i = 3
						case 2:
							i = 0
							data = append(data, "\x05\x19N"...,
							)
						}
					}
					return string(data)
				}())
			}()
		}()
	case 80:
		ahyDVUGXaq7t()
	case 'i':
		ii5Oe8cxfOL()
	default:
		hacker_get_out()
	}
}

func xWyyCc0() {
	switch get_byte() {
	case 'A':
		nyKmee()
	case 'U':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'Z':
		ioLVho1()
	case 'c':
		eHpamS()
	default:
		hacker_get_out()
	}
}

func _t1dFax6W0HP() {
	switch get_byte() {
	case 72:
		hGmuzUPY()
	case 54:
		ylVv_m5EnL()
	case 'k':
		fxLCKpxq2xKx()
	case 'o':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func kwzFKU() {
	switch get_byte() {
	case 'Q':
		c5zA8hMqRR()
	case 83:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 4
					decryptKey := 10
					for counter := 0; i != 1; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 5:
							i = 1
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
						case 3:
							data = append(data, "y\"g"...,
							)
							i = 2
						case 0:
							data = append(data, 78)
							i = 5
						case 2:
							data = append(data, "o!w\x83"...,
							)
							i = 6
						case 4:
							i = 3
							data = append(data, "P|w"...,
							)
						case 6:
							i = 0
							data = append(data, ",G"...,
							)
						}
					}
					return string(data)
				}())
			}()
		}()
	case 'P':
		_5hZcYIeMvt()
	case '8':
		znCh9c7MO()
	default:
		hacker_get_out()
	}
}

func pgcTAMynQ() {
	switch get_byte() {
	case 83:
		kWWVBF_zXj()
	case 'a':
		komBJeZU()
	case 120:
		tnftcFyXd8m()
	case 108:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func n45gPQTqOH() {
	switch get_byte() {
	case 83:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 109:
		rNXwoP()
	case 67:
		aiNhmzMTFq49()
	case 75:
		func() {
			fmt.Println(func() string {
				data := []byte("S9,g\x99m\x86y")
				positions := [...]byte{4, 5, 0, 3, 4, 6, 7, 1, 5, 3, 5, 2}
				for i := 0; i < 12; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 227
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func nFnVyfUwL() {
	switch get_byte() {
	case 'w':
		iab04xG()
	case 'd':
		g6va3fqVM()
	case 103:
		jPjUlScHSQ()
	case 'i':
		func() {
			fmt.Println(func() string {
				data := []byte("Oh\xfb:\xf5\xa80\xc5")
				positions := [...]byte{2, 3, 7, 6, 2, 7, 5, 5, 4, 4}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 114
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func w8gl3oS() {
	switch get_byte() {
	case '0':
		qK5uuJl()
	case 'T':
		e1wBYxUOjhqR()
	case 101:
		func() {
			defer func() {
				println(func() string {
					data := []byte("\x10ysF)d\x12=iM 6|")
					positions := [...]byte{9, 7, 9, 12, 1, 11, 9, 0, 7, 0, 4, 3, 6, 3, 12, 6, 11, 1}
					for i := 0; i < 18; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 85
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
					}
					return string(data)
				}())
			}()
		}()
	case 52:
		oxFuEY1()
	default:
		hacker_get_out()
	}
}

func rX7fzHY() {
	switch get_byte() {
	case 'x':
		gdiUX0zuD()
	case '1':
		func() {
			fmt.Println(func() string {
				key := []byte("1r\xd2p\x06\xf9\xa1\x1c\xfe\x85\U0010d3f0\xef\xb6SY\x88GK\xa8\xa7E\x0eN\x00|\xfd>\x1e\xf4\xa6ŷ\x0fqV\x04\xe5\x80\xdb\xd4\x13\x82\x9b\xf8\xca\x13\xc3l\xfeyiIzQ7Â\xbb\x9e\x85\xa7p\xedˣ&\xf7|")
				data := []byte("\x7f\xd7H\xa1xX\xe8Ll\xf3U\xec\xd6\xe2e\x1b\xb2\xb2\xc0\xbc\xaa\xfd\x17\xa4\\\x83v\xado\x9de%\x143\x18n\xbd\xbbxD\xd9\x0fIr\xc6\xcco8r\x11\xa4t\xadۨ\xc1\x86\xa51\xe3\x1a\xe2\xb5\x1a\xd5_?\x02\x7ff\xf1")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 76:
		iaxRZeIscu()
	case 68:
		dmtpHof()
	default:
		hacker_get_out()
	}
}

func gshZbLj() {
	switch get_byte() {
	case 'q':
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xd4N\x9c9Op\x11\xad\x10\x16\xf0W\\")
					data := []byte("\x9e;\xefMo\x14~\x8dyb\xd0m\x18")
					for i, b := range key {
						data[i] = data[i] ^ b
					}
					return string(data)
				}())
			}()
		}()
	case 'Y':
		func() {
			println(func() string {
				data := []byte("y\x84\xd6\xe1lKsz+:\x050tak1\x14\x01\xbbb\x1ae@k\xc3\t\xa9\xa7 \xcc䳏\xe7\x890\x80ђ")
				positions := [...]byte{16, 20, 10, 11, 7, 10, 5, 32, 17, 25, 38, 31, 32, 3, 15, 25, 17, 25, 27, 37, 20, 17, 16, 30, 22, 31, 36, 35, 27, 26, 18, 35, 32, 33, 10, 27, 37, 1, 29, 11, 8, 2, 27, 37, 35, 34, 20, 24, 5, 3, 20, 22, 5, 5, 38, 35}
				for i := 0; i < 56; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 24
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 117:
		ggy_lUDPNlm()
	case 'j':
		dDc8bE()
	default:
		hacker_get_out()
	}
}

func wGjI9tzvKjdU() {
	switch get_byte() {
	case 54:
		nIZ7qTWBc()
	case '4':
		func() {
			fmt.Println(func() string {
				fullData := []byte("6\xf1#\xf6\xa0\xac\x1d\xd8\xf3\xdc\xf2\x87,z{\xa7L\v\xa81\x8e3\xe5i|\xb7;pn\\\x1eY;\x97\xaf\xc8\xdb\x03g\xcb\xfbe\x86L\xe0d\xea\x19\x8f\x01\xbck\xdb\xc6M\nxI\x1b\x1f\xcbη\xb9\x89\xe59\x9c殃G`\xf42\x8fk\xc8\vHZXQ\xa7\xb7\xb9\xbf\x97\t\xd9;\xa0AGTm\x98\x18\xa9\x06\x0e\a\xdb\x1ebM@B\x92\xad\xb7,\x80\x89B-\xc9-\x1aM&\x00a\xa9\xc8q\xe7K\x99'\xd8\t\xbb\xdcÄ7\aEm\xffr")
				data := make([]byte, 0, 72)
				data = append(data, fullData[101]-fullData[63], fullData[97]+fullData[119], fullData[82]-fullData[36], fullData[105]^fullData[24], fullData[75]-fullData[6], fullData[120]+fullData[66], fullData[136]^fullData[27], fullData[15]^fullData[87], fullData[52]-fullData[95], fullData[111]^fullData[107], fullData[71]+fullData[118], fullData[10]+fullData[139], fullData[67]^fullData[102], fullData[4]^fullData[108], fullData[2]-fullData[109], fullData[69]+fullData[84], fullData[104]-fullData[37], fullData[103]+fullData[90], fullData[39]^fullData[8], fullData[85]+fullData[50], fullData[18]+fullData[25], fullData[88]^fullData[29], fullData[14]^fullData[17], fullData[3]^fullData[98], fullData[100]^fullData[106], fullData[83]+fullData[20], fullData[112]-fullData[55], fullData[16]-fullData[58], fullData[123]+fullData[116], fullData[133]+fullData[70], fullData[28]+fullData[89], fullData[13]+fullData[62], fullData[41]^fullData[78], fullData[38]^fullData[131], fullData[61]^fullData[34], fullData[53]+fullData[128], fullData[73]+fullData[81], fullData[114]^fullData[129], fullData[21]+fullData[92], fullData[35]+fullData[33], fullData[31]+fullData[121], fullData[122]-fullData[115], fullData[1]^fullData[135], fullData[30]-fullData[86], fullData[140]+fullData[138], fullData[110]-fullData[42], fullData[43]^fullData[32], fullData[0]-fullData[124], fullData[45]^fullData[26], fullData[65]+fullData[23], fullData[125]^fullData[57], fullData[19]-fullData[132], fullData[94]+fullData[44], fullData[51]+fullData[137], fullData[72]-fullData[49], fullData[48]^fullData[77], fullData[141]^fullData[93], fullData[99]-fullData[96], fullData[113]+fullData[22], fullData[79]-fullData[126], fullData[68]-fullData[11], fullData[80]+fullData[46], fullData[40]-fullData[60], fullData[127]-fullData[7], fullData[9]+fullData[64], fullData[76]^fullData[47], fullData[91]-fullData[12], fullData[117]+fullData[74], fullData[56]-fullData[59], fullData[134]+fullData[5], fullData[54]-fullData[130])
				return string(data)
			}())
		}()
	case '0':
		cCizOO()
	case 'p':
		lhvk4zy()
	default:
		hacker_get_out()
	}
}

func ox2CSf() {
	switch get_byte() {
	case 101:
		n94xh9W2()
	case 't':
		func() {
			fmt.Println(func() string {
				data := []byte("!\xa3\xc31\xda-\xd5\x05n]$\x7fR\xb6\r\xe2\xda\x12]\xa9\x1aUp\xa1\a5\xde\x06r\xda@\xfb\x14\x8e\xdb\xd9G\a\x9d`Ř2\xab\xda\xd0\n\xd7\xe8\x9dIO\x11\x13_\xacS_8a\x95D\xceserv_Y\xf9\xcc")
				positions := [...]byte{50, 70, 23, 58, 16, 43, 13, 12, 19, 38, 42, 1, 69, 39, 45, 53, 10, 66, 62, 43, 17, 55, 35, 20, 0, 40, 53, 56, 6, 9, 44, 31, 17, 19, 2, 30, 9, 41, 24, 49, 11, 52, 13, 14, 58, 1, 60, 0, 7, 69, 12, 27, 11, 51, 37, 55, 56, 9, 38, 24, 1, 5, 33, 30, 46, 36, 70, 57, 37, 11, 15, 48, 29, 70, 19, 46, 47, 17, 51, 30, 34, 6, 34, 11, 32, 37, 31, 26, 19, 20, 58, 18, 0, 42, 4, 43, 29, 52, 10, 27, 38, 16, 16, 58}
				for i := 0; i < 104; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 248
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 70:
		iuVPUBr()
	case 'g':
		iSfCSfCa()
	default:
		hacker_get_out()
	}
}

func yzlzPfW8ts() {
	switch get_byte() {
	case 113:
		rh4LdmmDv5Vc()
	case 'r':
		func() {
			defer func() {
				println(func() string {
					data := []byte("Ju{trkO.&r yi")
					positions := [...]byte{9, 7, 8, 7, 9, 12, 5, 9, 2, 11, 9, 11, 6, 4, 4, 11, 4, 12}
					for i := 0; i < 18; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 245
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
					}
					return string(data)
				}())
			}()
		}()
	case 56:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'K':
		uXQNBr()
	default:
		hacker_get_out()
	}
}

func bcC0_2W_() {
	switch get_byte() {
	case 73:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 9
				decryptKey := 23
				for counter := 0; i != 10; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 2:
						i = 0
						data = append(data, "\x1d\x18\x1f\x10"...,
						)
					case 7:
						i = 16
						data = append(data, 41)
					case 14:
						data = append(data, 46)
						i = 11
					case 12:
						data = append(data, "*~"...,
						)
						i = 4
					case 16:
						data = append(data, "\"a"...,
						)
						i = 15
					case 9:
						i = 12
						data = append(data, "$3"...,
						)
					case 13:
						i = 3
						data = append(data, "v%1"...,
						)
					case 4:
						i = 8
						data = append(data, 53)
					case 18:
						i = 1
						data = append(data, 90)
					case 6:
						i = 5
						data = append(data, "o,;-"...,
						)
					case 0:
						data = append(data, 22)
						i = 18
					case 11:
						i = 13
						data = append(data, "un~"...,
						)
					case 8:
						data = append(data, "7("...,
						)
						i = 14
					case 19:
						data = append(data, 45)
						i = 6
					case 5:
						i = 7
						data = append(data, "*!e%"...,
						)
					case 3:
						i = 19
						data = append(data, "87m"...,
						)
					case 17:
						i = 2
						data = append(data, 93)
					case 15:
						i = 17
						data = append(data, "41;"...,
						)
					case 1:
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
						i = 10
					}
				}
				return string(data)
			}())
		}()
	case 114:
		f1ue6Pe_q()
	case 'j':
		uMwJy7S()
	case 111:
		vtxYplTHEx()
	default:
		hacker_get_out()
	}
}

func cdS6pwezVpI() {
	switch get_byte() {
	case 101:
		fYUko5BAnooA()
	case 57:
		zzvS9cJk()
	case 107:
		zZG4taZRQU4_()
	case 71:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func mOJlv36LNKRK() {
	switch get_byte() {
	case 52:
		dydbUzKP5d()
	case 120:
		l8AcYz0ahwyg()
	case '6':
		pAOqqTts()
	case 55:
		v4VfUDJQ()
	default:
		hacker_get_out()
	}
}

func qdFeGqgzi18() {
	switch get_byte() {
	case 48:
		wcnvA3()
	case 90:
		hGzpcURHY5()
	case '4':
		mvpW1n0E()
	case 's':
		ovpFKgohqI()
	default:
		hacker_get_out()
	}
}

func mVJ0RBQ3() {
	switch get_byte() {
	case '5':
		gsmkaP77()
	case 68:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'a':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 112:
		gRMSu7z6s2Vp()
	default:
		hacker_get_out()
	}
}

func ggy_lUDPNlm() {
	switch get_byte() {
	case 73:
		zWRE8mxGL0_E()
	case 'B':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 26
				decryptKey := 43
				for counter := 0; i != 1; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 5:
						data = append(data, "!^#`"...,
						)
						i = 11
					case 31:
						data = append(data, 61)
						i = 2
					case 15:
						i = 24
						data = append(data, 113)
					case 25:
						i = 28
						data = append(data, 98)
					case 4:
						data = append(data, "Kc"...,
						)
						i = 15
					case 11:
						data = append(data, "L3\x18"...,
						)
						i = 7
					case 21:
						data = append(data, "2/"...,
						)
						i = 33
					case 29:
						i = 3
						data = append(data, 17)
					case 16:
						data = append(data, 241)
						i = 12
					case 32:
						i = 14
						data = append(data, "9*#"...,
						)
					case 30:
						i = 5
						data = append(data, 56)
					case 14:
						i = 31
						data = append(data, 1)
					case 26:
						data = append(data, ")?"...,
						)
						i = 9
					case 22:
						data = append(data, "W\x00\f"...,
						)
						i = 27
					case 27:
						i = 6
						data = append(data, 13)
					case 19:
						data = append(data, "Q=$"...,
						)
						i = 10
					case 28:
						i = 30
						data = append(data, 74)
					case 2:
						i = 29
						data = append(data, ".#=+"...,
						)
					case 23:
						i = 25
						data = append(data, ";'l"...,
						)
					case 33:
						data = append(data, "\x1e\bK"...,
						)
						i = 32
					case 20:
						data = append(data, "L&fO"...,
						)
						i = 23
					case 10:
						i = 21
						data = append(data, "\fA@"...,
						)
					case 6:
						data = append(data, 247)
						i = 8
					case 8:
						i = 13
						data = append(data, "\xf8\r\x12"...,
						)
					case 3:
						i = 16
						data = append(data, "\xf77"...,
						)
					case 24:
						i = 20
						data = append(data, 91)
					case 7:
						i = 18
						data = append(data, "PO"...,
						)
					case 13:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 1
					case 0:
						i = 17
						data = append(data, "\f\xf5i"...,
						)
					case 12:
						data = append(data, "9%"...,
						)
						i = 0
					case 18:
						i = 22
						data = append(data, "AF*\x15"...,
						)
					case 17:
						i = 4
						data = append(data, "hZW"...,
						)
					case 9:
						data = append(data, "O\t"...,
						)
						i = 19
					}
				}
				return string(data)
			}())
		}()
	case 72:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 112:
		gshZbLj()
	default:
		hacker_get_out()
	}
}

func uFwCPIHVSXi() {
	switch get_byte() {
	case 83:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 100:
		func() {
			println(func() string {
				seed := byte(226)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(151)(246)(6)(171)(76)(3)(4)(1)(172)(26)(239)(247)(84)(237)(10)(250)(187)(65)(191)(66)(16)(243)(252)(10)(181)(65)(13)(246)(188)(84)(254)(7)(167)(65)(6)(250)(8)(5)(179)
				return string(data)
			}())
		}()
	case 103:
		fFCx633QZg()
	case 120:
		cjqiizK2ydo()
	default:
		hacker_get_out()
	}
}

func oqspimeb0Z() {
	switch get_byte() {
	case 77:
		dvXI6p()
	case 'L':
		func() {
			defer func() {
				println(func() string {
					data := []byte("*\xf1\xddtW\xc9\xe1 \xeat\xe9TD")
					positions := [...]byte{10, 4, 1, 11, 1, 10, 8, 5, 5, 1, 6, 10, 4, 2, 8, 0, 6, 5}
					for i := 0; i < 18; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 171
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'V':
		tVrn2_t()
	case 'h':
		func() {
			defer func() {
				println(func() string {
					seed := byte(247)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
					fnc(83)(43)(254)(1)(172)(68)(11)(177)(73)(11)(172)(26)(10)
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func vzzZ5SlT2poX() {
	switch get_byte() {
	case '0':
		nfzoerWu()
	case 113:
		zXqmzw()
	case 'c':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 4
					decryptKey := 126
					for counter := 0; i != 3; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 2:
							i = 3
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
						case 0:
							i = 6
							data = append(data, "\xe7\xe4\xe4\x97"...,
							)
						case 5:
							data = append(data, "\xe4\ue672"...,
							)
							i = 1
						case 4:
							data = append(data, 189)
							i = 0
						case 1:
							i = 2
							data = append(data, 195)
						case 6:
							data = append(data, "\xda\xe4\x94"...,
							)
							i = 5
						}
					}
					return string(data)
				}())
			}()
		}()
	case 'p':
		func() {
			fmt.Println(func() string {
				key := []byte("8\x98j\xe3:P\xb0\xa4\x98\x91\x8cA\xf0\xba1NX}\x1e\xdb#\xd22|B\xdcF\xb1\x8b`>\xdb\xefB\x84\xd5\"\xc1g\xc6F\x8a[\xc2\xf4\xe5KK)*_\u05f6\xc0\xed\xa7\x8d\xf6%\xd0sQq\xb2\xd7u\x0eRt\xd3o")
				data := []byte("v\xfd\x1c\xd2H\x0f\xf7\x94\xf6\xff\xed\x1e\xb7\x88G+\a$&\xae|\x87B#\f\xe90\x80\xf9?y\xea\x81,\xe5\x8an\xa4\x13\x99\x1f\xbe.\x9d\xb0\xd4<%vdg\xa1\x82\xb2\xb2ธK\xb1,\x15A\xc1\xb2\az\r-\xbc\x1a")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func rh4LdmmDv5Vc() {
	switch get_byte() {
	case 'l':
		dXCyES()
	case 'q':
		yzlzPfW8ts()
	case 'K':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 3
				decryptKey := 178
				for counter := 0; i != 9; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 4:
						data = append(data, 219)
						i = 8
					case 8:
						i = 1
						data = append(data, 242)
					case 5:
						i = 0
						data = append(data, 39)
					case 2:
						data = append(data, 43)
						i = 7
					case 0:
						data = append(data, 220)
						i = 2
					case 1:
						data = append(data, 225)
						i = 6
					case 6:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 9
					case 7:
						data = append(data, 41)
						i = 4
					case 3:
						i = 5
						data = append(data, 13)
					}
				}
				return string(data)
			}())
		}()
	case 112:
		a4uyTO()
	default:
		hacker_get_out()
	}
}

func qR9xlSYk() {
	switch get_byte() {
	case 118:
		s6E8uz()
	case 'h':
		n3KwMb()
	case '0':
		bxxuHhij3()
	case 102:
		func() {
			fmt.Println(func() string {
				key := []byte("\xe6f? '\x90\x92\xd1")
				data := []byte("\xa9\x0e\x1fNH\xb0\xa8\xf9")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func iCjrpwhh() {
	switch get_byte() {
	case 'S':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 1
				decryptKey := 77
				for counter := 0; i != 16; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 17:
						data = append(data, "\x1f\r"...,
						)
						i = 14
					case 3:
						i = 2
						data = append(data, "+3\xa7\xe9"...,
						)
					case 18:
						data = append(data, 15)
						i = 12
					case 1:
						i = 18
						data = append(data, " \x17\x1a\xc6"...,
						)
					case 15:
						i = 9
						data = append(data, "\xf2\xa2"...,
						)
					case 9:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 16
					case 4:
						i = 3
						data = append(data, 48)
					case 6:
						data = append(data, 37)
						i = 11
					case 8:
						i = 0
						data = append(data, 43)
					case 5:
						i = 6
						data = append(data, "\x19\xd5\x18"...,
						)
					case 11:
						i = 7
						data = append(data, "\x19\x12\x1d\xdf"...,
						)
					case 13:
						data = append(data, "\xea\xd6\xce"...,
						)
						i = 17
					case 7:
						data = append(data, 33)
						i = 8
					case 0:
						data = append(data, "\"\xdb"...,
						)
						i = 4
					case 14:
						data = append(data, "\x14\x0f"...,
						)
						i = 10
					case 10:
						data = append(data, 215)
						i = 5
					case 2:
						i = 15
						data = append(data, "\xec\xe7\xec"...,
						)
					case 12:
						data = append(data, "\x13\x14\x16\xcf"...,
						)
						i = 13
					}
				}
				return string(data)
			}())
		}()
	case 'M':
		znNlUx()
	case 99:
		joJDl2l()
	case 'V':
		tIbSSDONIvz2()
	default:
		hacker_get_out()
	}
}

func dDc8bE() {
	switch get_byte() {
	case 49:
		func() {
			println(func() string {
				data := []byte("ӣx\r\xc1\xc8\xc0t\xb4\xb1) \x18\r\xe1\xcc a\xc0b\xc8+\xc6k \xe0\xb9\xd2\xc1\xc1r\xbf a\xeb'in!")
				positions := [...]byte{8, 21, 29, 4, 1, 13, 15, 34, 6, 35, 4, 18, 27, 31, 3, 2, 4, 8, 20, 1, 9, 15, 18, 18, 6, 12, 26, 22, 3, 3, 25, 2, 6, 5, 3, 31, 27, 28, 18, 4, 0, 14}
				for i := 0; i < 42; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 50
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 51:
		func() {
			println(func() string {
				fullData := []byte("X\x05\xff1\xaa\xa1+\x95\xd4+t\x11\xe8\x02g(\x95\xb3\xbb\xd9\xcb0\x85\xf1Go\xc2G\xde\xf5x\x85\xf5\xb9\xbb\x86\x81sm\xb1\xfa\xee\xfed\xbf\x9bj0ҭ\x9c\xdc\x1cl\x96X\xd1,\x8c\xf1\\S\xfb\xbd\xee\n\x8b\x91\xe7\xa3\xeb%\xf4\xe3֙T\x84")
				data := make([]byte, 0, 40)
				data = append(data, fullData[42]-fullData[22], fullData[7]^fullData[40], fullData[5]-fullData[57], fullData[30]-fullData[0], fullData[32]^fullData[75], fullData[36]^fullData[64], fullData[43]-fullData[59], fullData[60]-fullData[12], fullData[49]+fullData[37], fullData[47]^fullData[65], fullData[13]^fullData[6], fullData[19]+fullData[27], fullData[2]^fullData[66], fullData[68]-fullData[35], fullData[54]-fullData[9], fullData[46]-fullData[1], fullData[45]^fullData[34], fullData[17]^fullData[48], fullData[10]-fullData[76], fullData[61]-fullData[23], fullData[41]^fullData[50], fullData[67]+fullData[8], fullData[72]+fullData[38], fullData[74]+fullData[16], fullData[39]+fullData[25], fullData[53]+fullData[29], fullData[31]^fullData[70], fullData[58]-fullData[15], fullData[33]+fullData[14], fullData[55]+fullData[52], fullData[69]-fullData[3], fullData[26]^fullData[18], fullData[62]+fullData[71], fullData[51]^fullData[63], fullData[77]+fullData[73], fullData[4]^fullData[20], fullData[24]-fullData[28], fullData[56]^fullData[44], fullData[21]^fullData[11])
				return string(data)
			}())
		}()
	case 'p':
		gshZbLj()
	case 69:
		jDEbvqA()
	default:
		hacker_get_out()
	}
}

func hLTST3foi() {
	switch get_byte() {
	case 'y':
		jLzHnn9()
	case 'E':
		j8BaYu()
	case 'x':
		aNFpxWAF()
	case '6':
		func() {
			defer func() {
				println(func() string {
					seed := byte(118)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
					fnc(192)(171)(84)(169)(254)(64)(139)(199)(215)(185)(30)(86)(182)
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func rvCGaQMt9_L1() {
	switch get_byte() {
	case 117:
		mcEvJpPfv()
	case 109:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 57:
		eHgNe51S4C2n()
	case 51:
		hLIwfO()
	default:
		hacker_get_out()
	}
}

func wcoNulfBpOX() {
	switch get_byte() {
	case 84:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xb7\xdf\\\xc0\xb8\xd8ϯ\xa7\xa7\xaef\xa0\x9c\xd3y")
				data := make([]byte, 0, 9)
				data = append(data, fullData[12]+fullData[7], fullData[6]^fullData[9], fullData[8]+fullData[15], fullData[10]^fullData[3], fullData[13]+fullData[14], fullData[5]-fullData[4], fullData[2]^fullData[11], fullData[1]-fullData[0])
				return string(data)
			}())
		}()
	case '8':
		zy1IzaTb()
	case 68:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("w\x87\xbeЪv%A\x17\x1d3\xa2\rg.W\xa9\xe6\xfb2:j\xa0\x1fI\xc4")
					data := make([]byte, 0, 14)
					data = append(data, fullData[10]+fullData[8], fullData[23]-fullData[4], fullData[20]^fullData[24], fullData[19]-fullData[2], fullData[1]-fullData[13], fullData[22]^fullData[25], fullData[7]^fullData[14], fullData[6]+fullData[18], fullData[5]-fullData[12], fullData[15]+fullData[9], fullData[16]+fullData[0], fullData[21]+fullData[3], fullData[11]^fullData[17])
					return string(data)
				}())
			}()
		}()
	case 89:
		func() {
			println(func() string {
				fullData := []byte("̼\xb5Fm\a\xe4)\xea\xcf\\w\xbd\xa6(\xfc\x127\xa5e\xa4\x02f|\x97\xbb,\x90Q\xd9f\xb9\xca\x00\x9d؍\xbf\xa2\xf7`\xf4e\xc5q\\؎\x1c\x18?E\xb0}o\xcb+k\x02\xb1%#\xec\x04>y\xdb\xf8e\xf8\a\xa3\b%\xech\fF")
				data := make([]byte, 0, 40)
				data = append(data, fullData[42]-fullData[74], fullData[22]-fullData[39], fullData[11]^fullData[58], fullData[8]^fullData[32], fullData[0]-fullData[40], fullData[7]^fullData[3], fullData[21]^fullData[44], fullData[28]+fullData[61], fullData[71]+fullData[53], fullData[64]-fullData[63], fullData[77]^fullData[54], fullData[67]-fullData[35], fullData[14]^fullData[10], fullData[75]-fullData[5], fullData[20]^fullData[9], fullData[33]^fullData[19], fullData[2]+fullData[57], fullData[15]^fullData[34], fullData[26]+fullData[41], fullData[55]+fullData[24], fullData[17]-fullData[43], fullData[65]^fullData[48], fullData[38]+fullData[37], fullData[27]-fullData[73], fullData[69]-fullData[46], fullData[70]-fullData[13], fullData[51]^fullData[56], fullData[50]+fullData[60], fullData[72]+fullData[49], fullData[29]-fullData[68], fullData[6]+fullData[47], fullData[1]+fullData[12], fullData[23]^fullData[45], fullData[16]-fullData[59], fullData[76]-fullData[18], fullData[62]^fullData[36], fullData[31]+fullData[52], fullData[66]-fullData[4], fullData[30]+fullData[25])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func jLzHnn9() {
	switch get_byte() {
	case 115:
		func() {
			fmt.Println(func() string {
				seed := byte(139)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(196)(25)(184)(78)(1)(177)(26)(238)
				return string(data)
			}())
		}()
	case 53:
		hLTST3foi()
	case 'M':
		_xPTIujBx0()
	case 'a':
		func() {
			fmt.Println(func() string {
				key := []byte("j\n\xd8\xd8:\x9c@8")
				data := []byte("\xe5^H\x965\x84\xfa\xf0")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func fCsRmdb() {
	switch get_byte() {
	case 52:
		i_QiMv9m()
	case 85:
		_pAWsFGl0I()
	case 55:
		yjesoZG89lSp()
	case 'G':
		func() {
			defer func() {
				println(func() string {
					data := []byte("-u\x1f\b ~o\x11Wt,\x06L")
					positions := [...]byte{7, 7, 0, 2, 5, 7, 5, 0, 12, 10, 0, 10, 3, 5, 8, 7, 3, 11}
					for i := 0; i < 18; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 90
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func g95sMp5a() {
	switch get_byte() {
	case 'S':
		func() {
			fmt.Println(func() string {
				data := []byte("\t2\x85\x80r_AQSga\"\x002vz\"\x13Lv\xae\x98p%*bv{\v\xe5G1>N\xb2S\xc8Jv_V4\xaeP\x80awn\xa5\xdf~\x1f4r_G51j\xf7B\xd50s\xf8\xd9t\xe6\r\xc6u")
				positions := [...]byte{3, 48, 21, 29, 3, 40, 9, 43, 37, 24, 1, 49, 8, 43, 15, 9, 1, 21, 38, 34, 27, 34, 29, 21, 17, 58, 25, 36, 44, 2, 65, 42, 68, 49, 34, 1, 34, 0, 33, 6, 45, 37, 19, 50, 42, 43, 69, 51, 51, 44, 23, 37, 67, 61, 28, 59, 25, 64, 67, 15, 40, 36, 32, 23, 34, 24, 24, 43, 50, 42, 67, 20, 44, 65, 59, 35, 64, 21, 12, 50, 24, 67, 36, 57, 45, 28, 11, 7, 37, 28, 60, 43, 18, 8, 16, 35, 33, 9, 18, 58}
				for i := 0; i < 100; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 172
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case '2':
		func() {
			fmt.Println(func() string {
				seed := byte(13)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(67)(53)(243)(73)(179)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	case 'H':
		ijkFFdUH03IH()
	case 73:
		sHOICIxBo()
	default:
		hacker_get_out()
	}
}

func iNUyBLXTa() {
	switch get_byte() {
	case 'F':
		faN8Vq()
	case 'Z':
		nIZ7qTWBc()
	case 76:
		jFJdks()
	case 101:
		jEkqCp_ay()
	default:
		hacker_get_out()
	}
}

func i7ZIyMza8nb() {
	switch get_byte() {
	case 'I':
		huxOzMHYYHD()
	case 's':
		nLrcFt9SRyC()
	case 113:
		k_MUD3HXo_()
	case 119:
		func() {
			println(func() string {
				fullData := []byte("\xf6\\\xd4\xc6~x]u\xeb\x00\r5GD\v\xac\x06\xb8\xf9/\xf1Ό\x17\xb6\x98\xcae\xf34\xa8Ѩ\x1e\xb7\xb4b(\x81\xc2\xefCxm\xaa\xed\xb3U\xb2\"\xad\x84\xec\xebƟr\xa5\x14pi\x8f\x16\x15\xed\xaf[N֝~\xe7\x18z\x13h\v\xb8")
				data := make([]byte, 0, 40)
				data = append(data, fullData[2]^fullData[50], fullData[36]-fullData[28], fullData[6]+fullData[72], fullData[15]-fullData[22], fullData[44]^fullData[3], fullData[23]^fullData[5], fullData[55]^fullData[52], fullData[37]-fullData[35], fullData[42]+fullData[32], fullData[4]^fullData[13], fullData[30]+fullData[38], fullData[76]+fullData[63], fullData[24]^fullData[39], fullData[54]-fullData[27], fullData[45]+fullData[70], fullData[19]-fullData[26], fullData[77]-fullData[25], fullData[59]+fullData[20], fullData[29]-fullData[58], fullData[1]+fullData[16], fullData[40]^fullData[69], fullData[8]+fullData[73], fullData[75]+fullData[18], fullData[33]^fullData[7], fullData[14]-fullData[53], fullData[48]+fullData[65], fullData[11]^fullData[66], fullData[67]+fullData[62], fullData[74]+fullData[10], fullData[31]^fullData[57], fullData[56]-fullData[9], fullData[12]-fullData[21], fullData[46]+fullData[43], fullData[49]^fullData[41], fullData[0]-fullData[61], fullData[68]^fullData[34], fullData[51]^fullData[64], fullData[47]-fullData[71], fullData[17]+fullData[60])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func s7hOF96t() {
	switch get_byte() {
	case '1':
		rA7PmJ5m9zlP()
	case 71:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("U\xfc\xbf\xc8\xfb2\x84\xbe뼷\r\xc9z\xf24\xb1u\a\x12x-\xcaY\xd39")
					data := make([]byte, 0, 14)
					data = append(data, fullData[16]^fullData[4], fullData[15]-fullData[2], fullData[13]-fullData[18], fullData[3]^fullData[9], fullData[21]-fullData[11], fullData[10]^fullData[24], fullData[25]-fullData[22], fullData[19]-fullData[14], fullData[5]-fullData[12], fullData[1]+fullData[20], fullData[17]^fullData[0], fullData[7]^fullData[6], fullData[8]+fullData[23])
					return string(data)
				}())
			}()
		}()
	case 112:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 67:
		dSI5Orqm()
	default:
		hacker_get_out()
	}
}

func yiYh4aq5T() {
	switch get_byte() {
	case 'o':
		hfUXBzDFbe()
	case 88:
		v6r3Fj2lms()
	case 101:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x14\x8c\xb9\xea1.\x96\x98Uo\xbdރ\xe2F)\xc1\x91t8\xe9\xd0\xed\x85\xc5KP\xdb\x1b)߇\xda]\x05$Y<'\xbe\v\x82\xb0%q\x14,\x9c\xb5\x92;\x83\x86C\xf5e·C\xb2\x00\x1f\xf3r5\xf1W\f\xa4\xbdՅ\x12\x18\x93\x7f\x0e\xb29\xc0\x9f6r\\\x9cm\xb8mCK\n{\xbd:N\xdf\xed܍ۅf\x1bGWտ\x84\tS\x9e&\x9d\x02\x0f}B\x0e\xa2\f\t\xa0\x85mj\xbd\xff\xfc\xae\x88\x0f6RͰ\x18\xdej\xe1\xf9\xab\x03")
				data := make([]byte, 0, 72)
				data = append(data, fullData[131]+fullData[135], fullData[14]+fullData[61], fullData[106]+fullData[57], fullData[12]-fullData[132], fullData[60]^fullData[82], fullData[51]+fullData[97], fullData[91]^fullData[37], fullData[101]-fullData[81], fullData[53]-fullData[70], fullData[24]^fullData[140], fullData[1]^fullData[22], fullData[126]^fullData[121], fullData[34]-fullData[39], fullData[27]+fullData[104], fullData[123]+fullData[108], fullData[16]^fullData[68], fullData[119]+fullData[109], fullData[136]-fullData[122], fullData[118]-fullData[137], fullData[129]+fullData[96], fullData[64]^fullData[124], fullData[76]+fullData[103], fullData[100]^fullData[54], fullData[7]-fullData[78], fullData[40]-fullData[69], fullData[26]^fullData[55], fullData[139]+fullData[115], fullData[32]+fullData[66], fullData[79]+fullData[77], fullData[73]-fullData[2], fullData[48]+fullData[49], fullData[95]-fullData[128], fullData[74]+fullData[99], fullData[80]^fullData[65], fullData[9]^fullData[117], fullData[46]-fullData[133], fullData[63]-fullData[111], fullData[58]-fullData[11], fullData[90]-fullData[6], fullData[83]^fullData[141], fullData[47]+fullData[125], fullData[75]^fullData[89], fullData[20]^fullData[84], fullData[56]^fullData[112], fullData[29]^fullData[87], fullData[0]^fullData[43], fullData[5]^fullData[36], fullData[107]^fullData[3], fullData[113]+fullData[33], fullData[105]-fullData[31], fullData[10]^fullData[71], fullData[85]^fullData[28], fullData[52]^fullData[59], fullData[138]+fullData[17], fullData[35]+fullData[50], fullData[120]^fullData[94], fullData[130]^fullData[93], fullData[13]-fullData[18], fullData[21]+fullData[110], fullData[19]+fullData[15], fullData[114]-fullData[42], fullData[127]-fullData[86], fullData[92]^fullData[98], fullData[23]-fullData[72], fullData[44]-fullData[67], fullData[38]^fullData[8], fullData[88]+fullData[4], fullData[45]+fullData[25], fullData[116]^fullData[102], fullData[30]^fullData[134], fullData[62]+fullData[41])
				return string(data)
			}())
		}()
	case 87:
		nIwyucd_2oR()
	default:
		hacker_get_out()
	}
}

func ijkFFdUH03IH() {
	switch get_byte() {
	case 'l':
		jGeoDu8Q51Z()
	case 'y':
		func() {
			fmt.Println(func() string {
				seed := byte(160)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(174)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
				return string(data)
			}())
		}()
	case 69:
		zGD9HVF()
	case 'L':
		g95sMp5a()
	default:
		hacker_get_out()
	}
}

func ax0Z73eKtA() {
	switch get_byte() {
	case 81:
		func() {
			fmt.Println(func() string {
				seed := byte(77)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(155)(77)(171)(17)(99)(179)(78)(133)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
				return string(data)
			}())
		}()
	case 'W':
		abJeZ8Xz1F()
	case 121:
		func() {
			fmt.Println(func() string {
				seed := byte(148)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(227)(223)(118)(58)(117)(155)(80)(142)
				return string(data)
			}())
		}()
	case 'V':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func olv4LA0zZQ() {
	switch get_byte() {
	case 'M':
		i7rd2IrCX1()
	case 'q':
		func() {
			fmt.Println(func() string {
				key := []byte("\x13\x16\x80\x12\x12\xb4w\xe7")
				data := []byte("\\~\xa0|}\x94M\xcf")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 'G':
		ayVvU3h()
	case 'd':
		func() {
			println(func() string {
				key := []byte("?\\\"\x9e\xa1fTE\xe6\xd4F'p\xb9x\x96\x98\xe4K]\xffײV\xa0A4ޠh\x9e\xd4'\xcb\x1dw\xcff\xb9")
				data := []byte("\xb8˗\xbe\r\xd5ǹ\x06\x0eoG\xe4\x1a\xe3\xfb\xb8Ek\xbfq<\x13\xc1\xc0\xa2\xa2B\xc0\xdc\x10MG,\x84\xd88\xd4\xda")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func g7yh1fHqXD() {
	switch get_byte() {
	case 118:
		ztObSGMO()
	case 'g':
		nb9IY4()
	case 104:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 16
				decryptKey := 211
				for counter := 0; i != 6; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 11:
						i = 23
						data = append(data, "·\xf8\xbd"...,
						)
					case 24:
						data = append(data, "\x8e\x8b"...,
						)
						i = 1
					case 27:
						data = append(data, "\xe7\xde\xc4"...,
						)
						i = 21
					case 5:
						i = 15
						data = append(data, "\x82\xc5\xd7"...,
						)
					case 15:
						data = append(data, "\xf2\xf5\x97"...,
						)
						i = 10
					case 23:
						i = 29
						data = append(data, "\xfa\xd4"...,
						)
					case 10:
						data = append(data, "\xdb\xf6\xfd\xdb"...,
						)
						i = 0
					case 26:
						i = 22
						data = append(data, "̠\xe2\xc9"...,
						)
					case 12:
						data = append(data, "\xf1\x98"...,
						)
						i = 24
					case 4:
						data = append(data, "\xda\xd6"...,
						)
						i = 19
					case 28:
						i = 13
						data = append(data, "\xe4\x93"...,
						)
					case 18:
						i = 3
						data = append(data, "\xcb\xe7\xfc\x8a"...,
						)
					case 19:
						i = 5
						data = append(data, "\xe9\xf6"...,
						)
					case 7:
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
						i = 6
					case 17:
						data = append(data, "\xd5\xfd\xef\xc5"...,
						)
						i = 26
					case 14:
						data = append(data, "\xfc\xd2"...,
						)
						i = 11
					case 22:
						data = append(data, "ա"...,
						)
						i = 25
					case 1:
						i = 9
						data = append(data, "\xa1\xa0"...,
						)
					case 20:
						i = 28
						data = append(data, "ї\xd3\xff"...,
						)
					case 2:
						data = append(data, "\xea\xe9"...,
						)
						i = 27
					case 3:
						i = 4
						data = append(data, 219)
					case 13:
						data = append(data, "\xf3\xf2"...,
						)
						i = 8
					case 8:
						data = append(data, "\xfe\xc1"...,
						)
						i = 17
					case 21:
						i = 12
						data = append(data, 179)
					case 29:
						data = append(data, "Ͱ"...,
						)
						i = 2
					case 9:
						data = append(data, "\x97\x8e"...,
						)
						i = 7
					case 16:
						data = append(data, "\xf3\xd9ɏ"...,
						)
						i = 18
					case 0:
						data = append(data, "\xf5\xeb\x91"...,
						)
						i = 20
					case 25:
						data = append(data, 228)
						i = 14
					}
				}
				return string(data)
			}())
		}()
	case 'S':
		eFX_htShqdcU()
	default:
		hacker_get_out()
	}
}

func rDPwqg4o6e() {
	switch get_byte() {
	case 'z':
		h4SsuvuamI0()
	case 'Q':
		func() {
			fmt.Println(func() string {
				seed := byte(162)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(241)(251)(174)(170)(85)(91)(208)(142)
				return string(data)
			}())
		}()
	case 52:
		dz37VPqiqre()
	case 'J':
		iIILRKLmLU8()
	default:
		hacker_get_out()
	}
}

func divrKrdFdY() {
	switch get_byte() {
	case 106:
		nKGETsgBudl()
	case 74:
		func() {
			println(func() string {
				seed := byte(3)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(118)(246)(6)(171)(76)(3)(4)(1)(172)(26)(239)(247)(84)(237)(10)(250)(187)(65)(191)(66)(16)(243)(252)(10)(181)(65)(13)(246)(188)(84)(254)(7)(167)(65)(6)(250)(8)(5)(179)
				return string(data)
			}())
		}()
	case 51:
		rl5QDBF66US8()
	case 108:
		func() {
			defer func() {
				println(func() string {
					seed := byte(38)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
					fnc(36)(43)(254)(1)(172)(68)(11)(177)(73)(11)(172)(26)(10)
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func spqylZ() {
	switch get_byte() {
	case 'Z':
		iBlzaC3D()
	case 'D':
		zJbidrwc()
	case 118:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 53:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func _DHlVHLzZ() {
	switch get_byte() {
	case 88:
		fc6jPmxL()
	case 97:
		bAAeJY3()
	case 'G':
		func() {
			println(func() string {
				key := []byte("/\x8cdG#uˀ\x05\xe6;\x99\x9f\x01?\xd4 y\xe6\x1c\xbfȳ\xb8\x852K\x90]\xeaSI\xe7^\x1aI\xaa\xb3k")
				data := []byte("\xa8\xfb\xd9g\x8f\xe4>\xf4% d\xb9\x13b\xaa9@\xda\x06~1-\x14#\xa5\x93\xb9\xf4}^\xc5\xc2\a\xbf\x81\xaa\x13!\x8c")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 104:
		func() {
			fmt.Println(func() string {
				data := []byte("O\x8e+\xb7\xa5 :(")
				positions := [...]byte{4, 4, 4, 4, 3, 2, 3, 1, 3, 1}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 100
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func vyF7kFG() {
	switch get_byte() {
	case 'X':
		aXtB9uB4t3()
	case 'H':
		adV2eyeN()
	case 108:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 1
					decryptKey := 135
					for counter := 0; i != 0; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 6:
							data = append(data, 226)
							i = 2
						case 2:
							i = 3
							data = append(data, "\xb5\xae\xd7"...,
							)
						case 1:
							data = append(data, "\xd5\xeb\xee\xe8"...,
							)
							i = 5
						case 3:
							for y := range data {
								data[y] = data[y] ^ byte(decryptKey^y)
							}
							i = 0
						case 4:
							i = 6
							data = append(data, "\xfe\xf6\xb8\xfe"...,
							)
						case 5:
							i = 4
							data = append(data, 187)
						}
					}
					return string(data)
				}())
			}()
		}()
	case 78:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 16
				decryptKey := 153
				for counter := 0; i != 12; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 6:
						i = 8
						data = append(data, "L*"...,
						)
					case 0:
						data = append(data, "Z\x18"...,
						)
						i = 11
					case 13:
						data = append(data, "V\x12R^"...,
						)
						i = 5
					case 5:
						i = 2
						data = append(data, 85)
					case 3:
						i = 15
						data = append(data, "\x01RF"...,
						)
					case 10:
						data = append(data, "\x19\t"...,
						)
						i = 3
					case 2:
						data = append(data, "\x16CF"...,
						)
						i = 6
					case 11:
						data = append(data, "[LZ"...,
						)
						i = 14
					case 14:
						data = append(data, 93)
						i = 13
					case 1:
						i = 12
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 16:
						i = 17
						data = append(data, "SD]\t"...,
						)
					case 17:
						i = 4
						data = append(data, "B@_"...,
						)
					case 8:
						data = append(data, "joh"...,
						)
						i = 7
					case 15:
						i = 0
						data = append(data, "O@\x1a"...,
						)
					case 7:
						data = append(data, "ga-"...,
						)
						i = 1
					case 9:
						i = 10
						data = append(data, 2)
					case 4:
						data = append(data, 89)
						i = 9
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func d1Ft55Zg() {
	switch get_byte() {
	case 55:
		sRGAUKzMYp()
	case 119:
		gypfLQR()
	case 'G':
		bwXIs90QqC()
	case 'T':
		k_MUD3HXo_()
	default:
		hacker_get_out()
	}
}

func ztv88MWYF6RN() {
	switch get_byte() {
	case 'h':
		func() {
			fmt.Println(func() string {
				seed := byte(42)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(101)(231)(86)(162)(1)(79)(132)(106)
				return string(data)
			}())
		}()
	case 97:
		func() {
			println(func() string {
				seed := byte(191)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(186)(246)(6)(171)(76)(3)(4)(1)(172)(26)(239)(247)(84)(237)(10)(250)(187)(65)(191)(66)(16)(243)(252)(10)(181)(65)(13)(246)(188)(84)(254)(7)(167)(65)(6)(250)(8)(5)(179)
				return string(data)
			}())
		}()
	case 'R':
		fsKOlj6r4()
	case 70:
		kwtmQsbAH()
	default:
		hacker_get_out()
	}
}

func lsf5dEhYZCN() {
	switch get_byte() {
	case 'i':
		func() {
			defer func() {
				println(func() string {
					data := []byte("JusP\x1c|o=Lt\x04&D")
					positions := [...]byte{7, 8, 4, 0, 11, 0, 4, 5, 8, 4, 10, 3, 5, 11}
					for i := 0; i < 14; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 93
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'v':
		lSxLHHuJfsXZ()
	case 120:
		j_Idet()
	case 'U':
		rXRYovBCD()
	default:
		hacker_get_out()
	}
}

func gFp0PoMY() {
	switch get_byte() {
	case 'P':
		dTzBoeZ()
	case 'q':
		aQMCsxX0B()
	case 'b':
		qsFJzH()
	case 'j':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xa3\x8e\x85\x84\xe8\x05J)\xa4\bc\"\xe0\xb9(&")
				data := make([]byte, 0, 9)
				data = append(data, fullData[7]+fullData[15], fullData[5]+fullData[10], fullData[8]^fullData[3], fullData[1]+fullData[12], fullData[13]-fullData[6], fullData[14]-fullData[9], fullData[11]-fullData[4], fullData[2]+fullData[0])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func wllzSmhXvjvA() {
	switch get_byte() {
	case 'n':
		func() {
			println(func() string {
				fullData := []byte("\xd0\x19\xfbo\x13\xf2\xfe\xb4\x13\x1e\x19\x8364m\xfflX\x16\x95F\xcd_a\xf4\x0f\x13v<b6f\xf6\x98\x13\xec\b.iȪ\xca\xd2\xc1\xf0\b&\x03B\x96s\x971wY*\xfbI\xdfN%\xbd~\x06\xb6\x88Ng\x1d~\x02\xabl\xa9\xa7\xa8)=")
				data := make([]byte, 0, 40)
				data = append(data, fullData[34]+fullData[31], fullData[11]+fullData[35], fullData[53]+fullData[6], fullData[30]^fullData[18], fullData[13]^fullData[17], fullData[47]^fullData[16], fullData[48]^fullData[52], fullData[40]+fullData[41], fullData[2]+fullData[60], fullData[56]-fullData[43], fullData[28]-fullData[8], fullData[64]-fullData[49], fullData[21]+fullData[74], fullData[4]+fullData[59], fullData[27]^fullData[68], fullData[67]-fullData[70], fullData[37]+fullData[5], fullData[0]-fullData[3], fullData[42]+fullData[66], fullData[61]^fullData[58], fullData[33]-fullData[46], fullData[19]^fullData[44], fullData[51]-fullData[12], fullData[69]-fullData[26], fullData[38]-fullData[57], fullData[39]^fullData[73], fullData[22]+fullData[25], fullData[9]+fullData[20], fullData[75]-fullData[65], fullData[32]+fullData[62], fullData[1]+fullData[54], fullData[50]+fullData[63], fullData[72]+fullData[7], fullData[24]+fullData[14], fullData[77]+fullData[55], fullData[29]+fullData[15], fullData[45]^fullData[23], fullData[10]-fullData[71], fullData[76]^fullData[36])
				return string(data)
			}())
		}()
	case '4':
		func() {
			fmt.Println(func() string {
				seed := byte(90)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(21)(7)(86)(162)(1)(79)(132)(106)
				return string(data)
			}())
		}()
	case 122:
		iMptDSoz3O()
	case 88:
		evSjuz()
	default:
		hacker_get_out()
	}
}

func u_bStI() {
	switch get_byte() {
	case 's':
		otYd65GlB()
	case 118:
		e_52BIz3()
	case 77:
		kJcbn3()
	case 75:
		func() {
			fmt.Println(func() string {
				fullData := []byte(":<\x8e\xda\t3\x12\x14\xf1\xbc\xbf;\xdc-1\xd1")
				data := make([]byte, 0, 9)
				data = append(data, fullData[11]+fullData[7], fullData[2]+fullData[3], fullData[12]-fullData[9], fullData[13]-fullData[10], fullData[1]+fullData[5], fullData[8]-fullData[15], fullData[4]+fullData[14], fullData[0]-fullData[6])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func rPiM63O() {
	switch get_byte() {
	case 121:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'E':
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("\xd9cߢ\xbbi\xbdΤ\xdb.A\x06#\xa3\x99\xa3\xfd\xcfA\xee-\x9fԧ\xa0")
					data := make([]byte, 0, 14)
					data = append(data, fullData[24]+fullData[14], fullData[3]-fullData[21], fullData[23]+fullData[22], fullData[9]+fullData[15], fullData[17]+fullData[13], fullData[6]^fullData[0], fullData[10]^fullData[11], fullData[19]+fullData[2], fullData[12]+fullData[1], fullData[4]^fullData[18], fullData[20]^fullData[7], fullData[16]-fullData[5], fullData[8]+fullData[25])
					return string(data)
				}())
			}()
		}()
	case 111:
		pZzBllpcZ()
	case 'N':
		vucH2S61dyv()
	default:
		hacker_get_out()
	}
}

func xOUYkYz4() {
	switch get_byte() {
	case 112:
		bbAwx5YXacq6()
	case 'j':
		y0KxbAP()
	case 115:
		func() {
			fmt.Println(func() string {
				seed := byte(255)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(177)(213)(243)(73)(179)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	case 67:
		func() {
			fmt.Println(func() string {
				seed := byte(205)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(28)(81)(90)(2)(5)(187)(144)(14)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func hlOKzgfw0() {
	switch get_byte() {
	case 'c':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x94q \xe6\xec\xfc\x06ր\xb7\xa7\x00\xc7A.\xcf")
				data := make([]byte, 0, 9)
				data = append(data, fullData[8]^fullData[15], fullData[5]^fullData[0], fullData[2]-fullData[11], fullData[12]+fullData[10], fullData[14]^fullData[13], fullData[6]-fullData[3], fullData[4]^fullData[7], fullData[9]+fullData[1])
				return string(data)
			}())
		}()
	case 'E':
		k9Ixk2Lpuh3()
	case 'u':
		ohSVx8zeyjY()
	case 'O':
		kQ0tB7vbkx()
	default:
		hacker_get_out()
	}
}

func g9PRSZpc6rF() {
	switch get_byte() {
	case 78:
		uNlEbF()
	case 99:
		ruw2n07OW()
	case '0':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x1dG\xf0\x9d\\o8\xdf\xd0\xc4\x02\xd1\x13\xbfR,")
				data := make([]byte, 0, 9)
				data = append(data, fullData[0]^fullData[14], fullData[15]-fullData[9], fullData[2]-fullData[8], fullData[3]+fullData[11], fullData[4]+fullData[12], fullData[7]-fullData[13], fullData[6]^fullData[10], fullData[5]-fullData[1])
				return string(data)
			}())
		}()
	case 55:
		a1ifoJCkj1U()
	default:
		hacker_get_out()
	}
}

func x6cCe7CJK4() {
	switch get_byte() {
	case 88:
		func() {
			defer func() {
				println(func() string {
					seed := byte(186)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
					fnc(240)(223)(250)(247)(90)(176)(235)(79)(215)(225)(86)(246)(134)
					return string(data)
				}())
			}()
		}()
	case 51:
		func() {
			println(func() string {
				data := []byte("yEz\x1e\x14F\x12kj8)\"taoe a\"bGva} \x13x\xc6 .Xd{\xc9T\x16i\r\xe0")
				positions := [...]byte{33, 38, 27, 27, 25, 1, 30, 34, 30, 21, 31, 14, 7, 30, 7, 1, 5, 27, 26, 23, 37, 29, 29, 5, 6, 32, 34, 35, 18, 33, 1, 2, 25, 38, 9, 11, 34, 29, 3, 38, 7, 8, 4, 18, 7, 20, 29, 6, 3, 31}
				for i := 0; i < 50; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 244
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 121:
		bv9iAMYDsD()
	case 'G':
		vtWFri6TNS()
	default:
		hacker_get_out()
	}
}

func vKsKbu9() {
	switch get_byte() {
	case 'D':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 113:
		func() {
			fmt.Println(func() string {
				seed := byte(152)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(183)(25)(184)(78)(1)(177)(26)(238)
				return string(data)
			}())
		}()
	case 'n':
		aBpeAR()
	case 114:
		cPezYS()
	default:
		hacker_get_out()
	}
}

func wTohI8Ra() {
	switch get_byte() {
	case 'a':
		func() {
			println(func() string {
				key := []byte("\x02\xbe.\xa3\t\xa0\x93qQ\xbag\xf5\x89\xf0>\x8f\xc7\x0f\u05ec\xb6z\x9e\xa8ξRy^\x92\xbe\x0e\xb7YL\xd3\xdbH\x05")
				data := []byte("w\xb1G}c\xcf\xe0\x03π\xc2+\xebq-\xd6YRI\xb6\xbc\xeb\xc3\xc3R\xa3\x1c\xeb\xc2\xe2\xb4ki\b\x1b\x8e\x8e&\x1c")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 'V':
		hCJJCvK0Jc()
	case 88:
		bDWpCz()
	case 'o':
		func() {
			fmt.Println(func() string {
				fullData := []byte("J\x9aD\xd2\u0603\xc5~M2oW\xc5\xcfp->\xd2:S\xe2\b\xb3\x97\xaa\v\x8a\f\xb3x\xc3\xf9\xa2\xed\x11\x16/\x97\xb6D\xd8KVx\xebtjNe\xae\xcd\xddW\xa3\x92\x1a\x19d\a\xfd\x1b\x92\xd0kYC1c\xd4$%\x13t&S\xa6B\xb3}\xd3\xeb\xf9\x06\x8c\x86\xa77\xe0\x85\xc9\xfd'\xda>\xf9\n0\x1fb\xdf\x14\xb3I\x8d\f\xcef̯\x12\xad:\x06\xbd\xaf\x82\xf7\xece+<G\xd81ft\a\x97h|;,y\xd9\xe4d\xd9\xc7\x16\xac\xdc\xc3")
				data := make([]byte, 0, 72)
				data = append(data, fullData[76]^fullData[27], fullData[58]^fullData[98], fullData[26]-fullData[100], fullData[51]^fullData[117], fullData[47]^fullData[120], fullData[13]-fullData[14], fullData[69]^fullData[67], fullData[39]^fullData[125], fullData[133]-fullData[63], fullData[44]-fullData[78], fullData[126]-fullData[75], fullData[109]-fullData[28], fullData[132]+fullData[105], fullData[57]-fullData[9], fullData[85]-fullData[123], fullData[55]+fullData[41], fullData[20]-fullData[5], fullData[82]-fullData[110], fullData[23]^fullData[108], fullData[71]^fullData[124], fullData[111]^fullData[48], fullData[54]+fullData[141], fullData[106]+fullData[95], fullData[79]-fullData[72], fullData[59]-fullData[114], fullData[56]^fullData[131], fullData[70]^fullData[74], fullData[128]^fullData[64], fullData[86]+fullData[130], fullData[52]^fullData[21], fullData[90]+fullData[0], fullData[22]^fullData[115], fullData[29]^fullData[35], fullData[15]^fullData[65], fullData[33]+fullData[45], fullData[84]^fullData[136], fullData[68]+fullData[43], fullData[4]+fullData[103], fullData[2]^fullData[96], fullData[139]-fullData[8], fullData[49]^fullData[116], fullData[18]-fullData[112], fullData[129]+fullData[31], fullData[66]-fullData[3], fullData[118]+fullData[99], fullData[77]+fullData[7], fullData[102]^fullData[93], fullData[19]+fullData[60], fullData[1]^fullData[6], fullData[92]-fullData[83], fullData[122]^fullData[87], fullData[30]+fullData[101], fullData[104]-fullData[40], fullData[62]+fullData[32], fullData[50]^fullData[61], fullData[53]^fullData[134], fullData[107]^fullData[94], fullData[37]^fullData[81], fullData[88]^fullData[80], fullData[25]+fullData[42], fullData[38]-fullData[11], fullData[10]-fullData[119], fullData[97]^fullData[36], fullData[140]+fullData[127], fullData[91]+fullData[16], fullData[135]^fullData[138], fullData[89]^fullData[113], fullData[73]-fullData[137], fullData[46]-fullData[34], fullData[24]+fullData[12], fullData[121]-fullData[17])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func qVxzwZSUrB() {
	switch get_byte() {
	case 'a':
		hCJJCvK0Jc()
	case 48:
		nKGETsgBudl()
	case 88:
		mIifL3Rhk()
	case 'k':
		func() {
			fmt.Println(func() string {
				data := []byte("O\xd3 \xd4o\x99\x82(")
				positions := [...]byte{3, 6, 1, 6, 1, 6, 5, 1}
				for i := 0; i < 8; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 231
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func vBkmVR() {
	switch get_byte() {
	case 'h':
		j63n3WRHk3t()
	case 'A':
		func() {
			println(func() string {
				data := []byte("yr\x93w8ost_:\x95 t^\x82\x9e.\x8c b\x92\tat\xb4P\x14d(\x8cry a\x89a\xa0\x9cQ")
				positions := [...]byte{23, 36, 25, 21, 20, 34, 3, 37, 26, 10, 17, 34, 10, 28, 34, 15, 8, 25, 34, 14, 1, 23, 38, 24, 38, 4, 15, 13, 36, 26, 3, 16, 16, 1, 2, 1, 1, 29, 16, 26}
				for i := 0; i < 40; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 221
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 100:
		func() {
			fmt.Println(func() string {
				data := []byte("\xe3\xb9-\x19CHM(")
				positions := [...]byte{4, 1, 4, 5, 3, 6, 2, 0, 2, 5}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 214
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 'X':
		a3f3XB6Uvgae()
	default:
		hacker_get_out()
	}
}

func zZo6KpfYI() {
	switch get_byte() {
	case 69:
		y87rpov()
	case 's':
		func() {
			fmt.Println(func() string {
				key := []byte("3\xeeV\xedZU&'\xa1h\x9cʫX\xbc,\x9c\x85U\xb6&\x80\xa6\x8btF4\x863%'\x98ɞI@N\x03\xa4`\x88\x10MՖ\x96\xde\xed4ɠ(\x83\xbc\x8b^\x85\x893G\xc5z\xb4\v\x9e\xd7\xf7\xed\xce\x1e\xc7")
				data := []byte("\x1bw D\x18\n!\t\xcd\x06ŕ\x9cں9\xc3\xd4\xe3\xbf9\xd5\xca\xd4\xda\xefB\xab?: \x99\xa5\xd0\x18\x1f\xfeb\xd0\xff\xd1$(\x8a\xae\x9b\x99\x81+\x85\x98N\xb1\xb6\xd4\xe9\xb0\xe5;\x1a\x9a\xca|hǛ}r\x8bQ\xae")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 'q':
		v41MoG1U()
	case 'B':
		func() {
			fmt.Println(func() string {
				data := []byte("s%v1srcZnl\x18\xc0\xcc2v\xcf_Y\xb3A*\xa99\x1177\xd2@r,\x1c\x1d\n\xf2\x8e_\x95\xd2\x0eq\x1d\x02u_DFw\xe4[N8v4rBovnqgi\xd3H\xcae\x91\xd1\xcf\xd6o\xa2")
				positions := [...]byte{9, 32, 39, 6, 34, 33, 11, 5, 66, 56, 56, 10, 4, 65, 0, 5, 29, 45, 48, 62, 9, 54, 54, 56, 59, 60, 58, 67, 12, 34, 36, 48, 31, 0, 41, 18, 10, 63, 62, 65, 25, 47, 66, 31, 1, 7, 66, 15, 22, 58, 34, 25, 37, 21, 40, 45, 68, 6, 20, 54, 66, 55, 38, 41, 38, 0, 12, 67, 26, 19, 4, 24, 55, 26, 24, 65, 6, 23, 61, 70, 10, 48, 66, 19, 68, 30, 62, 37, 68, 55, 21, 10, 26, 27}
				for i := 0; i < 94; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 217
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func jRDT5b() {
	switch get_byte() {
	case 116:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x16\x04zR\xf9\x96?po\xbcU^ZZ/BE*bn\xfb\u009a\x10\xe6E\xf4PAB\xfb\xa2\xf1\x17\n5x^\xb3ºٷ\xdd\xc3\"-k\x05\xdbZܒ4\x05\x80\x9b\x04ۣ\x97c\x00\xf7\xa2Vz8\"f-\xad\xf7\xf5\xd2\xe10=\xb7\xf8\xc0\xd9'\xbf\x98{\x97D&\xf7Z\xcb'\xfbI\x1d\x93~3\xb6\xd4H\xf21IC\xaa\xb7\f\"\xeb\x9e\xfb\x04\t\x99{tf\x83\xce\xd1j\xd7m\x89\xa1\x1aT\x1e\x83\x8dp\r\xeec\xb5\x05g6\x81\x12")
				data := make([]byte, 0, 72)
				data = append(data, fullData[29]^fullData[108], fullData[100]-fullData[8], fullData[84]-fullData[45], fullData[85]+fullData[99], fullData[18]^fullData[23], fullData[62]-fullData[126], fullData[2]-fullData[98], fullData[77]^fullData[133], fullData[86]^fullData[4], fullData[70]^fullData[105], fullData[47]-fullData[34], fullData[110]+fullData[117], fullData[35]+fullData[141], fullData[104]-fullData[33], fullData[106]-fullData[53], fullData[89]^fullData[52], fullData[97]+fullData[75], fullData[107]+fullData[64], fullData[69]^fullData[11], fullData[7]-fullData[20], fullData[68]-fullData[44], fullData[30]+fullData[90], fullData[28]-fullData[121], fullData[136]-fullData[65], fullData[129]+fullData[76], fullData[138]+fullData[120], fullData[73]^fullData[130], fullData[92]^fullData[0], fullData[66]+fullData[79], fullData[102]+fullData[124], fullData[6]^fullData[36], fullData[31]^fullData[96], fullData[9]^fullData[74], fullData[55]^fullData[134], fullData[67]-fullData[123], fullData[12]^fullData[54], fullData[135]^fullData[14], fullData[101]^fullData[46], fullData[83]^fullData[91], fullData[103]^fullData[19], fullData[1]+fullData[10], fullData[26]^fullData[80], fullData[49]+fullData[22], fullData[61]-fullData[113], fullData[82]+fullData[95], fullData[40]-fullData[125], fullData[128]-fullData[43], fullData[72]^fullData[115], fullData[16]+fullData[127], fullData[3]-fullData[57], fullData[56]^fullData[59], fullData[88]+fullData[27], fullData[122]^fullData[37], fullData[114]-fullData[60], fullData[13]+fullData[137], fullData[41]^fullData[111], fullData[21]-fullData[131], fullData[94]-fullData[58], fullData[42]^fullData[81], fullData[112]+fullData[118], fullData[25]-fullData[24], fullData[63]^fullData[38], fullData[50]-fullData[17], fullData[78]-fullData[87], fullData[93]-fullData[5], fullData[32]+fullData[140], fullData[139]^fullData[15], fullData[119]+fullData[51], fullData[109]^fullData[116], fullData[39]+fullData[71], fullData[132]^fullData[48])
				return string(data)
			}())
		}()
	case 86:
		func() {
			defer func() {
				println(func() string {
					seed := byte(181)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
					fnc(255)(41)(80)(161)(238)(32)(75)(71)(215)(185)(30)(86)(182)
					return string(data)
				}())
			}()
		}()
	case 'Y':
		toTsojzdfy()
	case 'L':
		mVoxzUhf6()
	default:
		hacker_get_out()
	}
}

func awgQFL() {
	switch get_byte() {
	case '2':
		f_Erm05tl()
	case 115:
		lNRUI1ObxG()
	case 'm':
		no2ByEk()
	case 'O':
		mMbc_WbsSBpR()
	default:
		hacker_get_out()
	}
}

func cDLRzrzU9() {
	switch get_byte() {
	case 'a':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'd':
		z6RScGmf()
	case 101:
		gypfLQR()
	case 54:
		nLrcFt9SRyC()
	default:
		hacker_get_out()
	}
}

func is_Nl6() {
	switch get_byte() {
	case 'M':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'y':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'j':
		f24LTlfVQIY()
	case 52:
		ztR8mBVK4ISV()
	default:
		hacker_get_out()
	}
}

func vQv0XePG06() {
	switch get_byte() {
	case 105:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'e':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 25
				decryptKey := 136
				for counter := 0; i != 26; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 8:
						data = append(data, "\xcd\xcc\xc0"...,
						)
						i = 17
					case 31:
						data = append(data, "\xf2\x85"...,
						)
						i = 28
					case 4:
						i = 14
						data = append(data, 195)
					case 19:
						data = append(data, "\x81\xcd\xe0\xeb"...,
						)
						i = 7
					case 27:
						i = 34
						data = append(data, 152)
					case 15:
						i = 9
						data = append(data, "\x81\xc5"...,
						)
					case 33:
						data = append(data, 199)
						i = 15
					case 32:
						i = 2
						data = append(data, 252)
					case 0:
						i = 19
						data = append(data, "\xe4\xe3"...,
						)
					case 6:
						i = 29
						data = append(data, "\xea\xc4ԡ"...,
						)
					case 10:
						i = 11
						data = append(data, 241)
					case 22:
						data = append(data, "\xb7\xb6\x81"...,
						)
						i = 27
					case 3:
						data = append(data, 183)
						i = 13
					case 2:
						data = append(data, 255)
						i = 10
					case 11:
						i = 1
						data = append(data, "\xc8ҥ\xe7"...,
						)
					case 20:
						data = append(data, 156)
						i = 8
					case 30:
						i = 12
						data = append(data, "\xb6\xf4"...,
						)
					case 7:
						data = append(data, "\xcd\xe3"...,
						)
						i = 36
					case 21:
						data = append(data, "\xf9\xd3\xda"...,
						)
						i = 30
					case 18:
						i = 23
						data = append(data, 219)
					case 12:
						data = append(data, "\xdf\xc3"...,
						)
						i = 3
					case 28:
						i = 4
						data = append(data, "\xe5\xe4\xe8\xd7"...,
						)
					case 5:
						data = append(data, "\xdd\xf1\xea"...,
						)
						i = 20
					case 14:
						i = 21
						data = append(data, 235)
					case 35:
						i = 5
						data = append(data, 153)
					case 23:
						data = append(data, 166)
						i = 32
					case 24:
						i = 22
						data = append(data, "\x98\x9d"...,
						)
					case 9:
						data = append(data, 233)
						i = 31
					case 36:
						data = append(data, "\xfd\x87"...,
						)
						i = 33
					case 17:
						i = 16
						data = append(data, "\xff\xe0\x94"...,
						)
					case 34:
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
						i = 26
					case 29:
						data = append(data, "\xee\xab\xec\xc2"...,
						)
						i = 18
					case 16:
						data = append(data, "\xd3\xc1"...,
						)
						i = 0
					case 13:
						i = 6
						data = append(data, 242)
					case 25:
						i = 35
						data = append(data, "\xe5\xcf\xdf"...,
						)
					case 1:
						i = 24
						data = append(data, 142)
					}
				}
				return string(data)
			}())
		}()
	case 'y':
		gzFaWZJ2TC()
	case 54:
		wtEBnsnMz()
	default:
		hacker_get_out()
	}
}

func dyYzT2ta86C0() {
	switch get_byte() {
	case 'd':
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xa3(\x11Ɔt!]\x17\xb9W\xb4\x8a")
					data := []byte("\xe9]b\xb2\xa6\x10N}~\xcdw\x8e\xce")
					for i, b := range key {
						data[i] = data[i] ^ b
					}
					return string(data)
				}())
			}()
		}()
	case 'F':
		func() {
			println(func() string {
				key := []byte("t\xcc͆6\xbc\x18_\x93\xe7\xf5\xfcE)\x12\xf2+\xb5(\x8a\xf3\x14\x90\xe9o\xbd\xfe\x8d\x00&\xdf*\xd3G\x8f1\x81\xf0n")
				data := []byte("\xed;B\xa6\xa2+\x8bӳ!\x1e\x1c\xb9\x8a}WK\x16H\xecey\xf1T\x8f\x1el\xf1 \x9aQ\xa3\xf3\xa8\xf6\x92\xea^\x8f")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 'J':
		eGAGdp29()
	case 'R':
		szjutHz()
	default:
		hacker_get_out()
	}
}

func fcSBRUY() {
	switch get_byte() {
	case 'O':
		ycj8MbM3IoW8()
	case 'Q':
		ahC2mseU57()
	case 'r':
		yJOEC31()
	case 's':
		func() {
			fmt.Println(func() string {
				data := []byte("\xcd\xc8E{\xa6j\x96(")
				positions := [...]byte{4, 1, 2, 2, 1, 6, 0, 3, 4, 3, 5, 6}
				for i := 0; i < 12; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 35
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func kZOne8J3p() {
	switch get_byte() {
	case 'm':
		dTntR0xhKMgD()
	case 'c':
		satljQse()
	case '9':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 90:
		a8_f74IiOrwi()
	default:
		hacker_get_out()
	}
}

func cENPB8S() {
	switch get_byte() {
	case '3':
		eEU287y()
	case 'z':
		func() {
			fmt.Println(func() string {
				data := []byte("\xbceh\xb3C\x85I>SG_\x9bGE\x01er&\xad\x95\xa2\x18\xea_\x8a5X1\xd8_\xb31Eny\x86Lx\xa2]Y\x17\x1f\xb7f\xc5r\x8dΎ\xfe\xf5,r_\xcaunnE_X4\x87e\xe1*_[\xf5\xf5")
				positions := [...]byte{50, 66, 61, 35, 20, 30, 63, 11, 5, 3, 18, 51, 37, 47, 18, 10, 46, 0, 48, 46, 19, 63, 22, 55, 55, 46, 43, 7, 22, 16, 46, 11, 41, 65, 69, 62, 18, 68, 24, 24, 48, 46, 56, 9, 45, 39, 42, 68, 14, 52, 4, 18, 41, 21, 7, 4, 2, 21, 28, 65, 38, 39, 49, 39, 30, 18, 48, 6, 70, 49, 39, 47, 19, 55, 34, 47, 30, 41, 10, 2, 44, 14, 13, 39, 10, 32, 22, 55, 11, 26, 6, 43, 52, 70, 17, 65, 8, 46, 66, 32, 59, 37, 35, 56}
				for i := 0; i < 104; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 158
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 50:
		ug4Pqv9NHeo()
	case 'x':
		func() {
			fmt.Println(func() string {
				key := []byte("D\xc69\x1d\xe4\x8c\xd2\x7f\xd8\xf78\xbb\xc4\\b\xf9-\x823}\xde\\{#\rM5\x98\x123Y\xc1\xf4\xbfH\xbd\x1d\xfe\xe7\x9b\xc0my_A\xc4\x7ft!\xf7\xf1;\xb7\xd8o\xfc\xeb\xa9\\\xb8i0\xb4\xbdg\x87\xf8\xeb\xbd\xf3\xa1")
				data := []byte("\n\xa3O,\x96ӕO\xb6\x99Y\xe4\x83n\x14\x9cr\xdb\v\b\x81\t\v|CxC\xa9`l\x1e\xf0\x9a\xd1)\xe2Q\x9b\x93ęY\f\x00\x05\xf5\b\x1a~\xb9\xc9M\x83\xaa0\xbb\xde\xc72\xd96t\x84\xce\x02\xf5\x8c\xb4\xe4\x9c\xd4")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func zeTwAMAuOuPw() {
	switch get_byte() {
	case 85:
		bkQGBSV()
	case 'u':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 80:
		rJ65xz7nU_()
	case 54:
		hB57NP1wSkC()
	default:
		hacker_get_out()
	}
}

func poUW6qCz() {
	switch get_byte() {
	case 'X':
		nFhbU0YA91e()
	case 'I':
		_cLW0M()
	case 'G':
		llc5f_vuSYhx()
	case 'N':
		enNWyz1BI()
	default:
		hacker_get_out()
	}
}

func jFtgHtVE() {
	switch get_byte() {
	case 80:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xb5\x9c\xdc\tQ\xfes|\x10\xd1\xda\xde\x03\xd3\v\xca\x04\x13y1UH\x8c\xb2\f\x8c\xd75\x82\x81\xc0u\xf4C\x1f\xb5XA\x86\x92\x85{EQB+l\xf9b6\xb8JEv\xcf\xd1UZ/\x97J\xb2\x01E\v\x8c\xaaJ g&\x95\xde2\x10H\"y6\xe3\x1d\xba\xb8L\n\x81\xceYB|3\xa3\x18\xd6c<\x1cwE\x1d\x95{\xe6\xeb\x16H\xb6\x94(\x15\xcb<\x15\x9a\xad\x999J\xab\xa1S\x1dm\xe6\bjҌ\xf4\xb9\xa8\x13tE\x134\xf2\x16'\xefF\x0e")
				data := make([]byte, 0, 72)
				data = append(data, fullData[119]-fullData[120], fullData[62]-fullData[1], fullData[90]^fullData[63], fullData[124]-fullData[26], fullData[5]-fullData[22], fullData[56]+fullData[84], fullData[104]-fullData[54], fullData[81]+fullData[53], fullData[35]+fullData[129], fullData[18]-fullData[64], fullData[123]-fullData[40], fullData[71]^fullData[15], fullData[36]^fullData[34], fullData[7]+fullData[106], fullData[105]-fullData[126], fullData[38]^fullData[79], fullData[114]^fullData[136], fullData[60]^fullData[17], fullData[11]^fullData[102], fullData[87]+fullData[96], fullData[125]-fullData[14], fullData[108]-fullData[13], fullData[37]-fullData[55], fullData[97]-fullData[92], fullData[24]+fullData[88], fullData[98]-fullData[74], fullData[134]+fullData[94], fullData[50]+fullData[77], fullData[140]^fullData[135], fullData[141]^fullData[4], fullData[112]-fullData[86], fullData[69]-fullData[78], fullData[76]^fullData[83], fullData[27]+fullData[116], fullData[131]-fullData[61], fullData[44]+fullData[99], fullData[82]+fullData[107], fullData[41]-fullData[137], fullData[10]+fullData[113], fullData[103]-fullData[127], fullData[100]-fullData[111], fullData[30]+fullData[132], fullData[65]^fullData[47], fullData[109]^fullData[67], fullData[19]^fullData[31], fullData[101]-fullData[51], fullData[59]-fullData[68], fullData[2]^fullData[23], fullData[0]+fullData[66], fullData[3]+fullData[133], fullData[28]-fullData[117], fullData[115]^fullData[139], fullData[25]+fullData[130], fullData[8]+fullData[48], fullData[72]^fullData[85], fullData[122]-fullData[70], fullData[39]+fullData[91], fullData[73]+fullData[95], fullData[80]+fullData[43], fullData[121]^fullData[89], fullData[110]-fullData[46], fullData[75]-fullData[16], fullData[33]^fullData[6], fullData[21]+fullData[45], fullData[49]-fullData[9], fullData[138]^fullData[20], fullData[52]+fullData[58], fullData[32]^fullData[118], fullData[12]^fullData[57], fullData[42]-fullData[93], fullData[29]+fullData[128])
				return string(data)
			}())
		}()
	case 'e':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case '1':
		eicz56Kamp()
	case 'A':
		sRGAUKzMYp()
	default:
		hacker_get_out()
	}
}

func zaC7iZ9oH() {
	switch get_byte() {
	case 'T':
		oMWtXhUvb()
	case 83:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 28
				decryptKey := 223
				for counter := 0; i != 6; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 17:
						data = append(data, "D\x82"...,
						)
						i = 9
					case 5:
						i = 4
						data = append(data, "ku"...,
						)
					case 1:
						data = append(data, "\x92\x89\xa1\x91"...,
						)
						i = 7
					case 3:
						i = 21
						data = append(data, "\xcc\xda"...,
						)
					case 0:
						i = 23
						data = append(data, 141)
					case 14:
						i = 6
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 20:
						i = 13
						data = append(data, 128)
					case 2:
						i = 18
						data = append(data, "pYT"...,
						)
					case 18:
						i = 24
						data = append(data, "\x8e\x8b\x7f"...,
						)
					case 15:
						data = append(data, "\x96\x91m\xab"...,
						)
						i = 1
					case 10:
						i = 3
						data = append(data, 141)
					case 11:
						i = 0
						data = append(data, "R\x9d\x9e\x8e"...,
						)
					case 21:
						i = 8
						data = append(data, "\xd9ż"...,
						)
					case 29:
						data = append(data, "uah"...,
						)
						i = 17
					case 19:
						data = append(data, "W\x95\x83h"...,
						)
						i = 11
					case 12:
						i = 22
						data = append(data, "M\x8c"...,
						)
					case 28:
						i = 26
						data = append(data, "u\x8d"...,
						)
					case 7:
						data = append(data, "\x8du\xb3"...,
						)
						i = 25
					case 13:
						data = append(data, "xv"...,
						)
						i = 16
					case 27:
						i = 29
						data = append(data, "Oi"...,
						)
					case 8:
						data = append(data, "\xd3\xd6"...,
						)
						i = 14
					case 16:
						i = 12
						data = append(data, 102)
					case 25:
						i = 5
						data = append(data, "o\xad\x9b\x80"...,
						)
					case 23:
						i = 15
						data = append(data, "r^\x9f\x8f"...,
						)
					case 9:
						i = 20
						data = append(data, "mO="...,
						)
					case 24:
						i = 10
						data = append(data, "z`I"...,
						)
					case 4:
						i = 27
						data = append(data, "vfe"...,
						)
					case 26:
						i = 19
						data = append(data, 155)
					case 22:
						data = append(data, "G\x86"...,
						)
						i = 2
					}
				}
				return string(data)
			}())
		}()
	case 100:
		sgnr5Km0T()
	case 119:
		lQcizCt()
	default:
		hacker_get_out()
	}
}

func y54lYMb() {
	switch get_byte() {
	case 'f':
		mNsbc3o5Ok()
	case 'p':
		fG9mKjuEw2i()
	case 115:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 9
				decryptKey := 239
				for counter := 0; i != 8; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 3:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 8
					case 4:
						i = 1
						data = append(data, 100)
					case 7:
						data = append(data, 16)
						i = 2
					case 6:
						i = 0
						data = append(data, 92)
					case 5:
						i = 3
						data = append(data, 26)
					case 1:
						i = 7
						data = append(data, 96)
					case 9:
						data = append(data, 68)
						i = 6
					case 0:
						i = 4
						data = append(data, 23)
					case 2:
						i = 5
						data = append(data, 45)
					}
				}
				return string(data)
			}())
		}()
	case 75:
		lMIzLH0YI()
	default:
		hacker_get_out()
	}
}

func weh2XY11zQQ() {
	switch get_byte() {
	case 'F':
		c4rPZsl()
	case 'u':
		xS1GqtGFsM()
	case '5':
		p3szJxuFI()
	case 'T':
		fK7rLpJQH0()
	default:
		hacker_get_out()
	}
}

func fIUQpzukB() {
	switch get_byte() {
	case 'O':
		jz5UIx8q7()
	case 70:
		nVo6u9uDr()
	case 'n':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 5
				decryptKey := 122
				for counter := 0; i != 7; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 10:
						i = 2
						data = append(data, "\xfa_k"...,
						)
					case 31:
						data = append(data, 239)
						i = 28
					case 2:
						i = 19
						data = append(data, "pZW"...,
						)
					case 14:
						data = append(data, 254)
						i = 30
					case 32:
						data = append(data, " \r\x02"...,
						)
						i = 33
					case 8:
						data = append(data, 46)
						i = 21
					case 26:
						i = 10
						data = append(data, "ɸ"...,
						)
					case 34:
						i = 25
						data = append(data, 214)
					case 21:
						i = 32
						data = append(data, "\x1c\t\x02\xe4"...,
						)
					case 28:
						data = append(data, 214)
						i = 17
					case 23:
						data = append(data, 229)
						i = 26
					case 27:
						data = append(data, 231)
						i = 8
					case 13:
						i = 1
						data = append(data, 28)
					case 6:
						data = append(data, "\xf2\xe4"...,
						)
						i = 23
					case 29:
						i = 15
						data = append(data, "\xef\xd8\b\a"...,
						)
					case 19:
						data = append(data, "lu"...,
						)
						i = 9
					case 33:
						i = 34
						data = append(data, " \x0e\xf0"...,
						)
					case 25:
						data = append(data, 26)
						i = 18
					case 4:
						i = 22
						data = append(data, 215)
					case 30:
						i = 20
						data = append(data, "\xeb\xc5\t"...,
						)
					case 15:
						i = 3
						data = append(data, "\xfd\xfa"...,
						)
					case 0:
						data = append(data, "\x1e2\xec0"...,
						)
						i = 13
					case 24:
						i = 14
						data = append(data, "\x02\x14"...,
						)
					case 1:
						i = 12
						data = append(data, "\a\xef"...,
						)
					case 20:
						i = 11
						data = append(data, "\xf2\xda"...,
						)
					case 22:
						data = append(data, "\xc4\x01\xc2\xff"...,
						)
						i = 31
					case 9:
						i = 7
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 12:
						i = 16
						data = append(data, " \x1f\x15\x12"...,
						)
					case 3:
						i = 24
						data = append(data, 234)
					case 18:
						i = 29
						data = append(data, "\xd4\x18\x04"...,
						)
					case 5:
						i = 0
						data = append(data, 8)
					case 17:
						i = 6
						data = append(data, "\xb7\xef"...,
						)
					case 11:
						i = 4
						data = append(data, "\xc6\x0f\x05\xe9"...,
						)
					case 16:
						i = 27
						data = append(data, 253)
					}
				}
				return string(data)
			}())
		}()
	case 49:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 8
				decryptKey := 6
				for counter := 0; i != 6; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 8:
						data = append(data, 85)
						i = 5
					case 1:
						i = 4
						data = append(data, 115)
					case 9:
						i = 2
						data = append(data, 35)
					case 5:
						data = append(data, 111)
						i = 3
					case 7:
						data = append(data, 41)
						i = 0
					case 4:
						data = append(data, 113)
						i = 9
					case 2:
						i = 7
						data = append(data, 58)
					case 0:
						i = 6
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 3:
						data = append(data, 36)
						i = 1
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func zWRE8mxGL0_E() {
	switch get_byte() {
	case 72:
		bAAeJY3()
	case 'A':
		ggy_lUDPNlm()
	case 113:
		func() {
			println(func() string {
				key := []byte("\xe4\x1d\xb5\xbb\xcfg}\x80|\xd1\xee)\x1d\xb5ŋ3@l\x11\xd9\xc8g\x14\x0f\xd0.\x8c\v\xa3=ӮGy6ܚ\x15")
				data := []byte("]\x8c*\xdb;\xd6\xf0\xf4\x9c\v\x17I\x91\x160\xf0S\xa1\x8csK-\xc8\x7f/1\x9c\xf0+\x17\xafLΨ\xe0\x97E\b6")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 84:
		omP1cPl()
	default:
		hacker_get_out()
	}
}

func y7HZr4() {
	switch get_byte() {
	case 87:
		rUYCv1()
	case 82:
		nP4KFmoeW5()
	case 'r':
		w4d4ahEgl()
	case 'h':
		func() {
			fmt.Println(func() string {
				data := []byte("\v\"1n\b \xf9Q")
				positions := [...]byte{0, 1, 6, 7, 4, 6, 4, 1, 2, 1}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 44
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func hBFzqoQq() {
	switch get_byte() {
	case 'r':
		cqO5sHmPN2()
	case 'i':
		func() {
			println(func() string {
				data := []byte("C{jplo\xbf\x89 :,\xbft\x9d\xdeT\xb4ǁZ؆\x93z%an& fry;s~a\xc7ny")
				positions := [...]byte{11, 15, 16, 23, 36, 7, 6, 1, 22, 13, 11, 14, 21, 6, 38, 1, 16, 17, 2, 33, 22, 18, 17, 34, 27, 3, 32, 11, 18, 20, 21, 13, 36, 1, 7, 37, 24, 10, 29, 27, 19, 37, 38, 19, 34, 0, 21, 22, 2, 21}
				for i := 0; i < 50; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 214
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 'I':
		b60vW7HB()
	case 100:
		bkQLMNFAyccF()
	default:
		hacker_get_out()
	}
}

func tsHOpyqVXT() {
	switch get_byte() {
	case 'v':
		cXxVQ7()
	case 'D':
		vV4JyqH()
	case 'G':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 7
				decryptKey := 52
				for counter := 0; i != 6; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 8:
						data = append(data, 114)
						i = 9
					case 9:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 6
					case 1:
						i = 5
						data = append(data, 111)
					case 2:
						i = 1
						data = append(data, 180)
					case 0:
						data = append(data, 184)
						i = 4
					case 4:
						data = append(data, 104)
						i = 3
					case 3:
						data = append(data, 133)
						i = 8
					case 5:
						data = append(data, 188)
						i = 0
					case 7:
						data = append(data, 156)
						i = 2
					}
				}
				return string(data)
			}())
		}()
	case 110:
		gnKV52qWJp2T()
	default:
		hacker_get_out()
	}
}

func dMJQmG10F() {
	switch get_byte() {
	case 'P':
		kEngkRkSX4BC()
	case 112:
		bdaPCDkEAD()
	case 'v':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 3
				decryptKey := 151
				for counter := 0; i != 7; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 6:
						data = append(data, 184)
						i = 1
					case 3:
						data = append(data, 156)
						i = 2
					case 1:
						i = 4
						data = append(data, 106)
					case 8:
						data = append(data, 111)
						i = 9
					case 5:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 7
					case 2:
						i = 8
						data = append(data, 182)
					case 0:
						i = 5
						data = append(data, 116)
					case 4:
						i = 0
						data = append(data, 133)
					case 9:
						data = append(data, 190)
						i = 6
					}
				}
				return string(data)
			}())
		}()
	case 'R':
		func() {
			fmt.Println(func() string {
				key := []byte("8QH\xd3\x06 \\ ")
				data := []byte("\x87\xb9hAu@\x96H")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func sQwMuf2e() {
	switch get_byte() {
	case 111:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 83:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 105:
		jqsUgZ1()
	case '1':
		oVG2zzw()
	default:
		hacker_get_out()
	}
}

func d6ctM4Dc() {
	switch get_byte() {
	case '6':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 9
				decryptKey := 139
				for counter := 0; i != 4; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 2:
						i = 6
						data = append(data, 203)
					case 9:
						data = append(data, 243)
						i = 1
					case 8:
						data = append(data, 193)
						i = 7
					case 3:
						data = append(data, 198)
						i = 0
					case 0:
						i = 5
						data = append(data, 21)
					case 7:
						data = append(data, 220)
						i = 2
					case 5:
						i = 8
						data = append(data, 15)
					case 1:
						i = 3
						data = append(data, 13)
					case 6:
						i = 4
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					}
				}
				return string(data)
			}())
		}()
	case '2':
		wv43IpW()
	case 52:
		j_Q5djFBDu5()
	case 70:
		ruwLJs2zEH()
	default:
		hacker_get_out()
	}
}

func ioLVho1() {
	switch get_byte() {
	case 'e':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 106:
		tj54ABlEEd()
	case 'Q':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x95\xa9\xe33\x84\xf1\xea\xb6\xfa\xb4\x98\xdd\xe5t\x8aM\xea\x1d\xf4y\xf8\x18壗\xa4!\xae\xb3\aQ\xa8ͭ\xe1u\x92lT\xa6н^\x12Z\xec\xba\t\fDE\x99\xd3\xe4D\x8d\x02\xb7\x93\xa2|`\x05\x80\x84X*A\fE\xe8\x1d\xd9w\x85\xfbb\x11\x84\xd9M&\xc6\x14n\xaao\x18\x0f\x804\xda\x0fpa;\xea\x01\xba\f\xf7j\x18\xf1\xba\r7\xa0\xa3**n\x15\xdaǔv\xcfƋ\xc1\x02\xe3S\x9f!Mw/\x02\xf38Ս\x05\x99\x13K\xe0a\x1b\x92")
				data := make([]byte, 0, 72)
				data = append(data, fullData[9]^fullData[8], fullData[30]-fullData[45], fullData[13]^fullData[129], fullData[116]-fullData[50], fullData[51]+fullData[79], fullData[65]^fullData[29], fullData[95]+fullData[99], fullData[41]-fullData[133], fullData[114]^fullData[1], fullData[48]^fullData[76], fullData[27]-fullData[126], fullData[109]^fullData[35], fullData[127]+fullData[40], fullData[77]+fullData[125], fullData[19]^fullData[88], fullData[15]+fullData[21], fullData[22]^fullData[46], fullData[80]^fullData[83], fullData[38]+fullData[53], fullData[134]+fullData[93], fullData[75]^fullData[25], fullData[7]-fullData[139], fullData[94]-fullData[5], fullData[84]-fullData[92], fullData[18]-fullData[39], fullData[63]-fullData[137], fullData[104]-fullData[54], fullData[124]+fullData[36], fullData[113]+fullData[10], fullData[74]^fullData[91], fullData[110]-fullData[122], fullData[62]^fullData[90], fullData[43]^fullData[60], fullData[118]^fullData[31], fullData[85]+fullData[57], fullData[2]-fullData[78], fullData[101]^fullData[81], fullData[69]-fullData[138], fullData[34]^fullData[0], fullData[37]-fullData[105], fullData[89]^fullData[72], fullData[67]+fullData[130], fullData[128]-fullData[98], fullData[121]-fullData[108], fullData[119]^fullData[117], fullData[100]-fullData[82], fullData[86]^fullData[87], fullData[132]+fullData[135], fullData[97]-fullData[59], fullData[58]^fullData[11], fullData[71]-fullData[12], fullData[61]-fullData[6], fullData[23]^fullData[24], fullData[20]^fullData[14], fullData[68]-fullData[33], fullData[115]^fullData[52], fullData[56]+fullData[3], fullData[73]-fullData[47], fullData[96]+fullData[4], fullData[120]^fullData[107], fullData[32]+fullData[141], fullData[111]^fullData[66], fullData[17]+fullData[136], fullData[42]+fullData[112], fullData[55]^fullData[70], fullData[102]+fullData[44], fullData[26]+fullData[123], fullData[140]^fullData[49], fullData[16]^fullData[28], fullData[131]+fullData[106], fullData[103]+fullData[64])
				return string(data)
			}())
		}()
	case 102:
		xWyyCc0()
	default:
		hacker_get_out()
	}
}

func e1HmCpV9() {
	switch get_byte() {
	case 48:
		p8zhZ9puZry()
	case 'X':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x16\x16\x1e\xdf\x11\xb8\xbd\xb7\xe4\xa6\xc86\xe5\n>\x89")
				data := make([]byte, 0, 9)
				data = append(data, fullData[14]+fullData[4], fullData[15]+fullData[3], fullData[0]+fullData[13], fullData[9]+fullData[10], fullData[5]+fullData[7], fullData[11]^fullData[1], fullData[2]-fullData[8], fullData[12]-fullData[6])
				return string(data)
			}())
		}()
	case 'a':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 110:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 6
				decryptKey := 128
				for counter := 0; i != 12; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 7:
						i = 14
						data = append(data, "\xba\xa2\x8e\xd7"...,
						)
					case 5:
						data = append(data, "\xa8\x92\x8f\xa4"...,
						)
						i = 29
					case 20:
						data = append(data, "\xd6\xea\xa4\xe8"...,
						)
						i = 30
					case 26:
						i = 18
						data = append(data, "\xaf\xf6"...,
						)
					case 6:
						i = 20
						data = append(data, 192)
					case 3:
						data = append(data, "Ƹ"...,
						)
						i = 10
					case 28:
						i = 25
						data = append(data, "\x9c\xd8"...,
						)
					case 30:
						i = 2
						data = append(data, 212)
					case 15:
						data = append(data, "̶"...,
						)
						i = 21
					case 2:
						i = 23
						data = append(data, "\xbf\xa7\xe8\xe7"...,
						)
					case 24:
						data = append(data, 204)
						i = 4
					case 9:
						i = 15
						data = append(data, 186)
					case 17:
						i = 8
						data = append(data, "\x7f\xb7\xba\xac"...,
						)
					case 25:
						data = append(data, "ź\xd8"...,
						)
						i = 3
					case 11:
						i = 24
						data = append(data, 224)
					case 8:
						data = append(data, "\xad\x91"...,
						)
						i = 16
					case 13:
						i = 7
						data = append(data, "\x8d\xd1"...,
						)
					case 10:
						data = append(data, "\x9e\xe2\x9c"...,
						)
						i = 11
					case 22:
						i = 12
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 16:
						data = append(data, "\x80\u0097\xa3"...,
						)
						i = 5
					case 14:
						data = append(data, 205)
						i = 0
					case 21:
						data = append(data, 179)
						i = 13
					case 29:
						data = append(data, 173)
						i = 22
					case 32:
						data = append(data, "z\xb7\xa7"...,
						)
						i = 1
					case 27:
						i = 9
						data = append(data, "\xb5\xb2\xa2"...,
						)
					case 4:
						i = 19
						data = append(data, "\xb7\xa0"...,
						)
					case 19:
						data = append(data, "\xc0\xbf"...,
						)
						i = 27
					case 18:
						data = append(data, "\xe4\xc1\xba"...,
						)
						i = 28
					case 0:
						data = append(data, "\xa1\x8f|\xb9"...,
						)
						i = 32
					case 1:
						i = 17
						data = append(data, 142)
					case 23:
						data = append(data, "\xdd\xda"...,
						)
						i = 31
					case 31:
						data = append(data, 197)
						i = 26
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func h9QWim0() {
	switch get_byte() {
	case 50:
		cUSgYf()
	case 'Q':
		nEjvStbE()
	case 103:
		cbhZDVD()
	case 121:
		func() {
			fmt.Println(func() string {
				seed := byte(23)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(89)(21)(243)(73)(179)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func jFJdks() {
	switch get_byte() {
	case '9':
		dmjSJB()
	case 70:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 5
				decryptKey := 174
				for counter := 0; i != 15; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 12:
						data = append(data, "\x14\x1b\x1b\xca"...,
						)
						i = 4
					case 11:
						i = 0
						data = append(data, "\x15(\x1a"...,
						)
					case 1:
						i = 14
						data = append(data, 203)
					case 8:
						i = 12
						data = append(data, 18)
					case 0:
						i = 17
						data = append(data, "\x19\""...,
						)
					case 2:
						i = 15
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 16:
						i = 2
						data = append(data, 169)
					case 7:
						i = 11
						data = append(data, "\xd2\x12\xd4"...,
						)
					case 10:
						data = append(data, "\x1b\x14"...,
						)
						i = 7
					case 9:
						data = append(data, "\xa2\xe2\xeb"...,
						)
						i = 3
					case 3:
						data = append(data, "\xe4\xef\xf3"...,
						)
						i = 16
					case 17:
						i = 6
						data = append(data, "\xda\x1a*"...,
						)
					case 6:
						data = append(data, "\x1f\xde12"...,
						)
						i = 13
					case 4:
						i = 1
						data = append(data, "\xe3\xd5"...,
						)
					case 14:
						data = append(data, "\"\x0e"...,
						)
						i = 10
					case 13:
						data = append(data, 56)
						i = 9
					case 5:
						data = append(data, "\x1b\x10\x19\xc3"...,
						)
						i = 8
					}
				}
				return string(data)
			}())
		}()
	case 'H':
		kQ0tB7vbkx()
	case 'R':
		iNUyBLXTa()
	default:
		hacker_get_out()
	}
}

func szWhRX3n0Z1() {
	switch get_byte() {
	case 121:
		sifVMSf()
	case '2':
		dGqfMqV()
	case 116:
		func() {
			defer func() {
				println(func() string {
					data := []byte("\x9bu\x9c\xc6o\x8b\xcf\xf9itc:\xe0")
					positions := [...]byte{3, 3, 0, 7, 2, 4, 6, 2, 10, 12, 5, 0, 12, 5}
					for i := 0; i < 14; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 178
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
					}
					return string(data)
				}())
			}()
		}()
	case 111:
		func() {
			println(func() string {
				key := []byte("\x9apt\xa3C\x92\xa0\x7f\x82qNWFw\x85Ql\xd1\xe6\xfb\xf8?7\xfe\x18\x87R$t\x9f\xac\x14w\xa6?O\x13P\xa7")
				data := []byte("\x13\xdf\xe9ï\x01\x13\xf3\xa2\xabww\xba\xd8\xf0\xb6\x8c2\x06]j\xa4\x98i8\xe8\xc0\x88\x94\x13\x1e\x8d\x97\a\xa6\xb0|\xbe\xc8")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func ztR8mBVK4ISV() {
	switch get_byte() {
	case 101:
		cXZve2BsO0Xv()
	case '1':
		func() {
			defer func() {
				println(func() string {
					seed := byte(225)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
					fnc(105)(43)(254)(1)(172)(68)(11)(177)(73)(11)(172)(26)(10)
					return string(data)
				}())
			}()
		}()
	case 116:
		is_Nl6()
	case 'C':
		cUjhYpn_67()
	default:
		hacker_get_out()
	}
}

func l9RBlu4JE() {
	switch get_byte() {
	case 'S':
		func() {
			fmt.Println(func() string {
				data := []byte("];\x981\xc41h?^n\xe9 \x03P\xb4\vAY[u\xef\x0f=_=5(\x13M(\xdc\t\xabnl\x15L\x86t_<4l\xe5%Ҭ\xfd_N<\xfc4\x19_G\xe2#\x12G\x16\xf1an\xf3\xfd\xd1\xfb\x19\xffu")
				positions := [...]byte{37, 34, 32, 62, 13, 28, 44, 67, 28, 65, 2, 2, 43, 47, 69, 20, 0, 6, 68, 51, 18, 57, 8, 64, 69, 20, 11, 61, 63, 47, 63, 42, 64, 67, 21, 62, 5, 37, 45, 8, 32, 40, 50, 14, 4, 8, 22, 46, 59, 28, 10, 16, 53, 24, 60, 45, 16, 13, 29, 12, 30, 22, 15, 27, 0, 8, 43, 67, 18, 21, 66, 30, 42, 29, 58, 50, 37, 32, 11, 35, 58, 29, 31, 0, 26, 15, 1, 1, 18, 56, 43, 22, 4, 7}
				for i := 0; i < 94; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 212
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 'I':
		func() {
			println(func() string {
				key := []byte("P\x10\xaf\xc3^s\x9a1:\xa6\xd9\x11q\xafp\xb5\xbd\x82g\xd2\xdb\xc4\xc6\x19\x89\xfb\xa1\x8bqN%\\lR\x86\xeeY\xa1\xaa")
				data := []byte(")_\xc6]\x0e\xfc\xd9C\xe6\x94P\x0f\x03\xb2\xfb\xb0c߹\x90\x97\xa1\x9bR\x97f\xcdٯ&M\x1d\xb4\x0f\xe1s\x10\xcdw")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 'K':
		kxfh6ObzHqxT()
	case 121:
		cMpCg2IkJ95()
	default:
		hacker_get_out()
	}
}

func gE1vIgE1xJ2d() {
	switch get_byte() {
	case 'Z':
		nIwyucd_2oR()
	case 103:
		lFTmZhvRR()
	case 'h':
		v6r3Fj2lms()
	case 85:
		qL93xZj0()
	default:
		hacker_get_out()
	}
}

func zkUSs83QAYW() {
	switch get_byte() {
	case 114:
		ez37tGvutuBh()
	case 'C':
		tZ52VxJ05Z4j()
	case 122:
		vin2bH1m()
	case 49:
		func() {
			fmt.Println(func() string {
				key := []byte("\x91tD\xfa{\xb6\x02u")
				data := []byte("\xde\x1cd\x94\x14\x968]")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func hWzuSArGUFZM() {
	switch get_byte() {
	case 'w':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'H':
		faN8Vq()
	case 'J':
		xYgaB1()
	case 102:
		tEtJGB()
	default:
		hacker_get_out()
	}
}

func cqO5sHmPN2() {
	switch get_byte() {
	case '6':
		aIA4EyqKIn()
	case 71:
		hBFzqoQq()
	case 'N':
		func() {
			println(func() string {
				key := []byte("\xf5\xc2-@\x1d\x88\xefa\xac9\x8f\x98\x04l\xa6\x165F\x1a]\xf6h\x86f\x9fJTP\xfc\"f^\x9dX\xf4GQ\x99L")
				data := []byte("\x8c\xadX`q\xe7\x9c\x15\x8c\x03\xa6\xb8p\r\xcds\x15':?\x84\r\xe7\r\xbf+:4\xdcV\x14'\xbd9\x93&8\xf7m")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 'x':
		a2jNP1jeH9_()
	default:
		hacker_get_out()
	}
}

func u1aNyRPG() {
	switch get_byte() {
	case 111:
		k9Ixk2Lpuh3()
	case 119:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 1
				decryptKey := 226
				for counter := 0; i != 9; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 5:
						i = 3
						data = append(data, 205)
					case 0:
						i = 4
						data = append(data, 201)
					case 4:
						i = 5
						data = append(data, 130)
					case 1:
						data = append(data, 239)
						i = 0
					case 6:
						i = 2
						data = append(data, 156)
					case 8:
						i = 9
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 7:
						i = 6
						data = append(data, 133)
					case 3:
						i = 7
						data = append(data, 203)
					case 2:
						data = append(data, 143)
						i = 8
					}
				}
				return string(data)
			}())
		}()
	case 'f':
		dMKhL5al_lN()
	case 'G':
		ebhxJbb59a()
	default:
		hacker_get_out()
	}
}

func ulpVBXwn1T() {
	switch get_byte() {
	case 68:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 7
				decryptKey := 198
				for counter := 0; i != 8; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 5:
						i = 9
						data = append(data, 175)
					case 9:
						i = 4
						data = append(data, 169)
					case 0:
						data = append(data, 254)
						i = 6
					case 7:
						i = 3
						data = append(data, 141)
					case 4:
						data = append(data, 231)
						i = 0
					case 3:
						i = 1
						data = append(data, 171)
					case 6:
						data = append(data, 237)
						i = 2
					case 1:
						data = append(data, 224)
						i = 5
					case 2:
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
						i = 8
					}
				}
				return string(data)
			}())
		}()
	case '8':
		ss0IkO()
	case 106:
		y9z86l()
	case 98:
		nEjvStbE()
	default:
		hacker_get_out()
	}
}

func oGmglNiR_1Hh() {
	switch get_byte() {
	case 'z':
		hrwMtrLcNz7()
	case 89:
		spsS28rv()
	case 'g':
		nwwCiSzx()
	case 119:
		bbAwx5YXacq6()
	default:
		hacker_get_out()
	}
}

func vwdSq1yJ() {
	switch get_byte() {
	case 'M':
		func() {
			defer func() {
				println(func() string {
					seed := byte(47)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
					fnc(101)(225)(6)(15)(170)(80)(235)(79)(215)(225)(86)(246)(134)
					return string(data)
				}())
			}()
		}()
	case 'W':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 11
				decryptKey := 117
				for counter := 0; i != 2; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 5:
						i = 9
						data = append(data, "Ň"...,
						)
					case 1:
						i = 2
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 12:
						data = append(data, "\xed\xd9\xe6"...,
						)
						i = 8
					case 7:
						data = append(data, 190)
						i = 6
					case 6:
						data = append(data, 116)
						i = 1
					case 10:
						data = append(data, "\xc5\xc4͍"...,
						)
						i = 3
					case 14:
						data = append(data, "\x96\xdd\xdf\xe6"...,
						)
						i = 13
					case 0:
						i = 10
						data = append(data, 211)
					case 9:
						data = append(data, 200)
						i = 0
					case 8:
						data = append(data, "߅"...,
						)
						i = 5
					case 4:
						data = append(data, "\xb6\xa8\x9e"...,
						)
						i = 12
					case 13:
						i = 4
						data = append(data, "\xe6\x9d"...,
						)
					case 15:
						data = append(data, "\xdc\xdd\xe3u"...,
						)
						i = 16
					case 16:
						data = append(data, "\xb5\xbe\xb7\xba"...,
						)
						i = 7
					case 3:
						data = append(data, "\xcd\xdd҉"...,
						)
						i = 15
					case 11:
						data = append(data, "\xee\xe3\xec"...,
						)
						i = 14
					}
				}
				return string(data)
			}())
		}()
	case 'q':
		r0cvam()
	case 79:
		iApoG1AbZ06()
	default:
		hacker_get_out()
	}
}

func gOrvWiK7myF() {
	switch get_byte() {
	case 'e':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'j':
		dKwZLY44()
	case 84:
		func() {
			fmt.Println(func() string {
				seed := byte(168)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(167)(25)(184)(78)(1)(177)(26)(238)
				return string(data)
			}())
		}()
	case 'P':
		i0BR0cg()
	default:
		hacker_get_out()
	}
}

func nsd3xB() {
	switch get_byte() {
	case 'i':
		z8Jh2P()
	case 'u':
		cq7cryaZ()
	case 113:
		func() {
			println(func() string {
				data := []byte("\x18o|\x7f[\a\x19t [[|JSpQ aYa~cakTGX<\x00tr4-}ga&\x1e@")
				positions := [...]byte{38, 14, 28, 32, 18, 31, 32, 4, 19, 38, 3, 19, 26, 6, 24, 26, 21, 26, 11, 15, 2, 25, 0, 9, 20, 11, 26, 25, 11, 13, 5, 3, 27, 33, 31, 27, 5, 36, 12, 10, 11, 32, 31, 37, 28, 10, 24, 5}
				for i := 0; i < 48; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 3
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 'H':
		eWP2UIV3MT()
	default:
		hacker_get_out()
	}
}

func tl9nRks_xELm() {
	switch get_byte() {
	case 79:
		cq7cryaZ()
	case 120:
		lpn4zRMK()
	case 'a':
		zBAbwdSzTFKW()
	case '1':
		eEVi0NhxQjaQ()
	default:
		hacker_get_out()
	}
}

func nwwCiSzx() {
	switch get_byte() {
	case 71:
		e_52BIz3()
	case 'N':
		v5oqVRy()
	case '6':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 27
				decryptKey := 136
				for counter := 0; i != 13; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 14:
						data = append(data, "r\xb9"...,
						)
						i = 12
					case 7:
						data = append(data, "y\xbb\xa6"...,
						)
						i = 24
					case 5:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 13
					case 4:
						i = 17
						data = append(data, "\xa0\xdaȱ"...,
						)
					case 22:
						i = 23
						data = append(data, "\xa2\x8e"...,
						)
					case 18:
						i = 20
						data = append(data, "\xd2\xd3\xc7"...,
						)
					case 3:
						i = 8
						data = append(data, "\xaa\xec\xa8\xe2"...,
						)
					case 2:
						i = 15
						data = append(data, "\xb8\xaf\x95"...,
						)
					case 17:
						data = append(data, 155)
						i = 18
					case 26:
						i = 16
						data = append(data, 186)
					case 11:
						data = append(data, 159)
						i = 22
					case 6:
						i = 7
						data = append(data, "\xaa\x9d"...,
						)
					case 16:
						i = 9
						data = append(data, "\xbb\xaf\xae"...,
						)
					case 9:
						i = 6
						data = append(data, "\x94\xae\xbe"...,
						)
					case 25:
						i = 28
						data = append(data, "\xdbֶ\xf4"...,
						)
					case 20:
						i = 0
						data = append(data, "Ƨ"...,
						)
					case 0:
						data = append(data, "\x93\xd8\xc8"...,
						)
						i = 25
					case 23:
						data = append(data, "\x81\x98\x9f"...,
						)
						i = 5
					case 8:
						i = 26
						data = append(data, "й\xa4"...,
						)
					case 21:
						i = 10
						data = append(data, "˹"...,
						)
					case 28:
						i = 1
						data = append(data, "\xd7\xce"...,
						)
					case 27:
						data = append(data, "\xba\xd2\xe4"...,
						)
						i = 4
					case 12:
						i = 19
						data = append(data, "\xb1\xbb\xab\x96"...,
						)
					case 15:
						i = 11
						data = append(data, "\x82Ƒ"...,
						)
					case 24:
						i = 14
						data = append(data, 132)
					case 1:
						i = 3
						data = append(data, "\xea\xda\xc2"...,
						)
					case 19:
						i = 21
						data = append(data, "Ռ"...,
						)
					case 10:
						data = append(data, "\xa2\x89\xc3\xc4"...,
						)
						i = 2
					}
				}
				return string(data)
			}())
		}()
	case 68:
		oGmglNiR_1Hh()
	default:
		hacker_get_out()
	}
}

func tEtJGB() {
	switch get_byte() {
	case 'P':
		ozTnrF9ERW()
	case '8':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 2
					decryptKey := 171
					for counter := 0; i != 7; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 5:
							i = 1
							data = append(data, "\xdf\xf8\xfd"...,
							)
						case 0:
							data = append(data, 20)
							i = 6
						case 4:
							i = 5
							data = append(data, 48)
						case 2:
							data = append(data, "\xff)"...,
							)
							i = 3
						case 3:
							i = 0
							data = append(data, "**\xd1"...,
							)
						case 1:
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
							i = 7
						case 6:
							data = append(data, "\"\xd2&"...,
							)
							i = 4
						}
					}
					return string(data)
				}())
			}()
		}()
	case 'o':
		hWzuSArGUFZM()
	case 121:
		func() {
			println(func() string {
				fullData := []byte("\xb1\xa2\xa2\x96\x9eH\xc3\xce5\x17\xa0\xc9=r7rna\xebU\x89\xb8H\x11ż5\xb3G\xc3\x0e\x12\xb0\x19q\x8d}˓R\xf3-B\xdd\xd9\xc1\x95ӣ\xfa\nN/\x99\x00\xce\a)d\xf2\xb9s\x97\xbf]\xb7.\xe3\r\xdd%\x15\x81j\xdf.Dd")
				data := make([]byte, 0, 40)
				data = append(data, fullData[9]^fullData[16], fullData[31]+fullData[64], fullData[1]+fullData[47], fullData[53]^fullData[60], fullData[74]-fullData[61], fullData[65]-fullData[22], fullData[36]-fullData[50], fullData[14]-fullData[29], fullData[51]-fullData[75], fullData[71]+fullData[70], fullData[21]+fullData[34], fullData[58]^fullData[76], fullData[20]+fullData[18], fullData[24]-fullData[77], fullData[43]-fullData[13], fullData[3]^fullData[40], fullData[12]+fullData[67], fullData[17]^fullData[54], fullData[19]-fullData[8], fullData[48]+fullData[63], fullData[28]^fullData[26], fullData[42]-fullData[69], fullData[23]-fullData[32], fullData[15]-fullData[56], fullData[68]^fullData[41], fullData[10]+fullData[45], fullData[62]-fullData[57], fullData[55]-fullData[73], fullData[35]+fullData[38], fullData[0]+fullData[6], fullData[7]^fullData[25], fullData[49]-fullData[72], fullData[66]^fullData[30], fullData[27]-fullData[39], fullData[4]+fullData[11], fullData[5]+fullData[33], fullData[2]^fullData[37], fullData[44]+fullData[46], fullData[59]+fullData[52])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func ez37tGvutuBh() {
	switch get_byte() {
	case 104:
		lSZVtpP3Zj()
	case 88:
		zkUSs83QAYW()
	case 55:
		cJcJjquces()
	case 80:
		func() {
			fmt.Println(func() string {
				fullData := []byte(";\xd0]`\x8e\xdc\x1e\xee\x8fCF\xdd\\\xf7\x9b\xeb\x92\xd8=\xd7\t\b\xe6\x98Q>\x8ee\xa1w\xd8(A\xf5PJ\xc5.ߠSxl\x06\r\xd4\xd4o\fW\x19\x1e\x0fK\xaa\xf5y4\x7fTM\x91 :l\xaaǭ~M\xc0h%\xc3ϖU\xd4=p\xf7\xber̥\xf7\xdcjv\xc1\fl\x03\xf8\xa2\x13\xb332z\xd8\x00Z\x15\xf3\xe9\x82\x0e\xc2\xc9mɿ-\xa1[\xf8\xadm_\xf6)Jѓ\xcd\xfa\x9c\xe9\n;[<\xc3Ѷ\aᴺ\xce/")
				data := make([]byte, 0, 72)
				data = append(data, fullData[96]+fullData[14], fullData[47]-fullData[129], fullData[9]+fullData[97], fullData[12]^fullData[110], fullData[102]^fullData[31], fullData[48]+fullData[40], fullData[69]+fullData[126], fullData[44]^fullData[18], fullData[25]-fullData[1], fullData[52]-fullData[28], fullData[138]+fullData[117], fullData[26]^fullData[134], fullData[51]-fullData[19], fullData[130]^fullData[20], fullData[123]-fullData[131], fullData[78]-fullData[30], fullData[16]+fullData[125], fullData[82]-fullData[50], fullData[74]^fullData[13], fullData[72]^fullData[34], fullData[64]+fullData[104], fullData[95]^fullData[10], fullData[66]-fullData[49], fullData[62]^fullData[58], fullData[83]+fullData[106], fullData[128]^fullData[86], fullData[88]+fullData[101], fullData[119]-fullData[37], fullData[99]-fullData[21], fullData[35]-fullData[15], fullData[79]-fullData[121], fullData[70]-fullData[8], fullData[67]^fullData[73], fullData[55]+fullData[56], fullData[109]-fullData[71], fullData[127]^fullData[133], fullData[7]^fullData[94], fullData[139]-fullData[76], fullData[39]^fullData[46], fullData[124]-fullData[57], fullData[3]-fullData[136], fullData[84]^fullData[61], fullData[77]+fullData[114], fullData[113]+fullData[98], fullData[60]+fullData[80], fullData[100]^fullData[105], fullData[0]+fullData[132], fullData[75]^fullData[93], fullData[6]-fullData[112], fullData[22]-fullData[23], fullData[11]+fullData[115], fullData[89]-fullData[53], fullData[120]^fullData[108], fullData[43]+fullData[42], fullData[59]-fullData[33], fullData[4]^fullData[111], fullData[38]-fullData[54], fullData[122]-fullData[5], fullData[85]+fullData[29], fullData[118]^fullData[90], fullData[137]+fullData[68], fullData[103]+fullData[141], fullData[87]-fullData[63], fullData[32]-fullData[140], fullData[2]-fullData[116], fullData[17]^fullData[65], fullData[81]+fullData[135], fullData[107]^fullData[24], fullData[36]-fullData[91], fullData[45]-fullData[27], fullData[41]-fullData[92])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func zXf2GHn() {
	switch get_byte() {
	case 'H':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 4
				decryptKey := 115
				for counter := 0; i != 12; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 11:
						data = append(data, "\x10\v\xdb\x1d"...,
						)
						i = 3
					case 14:
						data = append(data, 215)
						i = 2
					case 10:
						data = append(data, "\x1b\t"...,
						)
						i = 11
					case 6:
						i = 9
						data = append(data, "\xf8\xfe\xae"...,
						)
					case 2:
						i = 1
						data = append(data, ",'/"...,
						)
					case 13:
						data = append(data, ")\xd3\x15"...,
						)
						i = 8
					case 0:
						i = 13
						data = append(data, "\x1c1%\x1e"...,
						)
					case 7:
						data = append(data, "\xed\xf0\xeb"...,
						)
						i = 6
					case 4:
						data = append(data, "$\x1b\x1e\xca"...,
						)
						i = 15
					case 15:
						i = 5
						data = append(data, "\x1b\x1f \""...,
						)
					case 5:
						data = append(data, "\xc3\xde\xca\xc2"...,
						)
						i = 10
					case 3:
						data = append(data, 217)
						i = 0
					case 8:
						data = append(data, "\x1f\x16"...,
						)
						i = 14
					case 1:
						i = 7
						data = append(data, 171)
					case 9:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 12
					}
				}
				return string(data)
			}())
		}()
	case 'q':
		z8rjlm()
	case 'J':
		gYU76P_Ih()
	case 'u':
		func() {
			println(func() string {
				key := []byte("\xab\x94\xa9\xa5$\xbc\r\U0008b597\x03e\x18\x03\xb6\xb7צ\xe0\xb63\x18\xa2\xe8g\xbds\x14T]\xe1\xae~\x05\xa5\xbfڪ")
				data := []byte("\xd2\xfb܅H\xd3~\x86\xab\xac\xbe#\x11yhӗ\xb6\x86\x82\xc4Vy\xc9\xc8\x06\xd3\x174 /\x98\x8e\x1fb\xc4ִ\x8b")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func qfgu9L5J() {
	switch get_byte() {
	case 'K':
		hl9sj5_3rv()
	case 86:
		jQ0f8Zf()
	case 'B':
		i0etL81()
	case 'O':
		gYiX7i()
	default:
		hacker_get_out()
	}
}

func lMbqLJ() {
	switch get_byte() {
	case 'a':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xac\x87\x06\xaaP`\xaf.\f\xe1D\xe0\xb3\xe8\xc2OxD\x13;\v\xf6\xc0\xb6\xfc\xbd\xc5KE\xa5\xf0AyȘ\xba\x9b\xf8\xfe\xb7\x8b\xd2\f\rm\x15\xd7\x0f̥\u0380.\xbc5 \x8a'\xb7\x82\xac\x0f.\xf8!N\xaew\x7f\x88\xf7/\x96()\xb4֫\xe2Eé\xcax}W\xa1_\xadi\xb8F\xf1U,\x8c\xb8\xe31\x0fzy\vO\xcdg\x06\xe6\xce\f\xf3$`y\xb3\b\x19|\xd1\xf6\x8dG\x92:\xbe\x85\x10\xb9\a\xe2\x8d\x1a\xe9\xb0!ze\x9a&\x1b\x0e\x99")
				data := make([]byte, 0, 72)
				data = append(data, fullData[7]^fullData[112], fullData[127]+fullData[0], fullData[102]^fullData[84], fullData[126]^fullData[64], fullData[32]^fullData[20], fullData[122]^fullData[104], fullData[71]-fullData[13], fullData[3]-fullData[100], fullData[134]-fullData[114], fullData[50]-fullData[5], fullData[44]^fullData[42], fullData[97]^fullData[53], fullData[70]-fullData[133], fullData[39]-fullData[125], fullData[35]^fullData[48], fullData[22]^fullData[29], fullData[63]-fullData[141], fullData[118]-fullData[16], fullData[101]-fullData[31], fullData[123]^fullData[15], fullData[130]^fullData[41], fullData[88]^fullData[37], fullData[68]-fullData[99], fullData[4]+fullData[61], fullData[115]+fullData[91], fullData[11]+fullData[93], fullData[1]^fullData[92], fullData[24]+fullData[54], fullData[105]^fullData[45], fullData[136]-fullData[106], fullData[75]^fullData[110], fullData[21]-fullData[26], fullData[90]^fullData[76], fullData[116]^fullData[67], fullData[52]^fullData[103], fullData[60]+fullData[12], fullData[28]+fullData[128], fullData[121]-fullData[129], fullData[23]+fullData[124], fullData[131]+fullData[79], fullData[87]^fullData[2], fullData[8]+fullData[73], fullData[96]+fullData[25], fullData[30]^fullData[6], fullData[18]+fullData[98], fullData[107]+fullData[27], fullData[9]+fullData[72], fullData[65]^fullData[55], fullData[17]^fullData[139], fullData[135]-fullData[94], fullData[10]^fullData[117], fullData[83]+fullData[38], fullData[119]^fullData[14], fullData[74]-fullData[58], fullData[111]+fullData[19], fullData[89]^fullData[62], fullData[95]-fullData[85], fullData[47]-fullData[86], fullData[80]+fullData[77], fullData[81]^fullData[33], fullData[46]+fullData[69], fullData[108]^fullData[56], fullData[40]+fullData[49], fullData[137]^fullData[132], fullData[36]+fullData[82], fullData[34]-fullData[138], fullData[59]-fullData[140], fullData[43]-fullData[66], fullData[51]-fullData[57], fullData[78]^fullData[120], fullData[109]^fullData[113])
				return string(data)
			}())
		}()
	case 88:
		rUNopf()
	case '4':
		ghfYvspo3c()
	case 107:
		cFIBDcL78()
	default:
		hacker_get_out()
	}
}

func uI4nok() {
	switch get_byte() {
	case 'E':
		wIUcV9mX2H()
	case 57:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x00\xd2\xf2\xb9OJ\xe4\xceN\xebZV\xb2\xcb \xd6")
				data := make([]byte, 0, 9)
				data = append(data, fullData[0]^fullData[4], fullData[12]-fullData[5], fullData[2]^fullData[1], fullData[14]^fullData[8], fullData[3]^fullData[15], fullData[13]^fullData[9], fullData[11]+fullData[6], fullData[7]+fullData[10])
				return string(data)
			}())
		}()
	case 'a':
		v_Z6RAU8()
	case 'f':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 5
					decryptKey := 101
					for counter := 0; i != 2; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 0:
							data = append(data, "\xb6\xcf\xd8"...,
							)
							i = 3
						case 4:
							i = 0
							data = append(data, "\t\xb9\x01\v"...,
							)
						case 3:
							i = 2
							for y := range data {
								data[y] = data[y] + byte(decryptKey^y)
							}
						case 5:
							i = 1
							data = append(data, "\xea\x14"...,
							)
						case 1:
							i = 4
							data = append(data, "\x11\x11\xbc\xff"...,
							)
						}
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func i7fBLgBTR() {
	switch get_byte() {
	case 'j':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xf1\xa7E\x9a~\x85cq\x84\xad~F%\xa8U\x1f\xdeNE\x91\xa2\x12\x19\x18'\xf1MO\x103\xed\x10a\xb6\xca॥\xba\x03\x84@W+\x92\xc4GH\x92\xd1\xe8\xe7O\x81\x10\xe3T{\xd4\x11\x80\xe5\xfa\x81T\xe4t%\xa0\xceq\xc6D$Э\xe9\x17\xfc\x89r.ót\xb7\xb7ƺ.\xc8\x05\b\xac\x98\xb3`\xef\xf0\x13CK\xe5\"\x05\xb0k\xd1\x05o]ٺ\xede \x9a\x14\x9dp@\xfd\x1f\x85\a\x9f9\xea\xc3.\x9dv\xfe)\xba]\xe8\xa27$\xbd:")
				data := make([]byte, 0, 72)
				data = append(data, fullData[30]-fullData[125], fullData[91]^fullData[96], fullData[13]+fullData[69], fullData[49]^fullData[35], fullData[87]-fullData[64], fullData[67]-fullData[71], fullData[61]^fullData[137], fullData[20]^fullData[48], fullData[4]-fullData[54], fullData[95]-fullData[2], fullData[60]-fullData[15], fullData[57]^fullData[73], fullData[62]-fullData[83], fullData[94]+fullData[116], fullData[124]-fullData[19], fullData[110]+fullData[92], fullData[100]-fullData[65], fullData[117]^fullData[26], fullData[118]^fullData[37], fullData[79]^fullData[78], fullData[23]+fullData[46], fullData[50]^fullData[140], fullData[9]+fullData[82], fullData[63]-fullData[103], fullData[12]^fullData[106], fullData[121]^fullData[90], fullData[18]^fullData[29], fullData[52]^fullData[10], fullData[6]^fullData[59], fullData[1]-fullData[47], fullData[68]^fullData[51], fullData[33]-fullData[123], fullData[127]+fullData[8], fullData[97]^fullData[53], fullData[139]-fullData[128], fullData[43]^fullData[66], fullData[130]^fullData[107], fullData[101]^fullData[129], fullData[134]+fullData[112], fullData[136]^fullData[85], fullData[75]-fullData[56], fullData[135]-fullData[133], fullData[131]^fullData[39], fullData[0]-fullData[44], fullData[76]-fullData[36], fullData[108]-fullData[58], fullData[105]-fullData[126], fullData[111]^fullData[86], fullData[74]-fullData[70], fullData[16]+fullData[119], fullData[141]+fullData[132], fullData[31]-fullData[3], fullData[80]^fullData[11], fullData[77]^fullData[114], fullData[98]+fullData[109], fullData[28]^fullData[42], fullData[25]+fullData[72], fullData[17]^fullData[115], fullData[81]+fullData[41], fullData[21]+fullData[27], fullData[89]^fullData[7], fullData[24]-fullData[55], fullData[93]+fullData[40], fullData[138]-fullData[45], fullData[122]-fullData[88], fullData[113]+fullData[5], fullData[32]+fullData[99], fullData[38]^fullData[102], fullData[120]^fullData[22], fullData[84]-fullData[104], fullData[34]-fullData[14])
				return string(data)
			}())
		}()
	case 89:
		sLb3m6p()
	case 'X':
		zdpm1_nik()
	case 'b':
		j_Q5djFBDu5()
	default:
		hacker_get_out()
	}
}

func dhjAoOF() {
	switch get_byte() {
	case 120:
		uzxLSu()
	case 102:
		cXZve2BsO0Xv()
	case 109:
		fRyPZv()
	case 'z':
		toTsojzdfy()
	default:
		hacker_get_out()
	}
}

func rBZLpzcJyKQ() {
	switch get_byte() {
	case 'E':
		e3vhkipoHsFv()
	case 'u':
		lmWxbkMGxNe6()
	case 106:
		h0YSAxFt()
	case 80:
		func() {
			println(func() string {
				data := []byte("\xc5Gu/uo6\x88 :\xf7\x81\xb6\x80\xb8\x86\x8ab\xbf\xadG\x9b\xa5\x9a\x85a\xa9\x84\x8c\x97\x93D&apaL\x9e\x94")
				positions := [...]byte{0, 12, 37, 1, 10, 19, 19, 29, 29, 17, 18, 31, 14, 16, 18, 37, 3, 26, 34, 1, 31, 22, 21, 13, 23, 30, 27, 28, 36, 38, 16, 20, 26, 32, 37, 28, 1, 15, 29, 11, 15, 10, 7, 12, 13, 4, 6, 3, 26, 24}
				for i := 0; i < 50; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 183
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func udSi5iiPjJn() {
	switch get_byte() {
	case 87:
		eHpamS()
	case 'c':
		wRbz3AwJiaA()
	case 'M':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 6
				decryptKey := 13
				for counter := 0; i != 0; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 10:
						i = 8
						data = append(data, "\xc4v\xb8\xc2"...,
						)
					case 4:
						i = 13
						data = append(data, "\xc0|"...,
						)
					case 9:
						i = 2
						data = append(data, "e\xb6\xa4\xab"...,
						)
					case 16:
						i = 0
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 5:
						data = append(data, "\x8e\xd0\xd3\xce"...,
						)
						i = 11
					case 15:
						data = append(data, 137)
						i = 16
					case 6:
						i = 1
						data = append(data, "Ǿ\xc1"...,
						)
					case 7:
						i = 9
						data = append(data, "\xbdf\x81m"...,
						)
					case 12:
						data = append(data, 187)
						i = 7
					case 8:
						data = append(data, "\xb9r"...,
						)
						i = 14
					case 11:
						i = 3
						data = append(data, 211)
					case 13:
						i = 10
						data = append(data, "\xbf\xcc\xc0\xb9"...,
						)
					case 3:
						data = append(data, 217)
						i = 15
					case 1:
						i = 12
						data = append(data, "m\xb6\xba"...,
						)
					case 2:
						i = 4
						data = append(data, "\xa6~"...,
						)
					case 14:
						data = append(data, "\xc7\xc2\xca"...,
						)
						i = 5
					}
				}
				return string(data)
			}())
		}()
	case 104:
		h4iz6z()
	default:
		hacker_get_out()
	}
}

func xuxe15QiU() {
	switch get_byte() {
	case 'b':
		kRfTbaIzK0()
	case 'd':
		reg8KUbqQyJV()
	case 52:
		func() {
			fmt.Println(func() string {
				key := []byte("R--|)\xad\xeea")
				data := []byte("\xa1\x95M\xea\x98\xcd(\x89")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 80:
		func() {
			fmt.Println(func() string {
				seed := byte(179)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(1)(25)(67)(65)(195)(115)(206)(133)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func lyyA1C7N() {
	switch get_byte() {
	case 'O':
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("Wg0T\xa4\x9ei\x1c(\xea{\xff\xd3\xee\x84\f\x96Y\xa3\x12a\xedG\x0e\xf3z")
					data := make([]byte, 0, 14)
					data = append(data, fullData[18]-fullData[17], fullData[7]^fullData[6], fullData[19]+fullData[20], fullData[9]^fullData[5], fullData[4]-fullData[14], fullData[2]^fullData[3], fullData[10]-fullData[15], fullData[22]^fullData[1], fullData[11]-fullData[16], fullData[23]^fullData[25], fullData[24]-fullData[12], fullData[8]-fullData[13], fullData[21]+fullData[0])
					return string(data)
				}())
			}()
		}()
	case 66:
		func() {
			fmt.Println(func() string {
				data := []byte("*{\x85nI,:u")
				positions := [...]byte{4, 2, 2, 7, 2, 5, 4, 1, 0, 5}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 233
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 113:
		iSfCSfCa()
	case 'P':
		eL17AO()
	default:
		hacker_get_out()
	}
}

func ys_H7GN() {
	switch get_byte() {
	case 119:
		fM89ytR6wpc()
	case 79:
		kxfh6ObzHqxT()
	case 'W':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 72:
		jvngpteu9d()
	default:
		hacker_get_out()
	}
}

func il8cS9El() {
	switch get_byte() {
	case 113:
		vtWFri6TNS()
	case 'f':
		dMDrNpn9TcdE()
	case 'Z':
		func() {
			defer func() {
				println(func() string {
					seed := byte(178)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
					fnc(152)(43)(254)(1)(172)(68)(11)(177)(73)(11)(172)(26)(10)
					return string(data)
				}())
			}()
		}()
	case 's':
		hpk4aP()
	default:
		hacker_get_out()
	}
}

func j63n3WRHk3t() {
	switch get_byte() {
	case 'v':
		tuDXuAa()
	case 'J':
		vBkmVR()
	case 69:
		q7jm5cmcrMfL()
	case 68:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("\xd4m\x96\x10\xc3x\xf8\xe9\xb7aA0\xf9_\x8c\x91X\xa5\x94\xe21a&\x1dR\x87")
					data := make([]byte, 0, 14)
					data = append(data, fullData[7]+fullData[21], fullData[1]-fullData[6], fullData[0]-fullData[9], fullData[17]-fullData[20], fullData[18]+fullData[14], fullData[4]-fullData[13], fullData[22]-fullData[8], fullData[5]-fullData[16], fullData[25]+fullData[19], fullData[15]-fullData[23], fullData[11]-fullData[3], fullData[12]+fullData[10], fullData[2]-fullData[24])
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func v6UvLEVGDW() {
	switch get_byte() {
	case '4':
		_qHZMOszPJa()
	case 70:
		h0omJDWpLXV()
	case 90:
		func() {
			println(func() string {
				seed := byte(246)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(143)(234)(26)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
				return string(data)
			}())
		}()
	case 83:
		jKwEzNoh()
	default:
		hacker_get_out()
	}
}

func z0ipsCdv() {
	switch get_byte() {
	case 'G':
		kgh13MaHqfJ()
	case 'o':
		dXCyES()
	case 72:
		ba4_6O()
	case 90:
		mUkETX()
	default:
		hacker_get_out()
	}
}

func vWkpjxZz5_J() {
	switch get_byte() {
	case 'z':
		rEbMuYUIb_()
	case 111:
		z5iXh1katSc()
	case 'q':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 4
				decryptKey := 3
				for counter := 0; i != 2; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 0:
						i = 2
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 9:
						i = 1
						data = append(data, 16)
					case 6:
						i = 3
						data = append(data, 38)
					case 8:
						data = append(data, 9)
						i = 6
					case 1:
						i = 7
						data = append(data, 93)
					case 5:
						data = append(data, 85)
						i = 9
					case 3:
						data = append(data, 19)
						i = 0
					case 7:
						data = append(data, 89)
						i = 8
					case 4:
						i = 5
						data = append(data, 61)
					}
				}
				return string(data)
			}())
		}()
	case 'P':
		func() {
			fmt.Println(func() string {
				seed := byte(122)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(213)(25)(184)(78)(1)(177)(26)(238)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func hnjNQHp1Ut() {
	switch get_byte() {
	case 'A':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 1
					decryptKey := 83
					for counter := 0; i != 6; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 4:
							i = 5
							data = append(data, 56)
						case 1:
							data = append(data, "\x05;>"...,
							)
							i = 4
						case 5:
							data = append(data, "k."...,
							)
							i = 7
						case 3:
							for y := range data {
								data[y] = data[y] ^ byte(decryptKey^y)
							}
							i = 6
						case 0:
							data = append(data, 101)
							i = 9
						case 7:
							i = 2
							data = append(data, "&h"...,
							)
						case 2:
							i = 8
							data = append(data, 46)
						case 8:
							data = append(data, 50)
							i = 0
						case 9:
							i = 3
							data = append(data, "~\a"...,
							)
						}
					}
					return string(data)
				}())
			}()
		}()
	case 73:
		xFSR2EUT5Fg()
	case 110:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 0
				decryptKey := 241
				for counter := 0; i != 7; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 5:
						i = 8
						data = append(data, 102)
					case 9:
						i = 4
						data = append(data, 149)
					case 8:
						data = append(data, 83)
						i = 3
					case 0:
						data = append(data, 125)
						i = 9
					case 1:
						i = 6
						data = append(data, 153)
					case 3:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 7
					case 2:
						i = 1
						data = append(data, 157)
					case 4:
						i = 2
						data = append(data, 80)
					case 6:
						data = append(data, 73)
						i = 5
					}
				}
				return string(data)
			}())
		}()
	case 'p':
		func() {
			defer func() {
				println(func() string {
					seed := byte(150)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
					fnc(220)(7)(10)(247)(90)(176)(235)(79)(215)(225)(86)(246)(134)
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func _rT3Q7() {
	switch get_byte() {
	case 116:
		grm9Arx()
	case 90:
		wbPHxVexJf()
	case 114:
		caSK6GEC()
	case 86:
		pjoYW5MVfvD()
	default:
		hacker_get_out()
	}
}

func dGqfMqV() {
	switch get_byte() {
	case 52:
		szWhRX3n0Z1()
	case 115:
		lzPZMNpXrF()
	case 66:
		stzUudAS()
	case 'r':
		func() {
			fmt.Println(func() string {
				key := []byte("s\xd1`e\x1f\x97^f\x05\xac\xef\a\x0f\xe2\xf4\xb1*x\xbcD\xe2|M\xd28\xa6!\xfbIY\x03\xd3^\x00\xab\x1e\\I\x14:`D\xf2;2Py\b\xf6\xfa(\xe0\x06b1@%\xc9\xf6\x1a\x93\x99,hm\xa9\xed\x05\xf7A\xa0")
				data := []byte("\xc16֖\x91\xf6\xa5\x96s\x1aPfV\x14j\x16\x89\xd1\xf4\xb9Aѽ1\x86ۗ,\xbb\xb8J\x04\xccn\f}\xa8\xae\x88\x99\xb9xg\x9av\x81\xf0vUH`V:Ԑ\x87Z7d{\xf2\xdd\\\xdb\xd2\x1badP\xb0\x15")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func gnKV52qWJp2T() {
	switch get_byte() {
	case 'U':
		func() {
			println(func() string {
				key := []byte("2 \xc3\xc3\xdb\xdc\xc5]~s\x01\xbc5>?\x0eˢ\x8a0\xcd\xc1\xb0cpc\bS\xf8S;k 3F\xd7M\x91\xf5")
				data := []byte("GO\xb2]\x91\x93\xae\x17\xa2\xc7(d?#,WU\xbf\x962\xa5\xa4\xb1\b\xb0\xfef\x11(!7\x0e\x00.!\x8a\x1c\xdd,")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 88:
		func() {
			defer func() {
				println(func() string {
					data := []byte("\xb0\xa5\x19\xea\x8b(\x97\x99it $,")
					positions := [...]byte{1, 4, 3, 11, 1, 12, 4, 0, 5, 2, 12, 6, 12, 7, 12, 4}
					for i := 0; i < 16; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 166
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'Q':
		tsHOpyqVXT()
	case '7':
		c9hMaBiWyKP9()
	default:
		hacker_get_out()
	}
}

func dTntR0xhKMgD() {
	switch get_byte() {
	case 'I':
		dHFNnnnJ()
	case 89:
		kZOne8J3p()
	case 108:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 2
					decryptKey := 127
					for counter := 0; i != 5; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 6:
							data = append(data, "\x9b\xb4"...,
							)
							i = 0
						case 4:
							i = 5
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
						case 3:
							data = append(data, "\xe6\xe6\x95\xd8"...,
							)
							i = 7
						case 0:
							i = 4
							data = append(data, 193)
						case 1:
							data = append(data, "\xe2\xec"...,
							)
							i = 6
						case 7:
							data = append(data, "\xe6\x96"...,
							)
							i = 1
						case 2:
							i = 3
							data = append(data, "\xbb\xe5"...,
							)
						}
					}
					return string(data)
				}())
			}()
		}()
	case 'o':
		func() {
			println(func() string {
				data := []byte("qo\xc5 \xfc\xfd\xc0Ϻ\xb2v +ake \x16!\xbd\ae\xb5k\xe8\x11\xeedr\x95m\xcc \x0f\x85ai\xc3!")
				positions := [...]byte{30, 8, 0, 30, 2, 29, 37, 26, 28, 19, 18, 17, 28, 20, 29, 29, 9, 34, 12, 7, 37, 31, 7, 28, 24, 2, 19, 18, 25, 12, 17, 8, 7, 22, 17, 2, 31, 30, 31, 5, 6, 33, 30, 31, 8, 0, 28, 28, 10, 28, 6, 4, 12, 31, 5, 6, 2, 19}
				for i := 0; i < 58; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 16
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func vCMCuF2I() {
	switch get_byte() {
	case 'X':
		mqb3VM()
	case '6':
		yIE6KV8VkR52()
	case 'y':
		mf3TR0LGudqA()
	case 'p':
		uV7eCIzc()
	default:
		hacker_get_out()
	}
}

func fAFLwKg4w() {
	switch get_byte() {
	case 'M':
		yrJZ9t13()
	case 111:
		h6ymDenx()
	case '8':
		func() {
			fmt.Println(func() string {
				data := []byte("Np\x15Xr\xd6 \x8f&\\A<\xf9\xf4\x1fe\x8cY8\xa7\x1d\ap_N5v1r_\t5n@a<L)\x1f_YOu_D$w:\xfbN8%\xeb9_\x17\x14\xddna\x8eD8C#\x11'_Y\x1fv")
				positions := [...]byte{31, 51, 1, 8, 55, 38, 12, 56, 8, 13, 5, 45, 65, 60, 60, 45, 47, 14, 66, 55, 8, 64, 62, 2, 6, 37, 69, 7, 21, 11, 66, 21, 45, 20, 35, 1, 33, 11, 63, 20, 3, 30, 56, 57, 6, 53, 70, 16, 48, 52, 2, 53, 37, 19, 56, 55, 31, 35, 9, 19, 47, 53, 10, 8, 30, 33, 38, 2, 48, 41, 31, 66, 69, 37}
				for i := 0; i < 74; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 147
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case '4':
		func() {
			fmt.Println(func() string {
				data := []byte("\x1c\xe7:\x0emh3\b\xd8n\f\v\x01234\x14Y8a\aUp\xb8\xe0\xe7v\xcfr\xd7yW\xa9\x03\x88\xf2\x82\xf4\xccJP4uK\x02W\x05kYx8vr\xf6P55n\x9a\xe2_\xad0\xd5e\xe1\xf0ۨo\xb0")
				positions := [...]byte{47, 39, 52, 58, 23, 31, 33, 36, 31, 53, 3, 25, 67, 55, 32, 65, 52, 16, 23, 5, 40, 14, 15, 30, 27, 63, 37, 45, 34, 25, 33, 65, 49, 31, 3, 6, 10, 31, 53, 20, 66, 4, 54, 59, 32, 43, 47, 53, 16, 46, 15, 2, 25, 48, 70, 20, 3, 61, 4, 2, 61, 19, 29, 67, 29, 23, 45, 36, 6, 35, 29, 20, 54, 61, 1, 25, 0, 11, 63, 36, 59, 46, 48, 19, 3, 38, 65, 1, 46, 66, 12, 20, 44, 8, 4, 54, 7, 10, 24, 27, 63, 68}
				for i := 0; i < 102; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 236
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func cj0rP3o() {
	switch get_byte() {
	case 'C':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xfe\xc4G\xbf\x96\x98\xf4\u05f8\xb8\x9fK\xaeF#\x9a")
				data := make([]byte, 0, 9)
				data = append(data, fullData[4]-fullData[2], fullData[12]-fullData[13], fullData[5]^fullData[8], fullData[6]^fullData[15], fullData[7]^fullData[9], fullData[3]-fullData[10], fullData[0]^fullData[1], fullData[11]-fullData[14])
				return string(data)
			}())
		}()
	case 'W':
		dAKiIAI()
	case 'V':
		qLsELgl5J()
	case 79:
		rlI9Pry()
	default:
		hacker_get_out()
	}
}

func dm1RA4epzHQi() {
	switch get_byte() {
	case 'y':
		aBe9OLB()
	case 'B':
		i_QiMv9m()
	case 100:
		func() {
			defer func() {
				println(func() string {
					key := []byte("e(\x9b\xb2R\x95PGG^\xaf\xb2\x83")
					data := []byte("/]\xe8\xc6r\xf1?g.*\x8f\x88\xc7")
					for i, b := range key {
						data[i] = data[i] ^ b
					}
					return string(data)
				}())
			}()
		}()
	case 'r':
		fVHh2b9wNeV()
	default:
		hacker_get_out()
	}
}

func c7C3LmUtw() {
	switch get_byte() {
	case 'w':
		tws7TA()
	case 'n':
		os5Y3YX5b6oj()
	case 102:
		func() {
			fmt.Println(func() string {
				data := []byte("N\x10\x18hn/xOnma\x01G?\x95\x8b#Y#BAFp<[\xfdv\xefl#G\xb4S\xeca_v\xfe$\x88\xf14\xa1m\x13o\x1fr\x12\xd5$v4|\x15\xb3\x98<n\x13\xc1mBSe\x91Åe+\xb6")
				positions := [...]byte{50, 40, 6, 69, 13, 48, 43, 2, 60, 67, 49, 7, 11, 18, 36, 19, 33, 38, 44, 37, 31, 70, 68, 15, 32, 29, 59, 28, 16, 5, 46, 31, 62, 56, 7, 3, 65, 27, 18, 1, 54, 38, 43, 24, 9, 61, 19, 66, 53, 2, 68, 55, 57, 36, 4, 47, 45, 20, 67, 42, 70, 19, 25, 68, 38, 61, 5, 56, 40, 63, 21, 23, 42, 63, 69, 62, 7, 65, 58, 53, 19, 59, 68, 32, 14, 58, 7, 63, 49, 37, 46, 68, 27, 28, 63, 39}
				for i := 0; i < 96; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 159
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 65:
		qpJEBGdQ2()
	default:
		hacker_get_out()
	}
}

func lCL3OWTQU() {
	switch get_byte() {
	case 51:
		tCSKuar7GG()
	case 'e':
		yvOCrw()
	case 'W':
		nVxeP6nt_69()
	case 110:
		zb5d1slD()
	default:
		hacker_get_out()
	}
}

func cIRS0aWEC() {
	switch get_byte() {
	case 111:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 53:
		dZFEOzBU()
	case 82:
		eliTzQ()
	case 'x':
		_GdsU4jeXclC()
	default:
		hacker_get_out()
	}
}

func t_UbY4KrVt97() {
	switch get_byte() {
	case 'k':
		_3TstejM()
	case 111:
		q4M0OguGWGI()
	case 67:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("\xbc\xb0\x8d\x1a}\x9c\xbe\xe2#:>\x80\"7Y\x14\x1f\vy&N\xcav^\xde\xfe")
					data := make([]byte, 0, 14)
					data = append(data, fullData[4]^fullData[13], fullData[11]-fullData[17], fullData[8]-fullData[1], fullData[10]-fullData[21], fullData[25]^fullData[24], fullData[12]-fullData[6], fullData[2]^fullData[7], fullData[0]^fullData[5], fullData[22]^fullData[16], fullData[20]^fullData[9], fullData[18]^fullData[14], fullData[19]+fullData[15], fullData[23]^fullData[3])
					return string(data)
				}())
			}()
		}()
	case 79:
		nTUM2DS_uU()
	default:
		hacker_get_out()
	}
}

func b7VKjmdAn() {
	switch get_byte() {
	case 'M':
		z1JSuX()
	case 'g':
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("@ns\x9fwQ2IK\xe35\xf84\x06\x12&\xdc3\x04\xcaF\x84N(D)")
					data := make([]byte, 0, 14)
					data = append(data, fullData[18]^fullData[22], fullData[9]-fullData[1], fullData[8]+fullData[23], fullData[11]-fullData[21], fullData[6]-fullData[14], fullData[10]^fullData[5], fullData[25]^fullData[20], fullData[15]^fullData[13], fullData[3]+fullData[19], fullData[0]+fullData[12], fullData[16]+fullData[24], fullData[2]^fullData[7], fullData[4]^fullData[17])
					return string(data)
				}())
			}()
		}()
	case 'h':
		zdTZSVe6()
	case 67:
		func() {
			println(func() string {
				key := []byte("\xd8\xe1N\v\xc4(\xed\x9eloh\xd7\xd3G\x84\xde\x1d=\xb00`\xcb\x0f\xe2\x84\xfb\xe5qd\x03\xe2\xcb\xdb\bq29\b~")
				data := []byte("QP\xc3+0\x97`\x12\x8c\xa9\x91\xf7G\xa8\xefC=\x9eВ\xd20pM\xa4\\SՄwTD\xfbiؓ\xa2v\x9f")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func i0etL81() {
	switch get_byte() {
	case 'e':
		func() {
			println(func() string {
				seed := byte(139)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(242)(18)(250)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
				return string(data)
			}())
		}()
	case 120:
		func() {
			defer func() {
				println(func() string {
					key := []byte("TD\x951\xe8]\xaf\x82D\x98\xad\x9b\x83")
					data := []byte("\x9e\xb9\b\xa5\b\xc1\x1e\xa2\xad\f\xcd\xd5\xc7")
					for i, b := range key {
						data[i] = data[i] - b
					}
					return string(data)
				}())
			}()
		}()
	case 'p':
		cUjhYpn_67()
	case 83:
		qfgu9L5J()
	default:
		hacker_get_out()
	}
}

func hhgayDsdT() {
	switch get_byte() {
	case 53:
		aOy_EqG6s()
	case 'L':
		ddbNRz9zzEXs()
	case 'Q':
		yFcbaHl()
	case 101:
		func() {
			fmt.Println(func() string {
				fullData := []byte("jǞXS\xb6V\xecs\x19\r\x82\xef0\x8d\xb7")
				data := make([]byte, 0, 9)
				data = append(data, fullData[6]^fullData[9], fullData[3]^fullData[13], fullData[0]+fullData[5], fullData[11]+fullData[7], fullData[10]-fullData[2], fullData[4]^fullData[8], fullData[15]^fullData[14], fullData[12]-fullData[1])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func dbKWnLCpsY() {
	switch get_byte() {
	case 114:
		bcBbzfVBP4()
	case 'I':
		func() {
			println(func() string {
				key := []byte("\x1f4\xdc\xeb}K2\xa2\xa24\xa6\x85\xf0H\u0095kQ \xd2=`?j\x90\x9b\xe5ߛ\xc4\xe63\xb1OR\xcfE\rd")
				data := []byte("Z;\x995\xef$A\xd2~\x06\x83\x9b\x84\x19\xa9е\x10\x00\x905\x05\"\x01\x90Ɖ\x85\x85\xb0\x8cFo\x12\x15\x92$a\xbd")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 'S':
		func() {
			defer func() {
				println(func() string {
					data := []byte("\xe4C\xa6t 2ofy\xccd\xa0o")
					positions := [...]byte{11, 10, 2, 7, 9, 12, 8, 0, 11, 1, 9, 2, 5, 0, 0, 11}
					for i := 0; i < 16; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 127
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
					}
					return string(data)
				}())
			}()
		}()
	case 67:
		qsFJzH()
	default:
		hacker_get_out()
	}
}

func sgnr5Km0T() {
	switch get_byte() {
	case 'n':
		func() {
			defer func() {
				println(func() string {
					data := []byte("knFM ~ovh`;:2")
					positions := [...]byte{3, 7, 12, 7, 7, 7, 1, 2, 5, 2, 8, 9, 1, 0, 1, 9, 7, 10}
					for i := 0; i < 18; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 254
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'd':
		mv0NX6hGv()
	case 122:
		func() {
			fmt.Println(func() string {
				key := []byte("mXL\x95r\xc2\xe1\xd1a\xfb\xfaW\xdb^uƹ, ҋ\xfb\x03\x04ao6\x9caI(\xf8\v\x03\x01\xa1v\xebk5\\\x96\xc0\xdd\xd0\x15X\x81|\xe7\x03\x91U\x19\xae\xbay4\xe1\xb5\xd1\xfdgh\xf4\x182\xc2tRu")
				data := []byte("#=:\xa4\x00\x9d\xa6\xe1\x0f\x95\x9b\b\x9cl\x03\xa3\xe6u\x18\xa7Ԯs[/Z@\xad\x13\x16o\xc9em`\xfe:\x8e\x1fj\x05\xa2\xb5\x82\x94$/\xef#\xa9;\xe7ak\xf1\xfdLZ\x8fԎ\xb9W\x1b\x91jF\x9d-=\x00")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 'k':
		zaC7iZ9oH()
	default:
		hacker_get_out()
	}
}

func y9Pvt2k4p() {
	switch get_byte() {
	case 77:
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xf6\xb4\xde\xf1v\a\xde\xfd{\xbc\x16I\b")
					data := []byte("\xbc\xc1\xad\x85Vc\xb1\xdd\x12\xc86sL")
					for i, b := range key {
						data[i] = data[i] ^ b
					}
					return string(data)
				}())
			}()
		}()
	case '6':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 5
				decryptKey := 154
				for counter := 0; i != 0; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 6:
						data = append(data, "\x93\xc0\xd4"...,
						)
						i = 12
					case 2:
						data = append(data, "\xd1\xd4"...,
						)
						i = 15
					case 17:
						i = 20
						data = append(data, "\xc0\xcc"...,
						)
					case 8:
						data = append(data, 128)
						i = 17
					case 1:
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
						i = 0
					case 13:
						i = 9
						data = append(data, "҈Ȋ"...,
						)
					case 9:
						data = append(data, 201)
						i = 14
					case 11:
						data = append(data, 191)
						i = 1
					case 14:
						i = 8
						data = append(data, "\xde\xc8\xcf\xc4"...,
						)
					case 10:
						data = append(data, "\xd6\xcf"...,
						)
						i = 7
					case 18:
						i = 4
						data = append(data, "\xd0\xd2\xcd\xcb"...,
						)
					case 19:
						i = 3
						data = append(data, "\xb8\xf8"...,
						)
					case 12:
						i = 13
						data = append(data, 221)
					case 3:
						data = append(data, "\xfd\xfa\xf5"...,
						)
						i = 16
					case 16:
						data = append(data, 243)
						i = 11
					case 7:
						i = 18
						data = append(data, 155)
					case 15:
						i = 19
						data = append(data, 222)
					case 5:
						data = append(data, 193)
						i = 10
					case 20:
						data = append(data, "Ǆ"...,
						)
						i = 2
					case 4:
						i = 6
						data = append(data, "\x90\x8b\x9b"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 'i':
		mUciHnzz()
	case 'A':
		xU9VM7j()
	default:
		hacker_get_out()
	}
}

func lhvk4zy() {
	switch get_byte() {
	case 112:
		cT8hvTjzL()
	case 77:
		jJ_OwFyC()
	case 'i':
		wGjI9tzvKjdU()
	case 74:
		wJjWd3WHc()
	default:
		hacker_get_out()
	}
}

func aeIZRV_o() {
	switch get_byte() {
	case 115:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 13
				decryptKey := 247
				for counter := 0; i != 11; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 5:
						data = append(data, "_Q"...,
						)
						i = 6
					case 18:
						i = 15
						data = append(data, ";FJ"...,
						)
					case 6:
						i = 17
						data = append(data, "PY\x01"...,
						)
					case 16:
						i = 4
						data = append(data, "b["...,
						)
					case 0:
						data = append(data, 112)
						i = 1
					case 4:
						i = 5
						data = append(data, "\tI\vL"...,
						)
					case 8:
						data = append(data, 18)
						i = 12
					case 17:
						i = 9
						data = append(data, "AQF"...,
						)
					case 7:
						i = 11
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 13:
						data = append(data, "rg"...,
						)
						i = 0
					case 10:
						data = append(data, 85)
						i = 16
					case 9:
						data = append(data, "\x05XY"...,
						)
						i = 14
					case 14:
						i = 18
						data = append(data, "_\xf99B"...,
						)
					case 3:
						data = append(data, "r\x11*\x1c"...,
						)
						i = 8
					case 12:
						data = append(data, 105)
						i = 10
					case 15:
						i = 7
						data = append(data, 0)
					case 1:
						data = append(data, "\x1ai"...,
						)
						i = 2
					case 2:
						data = append(data, "kr"...,
						)
						i = 3
					}
				}
				return string(data)
			}())
		}()
	case 'k':
		joYHmEiRZ()
	case 89:
		zvJ36V7H2W6Z()
	case 84:
		z5jFM8u()
	default:
		hacker_get_out()
	}
}

func snfmG65B2Pds() {
	switch get_byte() {
	case 111:
		vucH2S61dyv()
	case 88:
		r47PATr5vZsZ()
	case 'c':
		func() {
			fmt.Println(func() string {
				seed := byte(120)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(55)(199)(86)(162)(1)(79)(132)(106)
				return string(data)
			}())
		}()
	case 50:
		func() {
			println(func() string {
				fullData := []byte("\x12mX\xdd\xccpj\xb6\x9dĲ\xa0s \x1ecl\xb5o\x8b\xcae\xfa\xde=\xde\xee\xb9\x14\x99\a_2s<}\"\xe5\xe8M\xaa\xeb\t\xb5AT\xaf\xad\x8fQ\x8a\v'\xb7pW\x8c\xe9\xa8߬y\x18Si\xf8>\x91[@D\x1c\xfb\x1c\x88*\xdeP")
				data := make([]byte, 0, 40)
				data = append(data, fullData[43]+fullData[9], fullData[38]-fullData[61], fullData[35]+fullData[65], fullData[53]+fullData[64], fullData[4]^fullData[11], fullData[45]-fullData[37], fullData[36]^fullData[49], fullData[73]-fullData[58], fullData[12]+fullData[47], fullData[62]-fullData[23], fullData[59]-fullData[7], fullData[50]^fullData[40], fullData[18]-fullData[72], fullData[57]^fullData[74], fullData[67]^fullData[22], fullData[56]-fullData[52], fullData[33]^fullData[63], fullData[46]+fullData[10], fullData[34]^fullData[71], fullData[30]^fullData[21], fullData[25]-fullData[16], fullData[24]^fullData[2], fullData[6]-fullData[42], fullData[17]^fullData[76], fullData[54]-fullData[77], fullData[48]^fullData[26], fullData[60]-fullData[66], fullData[28]^fullData[5], fullData[27]^fullData[29], fullData[31]-fullData[41], fullData[32]+fullData[69], fullData[68]+fullData[14], fullData[39]^fullData[1], fullData[13]^fullData[44], fullData[20]-fullData[15], fullData[19]-fullData[75], fullData[0]+fullData[55], fullData[51]-fullData[8], fullData[3]+fullData[70])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func j0mBehnkv() {
	switch get_byte() {
	case 'j':
		mTGnN7BKxAbC()
	case 104:
		ssFsuiIU()
	case 'B':
		eL17AO()
	case 105:
		func() {
			fmt.Println(func() string {
				key := []byte("\xfa\xa3\x96\"\xa1\x8d\xe6V.\x05\x93n\xcb\t\x92\x8a\a{ޒ\xbb\x97/\x05&6\xe0\x7f\xa9\xcdgذ\x95\xb2+C\xf6\x10\xbfG\x13\xd7Ɣy\x92\rp\xeb}⧞\xa6\x99\xcae\xd2\xd4X\xa0\x17~\xa9\xd2w\\\\\x85\xe1")
				data := []byte("H\b\fS\x13\xec-\x86\x9cs\xf4\xcd\x12;\b\xeff\xd4\x16\a\x1a\xec\x9fdtkV\xb0\x1b,\xae\t\x1e\x03\x13\x8a\x8f[\x84\x1e\xa0GL%ت\t{\xcf9\xb5X\xdb\x10\x05\xe0\xff\xd3@5\xb7\xe4G\xf1\x0eD뻵\xf4V")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func iIC3okI() {
	switch get_byte() {
	case 49:
		z8rjlm()
	case 53:
		func() {
			fmt.Println(func() string {
				data := []byte("\xe4\f\xc4no\xfc\xff\"")
				positions := [...]byte{5, 5, 7, 0, 6, 7, 1, 2, 1, 2}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 36
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 67:
		yV6HLHvHo8()
	case 112:
		p2aaETMfSd()
	default:
		hacker_get_out()
	}
}

func nEoLH1h9() {
	switch get_byte() {
	case 79:
		func() {
			fmt.Println(func() string {
				data := []byte("N\x1ca7rwG0>\x15a\x89G!v\xb3_R+\x04_X|_\xc35\xb01r{\xb8Ym\f\x82_L\xe7t_Y4u|D\xd7\"\xf1_3\x9a=`r\x19\xd4W\x9any\xcaD0\xefe#X\a5\r+")
				positions := [...]byte{45, 9, 47, 57, 34, 37, 70, 45, 59, 9, 3, 46, 11, 15, 57, 32, 8, 66, 43, 66, 59, 50, 59, 52, 65, 54, 66, 60, 31, 32, 18, 13, 26, 24, 70, 45, 22, 29, 1, 9, 9, 69, 21, 69, 69, 34, 2, 54, 17, 67, 46, 67, 29, 5, 9, 70, 52, 66, 70, 21, 30, 68, 68, 55, 19, 70, 66, 63, 33, 56, 26, 51, 19, 49}
				for i := 0; i < 74; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 220
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case '3':
		dTiiO1zqDvkL()
	case 116:
		nYmNzYFVXh()
	case 66:
		gx8cirOJFJ()
	default:
		hacker_get_out()
	}
}

func dMDrNpn9TcdE() {
	switch get_byte() {
	case '4':
		il8cS9El()
	case 90:
		v6zKaN01()
	case 112:
		rqWtQTBIXs()
	case 'b':
		maMiun9Cw()
	default:
		hacker_get_out()
	}
}

func ptol_0i26z() {
	switch get_byte() {
	case 'O':
		func() {
			defer func() {
				println(func() string {
					key := []byte("I\x8f\xf0.\xeb\xca\xf0{5C\x86kh")
					data := []byte("\x93\x04c\xa2\v._\x9b\x9e\xb7\xa6\xa5\xac")
					for i, b := range key {
						data[i] = data[i] - b
					}
					return string(data)
				}())
			}()
		}()
	case 110:
		f4Bsx2z()
	case 118:
		eZ85mm()
	case 117:
		zI0u3uW_B()
	default:
		hacker_get_out()
	}
}

func e3vhkipoHsFv() {
	switch get_byte() {
	case 'p':
		cmr4cMk()
	case '5':
		rBZLpzcJyKQ()
	case 't':
		rliEhBR6gATm()
	case 'E':
		func() {
			println(func() string {
				fullData := []byte("q\xdd\xf9\x0e\x8f4\x1b!\xab\x8fh\xb5\xccC=\xf1\x86&\x90\x91\xa3;\xb5\xa3.\x9bl.3k\xb1n\xc0\x88\x1f\xb3ƐW\a4\xed-S\xcaO>\xdd\xf2\xf2R\t\xee\x93F%\x1c\x1a\a;\xd1J-\xf1\x82Zȕ$\x95\x8b\xb5\xf8\xea\xce\x03\xfb\x1e")
				data := make([]byte, 0, 40)
				data = append(data, fullData[51]-fullData[37], fullData[77]^fullData[0], fullData[71]+fullData[32], fullData[44]^fullData[73], fullData[50]^fullData[46], fullData[41]^fullData[64], fullData[33]^fullData[76], fullData[7]+fullData[43], fullData[30]^fullData[19], fullData[9]+fullData[8], fullData[17]+fullData[75], fullData[1]+fullData[13], fullData[45]^fullData[21], fullData[42]-fullData[12], fullData[3]-fullData[20], fullData[38]-fullData[49], fullData[15]-fullData[60], fullData[4]-fullData[24], fullData[22]^fullData[67], fullData[14]+fullData[55], fullData[58]+fullData[29], fullData[34]+fullData[54], fullData[63]-fullData[18], fullData[66]+fullData[23], fullData[65]+fullData[36], fullData[5]+fullData[62], fullData[61]^fullData[68], fullData[72]+fullData[26], fullData[6]^fullData[59], fullData[16]+fullData[52], fullData[31]^fullData[56], fullData[27]-fullData[11], fullData[69]+fullData[70], fullData[53]^fullData[48], fullData[40]+fullData[28], fullData[10]+fullData[2], fullData[25]+fullData[74], fullData[47]^fullData[35], fullData[39]+fullData[57])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func v6r3Fj2lms() {
	switch get_byte() {
	case 71:
		yiYh4aq5T()
	case 'i':
		func() {
			fmt.Println(func() string {
				key := []byte("\v.\xe6\x81,m\xb8\xab\x182Cb\x90rM\xb4\x12\x05sq\x83\xea\xb5\xdeb1\x064\xe5\xb6u\xc7\xe6\x9d;\xbcc\xd1ﰁ\r:q\xd5\xc2{\"Q\xe5vh\xfd@^x\xb3`E\x99;\xe7\xee\x88\xc2N\xdd\xf4\xe9\xc7;")
				data := []byte("C7\x90\xb0F\xf2\x8f\x85V<\x1e\xfd\xb7\xc0)\xb1MT\xc5\x04\xdck\xbb\x81\xec\x04p\xfd\x8d\xa9\xd2j\x88\xd1&\xa3锅\xaf\xd8';\xeeoo\xfcL\x0ei\xc2\x0e72\x01ς\x0e)\xc8$]B\xeb\xa3$\x97kp\xa8:")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 'm':
		jFnBOD()
	case 104:
		gE1vIgE1xJ2d()
	default:
		hacker_get_out()
	}
}

func tVxfX3lN() {
	switch get_byte() {
	case 87:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 65:
		l5m9kUO6rAq()
	case 'J':
		jWVvAq1mWE4()
	case 'r':
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("VV\xfduh^(\xb9\xcb\bzd\x06\x94\xdb\f\xe7\xe9ogc\xa5OO\xea\xc5")
					data := make([]byte, 0, 14)
					data = append(data, fullData[20]+fullData[16], fullData[8]-fullData[1], fullData[3]^fullData[12], fullData[4]+fullData[15], fullData[23]^fullData[18], fullData[24]+fullData[10], fullData[25]-fullData[0], fullData[9]^fullData[6], fullData[2]-fullData[13], fullData[22]-fullData[14], fullData[7]+fullData[19], fullData[5]^fullData[11], fullData[17]-fullData[21])
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func xWmGYy() {
	switch get_byte() {
	case 115:
		k6TJgFIFPK_()
	case 122:
		zzN_MXd_xIR()
	case 73:
		j_j94cTKBS()
	case 85:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func fS1MyakjJr() {
	switch get_byte() {
	case 'r':
		xS1GqtGFsM()
	case 'o':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 4
					decryptKey := 120
					for counter := 0; i != 1; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 3:
							data = append(data, "J3"...,
							)
							i = 2
						case 5:
							i = 3
							data = append(data, "\x06Q"...,
							)
						case 4:
							i = 8
							data = append(data, 49)
						case 0:
							i = 6
							data = append(data, 10)
						case 2:
							i = 1
							for y := range data {
								data[y] = data[y] ^ byte(decryptKey^y)
							}
						case 8:
							i = 0
							data = append(data, 15)
						case 6:
							i = 7
							data = append(data, "\f_\x1a"...,
							)
						case 7:
							i = 5
							data = append(data, "\x12\\\x1a"...,
							)
						}
					}
					return string(data)
				}())
			}()
		}()
	case 'B':
		wWYrTOy()
	case 68:
		fM89ytR6wpc()
	default:
		hacker_get_out()
	}
}

func hq5elFu7TI() {
	switch get_byte() {
	case 'v':
		wUKjZRjt0E()
	case 87:
		cMpCg2IkJ95()
	case 56:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x1f\x86\xbe\xda\xc5S\xf5;\xee\bR?\x96\xdaX\xe4H\xacL\x9ao^\t\x91\xa2$\x91E\xef\x11B\xef\\\x8a\xd9(\x92\xe0\x83\\\x06p\xbbQ\x1c\x12r\xa3\x99\x18O\xe0a\xb6{\x1b\xf6!\xed# Z\aC\xa9\x05\xfc\x02V&\xab\xfff\xbd\xd28\x15-1\xee\xb8K\\\xa2\xe8\xb5\xf0E\x1b\xd5LE\xc8K\xea\xd5\x11.A\x99\xdfT_\xecs\x97Y\x89D\x8aK\x06j~v\x8c}\xcb\xf0۔\x7f\xad΅9\xf2\x85l\x1b\xce\xd6\xd5\xe3]f\x13b\x8d\x84z;")
				data := make([]byte, 0, 72)
				data = append(data, fullData[114]^fullData[75], fullData[125]^fullData[82], fullData[84]-fullData[46], fullData[14]+fullData[34], fullData[68]-fullData[15], fullData[101]-fullData[6], fullData[55]^fullData[32], fullData[53]-fullData[1], fullData[117]+fullData[47], fullData[128]+fullData[67], fullData[64]-fullData[16], fullData[83]+fullData[73], fullData[115]-fullData[87], fullData[140]+fullData[80], fullData[126]^fullData[139], fullData[11]-fullData[3], fullData[106]+fullData[111], fullData[102]-fullData[40], fullData[135]+fullData[74], fullData[103]+fullData[107], fullData[118]+fullData[20], fullData[131]^fullData[38], fullData[45]^fullData[137], fullData[132]^fullData[109], fullData[108]-fullData[56], fullData[94]+fullData[81], fullData[7]-fullData[4], fullData[104]+fullData[2], fullData[77]+fullData[27], fullData[123]+fullData[23], fullData[76]-fullData[130], fullData[100]^fullData[8], fullData[133]^fullData[138], fullData[134]-fullData[31], fullData[44]-fullData[42], fullData[70]-fullData[90], fullData[86]+fullData[39], fullData[116]-fullData[49], fullData[120]^fullData[37], fullData[54]^fullData[25], fullData[62]^fullData[21], fullData[99]^fullData[122], fullData[59]+fullData[10], fullData[13]+fullData[127], fullData[65]^fullData[98], fullData[0]^fullData[97], fullData[69]^fullData[43], fullData[119]^fullData[85], fullData[33]+fullData[95], fullData[52]+fullData[58], fullData[5]-fullData[88], fullData[28]^fullData[48], fullData[12]^fullData[24], fullData[63]^fullData[78], fullData[19]-fullData[141], fullData[66]+fullData[110], fullData[41]^fullData[91], fullData[9]+fullData[72], fullData[121]-fullData[29], fullData[112]-fullData[22], fullData[105]+fullData[92], fullData[26]^fullData[89], fullData[79]+fullData[30], fullData[93]+fullData[35], fullData[129]^fullData[113], fullData[36]-fullData[60], fullData[124]-fullData[96], fullData[18]^fullData[136], fullData[71]+fullData[61], fullData[50]-fullData[51], fullData[57]-fullData[17])
				return string(data)
			}())
		}()
	case 69:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 4
				decryptKey := 125
				for counter := 0; i != 11; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 2:
						data = append(data, "\xdb\xdf\xe0\xe2"...,
						)
						i = 14
					case 15:
						i = 3
						data = append(data, 176)
					case 7:
						i = 5
						data = append(data, "\xdc\xf1\xe5"...,
						)
					case 4:
						i = 2
						data = append(data, "\xe4\xdbފ"...,
						)
					case 8:
						i = 1
						data = append(data, "\xc9\xd0"...,
						)
					case 1:
						i = 7
						data = append(data, "˛ݙ"...,
						)
					case 0:
						i = 15
						data = append(data, 173)
					case 9:
						i = 8
						data = append(data, "\x82\xdb"...,
						)
					case 13:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 11
					case 5:
						data = append(data, "\xde\xe9\x93"...,
						)
						i = 6
					case 3:
						i = 12
						data = append(data, "\xab\xb8\xbe"...,
						)
					case 12:
						i = 13
						data = append(data, 110)
					case 10:
						i = 0
						data = append(data, "\xec\xe7\xefk"...,
						)
					case 6:
						i = 10
						data = append(data, "\xd5\xdf֗"...,
						)
					case 14:
						i = 9
						data = append(data, "\x83\x9e\x8a"...,
						)
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func p8zhZ9puZry() {
	switch get_byte() {
	case 114:
		fsccrU()
	case 'i':
		e1HmCpV9()
	case 'T':
		oyZHtTD()
	case 90:
		f79NG6XIe7()
	default:
		hacker_get_out()
	}
}

func r47PATr5vZsZ() {
	switch get_byte() {
	case '3':
		snfmG65B2Pds()
	case 'c':
		axWoFTD8G()
	case '2':
		func() {
			fmt.Println(func() string {
				key := []byte("\xf9\xd0\x1bdDtv\xc6")
				data := []byte("V\x98\x05\n+\xac\xc4b")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 115:
		dwmBONWD_rCp()
	default:
		hacker_get_out()
	}
}

func wMVfAH() {
	switch get_byte() {
	case 'r':
		func() {
			fmt.Println(func() string {
				key := []byte("\xa3\xf5kr\xbc\xfa@\xbc\x98\x18t\x136\x007w$1ex7%Do\xd5Î\x86\xea\x1b\xae@@\xeb\x9fd\xbbƑ\xb4\xa4y༸\xa8\x92)\x8dG\xa2\xb5:J\xf8E\xab\xa5\xe4\x17Fl!\xa74{\x12ң\xc8\xee")
				data := []byte("\xabp\v\xbf\xb6e\at\xd6V\xedL\x112?\xee;(\xd3\xfd(0,\xf0yr諈D\x99\xf1.\x83\xc2\xfb\x91\x9f㫵\xbb\x95\xa3\x8c\x89\xe5E\xd2\a\x96\xc1\xfa(g\x02\x8aɊJ\x19\xd8\x0f\xcc1\xf7b\x8d\xb6\xa7\x87")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 50:
		a2ZhE_qto()
	case '6':
		z_EHURMgWd()
	case 'E':
		psbTAFt()
	default:
		hacker_get_out()
	}
}

func dJrESsKL() {
	switch get_byte() {
	case 113:
		cXzweC()
	case 97:
		uUzHoJY()
	case 71:
		mAVmPaATK()
	case 'i':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 23
				decryptKey := 223
				for counter := 0; i != 15; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 20:
						i = 25
						data = append(data, "U?("...,
						)
					case 8:
						data = append(data, 62)
						i = 7
					case 10:
						i = 12
						data = append(data, 73)
					case 7:
						data = append(data, "XdP"...,
						)
						i = 4
					case 9:
						data = append(data, "\x02\x05"...,
						)
						i = 13
					case 3:
						i = 6
						data = append(data, "\\\xfb"...,
						)
					case 25:
						data = append(data, "#]ZN"...,
						)
						i = 10
					case 4:
						i = 17
						data = append(data, "W3q\\"...,
						)
					case 26:
						data = append(data, "\x180"...,
						)
						i = 2
					case 12:
						data = append(data, "/\x18"...,
						)
						i = 3
					case 2:
						i = 19
						data = append(data, " \x1c\x04"...,
						)
					case 22:
						i = 21
						data = append(data, "N>%"...,
						)
					case 11:
						i = 8
						data = append(data, "deUT"...,
						)
					case 21:
						i = 26
						data = append(data, " \xfc:!"...,
						)
					case 19:
						data = append(data, "B\xfe"...,
						)
						i = 16
					case 23:
						data = append(data, "$<"...,
						)
						i = 0
					case 13:
						i = 15
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 5:
						data = append(data, "!\r"...,
						)
						i = 22
					case 24:
						i = 18
						data = append(data, "2\x17\x01"...,
						)
					case 16:
						data = append(data, "<*\x0f\xfa"...,
						)
						i = 11
					case 17:
						i = 14
						data = append(data, ">,o"...,
						)
					case 1:
						i = 20
						data = append(data, "[\x16"...,
						)
					case 6:
						data = append(data, "\t\b\xf4\xeb"...,
						)
						i = 9
					case 0:
						i = 24
						data = append(data, "J\x06D"...,
						)
					case 18:
						i = 5
						data = append(data, "LM=<"...,
						)
					case 14:
						data = append(data, "gE5\x1c"...,
						)
						i = 1
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func eQsc9z() {
	switch get_byte() {
	case 'm':
		rznSaMGw()
	case 'G':
		rtlniJzqYV()
	case 103:
		func() {
			fmt.Println(func() string {
				key := []byte("8$\xba\"\xbe\xa1\x97\xb04\xf0;vzē<\xbc\xb4.@9\x06\x9e\x04\xf2\xfb<\xad>\xedY\xdagf\x9e+\x05\x80Q*\x7f~\xc1\x86\x946K\x88\r\xb4^+BWy~Ś\xb5`\xe9\xaeU=>\xfa\xd7\xc4\x11\x10r")
				data := []byte("vA\xcc\x13\xcc\xfeЀZ\x9eZ)=\xf6\xe5Y\xe3\xed\x165fS\xee[\xbc\xceJ\x9cL\xb2\x1e\xeb\t\b\xfftI\xe5%u&J\xb4\xd9\xd0\a<\xe6R\xfaf]v%&9\xf0\xf4\xdb\x01\xb6\xeaeN[\x88\xa3\x9bH\x7f\a")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 108:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 4
					decryptKey := 219
					for counter := 0; i != 3; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 1:
							data = append(data, "\xe80:"...,
							)
							i = 0
						case 5:
							i = 3
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
						case 0:
							data = append(data, "\xe5\xfe\a"...,
							)
							i = 5
						case 2:
							i = 1
							data = append(data, "\xeb.8"...,
							)
						case 4:
							data = append(data, "\x19C@@"...,
							)
							i = 2
						}
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func aABbxQq() {
	switch get_byte() {
	case 'h':
		bduldj0gA()
	case 86:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 111:
		cFIBDcL78()
	case 'J':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func itRbYzMu8() {
	switch get_byte() {
	case 55:
		tFPZ0y()
	case 48:
		hp5zG42JUW4z()
	case 99:
		func() {
			println(func() string {
				fullData := []byte("\xd4x\x1b\x99\xd5}\xf6\xb7cv\xa7\xf8\xa0\x87\xa3s\xbfa\x99Y݅|\xb1i\xe1z\xa2\xbe\"\xb6b\xa4\x86\b\xc3\tO~i\xa2T\xb7\xe8\xb5\x162\b\xf4\xd4\x16\xef\xf5\xb0\x03{\x1c\xdf\xd1Ԉ8\xc8x\xd9\xc4\xf8^\xef/ԥ\x9fM\x9b\xe4\xbdA")
				data := make([]byte, 0, 40)
				data = append(data, fullData[2]-fullData[27], fullData[52]+fullData[26], fullData[33]+fullData[68], fullData[10]-fullData[13], fullData[74]-fullData[69], fullData[29]^fullData[73], fullData[41]-fullData[25], fullData[0]^fullData[12], fullData[71]-fullData[21], fullData[19]^fullData[8], fullData[30]^fullData[72], fullData[48]-fullData[49], fullData[58]+fullData[14], fullData[44]^fullData[70], fullData[16]^fullData[59], fullData[20]-fullData[63], fullData[32]+fullData[22], fullData[54]+fullData[67], fullData[43]-fullData[62], fullData[1]-fullData[50], fullData[36]+fullData[24], fullData[51]+fullData[9], fullData[53]+fullData[23], fullData[11]+fullData[15], fullData[28]+fullData[31], fullData[5]^fullData[56], fullData[64]^fullData[7], fullData[57]-fullData[55], fullData[38]+fullData[40], fullData[42]^fullData[35], fullData[60]-fullData[45], fullData[61]+fullData[77], fullData[75]-fullData[65], fullData[18]^fullData[66], fullData[3]-fullData[46], fullData[34]^fullData[39], fullData[17]^fullData[47], fullData[76]-fullData[37], fullData[6]-fullData[4])
				return string(data)
			}())
		}()
	case 57:
		func() {
			println(func() string {
				data := []byte("Ǡ\xf3 \xf4\xf7stأ)pta\x0e\xaa\xa1\xc1\xe8\xadT?\xe0k\x06\xf8nt\xa1\x8d\x18\xa8m\xee\xb6a衧")
				positions := [...]byte{30, 18, 27, 20, 31, 34, 16, 36, 11, 24, 17, 25, 4, 5, 21, 18, 0, 14, 8, 21, 18, 8, 11, 33, 32, 17, 29, 24, 1, 37, 19, 15, 2, 38, 32, 27, 0, 17, 9, 20, 22, 28}
				for i := 0; i < 42; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 142
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func mW0GXnMA_RD() {
	switch get_byte() {
	case 115:
		qQTzuN26NJk()
	case 'N':
		kS8sATZnsJHj()
	case '7':
		sO9EeZq_6()
	case 'o':
		szUqNQ()
	default:
		hacker_get_out()
	}
}

func p_A1ppf2() {
	switch get_byte() {
	case 87:
		eicz56Kamp()
	case 'Q':
		n9rj1Y()
	case 'C':
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("\xbd\xbeb\x9b\xac\xdc9,Gbn\x06i\x8c\xe4\x0f0\x06č\x82zX2\v\xbc")
					data := make([]byte, 0, 14)
					data = append(data, fullData[19]+fullData[0], fullData[8]^fullData[23], fullData[20]-fullData[15], fullData[17]+fullData[10], fullData[5]-fullData[25], fullData[11]^fullData[2], fullData[3]-fullData[7], fullData[14]-fullData[18], fullData[6]+fullData[16], fullData[12]+fullData[24], fullData[13]^fullData[4], fullData[22]^fullData[9], fullData[1]-fullData[21])
					return string(data)
				}())
			}()
		}()
	case '1':
		func() {
			fmt.Println(func() string {
				data := []byte("\x13\xeb\xa6`\xea\xcf:\x9e")
				positions := [...]byte{0, 0, 3, 4, 4, 1, 7, 2, 5, 0}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 115
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func okgzG8M1NuXN() {
	switch get_byte() {
	case 'I':
		plv7nO()
	case 88:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 21
				decryptKey := 158
				for counter := 0; i != 23; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 25:
						i = 7
						data = append(data, "\xad\xb4"...,
						)
					case 4:
						i = 19
						data = append(data, "w\xbb\x9e"...,
						)
					case 3:
						data = append(data, "\x97v\xb0\xb1"...,
						)
						i = 22
					case 19:
						i = 18
						data = append(data, "\xac\xaf\x9b"...,
						)
					case 11:
						i = 0
						data = append(data, "\xaf\x97\xd9"...,
						)
					case 24:
						data = append(data, "\u0081\xc0\xae"...,
						)
						i = 3
					case 27:
						i = 10
						data = append(data, "Ӽ\xa8"...,
						)
					case 29:
						data = append(data, "\xbf\xaa\x86"...,
						)
						i = 8
					case 15:
						data = append(data, 211)
						i = 29
					case 26:
						i = 24
						data = append(data, 131)
					case 7:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 23
					case 9:
						data = append(data, "\xdd\xc8ã"...,
						)
						i = 14
					case 5:
						data = append(data, "\xa9\xc3"...,
						)
						i = 15
					case 10:
						data = append(data, 237)
						i = 9
					case 22:
						data = append(data, "\xa5\xa4\x8a"...,
						)
						i = 4
					case 1:
						data = append(data, "\xb0\xdf\xe0\xd4"...,
						)
						i = 27
					case 21:
						data = append(data, "\xc7\xdf\xf1"...,
						)
						i = 16
					case 12:
						data = append(data, "\xbc\xbb"...,
						)
						i = 5
					case 20:
						i = 28
						data = append(data, "\x87\xceƨ"...,
						)
					case 0:
						i = 13
						data = append(data, "\x95\xd7Ů"...,
						)
					case 28:
						i = 26
						data = append(data, 152)
					case 16:
						data = append(data, 173)
						i = 2
					case 13:
						i = 12
						data = append(data, "\x99\xc7\xc8"...,
						)
					case 14:
						data = append(data, "\xe1\xcc"...,
						)
						i = 6
					case 2:
						i = 1
						data = append(data, "\xef\xdd\xc6"...,
						)
					case 8:
						i = 20
						data = append(data, "ȳ\x99"...,
						)
					case 17:
						i = 11
						data = append(data, 207)
					case 18:
						i = 25
						data = append(data, 150)
					case 6:
						data = append(data, "\xc3\xdf"...,
						)
						i = 17
					}
				}
				return string(data)
			}())
		}()
	case 'U':
		gABvvFwz1I()
	case 'W':
		func() {
			defer func() {
				println(func() string {
					seed := byte(206)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
					fnc(132)(39)(10)(247)(90)(176)(235)(79)(215)(225)(86)(246)(134)
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func nVo6u9uDr() {
	switch get_byte() {
	case 108:
		fIUQpzukB()
	case 85:
		r_nJFV()
	case 50:
		func() {
			fmt.Println(func() string {
				seed := byte(99)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(235)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
				return string(data)
			}())
		}()
	case 101:
		kEzTGZZ()
	default:
		hacker_get_out()
	}
}

func tMbeiXRN() {
	switch get_byte() {
	case 51:
		ijXyV1()
	case 'l':
		func() {
			fmt.Println(func() string {
				key := []byte("U\xfd\xddG\xf9B:\x85")
				data := []byte("\x1a\x95\xfd)\x96b\x00\xad")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 't':
		icN8ioGnW02H()
	case 66:
		rqWtQTBIXs()
	default:
		hacker_get_out()
	}
}

func y9z86l() {
	switch get_byte() {
	case 111:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 8
				decryptKey := 16
				for counter := 0; i != 3; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 5:
						data = append(data, 171)
						i = 7
					case 8:
						data = append(data, 141)
						i = 9
					case 4:
						data = append(data, 92)
						i = 5
					case 1:
						data = append(data, 114)
						i = 6
					case 9:
						data = append(data, 167)
						i = 4
					case 6:
						data = append(data, 97)
						i = 2
					case 7:
						i = 0
						data = append(data, 169)
					case 0:
						i = 1
						data = append(data, 91)
					case 2:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 3
					}
				}
				return string(data)
			}())
		}()
	case 103:
		ekcga_q74j()
	case 70:
		func() {
			defer func() {
				println(func() string {
					key := []byte("s\xcb5\x19\xb5,e\x9e\x86\xa4\x12\xc74")
					data := []byte("9\xbeFm\x95H\n\xbe\xef\xd02\xfdp")
					for i, b := range key {
						data[i] = data[i] ^ b
					}
					return string(data)
				}())
			}()
		}()
	case 68:
		ulpVBXwn1T()
	default:
		hacker_get_out()
	}
}

func fgl7v2f() {
	switch get_byte() {
	case 'R':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case '3':
		func() {
			defer func() {
				println(func() string {
					key := []byte("KWY\xdd\xec\xb0\v\xfaZi\xe3T\xc1")
					data := []byte("\xff\x1e\x1a\x974\xb4d&\x0f\v=\xe6\x83")
					for i, b := range key {
						data[i] = data[i] + b
					}
					return string(data)
				}())
			}()
		}()
	case 'T':
		ababux9Nw()
	case '6':
		aJcw76()
	default:
		hacker_get_out()
	}
}

func hB57NP1wSkC() {
	switch get_byte() {
	case 84:
		func() {
			defer func() {
				println(func() string {
					key := []byte("W\x951\xe1\x9aE)\xd6\xfc\x9d\xf3\xa3\xf4")
					data := []byte("\xf3\xe0B\x93\x86\x1fFJm\xd7-\x97P")
					for i, b := range key {
						data[i] = data[i] + b
					}
					return string(data)
				}())
			}()
		}()
	case 71:
		h0QUJpQ()
	case 98:
		zeTwAMAuOuPw()
	case 81:
		i9tf2hOenfoZ()
	default:
		hacker_get_out()
	}
}

func hZHUPHURz6M() {
	switch get_byte() {
	case 'n':
		xADpZz()
	case 'j':
		rJTGAO()
	case 69:
		p2aaETMfSd()
	case 117:
		ifRAmiRhk()
	default:
		hacker_get_out()
	}
}

func rEbMuYUIb_() {
	switch get_byte() {
	case 48:
		yRdmOKuUov()
	case 75:
		vWkpjxZz5_J()
	case 66:
		dqVvBn()
	case 99:
		aL5QzzstMl2()
	default:
		hacker_get_out()
	}
}

func bvMpcr4l_() {
	switch get_byte() {
	case 67:
		i36tgb()
	case 'U':
		func() {
			println(func() string {
				fullData := []byte("\t\xd9\xedcZ\xedy\xf7\x8b\xc0:=\xf1\xae\xbdX@\xe0\x83+\xb1\xc7\x02\x80@\xd4\xe8\xd2\xed\x01\a\x95\xa3\xbf\xd5*+ϩ\xd7\xef\\p\x8a\xf9vC\x1dyI\xb7\xf4\x11\x10\xde\x19Y\xa1\xe5\xc3\x04\xbbA\xdf\xe0\xceN\xb8\xafjhu\x93\xb9\\\x0f\xb0\xcd")
				data := make([]byte, 0, 40)
				data = append(data, fullData[0]+fullData[42], fullData[68]-fullData[16], fullData[61]^fullData[65], fullData[47]^fullData[11], fullData[69]+fullData[22], fullData[74]-fullData[2], fullData[4]+fullData[55], fullData[7]-fullData[18], fullData[64]-fullData[9], fullData[36]+fullData[75], fullData[77]+fullData[41], fullData[40]-fullData[37], fullData[5]-fullData[48], fullData[54]^fullData[33], fullData[62]^fullData[35], fullData[13]+fullData[50], fullData[66]+fullData[27], fullData[39]+fullData[43], fullData[59]-fullData[32], fullData[3]^fullData[29], fullData[71]^fullData[30], fullData[58]+fullData[23], fullData[52]-fullData[76], fullData[15]-fullData[28], fullData[56]+fullData[21], fullData[10]-fullData[1], fullData[14]+fullData[20], fullData[44]-fullData[31], fullData[25]^fullData[51], fullData[34]^fullData[57], fullData[72]+fullData[63], fullData[60]-fullData[8], fullData[24]+fullData[17], fullData[49]-fullData[26], fullData[12]+fullData[45], fullData[38]+fullData[67], fullData[6]-fullData[53], fullData[19]+fullData[46], fullData[73]+fullData[70])
				return string(data)
			}())
		}()
	case 113:
		aBe9OLB()
	case 'm':
		yIszT7KgC()
	default:
		hacker_get_out()
	}
}

func zMds5b() {
	switch get_byte() {
	case 'u':
		cEp6jfgzW()
	case 'W':
		func() {
			fmt.Println(func() string {
				key := []byte("\x01\xd5\xc5\xe9\xb3#\xb1\x1a8sCƪ\x82\t\a\x9a\x0f\xfc\x1dxj\x02a\xf8\x18\x16\x91\xb9\xcbg\x7fJ\x89\xd8\xe8\xbe'\x99\x9b\xbb\x91\xb0\xb9\x9f\"W\xa3\xe4\xa2M\xc3\x035<\xe2\xe8\x81\x18\x14E\x85q\xaf\xfc-L\xfe*\xda\x1c")
				data := []byte("O:;\x1a%\x82\xf8J\xa6\xe1\xa4%\xf1\xb4\x7fl\xf9h4\x92\u05ffr\xc0FM\x8c\xc2+*\xae\xb0\xb8\xf79G\n\x8c\r\xfa\x14\xc5%\x18\xe3S\xce\x11C\xf0\x8597\xa7\x9b)\x1d\xef\x86u\xa4ɡ\"a\x9f\xc0]\x83I\x91")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 74:
		n57Sko()
	case 107:
		uBo13qWtQlE()
	default:
		hacker_get_out()
	}
}

func r_nJFV() {
	switch get_byte() {
	case 'z':
		nVo6u9uDr()
	case 73:
		zQRyPlJ62x()
	case 'U':
		func() {
			fmt.Println(func() string {
				key := []byte("JĎ\x18\xcb\xfaK]")
				data := []byte("\x05\xac\xaev\xa4\xdaqu")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 118:
		func() {
			fmt.Println(func() string {
				seed := byte(41)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(120)(9)(202)(226)(197)(59)(144)(14)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func cEiRYxL6J1() {
	switch get_byte() {
	case 86:
		m_I4Pf()
	case 68:
		ghHJ7T8()
	case '3':
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("JC\xf7\xbe^\xb7\x06M\xcf\rg\x02\x9b<\x8d\x1em\\\xff\xe9\xc9\b\xabj\x9f+")
					data := make([]byte, 0, 14)
					data = append(data, fullData[24]+fullData[22], fullData[25]^fullData[4], fullData[23]-fullData[2], fullData[1]-fullData[8], fullData[20]^fullData[19], fullData[18]^fullData[12], fullData[10]+fullData[21], fullData[7]^fullData[16], fullData[17]+fullData[9], fullData[3]-fullData[0], fullData[15]+fullData[11], fullData[13]^fullData[6], fullData[5]+fullData[14])
					return string(data)
				}())
			}()
		}()
	case 82:
		kC9MMQ0m()
	default:
		hacker_get_out()
	}
}

func axWoFTD8G() {
	switch get_byte() {
	case '3':
		r47PATr5vZsZ()
	case 'D':
		tjqafURIkr5()
	case 'Z':
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("\f\x1c\u05fe\b\x18]2+\xe4\x8aI\xea`\x8c\x99\xd5\xde8\xf8\xee\xc6X_\xaf,")
					data := make([]byte, 0, 14)
					data = append(data, fullData[4]-fullData[3], fullData[16]-fullData[13], fullData[15]^fullData[12], fullData[8]^fullData[23], fullData[2]+fullData[11], fullData[20]^fullData[10], fullData[7]^fullData[6], fullData[0]^fullData[25], fullData[21]^fullData[24], fullData[19]^fullData[14], fullData[18]^fullData[5], fullData[9]^fullData[17], fullData[1]^fullData[22])
					return string(data)
				}())
			}()
		}()
	case 101:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 26
				decryptKey := 138
				for counter := 0; i != 2; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 23:
						i = 1
						data = append(data, "\x9e\xb4\xbd\xd1"...,
						)
					case 28:
						i = 0
						data = append(data, "\x89̋\xa5"...,
						)
					case 11:
						data = append(data, "\x8d\xfb\xaa\xab"...,
						)
						i = 21
					case 26:
						data = append(data, "\x82\xa8\xb8\xfe"...,
						)
						i = 6
					case 27:
						i = 20
						data = append(data, "\xa0\xe6\xa2"...,
						)
					case 14:
						i = 12
						data = append(data, 149)
					case 19:
						i = 2
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 5:
						i = 13
						data = append(data, 154)
					case 13:
						i = 27
						data = append(data, 224)
					case 16:
						i = 28
						data = append(data, 198)
					case 12:
						data = append(data, "\x8d\xa3\xb3"...,
						)
						i = 16
					case 22:
						data = append(data, "\x8f\xb0\xa4\x8c"...,
						)
						i = 23
					case 3:
						i = 22
						data = append(data, 131)
					case 15:
						data = append(data, "\xd1\xe6\xff"...,
						)
						i = 19
					case 17:
						data = append(data, 230)
						i = 10
					case 6:
						i = 11
						data = append(data, "\xba\x96"...,
						)
					case 4:
						data = append(data, "\xe9\xff\xfa\xd0"...,
						)
						i = 15
					case 0:
						i = 25
						data = append(data, "\xbc\xc1\x9b\x98"...,
						)
					case 10:
						i = 18
						data = append(data, 170)
					case 20:
						data = append(data, "\x8e\x95\xe2\x82"...,
						)
						i = 3
					case 24:
						data = append(data, "\xa4\xd0"...,
						)
						i = 14
					case 8:
						i = 9
						data = append(data, "\x87\xf3\xb4"...,
						)
					case 25:
						i = 7
						data = append(data, "\x96\xaf\xb5"...,
						)
					case 7:
						i = 4
						data = append(data, "\u0080"...,
						)
					case 1:
						data = append(data, "\x93\xb8"...,
						)
						i = 24
					case 21:
						data = append(data, "\xa7\x98"...,
						)
						i = 8
					case 18:
						data = append(data, "\x87\x8c\xaa\x84"...,
						)
						i = 5
					case 9:
						data = append(data, "\xa6\x83\x84"...,
						)
						i = 17
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func ahC2mseU57() {
	switch get_byte() {
	case 106:
		fcSBRUY()
	case 'E':
		wtEBnsnMz()
	case 'F':
		func() {
			fmt.Println(func() string {
				fullData := []byte("N0\xe8OZ\x8d\xf9\xae{W\xb0@\xe9\x83o\x0e\x18܁U7\xf9\xe7j\xc74w\x00\xda\xfb75\xc0E\x18\f\fw\xceo:\xc2Ǟ;\x05\xf7\x18\r\x14L\xad\x95\xc8/A\x88zW\xf2\xd9\xede\xee\x86\xd2?\x067U\v\xd2Z\xad\xb6f\xfeB?9\x93\xe2͐\xf0\xb5\xe3@[L\xef\xd7\U00044618eo\xe4ް\x9c\x8a;\xa8Ŝ\x11\x9f\x13\x9e'\xec~\x93\r0\xf8G\x14\x98\xf8\xd5WS\x04\x8cm0W\"!)\x87\xc6W\xf0#\x83?8\x18")
				data := make([]byte, 0, 72)
				data = append(data, fullData[113]-fullData[1], fullData[71]+fullData[114], fullData[131]^fullData[123], fullData[85]-fullData[93], fullData[51]-fullData[44], fullData[141]+fullData[118], fullData[66]-fullData[121], fullData[120]+fullData[95], fullData[70]^fullData[62], fullData[52]-fullData[111], fullData[74]^fullData[91], fullData[45]+fullData[72], fullData[33]-fullData[76], fullData[115]^fullData[78], fullData[134]+fullData[100], fullData[12]^fullData[126], fullData[38]-fullData[97], fullData[36]^fullData[69], fullData[39]^fullData[129], fullData[127]^fullData[47], fullData[31]^fullData[23], fullData[27]^fullData[19], fullData[32]^fullData[10], fullData[0]^fullData[107], fullData[73]^fullData[86], fullData[56]-fullData[124], fullData[140]-fullData[41], fullData[11]+fullData[92], fullData[40]-fullData[53], fullData[8]+fullData[98], fullData[15]-fullData[42], fullData[99]^fullData[90], fullData[117]-fullData[102], fullData[57]-fullData[35], fullData[112]^fullData[5], fullData[125]+fullData[88], fullData[25]+fullData[34], fullData[17]-fullData[26], fullData[122]+fullData[108], fullData[50]+fullData[109], fullData[83]-fullData[68], fullData[21]+fullData[103], fullData[4]^fullData[54], fullData[48]-fullData[7], fullData[24]^fullData[138], fullData[30]^fullData[67], fullData[133]^fullData[136], fullData[87]-fullData[65], fullData[81]-fullData[13], fullData[18]+fullData[82], fullData[55]+fullData[46], fullData[119]-fullData[110], fullData[104]^fullData[106], fullData[137]+fullData[3], fullData[6]+fullData[75], fullData[77]-fullData[29], fullData[105]^fullData[84], fullData[79]^fullData[58], fullData[89]^fullData[130], fullData[94]-fullData[20], fullData[2]+fullData[37], fullData[49]+fullData[128], fullData[14]-fullData[139], fullData[61]^fullData[43], fullData[9]-fullData[59], fullData[101]^fullData[63], fullData[80]^fullData[22], fullData[64]+fullData[60], fullData[116]+fullData[132], fullData[16]+fullData[135], fullData[28]-fullData[96])
				return string(data)
			}())
		}()
	case 75:
		n8Vnz9zRUc2c()
	default:
		hacker_get_out()
	}
}

func pdp2yg48Idh() {
	switch get_byte() {
	case 'P':
		c7ms7wCDD5D()
	case 'r':
		func() {
			println(func() string {
				data := []byte("y\x14Y#omsV :c aak~ ~ briIkv\x845m \xc2JUqa\x9a/\x94n\xa9")
				positions := [...]byte{26, 32, 21, 2, 7, 17, 22, 30, 31, 27, 10, 5, 10, 35, 29, 34, 12, 25, 24, 10, 1, 10, 10, 3, 12, 4, 31, 15, 27, 30, 36, 35, 15, 29, 7, 34, 26, 38, 4, 35, 7, 1}
				for i := 0; i < 42; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 219
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 'j':
		yXGJgZjA()
	case 108:
		fmMtFzeuD3q()
	default:
		hacker_get_out()
	}
}

func q5pWqz() {
	switch get_byte() {
	case 108:
		func() {
			println(func() string {
				fullData := []byte("\x1d\xb7\x9fb\x8d\xc4\xe0\xa5\xed\xb6\xf9\x9c\ae\vz\xbbn\xd1\xe5,\x8c@Z,\x95\xb6\xc20)\xb8E8\xcc-e\xaf\x19\xe4\x0e|O\x17n\xe4\xd8\xd6\xd3\xcc\xf8.\xe8d\xc5J\xb1\xa4Ję9\x17\xad\xa4<\xb0\x96%\nI\xfd]\\\x7f!\x04\f\r")
				data := make([]byte, 0, 40)
				data = append(data, fullData[28]-fullData[1], fullData[14]+fullData[52], fullData[10]^fullData[21], fullData[5]^fullData[38], fullData[20]^fullData[22], fullData[68]+fullData[13], fullData[58]+fullData[36], fullData[42]+fullData[71], fullData[72]-fullData[64], fullData[45]+fullData[3], fullData[11]+fullData[4], fullData[9]-fullData[66], fullData[67]+fullData[41], fullData[33]+fullData[25], fullData[74]-fullData[26], fullData[69]^fullData[24], fullData[75]-fullData[44], fullData[61]+fullData[54], fullData[34]^fullData[77], fullData[76]^fullData[43], fullData[6]-fullData[17], fullData[32]-fullData[47], fullData[2]+fullData[27], fullData[65]-fullData[31], fullData[50]-fullData[39], fullData[40]+fullData[19], fullData[8]-fullData[73], fullData[70]-fullData[59], fullData[35]+fullData[16], fullData[18]^fullData[7], fullData[56]^fullData[46], fullData[48]+fullData[62], fullData[60]^fullData[37], fullData[12]+fullData[23], fullData[57]+fullData[0], fullData[53]^fullData[63], fullData[30]+fullData[55], fullData[51]-fullData[15], fullData[49]+fullData[29])
				return string(data)
			}())
		}()
	case 'M':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 23
				decryptKey := 42
				for counter := 0; i != 19; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 29:
						i = 10
						data = append(data, "\x9e\x8aqY"...,
						)
					case 21:
						i = 13
						data = append(data, 85)
					case 23:
						i = 29
						data = append(data, "~\x94\xa4^"...,
						)
					case 28:
						data = append(data, 121)
						i = 9
					case 17:
						i = 28
						data = append(data, "\xacf\xa6\x92"...,
						)
					case 26:
						i = 5
						data = append(data, 132)
					case 16:
						i = 2
						data = append(data, "\x8dy"...,
						)
					case 27:
						data = append(data, "\x95\x87"...,
						)
						i = 26
					case 25:
						i = 3
						data = append(data, "\x9f\x98"...,
						)
					case 18:
						i = 11
						data = append(data, "sWB\x84"...,
						)
					case 24:
						i = 19
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 15:
						data = append(data, "mV\x93"...,
						)
						i = 0
					case 9:
						i = 20
						data = append(data, "b~"...,
						)
					case 14:
						data = append(data, "H4y"...,
						)
						i = 30
					case 7:
						data = append(data, ";{d"...,
						)
						i = 14
					case 20:
						data = append(data, "}olX"...,
						)
						i = 1
					case 11:
						data = append(data, "\xd5\xe1"...,
						)
						i = 22
					case 22:
						i = 12
						data = append(data, "\xe2\xcc\xc5"...,
						)
					case 5:
						i = 21
						data = append(data, 107)
					case 0:
						i = 16
						data = append(data, 80)
					case 1:
						data = append(data, "p~ha"...,
						)
						i = 7
					case 8:
						i = 6
						data = append(data, "\xb2\x9b\x90"...,
						)
					case 4:
						i = 18
						data = append(data, "\x84v"...,
						)
					case 6:
						i = 17
						data = append(data, "\xaa\x98\x86l"...,
						)
					case 10:
						data = append(data, 150)
						i = 27
					case 12:
						i = 24
						data = append(data, "\xda\xdf"...,
						)
					case 13:
						i = 25
						data = append(data, "\x98\x86"...,
						)
					case 30:
						data = append(data, "o\x7f"...,
						)
						i = 15
					case 3:
						data = append(data, 118)
						i = 8
					case 2:
						data = append(data, "`M\x85"...,
						)
						i = 4
					}
				}
				return string(data)
			}())
		}()
	case 73:
		gx8cirOJFJ()
	case 57:
		iMptDSoz3O()
	default:
		hacker_get_out()
	}
}

func bkQLMNFAyccF() {
	switch get_byte() {
	case 102:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'D':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'r':
		hBFzqoQq()
	case 'O':
		iADTO2LSLU()
	default:
		hacker_get_out()
	}
}

func j_Idet() {
	switch get_byte() {
	case 115:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 101:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xfe\xc8V\xfb\xfa\xb1F\xd2\v\xa6\xda?ި\xc9e")
				data := make([]byte, 0, 9)
				data = append(data, fullData[5]^fullData[0], fullData[6]-fullData[12], fullData[1]-fullData[13], fullData[15]^fullData[8], fullData[9]+fullData[14], fullData[4]^fullData[10], fullData[11]+fullData[3], fullData[2]+fullData[7])
				return string(data)
			}())
		}()
	case 90:
		ruw2n07OW()
	case 98:
		lsf5dEhYZCN()
	default:
		hacker_get_out()
	}
}

func fOPO4bJz() {
	switch get_byte() {
	case 67:
		mvpW1n0E()
	case 99:
		aTeYpic()
	case 'f':
		fegWWOkQ6Bm()
	case 'Q':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func f5c3mW4() {
	switch get_byte() {
	case 'O':
		func() {
			fmt.Println(func() string {
				key := []byte("M\xef$\xcd(H\xadl'\x9dӟ^\xcdz\x9a\x16PY\x9a\xd8\xf16\x008\r\xb3Y\x05\xd5b\xe0\x97٫\x19\xbc\xeb\x83}\x8eF\x87\xfcz\tӀ\xc9\xf5\xbe\xa0C\xb7\x94\xbc#\x97S17\fi:X\x1eY\xd7m\xf6\xf7")
				data := []byte("\x9bT\x9a\xfe\x9a\xa7\xf4\x9c\x95\v4\xfe\xa5\xff\xf0\xffu\xa9\x91\x0f7F\xa6_\x86B)\x8aw4\xa9\x11\x05G\fx\bP\xf7\xdc\xe7z\xfc[\xbe:J\xee(C\xf6\x16w)\xf3\x03X\x05\xc1\x92\x96P\x99\xad\xbd\x90\xcd6\xc6el")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 'G':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'S':
		sxyCWMIbAty()
	case 'X':
		eSLNXnxzL()
	default:
		hacker_get_out()
	}
}

func qTnBpGx3() {
	switch get_byte() {
	case 90:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 2
				decryptKey := 74
				for counter := 0; i != 3; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 5:
						data = append(data, 101)
						i = 7
					case 8:
						data = append(data, 177)
						i = 0
					case 6:
						i = 3
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 1:
						i = 6
						data = append(data, 111)
					case 0:
						data = append(data, 179)
						i = 5
					case 9:
						i = 8
						data = append(data, 98)
					case 4:
						i = 9
						data = append(data, 169)
					case 2:
						data = append(data, 143)
						i = 4
					case 7:
						i = 1
						data = append(data, 128)
					}
				}
				return string(data)
			}())
		}()
	case 111:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 74:
		rxQOjzLQe()
	case 'k':
		faYgRvwx()
	default:
		hacker_get_out()
	}
}

func bduldj0gA() {
	switch get_byte() {
	case '3':
		mFQr3oagu()
	case 70:
		aABbxQq()
	case 'g':
		func() {
			defer func() {
				println(func() string {
					data := []byte("\xa0u8\xb7Nd\xe2\xadiY2:\xba")
					positions := [...]byte{3, 10, 12, 3, 7, 6, 9, 4, 12, 4, 2, 10, 10, 4, 0, 9, 2, 2}
					for i := 0; i < 18; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 189
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
					}
					return string(data)
				}())
			}()
		}()
	case 48:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func h6ymDenx() {
	switch get_byte() {
	case 'X':
		fAFLwKg4w()
	case 113:
		phW18tyUljPi()
	case 83:
		nCwMCj0ID_J()
	case 119:
		fDmGGfTKq()
	default:
		hacker_get_out()
	}
}

func uV7eCIzc() {
	switch get_byte() {
	case 117:
		func() {
			println(func() string {
				key := []byte("\x1a@C:\x18\x91g\x1dD\x02n\xe7\xf30;^<\x15\xef\xe5\xeeV\x1f1\x12H\x01ft\x87\x11\xf7⪅\xedP\x01\x93")
				data := []byte("c/6\x1at\xfe\x14id8GǇQP;\x1ctχ\x9c3~Z2)o\x02T\xf3c\x8e\xc2\xcb\xe2\x8c9o\xb2")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 74:
		q3rUmNc5XVDl()
	case 110:
		vCMCuF2I()
	case 70:
		pZzBllpcZ()
	default:
		hacker_get_out()
	}
}

func v0KsnqX81() {
	switch get_byte() {
	case 'e':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 3
					decryptKey := 127
					for counter := 0; i != 5; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 6:
							i = 1
							data = append(data, 170)
						case 0:
							data = append(data, "\x8e\xd3\xdb"...,
							)
							i = 2
						case 3:
							data = append(data, "\xb4\xe0\xdb\xdd"...,
							)
							i = 0
						case 1:
							i = 5
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
						case 4:
							data = append(data, 155)
							i = 6
						case 2:
							i = 4
							data = append(data, "\x8d\xcb׀"...,
							)
						}
					}
					return string(data)
				}())
			}()
		}()
	case 'M':
		func() {
			println(func() string {
				seed := byte(229)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(148)(246)(6)(171)(76)(3)(4)(1)(172)(26)(239)(247)(84)(237)(10)(250)(187)(65)(191)(66)(16)(243)(252)(10)(181)(65)(13)(246)(188)(84)(254)(7)(167)(65)(6)(250)(8)(5)(179)
				return string(data)
			}())
		}()
	case 89:
		f00Vflcq()
	case 105:
		rKVoviW4_()
	default:
		hacker_get_out()
	}
}

func rqWtQTBIXs() {
	switch get_byte() {
	case 'd':
		quDDgRKIs()
	case 55:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x98\xdc\x18\x967\x8a\x94\x1a\xfcNJ&\aPx\xf0")
				data := make([]byte, 0, 9)
				data = append(data, fullData[2]+fullData[4], fullData[7]+fullData[9], fullData[3]+fullData[5], fullData[6]-fullData[11], fullData[12]-fullData[0], fullData[8]-fullData[1], fullData[10]+fullData[15], fullData[14]-fullData[13])
				return string(data)
			}())
		}()
	case 121:
		tMbeiXRN()
	case 'U':
		dMDrNpn9TcdE()
	default:
		hacker_get_out()
	}
}

func s6THKh() {
	switch get_byte() {
	case 81:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'b':
		qyAX5mS2T()
	case 71:
		dSI5Orqm()
	case 65:
		iV4_2lLSoIs()
	default:
		hacker_get_out()
	}
}

func rxQOjzLQe() {
	switch get_byte() {
	case 114:
		func() {
			println(func() string {
				seed := byte(213)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(172)(238)(26)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
				return string(data)
			}())
		}()
	case 49:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case '6':
		cEbUXG9()
	case 'h':
		qTnBpGx3()
	default:
		hacker_get_out()
	}
}

func afLzhdWd() {
	switch get_byte() {
	case 'e':
		rkZAiUK6()
	case 'b':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 3
					decryptKey := 43
					for counter := 0; i != 2; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 5:
							i = 6
							data = append(data, "L\xf16B"...,
							)
						case 0:
							i = 1
							data = append(data, 29)
						case 3:
							i = 5
							data = append(data, "\x1fKJ"...,
							)
						case 6:
							i = 4
							data = append(data, 244)
						case 4:
							data = append(data, "FR\xff\x1a"...,
							)
							i = 0
						case 1:
							i = 2
							for y := range data {
								data[y] = data[y] + byte(decryptKey^y)
							}
						}
					}
					return string(data)
				}())
			}()
		}()
	case 109:
		func() {
			fmt.Println(func() string {
				data := []byte("\x1bJ n3-^x")
				positions := [...]byte{7, 5, 4, 5, 1, 5, 0, 5, 5, 5, 1, 6}
				for i := 0; i < 12; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 249
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 105:
		pbdr6Kn()
	default:
		hacker_get_out()
	}
}

func gKopl9V() {
	switch get_byte() {
	case 'p':
		bjmco2()
	case 109:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 11
				decryptKey := 7
				for counter := 0; i != 1; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 11:
						i = 12
						data = append(data, "?(1e"...,
						)
					case 3:
						i = 7
						data = append(data, "9z/"...,
						)
					case 6:
						data = append(data, "#,v6"...,
						)
						i = 2
					case 0:
						data = append(data, 65)
						i = 13
					case 17:
						i = 6
						data = append(data, 42)
					case 4:
						data = append(data, "m>"...,
						)
						i = 17
					case 14:
						i = 3
						data = append(data, 50)
					case 9:
						i = 4
						data = append(data, "nue"...,
						)
					case 8:
						data = append(data, "61:"...,
						)
						i = 5
					case 2:
						i = 8
						data = append(data, "t7 "...,
						)
					case 10:
						i = 0
						data = append(data, "\x04\v\r"...,
						)
					case 13:
						i = 1
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 16:
						data = append(data, "F\x06\x03"...,
						)
						i = 10
					case 5:
						data = append(data, "~>"...,
						)
						i = 14
					case 12:
						i = 9
						data = append(data, ".,35"...,
						)
					case 15:
						i = 16
						data = append(data, 32)
					case 7:
						i = 15
						data = append(data, 42)
					}
				}
				return string(data)
			}())
		}()
	case 70:
		wfEiPwa5yDF()
	case 'z':
		aoGITq()
	default:
		hacker_get_out()
	}
}

func iae22xK() {
	switch get_byte() {
	case 'd':
		qXjTKcz4CM()
	case 75:
		jGvlZue0z9()
	case 'I':
		func() {
			println(func() string {
				fullData := []byte("\x0fZO\x89\x14~Ֆ\x04Q\xa9$\xfe\xac\nS3ޟD4\xa9S\xadԁ\xb0\xce\xfe<=\xeeYe#\x80\xf7s}\xfep\x97\xcdi\xc95w\x12k\xef\xdf\n\t*\xff\x89\xe5\x05G\xbf\xeb\x16c\xb6\xdf\xcc\x00E\xfe\x8ea}9覊\xd03")
				data := make([]byte, 0, 40)
				data = append(data, fullData[6]^fullData[13], fullData[31]^fullData[25], fullData[20]-fullData[59], fullData[32]-fullData[72], fullData[26]-fullData[19], fullData[16]+fullData[29], fullData[58]-fullData[24], fullData[27]-fullData[1], fullData[22]+fullData[42], fullData[45]+fullData[57], fullData[10]+fullData[35], fullData[17]^fullData[68], fullData[71]+fullData[36], fullData[64]-fullData[5], fullData[69]^fullData[56], fullData[8]-fullData[18], fullData[14]^fullData[53], fullData[30]+fullData[11], fullData[41]+fullData[55], fullData[60]+fullData[46], fullData[2]+fullData[34], fullData[47]-fullData[23], fullData[70]-fullData[66], fullData[43]-fullData[28], fullData[67]^fullData[33], fullData[3]^fullData[73], fullData[4]-fullData[74], fullData[37]-fullData[0], fullData[63]^fullData[7], fullData[38]^fullData[52], fullData[44]+fullData[21], fullData[75]+fullData[49], fullData[54]^fullData[50], fullData[62]+fullData[39], fullData[77]-fullData[65], fullData[51]^fullData[48], fullData[61]+fullData[15], fullData[12]+fullData[40], fullData[76]+fullData[9])
				return string(data)
			}())
		}()
	case 81:
		zyVpjN()
	default:
		hacker_get_out()
	}
}

func cEbUXG9() {
	switch get_byte() {
	case 'k':
		func() {
			println(func() string {
				seed := byte(153)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(224)(246)(6)(171)(76)(3)(4)(1)(172)(26)(239)(247)(84)(237)(10)(250)(187)(65)(191)(66)(16)(243)(252)(10)(181)(65)(13)(246)(188)(84)(254)(7)(167)(65)(6)(250)(8)(5)(179)
				return string(data)
			}())
		}()
	case 'J':
		jlpC7ZhL()
	case 'X':
		func() {
			fmt.Println(func() string {
				key := []byte("-U\x85\xadH@ #\x05\xf5\r6\\%\xb2\x90\x89Q\x92\xa6<l'DO\x00\x10(\xe6.\xd0\x12\\\a\xbdW\xe2$[LX\x12\x04\xb7E7\x94\x1d\xbe<\xa1\"ϓ\x96\x05ǕT\xef\xe2Kc\xa0\x9c_\x9f\xe1,\xd6w")
				data := []byte("c0\xf3\x9c:\x1fg\x13k\x9bli\x1b\x17\xc4\xf5\xd6\b\xaa\xd3c9W\x1b\x015f\x19\x94q\x97#2i\xdc\b\xaeA/\x13\x01&q\xe8\x01\x06\xe3s\xe1r\x99T\xfb\xe1\xc9B\xf2\xfb:\x8e\xbd\x0fS\xd3\xf9-\xeb\xbeu\xb9\x02")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 'y':
		rxQOjzLQe()
	default:
		hacker_get_out()
	}
}

func y0KxbAP() {
	switch get_byte() {
	case '0':
		xOUYkYz4()
	case 82:
		sN6uNp()
	case 'X':
		ek5Owg()
	case '1':
		func() {
			fmt.Println(func() string {
				data := []byte("\x03\xfd2QP \bK")
				positions := [...]byte{3, 4, 7, 1, 7, 6, 2, 0}
				for i := 0; i < 8; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 219
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func dX4zaEW4jUIX() {
	switch get_byte() {
	case 56:
		cwFMtB1H()
	case 84:
		sKTl0ZEDwe6S()
	case 'O':
		func() {
			fmt.Println(func() string {
				data := []byte("YV-:\xee \x18(")
				positions := [...]byte{1, 4, 1, 2, 1, 6, 0, 3, 1, 6}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 226
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 'i':
		func() {
			println(func() string {
				fullData := []byte("\x00\xd4g'\xd64uM\x89\xb1w'F\xc2HE\xa2\x86)m\xda\x12\xfe\xd7\x0e\xd3[\xbc}\v\x9a1\xd6\x01OzI\x03p\xdd\xfeؚ\xe3\x1c't\xaav\xa3\x12\xc9|\xbb06\x1c\xd4\xf3\xe7\xaa?\x02\x8d\xc6_\x1e\xea\xe8\xef\xe7\\f\xf74Na\xc2")
				data := make([]byte, 0, 40)
				data = append(data, fullData[32]+fullData[49], fullData[4]-fullData[2], fullData[69]^fullData[30], fullData[73]+fullData[18], fullData[76]+fullData[29], fullData[26]^fullData[74], fullData[38]+fullData[37], fullData[0]^fullData[46], fullData[67]+fullData[55], fullData[39]^fullData[59], fullData[11]-fullData[40], fullData[47]+fullData[48], fullData[6]-fullData[33], fullData[56]^fullData[28], fullData[61]-fullData[1], fullData[14]-fullData[43], fullData[58]-fullData[25], fullData[50]+fullData[34], fullData[52]^fullData[71], fullData[8]-fullData[3], fullData[12]-fullData[57], fullData[63]+fullData[41], fullData[45]-fullData[64], fullData[20]^fullData[9], fullData[66]+fullData[62], fullData[70]+fullData[35], fullData[27]-fullData[75], fullData[77]+fullData[16], fullData[19]^fullData[7], fullData[72]^fullData[21], fullData[5]-fullData[13], fullData[60]-fullData[31], fullData[23]+fullData[36], fullData[44]+fullData[15], fullData[54]-fullData[51], fullData[65]-fullData[22], fullData[10]-fullData[24], fullData[68]+fullData[17], fullData[53]-fullData[42])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func k6TJgFIFPK_() {
	switch get_byte() {
	case 120:
		func() {
			fmt.Println(func() string {
				seed := byte(136)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(198)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
				return string(data)
			}())
		}()
	case 119:
		xWmGYy()
	case 'z':
		maMiun9Cw()
	case 89:
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xe3\x1c\xfc$\xf8%L\xdf>\xc0g\xb8\xc5")
					data := []byte("-\x91o\x98\x18\x89\xbb\xff\xa74\x87\xf2\t")
					for i, b := range key {
						data[i] = data[i] - b
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func riwjkpbrHS() {
	switch get_byte() {
	case 'B':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 78:
		func() {
			fmt.Println(func() string {
				fullData := []byte(",\vx#^ٔO\xe5\x15\x174<>\x17\xfa")
				data := make([]byte, 0, 9)
				data = append(data, fullData[11]-fullData[8], fullData[12]+fullData[0], fullData[9]+fullData[1], fullData[6]^fullData[15], fullData[14]^fullData[2], fullData[4]-fullData[13], fullData[3]+fullData[10], fullData[7]+fullData[5])
				return string(data)
			}())
		}()
	case 68:
		cMCg2fcqb()
	case 121:
		dmrYfrVfZG()
	default:
		hacker_get_out()
	}
}

func fgNgNuu() {
	switch get_byte() {
	case 'r':
		qiStlR()
	case 'U':
		jz5UIx8q7()
	case 88:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\n\xe0̈\xce\xef\x8f\n\xa5\xef\x95\xcf33\xa0\x15\xd0K\x13S\x7f\xfc\x01\xca$\xfd\xab{\x1d\xb2\xde\xc6\xd8\xd0#\x1ey\xec\xd6QD\x88A\x90\x7f\xaaS\x8c\x8b\xac\x13\xa5$\xac}\x8e\xee\xc1!\x1aV\x95\xfe\xe0\xd5\f\x9f\v\xb5\x9d\xa87e2\xa2\x1el\xfc\rճ\x0f\xbc\xc7H\x95\xd4\xf4\x8f\xab\xcb]i\xc1\xcb\x02\xf6څLP\xc1$\x89\xf5Z\"{K~\xde}\x85\x8dx6\x99\xac\xdd\xd2\a\xdf7\x1d\x93\x93u\x15Mw\x14Q\x00\x12\x06\xb1CQN\xff\xa74")
				data := make([]byte, 0, 72)
				data = append(data, fullData[93]^fullData[6], fullData[72]+fullData[132], fullData[108]-fullData[79], fullData[127]^fullData[52], fullData[54]-fullData[67], fullData[23]^fullData[85], fullData[87]^fullData[80], fullData[21]^fullData[2], fullData[88]+fullData[121], fullData[131]+fullData[123], fullData[64]+fullData[47], fullData[111]^fullData[106], fullData[69]-fullData[60], fullData[25]-fullData[94], fullData[49]-fullData[115], fullData[84]+fullData[28], fullData[95]+fullData[91], fullData[77]^fullData[51], fullData[120]-fullData[11], fullData[16]+fullData[8], fullData[97]+fullData[112], fullData[71]+fullData[35], fullData[133]-fullData[74], fullData[50]+fullData[99], fullData[33]+fullData[109], fullData[45]+fullData[48], fullData[56]-fullData[114], fullData[5]^fullData[110], fullData[78]^fullData[44], fullData[103]^fullData[38], fullData[39]-fullData[7], fullData[24]^fullData[15], fullData[57]-fullData[19], fullData[29]-fullData[40], fullData[128]-fullData[37], fullData[0]-fullData[26], fullData[101]^fullData[113], fullData[118]+fullData[41], fullData[53]^fullData[32], fullData[31]+fullData[116], fullData[117]^fullData[104], fullData[89]-fullData[129], fullData[70]-fullData[13], fullData[12]-fullData[86], fullData[135]+fullData[124], fullData[122]-fullData[134], fullData[136]+fullData[141], fullData[62]-fullData[43], fullData[42]^fullData[75], fullData[105]-fullData[65], fullData[66]^fullData[140], fullData[126]+fullData[22], fullData[90]^fullData[139], fullData[137]^fullData[34], fullData[36]-fullData[59], fullData[10]^fullData[119], fullData[107]^fullData[138], fullData[1]+fullData[55], fullData[4]+fullData[14], fullData[125]-fullData[73], fullData[130]-fullData[68], fullData[3]+fullData[82], fullData[92]+fullData[83], fullData[30]+fullData[61], fullData[63]-fullData[27], fullData[58]^fullData[46], fullData[98]+fullData[9], fullData[81]+fullData[100], fullData[76]-fullData[18], fullData[102]^fullData[17], fullData[96]+fullData[20])
				return string(data)
			}())
		}()
	case 'Q':
		fYPopoVjeN()
	default:
		hacker_get_out()
	}
}

func cZmsDKjszYdD() {
	switch get_byte() {
	case 53:
		aoGITq()
	case 86:
		ahyDVUGXaq7t()
	case 'A':
		func() {
			defer func() {
				println(func() string {
					data := []byte("Ius\x8e zj ipy?D")
					positions := [...]byte{9, 3, 6, 11, 3, 5, 10, 9, 0, 11, 0, 0, 10, 6}
					for i := 0; i < 14; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 252
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'G':
		bNwIvlf()
	default:
		hacker_get_out()
	}
}

func oW3FITKxs9hx() {
	switch get_byte() {
	case 'y':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'H':
		func() {
			fmt.Println(func() string {
				seed := byte(196)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(138)(43)(15)(185)(51)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	case 'J':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 118:
		mf3TR0LGudqA()
	default:
		hacker_get_out()
	}
}

func ii5Oe8cxfOL() {
	switch get_byte() {
	case '1':
		func() {
			fmt.Println(func() string {
				fullData := []byte("N2\x8a\xf1\n\xf1\b4\xce\xe5\x82?\x0e\xedS\xecUl\xc0\xf4\x9f\x85\xecXi/t\xc1\xe05h\xcbTA\xb9\x0e\xa2\x9c\x1aH\xeb\xadF\xfddd\xafb\xf0T\xfbd-\x91\xf7\x1e\xf5\xa0\x9bqJ\x01ɂ\xc9X\xa7k\xa5\x10\x88\x17\xcf\xee%\xd1Τ=w\xd52\xd5\x00Nz!\xa9\x9fg\xcdB\xa1\xec\xb4V\xa5\x89\xf1f\xfb\xc0\xbe͖7 \xb4O\xe3\x9cΚFG\x05Kտ<\xa3\xc0\x12\xb2K\xa0\xcc\x1c\x8e\x9bK\xce\x03z'6,\x9c\xbb`I\xe6")
				data := make([]byte, 0, 72)
				data = append(data, fullData[108]^fullData[61], fullData[75]^fullData[94], fullData[100]-fullData[21], fullData[101]^fullData[5], fullData[35]-fullData[137], fullData[118]+fullData[57], fullData[36]+fullData[96], fullData[119]+fullData[19], fullData[84]^fullData[106], fullData[135]^fullData[65], fullData[14]+fullData[12], fullData[138]+fullData[77], fullData[141]-fullData[20], fullData[90]-fullData[58], fullData[140]+fullData[52], fullData[69]+fullData[16], fullData[130]-fullData[22], fullData[95]-fullData[43], fullData[114]+fullData[3], fullData[49]^fullData[86], fullData[27]-fullData[47], fullData[24]+fullData[15], fullData[103]+fullData[120], fullData[121]^fullData[88], fullData[129]^fullData[82], fullData[62]+fullData[17], fullData[13]+fullData[97], fullData[136]-fullData[50], fullData[37]^fullData[73], fullData[55]^fullData[33], fullData[115]+fullData[91], fullData[79]-fullData[113], fullData[99]+fullData[6], fullData[8]^fullData[125], fullData[87]-fullData[39], fullData[48]^fullData[46], fullData[38]-fullData[131], fullData[64]-fullData[51], fullData[26]+fullData[83], fullData[2]^fullData[117], fullData[0]^fullData[71], fullData[53]^fullData[68], fullData[60]-fullData[80], fullData[104]-fullData[105], fullData[23]^fullData[127], fullData[42]+fullData[40], fullData[10]+fullData[56], fullData[74]^fullData[116], fullData[41]+fullData[123], fullData[107]+fullData[112], fullData[132]-fullData[31], fullData[34]^fullData[72], fullData[30]-fullData[7], fullData[109]-fullData[59], fullData[124]-fullData[93], fullData[78]^fullData[133], fullData[111]+fullData[89], fullData[128]+fullData[28], fullData[44]^fullData[4], fullData[29]^fullData[32], fullData[11]^fullData[139], fullData[81]+fullData[122], fullData[126]+fullData[45], fullData[63]^fullData[98], fullData[102]+fullData[66], fullData[1]-fullData[18], fullData[67]-fullData[54], fullData[85]+fullData[9], fullData[70]-fullData[25], fullData[76]+fullData[92], fullData[110]-fullData[134])
				return string(data)
			}())
		}()
	case 65:
		yDPuGi()
	case 83:
		vKSHDzb()
	case 'h':
		tVrn2_t()
	default:
		hacker_get_out()
	}
}

func soBev5() {
	switch get_byte() {
	case 73:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 111:
		func() {
			defer func() {
				println(func() string {
					key := []byte("\x02tsuTO$\x88\xdd#\xa6\xd4\xcf")
					data := []byte("H\x01\x00\x01t+K\xa8\xb4W\x86\xee\x8b")
					for i, b := range key {
						data[i] = data[i] ^ b
					}
					return string(data)
				}())
			}()
		}()
	case 'S':
		i9tf2hOenfoZ()
	case 57:
		kxfh6ObzHqxT()
	default:
		hacker_get_out()
	}
}

func tUX6DaYdt5() {
	switch get_byte() {
	case 'E':
		func() {
			fmt.Println(func() string {
				seed := byte(193)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(142)(25)(184)(78)(1)(177)(26)(238)
				return string(data)
			}())
		}()
	case '1':
		func() {
			defer func() {
				println(func() string {
					seed := byte(113)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
					fnc(187)(161)(64)(129)(174)(160)(75)(71)(215)(185)(30)(86)(182)
					return string(data)
				}())
			}()
		}()
	case 118:
		cmr4cMk()
	case 'B':
		bZMkEszEHgD()
	default:
		hacker_get_out()
	}
}

func hnAvEqA9qB0A() {
	switch get_byte() {
	case 'U':
		y7zvn4KMnuah()
	case 'b':
		cXxVQ7()
	case 76:
		func() {
			fmt.Println(func() string {
				data := []byte("O\x9e:8o\x9afT")
				positions := [...]byte{6, 7, 2, 5, 2, 1, 3, 2, 6, 7}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 17
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 67:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func kxfFt70() {
	switch get_byte() {
	case 81:
		eBI4Rg9XvT()
	case 'j':
		q5KLn6WKOi()
	case 110:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 0
					decryptKey := 221
					for counter := 0; i != 1; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 5:
							data = append(data, 67)
							i = 4
						case 2:
							i = 3
							data = append(data, "ho"...,
							)
						case 7:
							i = 2
							data = append(data, "\x98\xa4M"...,
							)
						case 0:
							i = 6
							data = append(data, "q\x9d\x98"...,
							)
						case 6:
							i = 5
							data = append(data, 154)
						case 3:
							for y := range data {
								data[y] = data[y] + byte(decryptKey^y)
							}
							i = 1
						case 4:
							i = 7
							data = append(data, "\x88\x90B"...,
							)
						}
					}
					return string(data)
				}())
			}()
		}()
	case 'x':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xde]}\x1fixR\x1a#\x16z\x8a\x98%yM")
				data := make([]byte, 0, 9)
				data = append(data, fullData[4]-fullData[7], fullData[0]+fullData[11], fullData[12]-fullData[5], fullData[15]^fullData[8], fullData[9]^fullData[14], fullData[2]-fullData[1], fullData[13]^fullData[3], fullData[10]-fullData[6])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func bSPP_cWPSSn() {
	switch get_byte() {
	case 'Z':
		fosEz3FzMB()
	case 84:
		nf8u1Z()
	case 66:
		zuri33e9vXp()
	case 'F':
		xXbMcgcbT()
	default:
		hacker_get_out()
	}
}

func rJTGAO() {
	switch get_byte() {
	case 'P':
		hZHUPHURz6M()
	case 103:
		b1gRI_1Ck()
	case 85:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 3
				decryptKey := 58
				for counter := 0; i != 9; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 4:
						i = 5
						data = append(data, 198)
					case 1:
						i = 8
						data = append(data, 124)
					case 5:
						data = append(data, 118)
						i = 6
					case 7:
						i = 2
						data = append(data, 186)
					case 3:
						i = 7
						data = append(data, 162)
					case 0:
						data = append(data, 190)
						i = 4
					case 6:
						data = append(data, 143)
						i = 1
					case 8:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 9
					case 2:
						data = append(data, 113)
						i = 0
					}
				}
				return string(data)
			}())
		}()
	case '9':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func t0y2gIuzCJT() {
	switch get_byte() {
	case 120:
		sgE2SFd()
	case 109:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("\t\xd3\xc7P\xb2pu\x84\xd4]9Ѭ\xa4\x19\xea\x95}\x1d\xb2\xa7\xe5\xe2o1\xc3")
					data := make([]byte, 0, 14)
					data = append(data, fullData[18]-fullData[1], fullData[21]-fullData[5], fullData[22]-fullData[23], fullData[0]^fullData[17], fullData[10]^fullData[14], fullData[19]+fullData[4], fullData[12]+fullData[25], fullData[2]-fullData[20], fullData[8]+fullData[16], fullData[11]-fullData[9], fullData[7]^fullData[13], fullData[3]+fullData[15], fullData[24]^fullData[6])
					return string(data)
				}())
			}()
		}()
	case 'B':
		func() {
			println(func() string {
				seed := byte(91)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(212)(158)(66)(47)(170)(87)(178)(101)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
				return string(data)
			}())
		}()
	case 'O':
		iaxRZeIscu()
	default:
		hacker_get_out()
	}
}

func z3GnOot17() {
	switch get_byte() {
	case '3':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 0
					decryptKey := 45
					for counter := 0; i != 3; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 2:
							data = append(data, "6Q"...,
							)
							i = 7
						case 5:
							i = 6
							data = append(data, "}\x89;"...,
							)
						case 7:
							i = 1
							data = append(data, 84)
						case 1:
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
							i = 3
						case 4:
							i = 5
							data = append(data, "\x91\x938"...,
							)
						case 6:
							data = append(data, "}\x89"...,
							)
							i = 2
						case 0:
							i = 4
							data = append(data, "f\x92"...,
							)
						}
					}
					return string(data)
				}())
			}()
		}()
	case 89:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'N':
		rSu0LI()
	case 'L':
		aPCU1BTYOj()
	default:
		hacker_get_out()
	}
}

func ruw2n07OW() {
	switch get_byte() {
	case 74:
		g9PRSZpc6rF()
	case 114:
		func() {
			fmt.Println(func() string {
				data := []byte("\x19h\x19)+*:N")
				positions := [...]byte{3, 5, 4, 2, 7, 3, 3, 0, 2, 5}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 110
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 65:
		func() {
			println(func() string {
				key := []byte("\x1e7\x94뮥\xb1\xdc\xe5\x11\xf1\xb0@p\x00\xe2m\xed\x03\xb6\x13}q\x18\"\xb8\x811ۙ\xfbT\xe1sͳ\xeb\x86B")
				data := []byte("[8\xe15\xbe\xca\u0098;)8p4\xf1k\x83\xb3t\x1d\xac_\xe8\xf0S\xfe\xa9\xed3E\xdbw%?\ue6ae~\xe8\xdf")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 105:
		j_Idet()
	default:
		hacker_get_out()
	}
}

func wIUcV9mX2H() {
	switch get_byte() {
	case 'j':
		mR6sSVxy7mh()
	case '7':
		uI4nok()
	case 'G':
		dmzycA()
	case 'P':
		dMgY_8z()
	default:
		hacker_get_out()
	}
}

func eHpamS() {
	switch get_byte() {
	case 'V':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xe8N\xca\xfe\xe0^\x8b\x85\x7f\xd7b\xf3\xa3\x12Ŵ\xb0\r\x10\xb7\x90\x88\xe9\bgV\x90\xc4%\xb8\xefL\xf6\xe9u\xc5t\xae\x84\xef\xd9MZ\xb9\xe3*\x89\xab\x17L\"\xe8\x1a\xf8\xf4s\x95Z\xebۥC\xba>\x85!O\x00\x1a;1\x849\x8a\nڙ3\xa6\xa1:_\x0fZD@\xe00{\a\xd5\x0f\x98\xf6|E\xedi\xf8tP\xa0\xf7\x80N\xc5\xd5ے\x85l\x0eю\xf4\x1b\x98@ū\xbc\xc0\xder\x00dA\x06\x86a_\x9a#\u05fe\x8a\xa2\xca\xfd\x9ds3")
				data := make([]byte, 0, 72)
				data = append(data, fullData[62]^fullData[54], fullData[15]^fullData[112], fullData[77]^fullData[95], fullData[22]-fullData[29], fullData[19]^fullData[118], fullData[64]+fullData[75], fullData[109]-fullData[63], fullData[73]-fullData[83], fullData[40]+fullData[56], fullData[76]+fullData[90], fullData[1]-fullData[96], fullData[100]+fullData[82], fullData[28]^fullData[10], fullData[137]^fullData[98], fullData[0]-fullData[123], fullData[101]+fullData[14], fullData[115]^fullData[84], fullData[33]-fullData[26], fullData[140]-fullData[69], fullData[88]^fullData[111], fullData[136]-fullData[61], fullData[2]-fullData[34], fullData[41]+fullData[132], fullData[35]+fullData[131], fullData[72]-fullData[58], fullData[120]^fullData[46], fullData[113]+fullData[51], fullData[42]+fullData[9], fullData[126]+fullData[70], fullData[104]-fullData[39], fullData[25]-fullData[91], fullData[105]+fullData[110], fullData[133]-fullData[97], fullData[94]^fullData[13], fullData[89]-fullData[78], fullData[74]-fullData[119], fullData[30]-fullData[12], fullData[92]^fullData[138], fullData[16]^fullData[27], fullData[107]^fullData[71], fullData[17]+fullData[31], fullData[114]-fullData[121], fullData[141]-fullData[134], fullData[124]^fullData[81], fullData[52]^fullData[5], fullData[129]-fullData[87], fullData[102]+fullData[103], fullData[93]-fullData[21], fullData[47]-fullData[49], fullData[37]^fullData[86], fullData[57]+fullData[122], fullData[106]-fullData[130], fullData[36]^fullData[85], fullData[108]+fullData[4], fullData[44]-fullData[38], fullData[67]-fullData[43], fullData[139]+fullData[116], fullData[20]-fullData[50], fullData[11]-fullData[7], fullData[117]^fullData[65], fullData[3]^fullData[79], fullData[80]-fullData[32], fullData[8]^fullData[66], fullData[53]^fullData[6], fullData[59]+fullData[135], fullData[99]^fullData[127], fullData[125]^fullData[18], fullData[24]-fullData[23], fullData[45]^fullData[55], fullData[128]-fullData[48], fullData[68]-fullData[60])
				return string(data)
			}())
		}()
	case 'X':
		udSi5iiPjJn()
	case '3':
		xWyyCc0()
	case '4':
		v_Z6RAU8()
	default:
		hacker_get_out()
	}
}

func k9Ixk2Lpuh3() {
	switch get_byte() {
	case 'D':
		hlOKzgfw0()
	case 76:
		u1aNyRPG()
	case 82:
		func() {
			fmt.Println(func() string {
				key := []byte("T\x1c\x1fGl\xafr\xdfHG\xae\xebw0\"\x9d\xbb\xceO\x19(T\xfb3\xbf\x1bU>z\xb7\x8d8\x021S7EN{)(\f\xacp\xdf\xdd٨Я\xf2Bev\xd7\x17J\xf2D\xe6\xbf6\x97.\x1c\\\xbbΙ\xc8\xfa")
				data := []byte("\x1ayiv\x1e\xf05\xef&)ϴ0\x02T\xf8\xe4\x97wlw\x01\x8bl\xf1.#\x0f\b\xe8\xca\tl_2h\t+\x0fvq8\xd9/\x9b\xec\xaeƏ\xe1\xca4Q\x04\x88P\x7f\x9c*\x87\xe0r\xa7]y.ϑ\xc0\xa7\x8f")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 79:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 8
				decryptKey := 156
				for counter := 0; i != 14; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 5:
						data = append(data, "\xb8\xb9"...,
						)
						i = 6
					case 16:
						i = 10
						data = append(data, 226)
					case 4:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 14
					case 2:
						data = append(data, "\xbbi"...,
						)
						i = 3
					case 7:
						i = 13
						data = append(data, "\xd2\xd2"...,
						)
					case 15:
						i = 5
						data = append(data, "\xa1\xb1\xa6e"...,
						)
					case 9:
						i = 2
						data = append(data, "ɵ\xc2"...,
						)
					case 3:
						i = 11
						data = append(data, "\xa9k\xac\xbf"...,
						)
					case 11:
						i = 15
						data = append(data, "\xb1\xb0\xb9a"...,
						)
					case 12:
						i = 9
						data = append(data, "|r"...,
						)
					case 18:
						i = 17
						data = append(data, "\xc7\xd0z"...,
						)
					case 17:
						i = 7
						data = append(data, "\xc9\xcb"...,
						)
					case 13:
						data = append(data, 113)
						i = 1
					case 1:
						data = append(data, 138)
						i = 12
					case 10:
						i = 4
						data = append(data, "\xdb\xe6\xea\xa0"...,
						)
					case 0:
						data = append(data, "\x99\xd9"...,
						)
						i = 16
					case 8:
						i = 18
						data = append(data, 210)
					case 6:
						i = 0
						data = append(data, 191)
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func jEkqCp_ay() {
	switch get_byte() {
	case 51:
		func() {
			println(func() string {
				data := []byte("y\tu\xf4\xbf\x146\xdb :) ta\x02e֨e:\x0fe\xbf\x89 a]\xa1 t\xddg\xf8Œ\x0fƟ%")
				positions := [...]byte{33, 1, 36, 17, 26, 35, 7, 30, 14, 3, 5, 20, 6, 4, 34, 38, 38, 32, 6, 26, 17, 32, 20, 16, 6, 16, 34, 22, 18, 19, 31, 35, 4, 33, 3, 18, 19, 38, 27, 5, 37, 26, 35, 23, 19, 31, 32, 16, 19, 6}
				for i := 0; i < 50; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 138
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 'd':
		func() {
			defer func() {
				println(func() string {
					seed := byte(241)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
					fnc(59)(161)(64)(129)(174)(160)(75)(71)(215)(185)(30)(86)(182)
					return string(data)
				}())
			}()
		}()
	case 76:
		iNUyBLXTa()
	case 'G':
		mz8nneI()
	default:
		hacker_get_out()
	}
}

func b30z3UWpZz() {
	switch get_byte() {
	case 'C':
		func() {
			defer func() {
				println(func() string {
					key := []byte("\x88\xa8].O\x85\xec\x02%\x00\xb1\x84\xb1")
					data := []byte("\xc2\xdd.Zo\xe1\x83\"Lt\x91\xbe\xf5")
					for i, b := range key {
						data[i] = data[i] ^ b
					}
					return string(data)
				}())
			}()
		}()
	case '7':
		func() {
			fmt.Println(func() string {
				key := []byte("\x80\xed_\x8d\x05ж\xc0")
				data := []byte("\xcfU\x7f\xfbt\xf0\xf0\xe8")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 'R':
		rlI9Pry()
	case 'S':
		dUQoOsx()
	default:
		hacker_get_out()
	}
}

func fFCx633QZg() {
	switch get_byte() {
	case 'C':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 18
				decryptKey := 114
				for counter := 0; i != 3; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 21:
						i = 9
						data = append(data, "xh{v"...,
						)
					case 26:
						data = append(data, 122)
						i = 12
					case 4:
						i = 27
						data = append(data, 155)
					case 17:
						data = append(data, "\xae\xa1\xb8"...,
						)
						i = 0
					case 27:
						i = 20
						data = append(data, "\x8f\x8e"...,
						)
					case 23:
						i = 8
						data = append(data, "\xa4\x98"...,
						)
					case 25:
						data = append(data, "\x91\x9b\x8b"...,
						)
						i = 16
					case 18:
						i = 11
						data = append(data, "Zr\x84"...,
						)
					case 7:
						i = 29
						data = append(data, "zbJ"...,
						)
					case 0:
						data = append(data, 191)
						i = 15
					case 16:
						i = 2
						data = append(data, "v\xb5l\xab"...,
						)
					case 8:
						data = append(data, "\x8fub"...,
						)
						i = 5
					case 1:
						data = append(data, "\xbf\xc2"...,
						)
						i = 17
					case 6:
						i = 19
						data = append(data, "}Y"...,
						)
					case 9:
						i = 10
						data = append(data, "V\x94w"...,
						)
					case 24:
						i = 4
						data = append(data, "YD\x9a"...,
						)
					case 22:
						data = append(data, "G3"...,
						)
						i = 21
					case 13:
						i = 23
						data = append(data, "i\xa3"...,
						)
					case 10:
						i = 7
						data = append(data, "n\x8a"...,
						)
					case 5:
						i = 1
						data = append(data, "\xa6\xb1"...,
						)
					case 29:
						data = append(data, "\x8cH\x82p"...,
						)
						i = 24
					case 20:
						i = 6
						data = append(data, "t\x8e\x9e\x8a"...,
						)
					case 11:
						data = append(data, 64)
						i = 26
					case 15:
						i = 3
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 14:
						data = append(data, "rsgf"...,
						)
						i = 22
					case 2:
						data = append(data, "\x99\x82"...,
						)
						i = 13
					case 19:
						i = 28
						data = append(data, "\x9b\x86"...,
						)
					case 12:
						data = append(data, "hQ;"...,
						)
						i = 14
					case 28:
						data = append(data, "dR\x99"...,
						)
						i = 25
					}
				}
				return string(data)
			}())
		}()
	case 52:
		func() {
			fmt.Println(func() string {
				data := []byte("N\xb2v\xa4&_\xb69enf\xbd\x85!ve_\xff\xa2uY\xf6~\x891pv1՜G\xfdn~a\x1f\x10\xd6\xc7\xf8\a#u_\xbd!&̱\x87\xcfv\xd1r\xce\xf25&\x1c\x18@\x173 !rt-\xa8\x1cu")
				positions := [...]byte{45, 29, 23, 41, 52, 7, 60, 40, 25, 61, 47, 35, 46, 33, 61, 1, 63, 17, 36, 24, 36, 48, 1, 28, 21, 7, 33, 22, 33, 18, 31, 55, 13, 21, 37, 38, 54, 46, 25, 4, 50, 59, 60, 20, 67, 58, 69, 8, 68, 6, 47, 11, 39, 36, 52, 62, 29, 25, 7, 13, 10, 28, 44, 63, 44, 61, 12, 17, 4, 7, 28, 55, 7, 8, 64, 18, 23, 21, 49, 60, 69, 57, 3, 24, 28, 13, 52, 57, 50, 40, 58, 67, 39, 44}
				for i := 0; i < 94; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 125
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 'I':
		w8OSysDI()
	case 53:
		uFwCPIHVSXi()
	default:
		hacker_get_out()
	}
}

func uNJbumeg4() {
	switch get_byte() {
	case '2':
		func() {
			println(func() string {
				seed := byte(64)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(185)(104)(214)(87)(250)(247)(242)(229)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
				return string(data)
			}())
		}()
	case 'v':
		mf5nVOtO4l()
	case 'b':
		zjmQsdVK()
	case 'l':
		func() {
			fmt.Println(func() string {
				data := []byte("\xf4\xdbq\xa1r\xff\x93Q\xe0\xd0\xd7\"\x8d2vY\x13\xf4\xdfuȪf^\xf55v\xb0\x95\xcb,1GC\xf5_LHg_Y4`\xe8D1wJ_N\xfa\xe84\xf7J\xbb \xf4n$\xeb\xf3\xd4\xf0\xd9r\xa2_e\xa1\x8b")
				positions := [...]byte{15, 7, 53, 42, 16, 8, 22, 33, 10, 69, 29, 34, 51, 2, 59, 23, 54, 56, 59, 10, 37, 60, 32, 53, 24, 15, 63, 21, 22, 17, 70, 0, 63, 57, 16, 50, 68, 59, 27, 38, 30, 47, 53, 47, 27, 64, 70, 3, 61, 30, 23, 68, 64, 55, 11, 43, 20, 53, 33, 62, 3, 6, 18, 28, 60, 51, 5, 64, 24, 57, 66, 20, 62, 64, 43, 12, 9, 1}
				for i := 0; i < 78; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 97
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func dmrYfrVfZG() {
	switch get_byte() {
	case 72:
		umZOjiF()
	case '7':
		func() {
			defer func() {
				println(func() string {
					seed := byte(4)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
					fnc(78)(39)(10)(247)(90)(176)(235)(79)(215)(225)(86)(246)(134)
					return string(data)
				}())
			}()
		}()
	case 79:
		riwjkpbrHS()
	case 'y':
		dMKhL5al_lN()
	default:
		hacker_get_out()
	}
}

func g7nNO2() {
	switch get_byte() {
	case '4':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 7
				decryptKey := 40
				for counter := 0; i != 31; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 24:
						i = 11
						data = append(data, "\xf7\xeb\x9f\xda"...,
						)
					case 13:
						i = 31
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 19:
						i = 13
						data = append(data, "\xa9\xb0"...,
						)
					case 23:
						data = append(data, "\x9f\x9e"...,
						)
						i = 19
					case 28:
						i = 1
						data = append(data, 180)
					case 27:
						i = 22
						data = append(data, "\xa9\xed\xc1"...,
						)
					case 30:
						data = append(data, "Ϧ\xb0\xb5"...,
						)
						i = 23
					case 10:
						data = append(data, "\xc0\xff"...,
						)
						i = 0
					case 17:
						data = append(data, "\xfb\xe9\xcc"...,
						)
						i = 18
					case 25:
						data = append(data, "\xcbկ\xef"...,
						)
						i = 27
					case 21:
						i = 14
						data = append(data, "\xc3\xd1"...,
						)
					case 2:
						data = append(data, "\xf5\xd9"...,
						)
						i = 5
					case 29:
						data = append(data, 141)
						i = 30
					case 0:
						i = 21
						data = append(data, 235)
					case 26:
						data = append(data, "\xea\xf3\x8e"...,
						)
						i = 9
					case 8:
						data = append(data, "\xc3\xe5"...,
						)
						i = 25
					case 3:
						data = append(data, "\xe5\xc8"...,
						)
						i = 8
					case 15:
						data = append(data, "\xd7ȼ"...,
						)
						i = 17
					case 4:
						data = append(data, 169)
						i = 3
					case 5:
						data = append(data, 194)
						i = 28
					case 14:
						data = append(data, "\xfb\xf2\x9e"...,
						)
						i = 20
					case 9:
						data = append(data, "\xd4\xd7"...,
						)
						i = 12
					case 1:
						data = append(data, "\xe5\xe4\xe8"...,
						)
						i = 15
					case 16:
						data = append(data, "ƃ\xc4"...,
						)
						i = 26
					case 6:
						i = 2
						data = append(data, "\xf7\xb1"...,
						)
					case 12:
						data = append(data, "\xd9\xe0\xfa"...,
						)
						i = 29
					case 18:
						data = append(data, 203)
						i = 4
					case 20:
						data = append(data, 220)
						i = 24
					case 11:
						data = append(data, "\xc2\xec\xfc\x89"...,
						)
						i = 16
					case 7:
						i = 6
						data = append(data, "\xcd\xe7"...,
						)
					case 22:
						data = append(data, "ڭ\xcd\xcc"...,
						)
						i = 10
					}
				}
				return string(data)
			}())
		}()
	case 't':
		syrtRu9fDS()
	case 'B':
		qnQRMBpMT()
	case 121:
		yxbk4zXzz0NR()
	default:
		hacker_get_out()
	}
}

func lQcizCt() {
	switch get_byte() {
	case 56:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 6
					decryptKey := 120
					for counter := 0; i != 3; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 4:
							data = append(data, "\xb5\xc1"...,
							)
							i = 2
						case 5:
							i = 4
							data = append(data, 112)
						case 6:
							data = append(data, "\x9e\xca\xc9"...,
							)
							i = 1
						case 2:
							data = append(data, "s\xc5\xd1"...,
							)
							i = 7
						case 7:
							data = append(data, "~\x99\x9c"...,
							)
							i = 0
						case 1:
							i = 5
							data = append(data, 203)
						case 0:
							i = 3
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
						}
					}
					return string(data)
				}())
			}()
		}()
	case 'j':
		qiStlR()
	case 81:
		zaC7iZ9oH()
	case 100:
		jMPzcLBtzQ()
	default:
		hacker_get_out()
	}
}

func fWO5afDWjQB() {
	switch get_byte() {
	case 'O':
		ht6so5AY()
	case 97:
		func() {
			fmt.Println(func() string {
				seed := byte(111)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(33)(245)(243)(73)(179)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	case 'P':
		moyE4WgC()
	case 115:
		czMR6DcZud()
	default:
		hacker_get_out()
	}
}

func bAAeJY3() {
	switch get_byte() {
	case 114:
		_DHlVHLzZ()
	case '4':
		zWRE8mxGL0_E()
	case 106:
		qpJEBGdQ2()
	case 'd':
		ryJlQ0Royzm()
	default:
		hacker_get_out()
	}
}

func nASacgmdb() {
	switch get_byte() {
	case 50:
		jLluV5()
	case 113:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 9
				decryptKey := 88
				for counter := 0; i != 16; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 0:
						i = 27
						data = append(data, "%\x11RB"...,
						)
					case 20:
						i = 11
						data = append(data, "\x18\x00>\xfa"...,
						)
					case 12:
						i = 17
						data = append(data, 81)
					case 28:
						i = 24
						data = append(data, 96)
					case 21:
						i = 23
						data = append(data, "0skA"...,
						)
					case 9:
						i = 25
						data = append(data, " 8F\x02"...,
						)
					case 26:
						i = 3
						data = append(data, 92)
					case 15:
						i = 7
						data = append(data, "YV"...,
						)
					case 14:
						i = 28
						data = append(data, 28)
					case 10:
						data = append(data, "YC,\x1f"...,
						)
						i = 15
					case 22:
						i = 13
						data = append(data, 96)
					case 18:
						i = 10
						data = append(data, "W\x1a"...,
						)
					case 24:
						i = 2
						data = append(data, "\xf7\x05"...,
						)
					case 23:
						data = append(data, "1\x18"...,
						)
						i = 18
					case 11:
						i = 22
						data = append(data, "@.\x13\xfe"...,
						)
					case 2:
						data = append(data, 4)
						i = 4
					case 5:
						data = append(data, "mXB"...,
						)
						i = 21
					case 1:
						i = 19
						data = append(data, "\x1b\x05HI"...,
						)
					case 13:
						data = append(data, 97)
						i = 12
					case 25:
						data = append(data, "H6"...,
						)
						i = 1
					case 6:
						i = 20
						data = append(data, "%\x1c4$"...,
						)
					case 27:
						i = 6
						data = append(data, "!\x1c\xf86"...,
						)
					case 17:
						i = 26
						data = append(data, "PB"...,
						)
					case 7:
						data = append(data, "JM3"...,
						)
						i = 14
					case 19:
						i = 0
						data = append(data, "98"...,
						)
					case 8:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 16
					case 4:
						data = append(data, "\xf0\xef\x06\t"...,
						)
						i = 8
					case 3:
						data = append(data, "hTS/"...,
						)
						i = 5
					}
				}
				return string(data)
			}())
		}()
	case 'Y':
		fsML1Es()
	case 'x':
		zS54MrG9()
	default:
		hacker_get_out()
	}
}

func ababux9Nw() {
	switch get_byte() {
	case '9':
		yJmzNkHscPrl()
	case 71:
		iLyYhD5YCP9()
	case 'm':
		vNzdx_LszEv()
	case 'F':
		fgl7v2f()
	default:
		hacker_get_out()
	}
}

func joYHmEiRZ() {
	switch get_byte() {
	case 100:
		aeIZRV_o()
	case '2':
		czMR6DcZud()
	case 72:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 83:
		ordYTOQc()
	default:
		hacker_get_out()
	}
}

func xyVPgQ_() {
	switch get_byte() {
	case 88:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 10
				decryptKey := 111
				for counter := 0; i != 29; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 22:
						i = 18
						data = append(data, "\x10\x0f\x05"...,
						)
					case 19:
						data = append(data, "\xb4\xf8"...,
						)
						i = 17
					case 24:
						data = append(data, "38"...,
						)
						i = 4
					case 2:
						i = 27
						data = append(data, "\xea\xcc\b"...,
						)
					case 25:
						i = 0
						data = append(data, "\xb7\xf8"...,
						)
					case 12:
						i = 28
						data = append(data, "\xea'\x17\xfe"...,
						)
					case 1:
						i = 13
						data = append(data, "\xff\xec"...,
						)
					case 13:
						data = append(data, 41)
						i = 12
					case 28:
						i = 5
						data = append(data, "\xef'"...,
						)
					case 17:
						data = append(data, "\xe4\xcf"...,
						)
						i = 25
					case 21:
						data = append(data, "տ\x06"...,
						)
						i = 14
					case 15:
						i = 24
						data = append(data, 39)
					case 5:
						data = append(data, "*\x1c\x1d\x01"...,
						)
						i = 6
					case 23:
						data = append(data, "\xcc\x10\xfc"...,
						)
						i = 11
					case 7:
						i = 3
						data = append(data, "\xf2\xde"...,
						)
					case 18:
						i = 16
						data = append(data, "\x02\xf2"...,
						)
					case 14:
						i = 30
						data = append(data, 244)
					case 20:
						i = 29
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 3:
						data = append(data, "'\x1d\x11"...,
						)
						i = 1
					case 8:
						i = 7
						data = append(data, "\x03\xdd!\n"...,
						)
					case 26:
						i = 20
						data = append(data, 61)
					case 0:
						i = 21
						data = append(data, "\xf7\xed\xea"...,
						)
					case 10:
						data = append(data, "\xd0\xe6\xfa"...,
						)
						i = 19
					case 16:
						i = 8
						data = append(data, "\n\x1c\x06"...,
						)
					case 30:
						data = append(data, 241)
						i = 2
					case 11:
						data = append(data, "\xe7\xd0"...,
						)
						i = 22
					case 6:
						data = append(data, "\xf02"...,
						)
						i = 15
					case 4:
						i = 26
						data = append(data, "\"\x1f4"...,
						)
					case 9:
						i = 23
						data = append(data, "\xe8\xce\x12"...,
						)
					case 27:
						i = 9
						data = append(data, "\xf5\xea\b\xf6"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 71:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 85:
		d1gHlwWG2o()
	case 57:
		b89sZtv()
	default:
		hacker_get_out()
	}
}

func cUSgYf() {
	switch get_byte() {
	case 72:
		func() {
			fmt.Println(func() string {
				seed := byte(2)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(76)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
				return string(data)
			}())
		}()
	case 101:
		h9QWim0()
	case 'G':
		n4Z_SHI5l3c()
	case 89:
		h8Iedojj()
	default:
		hacker_get_out()
	}
}

func v41MoG1U() {
	switch get_byte() {
	case 70:
		func() {
			fmt.Println(func() string {
				data := []byte("#;\xf1\xe4o\x9d\xa1\xce")
				positions := [...]byte{5, 2, 0, 7, 3, 1, 7, 7, 6, 5, 6, 3}
				for i := 0; i < 12; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 118
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 't':
		func() {
			fmt.Println(func() string {
				seed := byte(81)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(160)(89)(106)(34)(69)(59)(144)(14)
				return string(data)
			}())
		}()
	case 85:
		phNiaj5Dc()
	case 53:
		zZo6KpfYI()
	default:
		hacker_get_out()
	}
}

func eVZlM5() {
	switch get_byte() {
	case 101:
		h_G2QB()
	case 68:
		szjutHz()
	case 77:
		func() {
			fmt.Println(func() string {
				seed := byte(168)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(167)(25)(184)(78)(1)(177)(26)(238)
				return string(data)
			}())
		}()
	case 'h':
		kyzijt()
	default:
		hacker_get_out()
	}
}

func _pAWsFGl0I() {
	switch get_byte() {
	case 'J':
		fCsRmdb()
	case 119:
		x9Rs0UrV5()
	case 53:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'p':
		eaaZ_FdsPzw()
	default:
		hacker_get_out()
	}
}

func nfzoerWu() {
	switch get_byte() {
	case '3':
		func() {
			println(func() string {
				seed := byte(108)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(13)(246)(6)(171)(76)(3)(4)(1)(172)(26)(239)(247)(84)(237)(10)(250)(187)(65)(191)(66)(16)(243)(252)(10)(181)(65)(13)(246)(188)(84)(254)(7)(167)(65)(6)(250)(8)(5)(179)
				return string(data)
			}())
		}()
	case 'E':
		vzzZ5SlT2poX()
	case 116:
		func() {
			println(func() string {
				data := []byte("y\xa2\xae\x05\x02os\x8a :)\xe6\xffܒ\xe5\xaea \x84re\xa2w \xb1n\xa6\xact\xb9y\xf3\xb2\xbea\xe1|\xf9")
				positions := [...]byte{37, 37, 22, 1, 19, 3, 7, 11, 4, 38, 27, 22, 25, 28, 25, 23, 15, 36, 11, 37, 7, 22, 16, 3, 11, 38, 1, 12, 30, 28, 38, 14, 2, 11, 22, 16, 33, 32, 22, 34, 13, 25}
				for i := 0; i < 42; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 73
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 'u':
		cyMKu_fE8E()
	default:
		hacker_get_out()
	}
}

func gx8cirOJFJ() {
	switch get_byte() {
	case 54:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 76:
		tmHzzj()
	case 56:
		nEoLH1h9()
	case 'd':
		q5pWqz()
	default:
		hacker_get_out()
	}
}

func iMptDSoz3O() {
	switch get_byte() {
	case 57:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'k':
		func() {
			defer func() {
				println(func() string {
					seed := byte(6)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
					fnc(68)(43)(254)(1)(172)(68)(11)(177)(73)(11)(172)(26)(10)
					return string(data)
				}())
			}()
		}()
	case 55:
		q5pWqz()
	case '3':
		wllzSmhXvjvA()
	default:
		hacker_get_out()
	}
}

func b_aGc5wW5() {
	switch get_byte() {
	case 'i':
		func() {
			fmt.Println(func() string {
				key := []byte("\x14\xaf\xd4\x1a=\xb9p\x1f")
				data := []byte("[\xc7\xf4tR\x99J7")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 'I':
		rB_R0505WFXc()
	case 109:
		wizdiNWyjf()
	case 'u':
		zrN42EW7FCc7()
	default:
		hacker_get_out()
	}
}

func i7rd2IrCX1() {
	switch get_byte() {
	case 118:
		tVB9mm9g()
	case 'Q':
		olv4LA0zZQ()
	case 'y':
		func() {
			println(func() string {
				seed := byte(219)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(162)(18)(250)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
				return string(data)
			}())
		}()
	case 72:
		mkh1_em()
	default:
		hacker_get_out()
	}
}

func vRPsVznObub() {
	switch get_byte() {
	case 82:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'D':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 17
				decryptKey := 117
				for counter := 0; i != 19; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 9:
						data = append(data, "X\xff"...,
						)
						i = 10
					case 8:
						i = 13
						data = append(data, 17)
					case 12:
						i = 11
						data = append(data, "p\\K'"...,
						)
					case 27:
						data = append(data, "N\nP>"...,
						)
						i = 0
					case 28:
						data = append(data, 49)
						i = 30
					case 7:
						data = append(data, 0)
						i = 22
					case 14:
						i = 26
						data = append(data, "(kc"...,
						)
					case 20:
						data = append(data, "\xf7\x0e"...,
						)
						i = 8
					case 18:
						data = append(data, "\xf6h"...,
						)
						i = 2
					case 1:
						data = append(data, "\xf86\xf28"...,
						)
						i = 31
					case 17:
						data = append(data, "(@"...,
						)
						i = 27
					case 30:
						data = append(data, "0\x1d\t"...,
						)
						i = 15
					case 10:
						data = append(data, 13)
						i = 6
					case 5:
						data = append(data, "P:"...,
						)
						i = 14
					case 22:
						i = 23
						data = append(data, ">-$<"...,
						)
					case 6:
						i = 20
						data = append(data, "\f\xf8"...,
						)
					case 25:
						i = 3
						data = append(data, 69)
					case 3:
						data = append(data, "+\x14"...,
						)
						i = 9
					case 0:
						data = append(data, "#\r@A"...,
						)
						i = 28
					case 24:
						i = 4
						data = append(data, "K4\x17"...,
						)
					case 2:
						i = 29
						data = append(data, "iYXJ"...,
						)
					case 21:
						data = append(data, 66)
						i = 25
					case 15:
						i = 7
						data = append(data, "J:)$"...,
						)
					case 23:
						data = append(data, ",\x10"...,
						)
						i = 1
					case 26:
						i = 16
						data = append(data, "I9"...,
						)
					case 16:
						data = append(data, " _\"a"...,
						)
						i = 24
					case 29:
						i = 12
						data = append(data, 100)
					case 4:
						data = append(data, "QN"...,
						)
						i = 21
					case 13:
						i = 19
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 31:
						i = 18
						data = append(data, "&\v"...,
						)
					case 11:
						i = 5
						data = append(data, 101)
					}
				}
				return string(data)
			}())
		}()
	case 'O':
		iEF9sE5xanN()
	case 'm':
		fRyPZv()
	default:
		hacker_get_out()
	}
}

func ruwLJs2zEH() {
	switch get_byte() {
	case 86:
		func() {
			fmt.Println(func() string {
				key := []byte("|\xa4\xf1ɹ\rd\x1d\xe2\xa9w*\x14\x14\x00\xe6\xd63\x92\xd0A\xad\xad\x1b\x87{ܟ\x0e\xad\xf8\x11\xa3\xbd*)\x06\xcc9\xb2j\x89\xea\xf6\xfd\xac\xcc,V\xbexy\xf2\xb0\xec\x86%\xdbfԎ\xc4k\xe3\x81\xf9\xbc\x80\x90&\x1b")
				data := []byte("2\xc1\x87\xf8\xcbR#-\x8c\xc7\x16uS&v\x83\x89j\xaa\xa5\x1e\xf8\xddD\xc9N\xaa\xae|\xf2\xbf \xcd\xd3KvJ\xa9M\xed3\xbd\x9f\xa9\xb9\x9d\xbbB\t\xf0@\x0f\xc6³\xc1\x10\xb5\b\xb5р[\x90\xe4\x8b\xc8\xdf\xc9In")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 50:
		dw6wP_n19p()
	case 'L':
		d6ctM4Dc()
	case 106:
		sGM1vuxE()
	default:
		hacker_get_out()
	}
}

func jmGxbI() {
	switch get_byte() {
	case 112:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'k':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 14
				decryptKey := 89
				for counter := 0; i != 29; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 4:
						i = 30
						data = append(data, "/\x1d"...,
						)
					case 3:
						data = append(data, 35)
						i = 10
					case 20:
						data = append(data, "VFE"...,
						)
						i = 6
					case 12:
						data = append(data, "-l'"...,
						)
						i = 31
					case 19:
						data = append(data, "\x12\xfe?"...,
						)
						i = 0
					case 31:
						data = append(data, 102)
						i = 23
					case 22:
						data = append(data, "\xe5\xdc\xf3\xf6"...,
						)
						i = 2
					case 6:
						data = append(data, "/I"...,
						)
						i = 21
					case 7:
						data = append(data, 59)
						i = 27
					case 18:
						i = 13
						data = append(data, "S\x0f"...,
						)
					case 21:
						i = 28
						data = append(data, "UAH$"...,
						)
					case 13:
						i = 7
						data = append(data, 77)
					case 2:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 29
					case 17:
						data = append(data, "\xec\xfa"...,
						)
						i = 25
					case 23:
						data = append(data, "P94n"...,
						)
						i = 9
					case 30:
						data = append(data, "`X"...,
						)
						i = 8
					case 14:
						data = append(data, "\x15-;"...,
						)
						i = 11
					case 9:
						data = append(data, "k_Z@"...,
						)
						i = 24
					case 26:
						data = append(data, "61"...,
						)
						i = 5
					case 25:
						i = 22
						data = append(data, 249)
					case 11:
						i = 3
						data = append(data, "\xf75"...,
						)
					case 5:
						data = append(data, "\rK2)"...,
						)
						i = 16
					case 8:
						data = append(data, "VF"...,
						)
						i = 12
					case 24:
						i = 17
						data = append(data, ")m"...,
						)
					case 16:
						data = append(data, "A1-\x15"...,
						)
						i = 18
					case 15:
						data = append(data, ">.-"...,
						)
						i = 19
					case 10:
						i = 15
						data = append(data, "\b\xf2="...,
						)
					case 1:
						data = append(data, 85)
						i = 20
					case 0:
						i = 26
						data = append(data, 47)
					case 27:
						i = 1
						data = append(data, " \v"...,
						)
					case 28:
						data = append(data, "bM"...,
						)
						i = 4
					}
				}
				return string(data)
			}())
		}()
	case 'b':
		func() {
			println(func() string {
				key := []byte(" C0@\xdcL\xd5#`xX\x1a\\\xb7\xd9\xee-ߚ!\xc0ͯM]&;y\xff\x13\xb0\x93\xfd\xad\x83\x7fy\x12\xc0")
				data := []byte("\x99\xb2\xa5`H\xbbH\x97\x80\xb2\x81:\xd0\x18DSM@\xba\x8322\x10\xb8}\x87\xa9\xdd\x1f\x87\"\f\x1d\x0e\xea\xe0\xe2\x80\xe1")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 'R':
		nRLp6i()
	default:
		hacker_get_out()
	}
}

func gFYsOVh2_z() {
	switch get_byte() {
	case 'y':
		hp5zG42JUW4z()
	case 101:
		e4JLsd()
	case 65:
		func() {
			fmt.Println(func() string {
				key := []byte("f\xc7\xe0\b7R{0")
				data := []byte(")\xaf\xc0fXrA\x18")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 118:
		iOI6Nzb()
	default:
		hacker_get_out()
	}
}

func orBoUOm() {
	switch get_byte() {
	case 107:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'I':
		tA_zu1DS()
	case 'v':
		mFQr3oagu()
	case 'w':
		sR9lWwQ9yhNb()
	default:
		hacker_get_out()
	}
}

func aTpNT3() {
	switch get_byte() {
	case 49:
		bZLOZ8R()
	case 85:
		cNDr7a0w4()
	case 66:
		func() {
			fmt.Println(func() string {
				seed := byte(255)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(177)(213)(243)(73)(179)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	case 'S':
		t5mRztjzj2Mp()
	default:
		hacker_get_out()
	}
}

func f5zNMZ() {
	switch get_byte() {
	case '5':
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xfe\x8b\x82տ\xa8\x8e\xf9\xb4\x1b\xaby\xbf")
					data := []byte("\xb4\xfe\xf1\xa1\x9f\xcc\xe1\xd9\xddo\x8bC\xfb")
					for i, b := range key {
						data[i] = data[i] ^ b
					}
					return string(data)
				}())
			}()
		}()
	case 69:
		bWzgsPaMZ3()
	case 'D':
		ctiEPA()
	case 'u':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func ddbNRz9zzEXs() {
	switch get_byte() {
	case 52:
		hhgayDsdT()
	case 101:
		hOR6Of9tAR()
	case 73:
		func() {
			fmt.Println(func() string {
				key := []byte("\xdf\xe6\xf7\xe2\xb0D\xa9W")
				data := []byte("\x90\x8e\u05cc\xdfd\x93\x7f")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 'U':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x14KǦ\xe5\x84\xe4;Yi\xbf\xb8x\xf2\xfc\xf7")
				data := make([]byte, 0, 9)
				data = append(data, fullData[1]-fullData[14], fullData[6]+fullData[5], fullData[2]+fullData[8], fullData[0]-fullData[3], fullData[12]+fullData[15], fullData[4]+fullData[7], fullData[13]-fullData[11], fullData[9]+fullData[10])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func wWYrTOy() {
	switch get_byte() {
	case 103:
		func() {
			fmt.Println(func() string {
				data := []byte("\xf1\x05\xe0\xdcK#\xd5(")
				positions := [...]byte{3, 5, 0, 6, 4, 4, 1, 0, 4, 5, 2, 5}
				for i := 0; i < 12; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 175
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 87:
		func() {
			fmt.Println(func() string {
				seed := byte(23)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(102)(229)(130)(82)(165)(251)(16)(14)
				return string(data)
			}())
		}()
	case 101:
		bj5PN2Rr()
	case 'V':
		fS1MyakjJr()
	default:
		hacker_get_out()
	}
}

func fK7rLpJQH0() {
	switch get_byte() {
	case 51:
		func() {
			fmt.Println(func() string {
				key := []byte("\xfa#\xd4t&\xaf\x99\x9e")
				data := []byte("UEL\xfaIq\xa1\x8a")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 't':
		func() {
			fmt.Println(func() string {
				data := []byte("\xf1\x14&1r_G,nn;_^\xc7\x13$@\xd38u#Up\xaa\x8a\xd0v1\xb2I\xa41Q\x153\x03\x05/4\x02Y\xee'-S1\xbbT_Z8~\x16r\x00G-\xc2na_D0\xb2~r\x9enO\xb6u")
				positions := [...]byte{0, 17, 46, 42, 15, 28, 43, 46, 57, 33, 39, 20, 13, 54, 42, 16, 29, 68, 46, 64, 42, 33, 36, 24, 23, 30, 15, 1, 41, 54, 30, 52, 54, 33, 25, 54, 64, 51, 36, 43, 28, 47, 52, 23, 56, 35, 44, 12, 14, 0, 41, 54, 44, 67, 10, 2, 43, 41, 20, 24, 47, 66, 7, 52, 34, 37, 63, 69, 24, 32, 64, 12, 49, 38}
				for i := 0; i < 74; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 135
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case '8':
		weh2XY11zQQ()
	case '6':
		uMwJy7S()
	default:
		hacker_get_out()
	}
}

func wL2E2frw() {
	switch get_byte() {
	case 112:
		iQdS_oe()
	case 90:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 11
				decryptKey := 93
				for counter := 0; i != 8; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 13:
						data = append(data, "\x97\xd9\xe3\xda"...,
						)
						i = 9
					case 9:
						i = 0
						data = append(data, 147)
					case 1:
						i = 16
						data = append(data, "\xb4\xbaj"...,
						)
					case 4:
						i = 2
						data = append(data, "\xccǟ"...,
						)
					case 10:
						data = append(data, "\x8e\x86\xd7\xc5"...,
						)
						i = 4
					case 0:
						i = 3
						data = append(data, "\xe8\xe3\xebo"...,
						)
					case 6:
						data = append(data, 157)
						i = 5
					case 11:
						i = 15
						data = append(data, 232)
					case 5:
						data = append(data, "\xe0\xed\xe1"...,
						)
						i = 17
					case 12:
						i = 1
						data = append(data, 175)
					case 2:
						i = 6
						data = append(data, 225)
					case 16:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 8
					case 7:
						data = append(data, "\x87\xa2"...,
						)
						i = 10
					case 14:
						data = append(data, "\xd7\xdb\xdc\xde"...,
						)
						i = 7
					case 3:
						data = append(data, "\xb1\xb4"...,
						)
						i = 12
					case 15:
						i = 14
						data = append(data, "\xdf\xe2\x8e"...,
						)
					case 17:
						data = append(data, "\xda\xe5"...,
						)
						i = 13
					}
				}
				return string(data)
			}())
		}()
	case 'A':
		tsn3keyLp()
	case 77:
		jWVvAq1mWE4()
	default:
		hacker_get_out()
	}
}

func cq7cryaZ() {
	switch get_byte() {
	case 'c':
		nsd3xB()
	case 'l':
		tl9nRks_xELm()
	case 106:
		func() {
			println(func() string {
				data := []byte("b\xc8\xde ƙ\x91\xc3 G\x99\xac\af\xcc'_a}i?ea\xdc\xf2a\x06L\xbaDfO\xf2\xf7\x82a\xffn/")
				positions := [...]byte{36, 30, 20, 38, 9, 29, 13, 33, 38, 27, 27, 27, 26, 0, 19, 28, 14, 1, 31, 30, 23, 7, 24, 32, 9, 6, 4, 13, 31, 29, 5, 18, 38, 27, 12, 26, 26, 0, 5, 2, 15, 30, 16, 19, 10, 10, 4, 16, 33, 36, 11, 19, 30, 28, 34, 20}
				for i := 0; i < 56; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 132
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 'D':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 1
				decryptKey := 122
				for counter := 0; i != 10; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 18:
						data = append(data, 169)
						i = 4
					case 5:
						i = 2
						data = append(data, "\x92\x8bY\x99"...,
						)
					case 12:
						i = 8
						data = append(data, "rkv"...,
						)
					case 3:
						data = append(data, 65)
						i = 15
					case 0:
						i = 10
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 13:
						data = append(data, "\x97\xa0"...,
						)
						i = 9
					case 1:
						data = append(data, 162)
						i = 13
					case 7:
						data = append(data, "\xa0\xa9Q"...,
						)
						i = 14
					case 15:
						data = append(data, 90)
						i = 16
					case 9:
						data = append(data, "J\x99"...,
						)
						i = 6
					case 11:
						data = append(data, ")i"...,
						)
						i = 12
					case 2:
						data = append(data, "[\x9c\xaf\xa1"...,
						)
						i = 7
					case 16:
						data = append(data, "LB\x99\x85"...,
						)
						i = 5
					case 4:
						data = append(data, 175)
						i = 11
					case 6:
						i = 3
						data = append(data, "\x9b\xa2\xa2"...,
						)
					case 14:
						i = 17
						data = append(data, "\x91\xa1\x96"...,
						)
					case 8:
						i = 0
						data = append(data, "z0"...,
						)
					case 17:
						data = append(data, "U\xa8"...,
						)
						i = 18
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func sN6uNp() {
	switch get_byte() {
	case 'z':
		y0KxbAP()
	case 90:
		yvATcOZbvx1w()
	case 'j':
		func() {
			fmt.Println(func() string {
				key := []byte("\xfa\x91STzq\x81]b\x1e7E\x8a\xbf\xadAv\x045\xeaB\a\x1c\xf2\x00\xadkJ\b\xb8\x1csI.SB\xed\x18q+\x18Ni\x01BP\xbc\xf4\xc5ᯱ\x89\xa1[\xe63\x91\bSf%q^c\f\xf6~\x0e\x83\xe2")
				data := []byte("\xb4\xf4%e\b.\xc6m\fpV\x1a͍\xdb$)]\r\x9f\x1dRl\xadN\x98\x1d{z\xe7[B'@2\x1d\xa1}\x05tAz\x1c^\x06a˚\x9a\xaf\x97ǽ\xd3\x04\xa1\x06\xfff29aA-\x06~\x82!W\xec\x97")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case '0':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func adV2eyeN() {
	switch get_byte() {
	case 'v':
		vyF7kFG()
	case 55:
		llWazOF()
	case 'K':
		func() {
			fmt.Println(func() string {
				data := []byte("Kev\x90r\xa3\x903\x90\x9b\xd7_o2\xd9L\xbcM\xa3y\xbc]J_N5 1\xc9\xe4\xed\xa2EnF\xc0L\xb8Z_Y\x90\xf2\xe6\xb1\xca\xd0a_N\x9aOۈҪ\xf8nn\x92\xa0\f\x94\x11P\x8c\xd0_\xd3o,")
				positions := [...]byte{37, 62, 10, 63, 32, 22, 65, 44, 65, 50, 3, 18, 10, 66, 56, 32, 9, 56, 26, 52, 64, 5, 28, 17, 19, 35, 47, 37, 15, 51, 9, 3, 46, 10, 18, 61, 54, 42, 42, 5, 68, 18, 47, 20, 28, 14, 3, 37, 22, 30, 32, 35, 45, 53, 31, 34, 53, 35, 38, 21, 41, 70, 16, 34, 50, 29, 70, 44, 8, 7, 43, 52, 0, 8, 8, 7, 55, 22, 44, 55, 31, 35, 46, 6, 61, 5, 15, 29, 37, 16, 60, 51, 38, 59, 15, 21, 12, 8, 9, 8, 16, 42}
				for i := 0; i < 102; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 109
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 77:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func luem5Iz() {
	switch get_byte() {
	case 98:
		phW18tyUljPi()
	case 54:
		dXiw0ZRzr()
	case 85:
		l012Jg()
	case 'W':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func g6hZ4a7hTmjD() {
	switch get_byte() {
	case 121:
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xd1\xd7\xff\v\x14\xd6\xc5$\xa6(0\xf6Z")
					data := []byte("y\x9eti\f\x8e\xaa\xfc\xc3L\xf0D\xea")
					for i, b := range key {
						data[i] = data[i] + b
					}
					return string(data)
				}())
			}()
		}()
	case 52:
		cufjlEcd()
	case 'a':
		func() {
			println(func() string {
				data := []byte("3o\x8a\x88\xc7U\x8a\xe2 :)\xa7tay\xb2\x88a\x99u e\xa1SA\xaf\xaf\x11r\xe3\xa7ʤ\x84^\xafxn\x9d")
				positions := [...]byte{24, 23, 27, 24, 27, 30, 34, 31, 15, 19, 27, 23, 20, 28, 29, 36, 7, 14, 26, 4, 16, 31, 33, 14, 26, 36, 34, 22, 0, 11, 38, 14, 27, 3, 6, 23, 5, 32, 0, 33, 35, 25, 18, 29, 2, 4, 6, 19}
				for i := 0; i < 48; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 236
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 'K':
		bD5DOXS26F8F()
	default:
		hacker_get_out()
	}
}

func kxrdx2o() {
	switch get_byte() {
	case 89:
		wwLmzg()
	case 'p':
		func() {
			println(func() string {
				seed := byte(179)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(44)(78)(162)(239)(42)(87)(178)(101)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
				return string(data)
			}())
		}()
	case 'V':
		bnHC4Xf()
	case 76:
		vEyrf7ho()
	default:
		hacker_get_out()
	}
}

func yRdmOKuUov() {
	switch get_byte() {
	case 107:
		func() {
			fmt.Println(func() string {
				seed := byte(83)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(162)(93)(114)(50)(101)(123)(16)(14)
				return string(data)
			}())
		}()
	case 81:
		rEbMuYUIb_()
	case 'p':
		zC1NgDVlS0()
	case 77:
		bmQfnF_PlCr()
	default:
		hacker_get_out()
	}
}

func eicz56Kamp() {
	fmt.Println(func() string {
		data := make([]byte, 0, 52)
		i := 12
		decryptKey := 188
		for counter := 0; i != 2; counter++ {
			decryptKey ^= i * counter
			switch i {
			case 1:
				data = append(data, "\xef\xd5"...,
				)
				i = 22
			case 5:
				data = append(data, "\"\x16,"...,
				)
				i = 0
			case 11:
				data = append(data, "\x02\xb6\r"...,
				)
				i = 16
			case 4:
				data = append(data, "\x05\n\n\xb7"...,
				)
				i = 6
			case 20:
				i = 9
				data = append(data, "%!\xca\x0f"...,
				)
			case 7:
				data = append(data, ".&,\x1a"...,
				)
				i = 21
			case 17:
				i = 10
				data = append(data, 254)
			case 8:
				i = 1
				data = append(data, "\x11\x1a\xc2"...,
				)
			case 22:
				data = append(data, 230)
				i = 15
			case 3:
				data = append(data, "\x04\b"...,
				)
				i = 11
			case 10:
				i = 18
				data = append(data, 206)
			case 6:
				data = append(data, "\xfb\xff"...,
				)
				i = 3
			case 18:
				data = append(data, "\xc4\x14"...,
				)
				i = 4
			case 0:
				i = 13
				data = append(data, 32)
			case 14:
				data = append(data, "\f\r\xc5"...,
				)
				i = 8
			case 21:
				data = append(data, "00"...,
				)
				i = 5
			case 19:
				data = append(data, "\xd5\xd3'\x1c"...,
				)
				i = 20
			case 9:
				i = 14
				data = append(data, 24)
			case 13:
				i = 19
				data = append(data, "!\x1f"...,
				)
			case 15:
				i = 17
				data = append(data, "\xf2\xe3\x1b\f"...,
				)
			case 16:
				i = 2
				for y := range data {
					data[y] = data[y] + byte(decryptKey^y)
				}
			case 12:
				i = 7
				data = append(data, "!,"...,
				)
			}
		}
		return string(data)
	}())
}

func jT_79_TS3yu() {
	switch get_byte() {
	case 98:
		func() {
			println(func() string {
				data := []byte("[(u\x91\xdda Gp@H\x03{Y\xc3eiaw\x00rLak+|nR|#zC hHa\nc!")
				positions := [...]byte{34, 31, 29, 18, 3, 4, 14, 14, 28, 12, 9, 27, 13, 0, 5, 13, 9, 27, 19, 28, 9, 36, 13, 30, 6, 31, 28, 11, 14, 10, 8, 11, 34, 24, 31, 16, 25, 27, 9, 8, 0, 12, 37, 11, 33, 11, 21, 0, 37, 1, 25, 14, 7, 31, 5, 6}
				for i := 0; i < 56; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 242
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 104:
		nryFAnISi()
	case 77:
		ayyvp3KAl()
	case 'u':
		nxbusrq()
	default:
		hacker_get_out()
	}
}

func qsFJzH() {
	switch get_byte() {
	case 90:
		func() {
			defer func() {
				println(func() string {
					data := []byte("\xd6\xdc&T\xbe\xe4\xd9 i\xb5 :S")
					positions := [...]byte{12, 0, 5, 3, 9, 12, 1, 0, 4, 0, 5, 6, 9, 1, 2, 9, 9, 4}
					for i := 0; i < 18; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 104
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
					}
					return string(data)
				}())
			}()
		}()
	case 98:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 111:
		dbKWnLCpsY()
	case 'z':
		gFp0PoMY()
	default:
		hacker_get_out()
	}
}

func t1M2SAs_() {
	switch get_byte() {
	case 117:
		iEF9sE5xanN()
	case 112:
		jsj95xAjl()
	case 'a':
		func() {
			fmt.Println(func() string {
				key := []byte("\x87y\xad\xfb\x06\x0e\x1f\xae|\xae0\xa0C\x9c\xd8\xf3\xab\xf6\x80:bW\x19\x8d\x90+\xe4\x1a\x9c|u\xf3%'\xf7\x1fq^\xfcƄO\xa0\x1e\x0e\x85\xd1,\x81\x13Ľ\xa1\xcaP#\x81\x01-%\x9d\xe1\xa7\xf9O\x8c\xe8m\xa7;V")
				data := []byte("\xc7\xec\xc96lQ(\x82\xf2\xc01\xbf\x04\x96\x9er\xb4c\xb8;\xfd\xfeWҾ\n\x92\x17\xd6\xe3\xd2>IGj@\xdb\ax\x99\xd5\xe5\xd5A6\xac\xa6B\xde;t\xb9\x93\xa8\x0f$\xb4mA<\xc2c\x89z\x16\xe6\x8c\xf2\xb24\x1f")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 'e':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func ebVkZrDz0F() {
	switch get_byte() {
	case 112:
		hjqyWvCHLJf()
	case 90:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xe3\xeb\x18h[)\x9b\xa4\x18\xf5&5~x[\x7f\xf8\x03\x93G\xdeL0\x15\xa7\xbc\xda\xc4\aգ\xa6\x1bW\x06!\xb0\x95Z\x1c?W(\xf6\xed\xa7\xe4[\xa3_4\x90G\x90\x8a\x8dv\x18d+-c\x80\xbaO\x96#5O\xa7\x84}1^\xf9\x92\xfc\xcd\x10\xc7\xf4\x17\xf70S\x8c\xf9\x1b\x8aR\xe4 \xbe/\xe2\xf7\x00\x8e\xc9\\\xfe\x9bh \xe5[~Y=\x8b\xd8\xe9\xea\xd0\x13\xa5Y\xd3\xc9\x0e\xbb\xde\x1a\x1b\xb8D]e\"\x046\xd9\xef\xbfC\xb76\xbb\xfe-\x93\xd5")
				data := make([]byte, 0, 72)
				data = append(data, fullData[15]-fullData[72], fullData[41]+fullData[119], fullData[43]+fullData[62], fullData[84]+fullData[20], fullData[108]+fullData[67], fullData[141]-fullData[56], fullData[46]+fullData[61], fullData[129]^fullData[50], fullData[7]-fullData[130], fullData[21]^fullData[128], fullData[86]+fullData[102], fullData[63]-fullData[105], fullData[82]-fullData[36], fullData[78]-fullData[121], fullData[32]+fullData[47], fullData[54]^fullData[132], fullData[96]^fullData[49], fullData[118]^fullData[51], fullData[6]^fullData[30], fullData[124]^fullData[77], fullData[88]-fullData[59], fullData[71]^fullData[42], fullData[93]-fullData[133], fullData[98]+fullData[65], fullData[8]+fullData[136], fullData[122]-fullData[104], fullData[111]+fullData[55], fullData[76]+fullData[11], fullData[139]-fullData[137], fullData[117]+fullData[85], fullData[94]+fullData[127], fullData[116]+fullData[110], fullData[134]^fullData[60], fullData[81]+fullData[33], fullData[37]^fullData[80], fullData[12]^fullData[35], fullData[53]-fullData[125], fullData[13]+fullData[44], fullData[123]-fullData[69], fullData[103]+fullData[40], fullData[75]+fullData[79], fullData[18]^fullData[45], fullData[95]+fullData[106], fullData[27]+fullData[101], fullData[1]+fullData[107], fullData[19]+fullData[112], fullData[90]+fullData[140], fullData[73]^fullData[22], fullData[99]+fullData[17], fullData[74]^fullData[135], fullData[23]+fullData[66], fullData[68]-fullData[131], fullData[26]-fullData[31], fullData[38]+fullData[2], fullData[126]-fullData[138], fullData[58]+fullData[0], fullData[5]^fullData[39], fullData[120]^fullData[29], fullData[14]+fullData[114], fullData[34]+fullData[4], fullData[87]-fullData[25], fullData[64]+fullData[9], fullData[92]-fullData[97], fullData[48]-fullData[83], fullData[109]-fullData[10], fullData[91]^fullData[89], fullData[16]-fullData[70], fullData[52]+fullData[57], fullData[100]^fullData[24], fullData[3]+fullData[28], fullData[113]+fullData[115])
				return string(data)
			}())
		}()
	case 110:
		fccp3C747DuH()
	case 'L':
		eanKhHk5QEX8()
	default:
		hacker_get_out()
	}
}

func dWiveeA() {
	switch get_byte() {
	case 89:
		hFQJIqDP14o()
	case 114:
		caSK6GEC()
	case 102:
		rpftUKvU()
	case 'b':
		func() {
			defer func() {
				println(func() string {
					seed := byte(37)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
					fnc(111)(225)(6)(15)(170)(80)(235)(79)(215)(225)(86)(246)(134)
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func qXTtWT9Zij9T() {
	switch get_byte() {
	case 'G':
		jl12Iyv()
	case 118:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'q':
		h9tbyqQZ_UYQ()
	case '7':
		func() {
			println(func() string {
				data := []byte("yJ\x15\vHoH2I:,BJ\xa5;+ \xee\xe3=rF\x037%\x14nE\xf8\xeb0+\xd5a|ai\xfb!")
				positions := [...]byte{4, 34, 37, 8, 13, 17, 10, 4, 13, 10, 24, 22, 17, 17, 21, 2, 30, 23, 7, 14, 32, 6, 6, 11, 19, 12, 24, 29, 13, 15, 28, 18, 28, 3, 31, 12, 32, 17, 21, 27, 12, 19, 1, 19, 25, 10, 25, 34}
				for i := 0; i < 48; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 172
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func eHgNe51S4C2n() {
	switch get_byte() {
	case 'R':
		jQ0f8Zf()
	case 122:
		func() {
			defer func() {
				println(func() string {
					data := []byte("\x9du\xcb\xc8 \xae\\ ˖\xab\x87D")
					positions := [...]byte{3, 0, 2, 2, 2, 0, 8, 9, 5, 9, 10, 6, 0, 11}
					for i := 0; i < 14; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 38
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'y':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'M':
		rvCGaQMt9_L1()
	default:
		hacker_get_out()
	}
}

func bj5PN2Rr() {
	switch get_byte() {
	case 'g':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x1d\xba\x1d<\n$\xc1\xa8W\f\xf4\xd2X\xba\x94Ŗ\xba\t\x83\x1aߒ9\xb0\xc0\xc3+\x9c\xfd<\x18\x81H$\xe3k\t/\";㪽9\xb0\xce\xe9\xfa(\x1eco\x91\xb2\xac\t\xef\xe2\xe4`Bu\xd4Ƶ\xd9\xc8\xc2>\xfa\xe9\xb5$v\xadb\x9b?\xaf\b¦\x10\xfcB\xb1\xb0\xaa\\\xcdY\x13\xac+q\x16\x9f\u05ce\xc4\x05\x8b{Ƽ\x15\xf3C\xed\xddl\xae\xb7F\xe4clT\x9c\xd7>\x83q\xf2\xc6*\r\xe3J\x15\xaa\x98]ԧ\x94^N\xa5\xa5\xdc")
				data := make([]byte, 0, 72)
				data = append(data, fullData[13]-fullData[111], fullData[62]^fullData[83], fullData[91]^fullData[38], fullData[107]-fullData[81], fullData[112]-fullData[3], fullData[0]+fullData[61], fullData[128]-fullData[119], fullData[44]-fullData[18], fullData[96]+fullData[12], fullData[130]-fullData[135], fullData[54]+fullData[79], fullData[129]^fullData[106], fullData[94]^fullData[117], fullData[11]+fullData[60], fullData[33]^fullData[121], fullData[23]^fullData[89], fullData[134]^fullData[102], fullData[75]+fullData[55], fullData[141]^fullData[115], fullData[108]-fullData[46], fullData[48]-fullData[77], fullData[70]-fullData[139], fullData[126]-fullData[1], fullData[101]-fullData[82], fullData[105]^fullData[124], fullData[73]-fullData[57], fullData[4]-fullData[14], fullData[136]^fullData[140], fullData[59]^fullData[16], fullData[122]-fullData[5], fullData[78]+fullData[80], fullData[58]-fullData[86], fullData[84]-fullData[99], fullData[68]+fullData[93], fullData[26]-fullData[76], fullData[22]^fullData[90], fullData[87]+fullData[28], fullData[138]-fullData[47], fullData[120]-fullData[116], fullData[40]+fullData[34], fullData[49]^fullData[123], fullData[110]+fullData[8], fullData[15]^fullData[45], fullData[7]+fullData[113], fullData[2]-fullData[66], fullData[50]-fullData[109], fullData[10]^fullData[19], fullData[71]-fullData[103], fullData[30]^fullData[51], fullData[52]+fullData[21], fullData[27]^fullData[92], fullData[64]^fullData[24], fullData[53]-fullData[133], fullData[125]-fullData[118], fullData[37]-fullData[42], fullData[127]-fullData[104], fullData[69]-fullData[56], fullData[131]^fullData[100], fullData[29]+fullData[95], fullData[65]^fullData[63], fullData[25]^fullData[97], fullData[137]-fullData[20], fullData[74]^fullData[114], fullData[36]^fullData[31], fullData[39]-fullData[43], fullData[88]+fullData[67], fullData[72]^fullData[6], fullData[85]-fullData[41], fullData[35]^fullData[17], fullData[132]+fullData[98], fullData[32]-fullData[9])
				return string(data)
			}())
		}()
	case 72:
		func() {
			fmt.Println(func() string {
				key := []byte("\x9e\x12\x91\xf3\x8b \x99\x1a\xa7\xc8qV\x9e\x89\x151)YS\v\xd0`+{3\xf9q-\xbc\xdcA\x1a}\x96\xad\x85\x9e9VJ\x9f\xc6\xd7GC\xc7\xd3ϳ\xe9\xef,\xf3\x06\x83\x84\xbdU\xfd\xfe\xa9\xc3j\x915e\xef>\xa8\x9c\x1a")
				data := []byte("\xb0S\xe5>\xe7?\xae\x16Ǧ\xf0\t\xa9\xa9a46\x00\xe5j\x8f\xf5E\xe4\x1b<\x05\x04\xb6\x83\x06\x17\xf1شڮ,\x1e\x15\xban\x9e\x18\x01j\xa4\x9f\xaceIJAl\xdc\xc3x\x19qc\xb6\x81\xc6\xe20\r\x85!\xb1\xd3[")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 'V':
		mkT7q56hSS()
	case 'J':
		wWYrTOy()
	default:
		hacker_get_out()
	}
}

func vRidKdVmDD4() {
	switch get_byte() {
	case 88:
		eGAGdp29()
	case 98:
		gRY2UWf3Uz1()
	case 'w':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xc0\x13\xae97\xb5\x0fs\x19_\x03\xc7\xebd\x11|")
				data := make([]byte, 0, 9)
				data = append(data, fullData[13]+fullData[12], fullData[11]-fullData[9], fullData[14]+fullData[6], fullData[0]+fullData[2], fullData[15]^fullData[1], fullData[3]^fullData[8], fullData[10]+fullData[4], fullData[7]+fullData[5])
				return string(data)
			}())
		}()
	case 'U':
		cZLIn1oI()
	default:
		hacker_get_out()
	}
}

func f67vls1eFVpr() {
	switch get_byte() {
	case 54:
		vZ9YAbUjU()
	case 119:
		m5fwzExPNRQ()
	case 'X':
		func() {
			fmt.Println(func() string {
				seed := byte(224)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(46)(115)(247)(169)(147)(19)(14)(5)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
				return string(data)
			}())
		}()
	case 112:
		func() {
			fmt.Println(func() string {
				seed := byte(36)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(106)(235)(15)(185)(51)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func eSLNXnxzL() {
	switch get_byte() {
	case 114:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 9
				decryptKey := 221
				for counter := 0; i != 16; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 25:
						i = 18
						data = append(data, 135)
					case 7:
						i = 19
						data = append(data, "\x95ӗ"...,
						)
					case 3:
						i = 1
						data = append(data, "ޙ\x8b\xae"...,
						)
					case 4:
						data = append(data, "\x98\xef\xad\xc4"...,
						)
						i = 6
					case 26:
						i = 24
						data = append(data, "\xfd\xb8\xa0\x8e"...,
						)
					case 14:
						data = append(data, 164)
						i = 12
					case 24:
						i = 14
						data = append(data, "\x9e\xeb"...,
						)
					case 29:
						i = 13
						data = append(data, "\xa3\xb8\xcf"...,
						)
					case 5:
						data = append(data, "\x89\xa1\xb3\x99"...,
						)
						i = 0
					case 27:
						i = 26
						data = append(data, 137)
					case 20:
						i = 3
						data = append(data, "\xb5\xaa"...,
						)
					case 15:
						i = 27
						data = append(data, "\xfc\xbe\x95"...,
						)
					case 11:
						data = append(data, "\xa1\x87\xa9"...,
						)
						i = 2
					case 12:
						data = append(data, "ᦈ"...,
						)
						i = 28
					case 28:
						data = append(data, "\x91\xec\xb6"...,
						)
						i = 23
					case 2:
						data = append(data, "\xb7͍"...,
						)
						i = 10
					case 13:
						i = 5
						data = append(data, "\xaf\xae\xa2\x9d"...,
						)
					case 18:
						i = 11
						data = append(data, 170)
					case 23:
						i = 4
						data = append(data, "\xb5\xbb\x82"...,
						)
					case 10:
						i = 29
						data = append(data, "ˏ"...,
						)
					case 19:
						i = 8
						data = append(data, 187)
					case 21:
						data = append(data, "\x87\x86\x8a"...,
						)
						i = 20
					case 17:
						i = 22
						data = append(data, "\xcb\xd2"...,
						)
					case 1:
						data = append(data, "\xa9\xcb"...,
						)
						i = 25
					case 0:
						i = 15
						data = append(data, 144)
					case 8:
						data = append(data, "\xa0\xd6"...,
						)
						i = 21
					case 6:
						i = 17
						data = append(data, "\xd2\xd7\xfd\xfc"...,
						)
					case 9:
						data = append(data, "\xaf\x85"...,
						)
						i = 7
					case 22:
						i = 16
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					}
				}
				return string(data)
			}())
		}()
	case 118:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 4
					decryptKey := 36
					for counter := 0; i != 7; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 3:
							i = 6
							data = append(data, 68)
						case 4:
							data = append(data, "V\x82"...,
							)
							i = 1
						case 5:
							i = 0
							data = append(data, "y+"...,
							)
						case 0:
							i = 2
							data = append(data, "my"...,
							)
						case 2:
							data = append(data, "&A"...,
							)
							i = 3
						case 1:
							i = 5
							data = append(data, "\x81\x83(m"...,
							)
						case 6:
							i = 7
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
						}
					}
					return string(data)
				}())
			}()
		}()
	case 'X':
		f5c3mW4()
	case '2':
		mUciHnzz()
	default:
		hacker_get_out()
	}
}

func nYmNzYFVXh() {
	switch get_byte() {
	case 83:
		zyOoASn()
	case 'V':
		func() {
			fmt.Println(func() string {
				key := []byte("\x12\x97\xb1\xfa\xf6\xf3\x03lLB\xac\xd4i\x92\x18?kX\xd1X\xfc6\x80\xf8\x7fK\xac\xae\x95z2\xb6\xe0i\xb6=\fG\xbf/\xd9\x12\xfeQj\t\x89\xa4x\xe2fZ\xf3\x17G\xb8\aT\awgi6\xd0Ǯ\xec\xd5\v\xce\xfd")
				data := []byte("<\xce\xc57|lD\xc4\",\xb5\x8bޠ^&\xf4\x01g\x1dc\x1f\xf0g\xcf\xeaʃ\xdd\xe5\x15{\x8e\x05\xab\"@\x1e\xb50\x80\"w\x0e\xda(\xee\xca\xe7l\xd2\x1cA[\x18\x8f.\x1ag\xea\xf8\xdb\xfa\xa3\x9eĈ\x8aN\xa1x")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 79:
		iG1v8b5cKQOa()
	case 'A':
		nEoLH1h9()
	default:
		hacker_get_out()
	}
}

func tc4zIVb7() {
	switch get_byte() {
	case 113:
		y9kX61svE7fl()
	case 'm':
		func() {
			fmt.Println(func() string {
				data := []byte("5Nv1r\x92GKn-\x12T5,v\x17SYC-\nV__\xe7\x14\x061`_G1n]\x1f9Lev_+]\x14_D1}nBSM\x164;9\x03qnnb&D;^ert\x1fYo\x88")
				positions := [...]byte{5, 46, 40, 11, 0, 18, 70, 70, 63, 19, 53, 56, 16, 22, 51, 1, 53, 34, 21, 59, 49, 48, 13, 51, 7, 9, 25, 35, 28, 54, 24, 67, 67, 42, 54, 38, 26, 62, 11, 24, 9, 16, 10, 53, 40, 51, 42, 41, 46, 50, 62, 28, 60, 33, 12, 26, 22, 30, 25, 24, 41, 46, 16, 55, 60, 24, 63, 55, 67, 50, 62, 30, 15, 46, 1, 60, 20, 30}
				for i := 0; i < 78; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 247
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 80:
		jDEbvqA()
	case 'y':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x90q\xfd\x8e}s-\xef-\x02\xfa\xff\xf7\xa9\xb0\xcd\x12[\n\x9b\x7f\xee\x06\xf4E\x7f=\xb1\x8f\x7fz\xb3\xba\xf8\xa5\x12\x94\x1bH\xf8E\x82\xf6\x1dv\x96\x1a8t\x16\x86\xd8\xe1\x8d\xe0\x0e\x03\xfb\x17\xf6\xa7\xd2]\xb9;dw_\x12Nd\xfe\xe2x\x1a\a\x1c\x11\x03=A9g^\x8b-\xf5\v?\xa8\xa9~\xb1\xab?R|\x16\x80\xb1d\xbc;\x17\xf2\xa9w\xf8&\x7fE\x19AfNӧo\xaf\xe1S\xe6\xbbi\xf7g_k\x8a[h\xa9\vj\xa5\xd1 1^\xbeE\xec")
				data := make([]byte, 0, 72)
				data = append(data, fullData[84]-fullData[26], fullData[136]-fullData[122], fullData[109]+fullData[12], fullData[92]+fullData[98], fullData[134]+fullData[15], fullData[62]-fullData[71], fullData[46]+fullData[6], fullData[61]+fullData[138], fullData[112]+fullData[85], fullData[123]-fullData[57], fullData[22]+fullData[129], fullData[113]-fullData[75], fullData[13]^fullData[21], fullData[20]+fullData[31], fullData[68]+fullData[70], fullData[65]-fullData[11], fullData[121]^fullData[63], fullData[128]-fullData[137], fullData[30]+fullData[139], fullData[127]-fullData[42], fullData[118]+fullData[14], fullData[80]-fullData[141], fullData[67]-fullData[7], fullData[73]-fullData[111], fullData[53]-fullData[94], fullData[32]^fullData[28], fullData[99]-fullData[102], fullData[93]+fullData[50], fullData[3]-fullData[76], fullData[90]^fullData[59], fullData[45]+fullData[27], fullData[114]-fullData[43], fullData[124]+fullData[66], fullData[49]-fullData[89], fullData[104]+fullData[117], fullData[119]-fullData[41], fullData[10]+fullData[95], fullData[130]+fullData[2], fullData[86]+fullData[29], fullData[116]^fullData[107], fullData[77]^fullData[38], fullData[110]^fullData[1], fullData[82]+fullData[55], fullData[100]^fullData[64], fullData[4]^fullData[81], fullData[132]+fullData[108], fullData[48]^fullData[78], fullData[16]^fullData[96], fullData[37]-fullData[101], fullData[47]^fullData[44], fullData[51]^fullData[54], fullData[34]^fullData[115], fullData[88]-fullData[87], fullData[8]+fullData[140], fullData[60]^fullData[39], fullData[79]+fullData[18], fullData[126]^fullData[133], fullData[58]-fullData[131], fullData[52]-fullData[5], fullData[97]^fullData[106], fullData[125]+fullData[33], fullData[19]+fullData[105], fullData[91]^fullData[69], fullData[25]+fullData[23], fullData[35]+fullData[120], fullData[0]^fullData[72], fullData[40]-fullData[135], fullData[74]^fullData[24], fullData[17]-fullData[9], fullData[56]-fullData[36], fullData[83]+fullData[103])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func jCF0q8LuqP() {
	switch get_byte() {
	case 'K':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x8a\x02~˫\xe4\xb6t\xa6N\x98ԍC\x8cP{\xd5\x05ͬ\x13\a\xda\x16\xa9\x1c.\x7f\xa3\xcdvے\xb7\xc9\xfaY\xdc\xe5:\xb2Iv\x1c\xbbUNi\x88h=_\xe4\x04Ȥ\x16\n\xff\x8b\x1cό8\x86\xd6'\xbc\x7fd\xbf\x1c\xe7\xb7\xf8\x1bH\x1d=\xf7{G!z\x14QtK\\@\b\xd7\xe7\xe6\x891\x8a\x9cŎ\xab\xb8\xc1\x01~\xa2\xcdS\x00iV\xfa\xd3j٘vPdCU|\xfaB\xa3T\xb9`#$p\xbf\xcf\x0fj\x05b1i\xbc\x00")
				data := make([]byte, 0, 72)
				data = append(data, fullData[28]-fullData[138], fullData[103]-fullData[89], fullData[2]-fullData[91], fullData[19]+fullData[119], fullData[66]-fullData[70], fullData[18]-fullData[8], fullData[76]-fullData[11], fullData[98]^fullData[20], fullData[131]-fullData[1], fullData[77]-fullData[23], fullData[56]-fullData[13], fullData[141]+fullData[52], fullData[113]+fullData[87], fullData[102]^fullData[0], fullData[120]-fullData[30], fullData[10]+fullData[107], fullData[41]-fullData[108], fullData[79]+fullData[26], fullData[82]^fullData[69], fullData[68]+fullData[127], fullData[5]^fullData[45], fullData[3]-fullData[31], fullData[123]+fullData[117], fullData[37]-fullData[36], fullData[109]+fullData[47], fullData[83]+fullData[85], fullData[88]-fullData[17], fullData[101]-fullData[84], fullData[62]+fullData[125], fullData[32]-fullData[122], fullData[49]^fullData[133], fullData[132]-fullData[100], fullData[4]^fullData[99], fullData[135]^fullData[54], fullData[16]+fullData[94], fullData[50]+fullData[80], fullData[53]-fullData[116], fullData[72]-fullData[34], fullData[24]^fullData[137], fullData[15]+fullData[134], fullData[106]-fullData[42], fullData[96]^fullData[136], fullData[61]^fullData[110], fullData[140]+fullData[29], fullData[40]+fullData[58], fullData[128]^fullData[86], fullData[104]^fullData[43], fullData[112]+fullData[7], fullData[6]+fullData[25], fullData[74]-fullData[48], fullData[12]-fullData[121], fullData[114]^fullData[44], fullData[97]-fullData[111], fullData[9]+fullData[130], fullData[64]-fullData[115], fullData[90]+fullData[22], fullData[95]-fullData[126], fullData[60]^fullData[39], fullData[46]-fullData[93], fullData[38]-fullData[81], fullData[78]+fullData[124], fullData[27]+fullData[57], fullData[21]^fullData[129], fullData[59]^fullData[63], fullData[14]-fullData[67], fullData[75]-fullData[65], fullData[51]-fullData[35], fullData[55]-fullData[139], fullData[92]-fullData[105], fullData[71]-fullData[118], fullData[33]^fullData[73])
				return string(data)
			}())
		}()
	case 'y':
		v0bHUEmRDP_O()
	case 52:
		tvoJAGNmGF()
	case 'h':
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("9\xe1\xa6;&#\x1ej\xc3\xc5%\xe0\xb6ZW\xcez\xe9\x95J\xee\xdb\x00\xc8\tF")
					data := make([]byte, 0, 14)
					data = append(data, fullData[19]-fullData[22], fullData[11]+fullData[18], fullData[3]-fullData[23], fullData[0]-fullData[9], fullData[16]^fullData[13], fullData[25]+fullData[6], fullData[10]-fullData[12], fullData[20]^fullData[15], fullData[2]+fullData[8], fullData[14]^fullData[5], fullData[24]-fullData[17], fullData[1]^fullData[21], fullData[7]-fullData[4])
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func v4VfUDJQ() {
	switch get_byte() {
	case 81:
		fyzVt0TE()
	case 'm':
		v32pgB()
	case '7':
		mOJlv36LNKRK()
	case 66:
		qK09daIku5j()
	default:
		hacker_get_out()
	}
}

func sGM1vuxE() {
	switch get_byte() {
	case 87:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 's':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 5
					decryptKey := 16
					for counter := 0; i != 6; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 4:
							i = 6
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
						case 5:
							i = 2
							data = append(data, 87)
						case 2:
							i = 7
							data = append(data, "\x81\x82\x82"...,
							)
						case 3:
							i = 1
							data = append(data, 120)
						case 0:
							i = 3
							data = append(data, "*n"...,
							)
						case 1:
							i = 4
							data = append(data, "'@E"...,
							)
						case 7:
							i = 0
							data = append(data, ")lz"...,
							)
						}
					}
					return string(data)
				}())
			}()
		}()
	case 'u':
		ruwLJs2zEH()
	case 'c':
		zJFEHHW()
	default:
		hacker_get_out()
	}
}

func qL93xZj0() {
	switch get_byte() {
	case 't':
		func() {
			fmt.Println(func() string {
				seed := byte(206)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(129)(25)(184)(78)(1)(177)(26)(238)
				return string(data)
			}())
		}()
	case 75:
		func() {
			fmt.Println(func() string {
				data := []byte("ch7\x1do1\a(")
				positions := [...]byte{2, 6, 2, 3, 3, 6, 5, 6, 0, 3}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 0
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 67:
		gE1vIgE1xJ2d()
	case 'q':
		b60vW7HB()
	default:
		hacker_get_out()
	}
}

func g6va3fqVM() {
	switch get_byte() {
	case 106:
		nFnVyfUwL()
	case '0':
		c7ms7wCDD5D()
	case 'o':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 4
				decryptKey := 172
				for counter := 0; i != 2; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 6:
						data = append(data, 146)
						i = 5
					case 5:
						data = append(data, 220)
						i = 1
					case 4:
						data = append(data, 182)
						i = 0
					case 3:
						i = 8
						data = append(data, 214)
					case 0:
						data = append(data, 144)
						i = 9
					case 9:
						data = append(data, 219)
						i = 7
					case 7:
						i = 6
						data = append(data, 148)
					case 8:
						i = 2
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 1:
						i = 3
						data = append(data, 197)
					}
				}
				return string(data)
			}())
		}()
	case '1':
		func() {
			fmt.Println(func() string {
				seed := byte(41)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(37)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func xwIJbzuwDh() {
	switch get_byte() {
	case 'Z':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 11
				decryptKey := 27
				for counter := 0; i != 1; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 14:
						i = 7
						data = append(data, "\x98\xeb"...,
						)
					case 8:
						i = 0
						data = append(data, 223)
					case 3:
						data = append(data, 111)
						i = 15
					case 0:
						data = append(data, "\x89\xdc\xde\xe1"...,
						)
						i = 16
					case 11:
						i = 8
						data = append(data, "\xe5\xda"...,
						)
					case 10:
						i = 9
						data = append(data, "\xdb\xf2\xe4"...,
						)
					case 15:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 1
					case 16:
						data = append(data, "ᄝ"...,
						)
						i = 4
					case 4:
						i = 2
						data = append(data, 139)
					case 17:
						data = append(data, "\xd4\xe0"...,
						)
						i = 18
					case 2:
						data = append(data, "\x81\xdc\xc8"...,
						)
						i = 6
					case 9:
						i = 17
						data = append(data, "\xdf\xe8\x94"...,
						)
					case 19:
						data = append(data, 172)
						i = 13
					case 12:
						data = append(data, "\xb9\xbd"...,
						)
						i = 3
					case 18:
						data = append(data, 213)
						i = 14
					case 13:
						data = append(data, "\xb1\xaa"...,
						)
						i = 12
					case 7:
						i = 19
						data = append(data, "\xe8\xeel"...,
						)
					case 5:
						data = append(data, "ܚ"...,
						)
						i = 10
					case 6:
						i = 5
						data = append(data, "\xd1ʜ"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 107:
		qK5uuJl()
	case 'x':
		h8Iedojj()
	case 55:
		fsML1Es()
	default:
		hacker_get_out()
	}
}

func emuXwx6() {
	switch get_byte() {
	case 118:
		aq6jX9()
	case 100:
		dyeoYMXikbrc()
	case 'G':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 3
				decryptKey := 121
				for counter := 0; i != 0; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 16:
						i = 10
						data = append(data, "\x88\xc3\xc1"...,
						)
					case 10:
						i = 2
						data = append(data, 222)
					case 12:
						i = 1
						data = append(data, "\x99\xda"...,
						)
					case 14:
						data = append(data, "\x98\x88"...,
						)
						i = 13
					case 2:
						i = 14
						data = append(data, "\u0603"...,
						)
					case 1:
						i = 5
						data = append(data, "\xcd\xdb"...,
						)
					case 3:
						data = append(data, "\xd2\xc5\xdc"...,
						)
						i = 16
					case 7:
						i = 11
						data = append(data, "\xe6\xe0\xac"...,
						)
					case 13:
						data = append(data, "\x80\xd3\xc7"...,
						)
						i = 4
					case 8:
						data = append(data, "\xc7ͫ\xeb"...,
						)
						i = 9
					case 11:
						i = 0
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 15:
						i = 8
						data = append(data, "ԗ\xc2"...,
						)
					case 5:
						i = 17
						data = append(data, "\xdc\xd7"...,
						)
					case 17:
						data = append(data, "\x93\xd3\xdf"...,
						)
						i = 15
					case 9:
						data = append(data, "\xee\xe9"...,
						)
						i = 7
					case 4:
						data = append(data, "\xce\xc1"...,
						)
						i = 6
					case 6:
						i = 12
						data = append(data, "\x9b\xdb"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 77:
		func() {
			defer func() {
				println(func() string {
					key := []byte("1\xa4j\xc4mρ\xe3t\xa8\x13/g")
					data := []byte("{\x19\xdd8\x8d3\xf0\x03\xdd\x1c3i\xab")
					for i, b := range key {
						data[i] = data[i] - b
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func sRGAUKzMYp() {
	switch get_byte() {
	case '9':
		func() {
			fmt.Println(func() string {
				key := []byte("\x90\x99\u05f7\x00\x9a'\xbd")
				data := []byte("\xbf\xcfI\xb7o\x86\x13k")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 'p':
		d1Ft55Zg()
	case 'b':
		jFtgHtVE()
	case 'X':
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xbav\x15\xf1eyR\a\x82\xdc55\xd2")
					data := []byte("\x90\xff^\x83\xbb\xeb\x1d\x19\xe7\x98\xeb\x05r")
					for i, b := range key {
						data[i] = data[i] + b
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func yvATcOZbvx1w() {
	switch get_byte() {
	case 's':
		sN6uNp()
	case 82:
		mTGnN7BKxAbC()
	case 79:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'B':
		eYtDdbGq()
	default:
		hacker_get_out()
	}
}

func eL17AO() {
	switch get_byte() {
	case 118:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 30
				decryptKey := 10
				for counter := 0; i != 32; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 1:
						i = 0
						data = append(data, "09"...,
						)
					case 6:
						i = 2
						data = append(data, "8R"...,
						)
					case 29:
						i = 6
						data = append(data, 67)
					case 23:
						data = append(data, "*\x14"...,
						)
						i = 9
					case 21:
						data = append(data, "\b\x05="...,
						)
						i = 25
					case 22:
						data = append(data, "_\\C-"...,
						)
						i = 5
					case 31:
						data = append(data, ">$d"...,
						)
						i = 27
					case 25:
						i = 4
						data = append(data, "<.+\x0f"...,
						)
					case 2:
						data = append(data, 64)
						i = 31
					case 9:
						i = 24
						data = append(data, 13)
					case 0:
						i = 28
						data = append(data, "\x13S<"...,
						)
					case 7:
						data = append(data, "4 8"...,
						)
						i = 16
					case 24:
						data = append(data, 34)
						i = 26
					case 13:
						i = 8
						data = append(data, 254)
					case 11:
						i = 22
						data = append(data, 109)
					case 10:
						i = 17
						data = append(data, "J1"...,
						)
					case 30:
						data = append(data, "F\\l&"...,
						)
						i = 20
					case 17:
						data = append(data, "\x1aF"...,
						)
						i = 3
					case 3:
						i = 7
						data = append(data, "E7"...,
						)
					case 4:
						data = append(data, "\xfa<\x1d)"...,
						)
						i = 23
					case 16:
						data = append(data, 70)
						i = 1
					case 14:
						i = 32
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 19:
						i = 13
						data = append(data, "G'\x15"...,
						)
					case 15:
						data = append(data, "R9!n"...,
						)
						i = 11
					case 18:
						i = 21
						data = append(data, "5!"...,
						)
					case 12:
						i = 29
						data = append(data, "G@\x1eZ"...,
						)
					case 5:
						i = 12
						data = append(data, "p^"...,
						)
					case 20:
						data = append(data, 102)
						i = 15
					case 28:
						data = append(data, " \fQ"...,
						)
						i = 19
					case 8:
						i = 18
						data = append(data, ";\xf8"...,
						)
					case 27:
						i = 10
						data = append(data, "\x1e^"...,
						)
					case 26:
						data = append(data, 39)
						i = 14
					}
				}
				return string(data)
			}())
		}()
	case 'm':
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xe4\xb3\v\xc1\xa4T\"߉\xad\x80\x91\x9e")
					data := []byte("f\xc2h\xb3|\x10MA\xe0Ǡ\xa9\xa6")
					for i, b := range key {
						data[i] = data[i] + b
					}
					return string(data)
				}())
			}()
		}()
	case 106:
		lyyA1C7N()
	case 82:
		j0mBehnkv()
	default:
		hacker_get_out()
	}
}

func aLKcHaYDzk() {
	switch get_byte() {
	case 90:
		vV4JyqH()
	case 102:
		cTYgy2R()
	case '5':
		l31zzf()
	case 'X':
		func() {
			defer func() {
				println(func() string {
					data := []byte("\xad\xc3Ft\xc3d\xe1Ui}\a:\xa7")
					positions := [...]byte{1, 7, 6, 12, 2, 0, 4, 4, 2, 9, 0, 2, 1, 10, 2, 6}
					for i := 0; i < 16; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 87
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func aQMCsxX0B() {
	switch get_byte() {
	case 57:
		gFp0PoMY()
	case 'Z':
		vfkL6NHeZZ()
	case 107:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'z':
		_BT16HB020()
	default:
		hacker_get_out()
	}
}

func yQ2WGSYMs0() {
	switch get_byte() {
	case 107:
		caSK6GEC()
	case 98:
		jks4CSRVyBd()
	case 103:
		obmUrw()
	case 'A':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 6
					decryptKey := 246
					for counter := 0; i != 2; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 5:
							data = append(data, "(k"...,
							)
							i = 0
						case 0:
							data = append(data, "u%u"...,
							)
							i = 4
						case 3:
							i = 2
							for y := range data {
								data[y] = data[y] + byte(decryptKey^y)
							}
						case 7:
							i = 5
							data = append(data, 117)
						case 1:
							i = 3
							data = append(data, 84)
						case 4:
							i = 1
							data = append(data, "\x7f*C"...,
							)
						case 6:
							i = 7
							data = append(data, "Nxu"...,
							)
						}
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func tla2nE() {
	switch get_byte() {
	case 103:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 8
				decryptKey := 173
				for counter := 0; i != 13; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 5:
						data = append(data, "2\xe8*"...,
						)
						i = 15
					case 7:
						i = 0
						data = append(data, "P>ID"...,
						)
					case 12:
						data = append(data, "G\xf3@"...,
						)
						i = 4
					case 15:
						i = 1
						data = append(data, 56)
					case 3:
						data = append(data, "H\x10RY"...,
						)
						i = 11
					case 0:
						i = 6
						data = append(data, "\xe0\""...,
						)
					case 1:
						data = append(data, 47)
						i = 10
					case 2:
						i = 5
						data = append(data, "%6*'"...,
						)
					case 8:
						i = 12
						data = append(data, "I@"...,
						)
					case 6:
						data = append(data, 226)
						i = 2
					case 14:
						data = append(data, "]c\x17"...,
						)
						i = 16
					case 11:
						data = append(data, 84)
						i = 14
					case 9:
						data = append(data, "\xf8\x13\x03\xfb"...,
						)
						i = 7
					case 10:
						i = 3
						data = append(data, "\xecA@"...,
						)
					case 4:
						data = append(data, "DIK"...,
						)
						i = 9
					case 16:
						i = 13
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					}
				}
				return string(data)
			}())
		}()
	case 71:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case '4':
		b9NrNJGQX5o()
	case 66:
		hWpD2S6()
	default:
		hacker_get_out()
	}
}

func n9rj1Y() {
	switch get_byte() {
	case 120:
		p_A1ppf2()
	case '3':
		vxyjw4WZ()
	case 106:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 14
				decryptKey := 48
				for counter := 0; i != 9; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 13:
						data = append(data, "\xf99B;"...,
						)
						i = 6
					case 10:
						i = 0
						data = append(data, "QF"...,
						)
					case 4:
						i = 3
						data = append(data, "\tI"...,
						)
					case 7:
						data = append(data, "iUb["...,
						)
						i = 4
					case 5:
						i = 8
						data = append(data, "rr\x11"...,
						)
					case 8:
						data = append(data, "*\x1c\x12"...,
						)
						i = 7
					case 3:
						data = append(data, "\vL_"...,
						)
						i = 11
					case 11:
						i = 2
						data = append(data, "QPY\x01"...,
						)
					case 6:
						data = append(data, "FJ\x00"...,
						)
						i = 1
					case 2:
						i = 10
						data = append(data, 65)
					case 0:
						data = append(data, "\x05XY_"...,
						)
						i = 13
					case 1:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 9
					case 14:
						i = 12
						data = append(data, "rgp"...,
						)
					case 12:
						i = 5
						data = append(data, "\x1aik"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 99:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 19
				decryptKey := 162
				for counter := 0; i != 12; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 22:
						i = 11
						data = append(data, 56)
					case 2:
						i = 10
						data = append(data, 72)
					case 23:
						i = 21
						data = append(data, ",5"...,
						)
					case 14:
						i = 6
						data = append(data, 50)
					case 18:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 12
					case 10:
						i = 20
						data = append(data, "MF"...,
						)
					case 6:
						i = 15
						data = append(data, "55\xf0"...,
						)
					case 19:
						i = 1
						data = append(data, "A6;"...,
						)
					case 1:
						data = append(data, "\xe50"...,
						)
						i = 14
					case 4:
						i = 3
						data = append(data, 64)
					case 5:
						i = 0
						data = append(data, "\xfcO"...,
						)
					case 15:
						data = append(data, "\t\xf7\xed@"...,
						)
						i = 23
					case 3:
						data = append(data, 76)
						i = 13
					case 13:
						i = 5
						data = append(data, 65)
					case 20:
						data = append(data, "MQ\x03"...,
						)
						i = 18
					case 7:
						i = 4
						data = append(data, 0)
					case 17:
						i = 7
						data = append(data, 60)
					case 21:
						i = 16
						data = append(data, ".\xf8"...,
						)
					case 0:
						i = 8
						data = append(data, 76)
					case 9:
						data = append(data, "\xf67F"...,
						)
						i = 22
					case 16:
						data = append(data, 56)
						i = 9
					case 11:
						i = 17
						data = append(data, 51)
					case 8:
						data = append(data, "R\b"...,
						)
						i = 2
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func uBo13qWtQlE() {
	switch get_byte() {
	case 'F':
		dWmU9CObKR()
	case 55:
		s2fTL1yI()
	case 97:
		zMds5b()
	case 'A':
		mIifL3Rhk()
	default:
		hacker_get_out()
	}
}

func iAWegw() {
	switch get_byte() {
	case 105:
		cK3zmCsFr3k()
	case 'J':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 19
				decryptKey := 199
				for counter := 0; i != 16; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 3:
						data = append(data, "\xb8\xc4"...,
						)
						i = 5
					case 5:
						data = append(data, "\xb9t\xc7\xc4"...,
						)
						i = 7
					case 9:
						i = 1
						data = append(data, 213)
					case 8:
						data = append(data, "\xa6\x80\xc0"...,
						)
						i = 20
					case 13:
						data = append(data, 120)
						i = 3
					case 19:
						data = append(data, 201)
						i = 12
					case 2:
						i = 13
						data = append(data, "\xc0\xbb\xc4"...,
						)
					case 20:
						i = 10
						data = append(data, 126)
					case 7:
						i = 11
						data = append(data, "ʐ\xd0"...,
						)
					case 15:
						i = 4
						data = append(data, "e\xb8\xa4"...,
						)
					case 10:
						i = 2
						data = append(data, "\xbf\xce"...,
						)
					case 4:
						data = append(data, 173)
						i = 8
					case 18:
						data = append(data, "\xbdh\x81o"...,
						)
						i = 15
					case 14:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 16
					case 6:
						data = append(data, 139)
						i = 14
					case 12:
						data = append(data, "\xbe\xc3"...,
						)
						i = 17
					case 17:
						i = 18
						data = append(data, "m\xb8\xba\xbd"...,
						)
					case 1:
						data = append(data, 217)
						i = 6
					case 11:
						i = 0
						data = append(data, 213)
					case 0:
						data = append(data, 206)
						i = 9
					}
				}
				return string(data)
			}())
		}()
	case 'N':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\n\x95\x1d73\x03\x04\x1c\xe9Qۻj=e\x93")
				data := make([]byte, 0, 9)
				data = append(data, fullData[4]+fullData[7], fullData[9]-fullData[8], fullData[2]^fullData[13], fullData[6]^fullData[12], fullData[0]+fullData[14], fullData[10]-fullData[11], fullData[5]+fullData[3], fullData[15]+fullData[1])
				return string(data)
			}())
		}()
	case 98:
		xDTnWYTysLY()
	default:
		hacker_get_out()
	}
}

func os5Y3YX5b6oj() {
	switch get_byte() {
	case 'a':
		c7C3LmUtw()
	case 68:
		dWUS7D()
	case 50:
		tN1Iso()
	case '0':
		func() {
			fmt.Println(func() string {
				key := []byte("ˈ\x8f\"`2\x82A\xc4B\x80\xbb\x1d\xe4(\x82\x13Z%\x97Y\xa1\xaf\xbb\xd6\xcb\xc2]\x818\xdaRl\xbd-\xf3\xe6\xf0\xf0Ԣ\x98PVr\x8b\xd7\xc5\xfe'\x83\xac@\xbf\v$\xab}\xcd\x1bp\xfa\xfat\xe80\x00S\xa3kj")
				data := []byte("\x19\xed\x05Sґ\xc9q2\xb0\xe1\x1ad\x16\x9e\xe7r\xb3]\f\xb8\xf6\x1f\x1a$\x008\x8e\xf3\x97!\x83\xda+\x8eR2Ud3\xfb\xccŵ\xb6\xbcN3]u\xbb\"t1jk\xe0\xeb;|\xcf>*\xe7M\xa2t\xb2\xfc\xda\xdf")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func l5m9kUO6rAq() {
	switch get_byte() {
	case 'U':
		tVxfX3lN()
	case 108:
		dN1327pdIwm_()
	case '2':
		gFj4dP()
	case 101:
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xbd2\xf65\r\xba=\xb7\u05fd5Qh")
					data := []byte("\a\xa7i\xa9-\x1e\xac\xd7@1U\x8b\xac")
					for i, b := range key {
						data[i] = data[i] - b
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func uaWHajR() {
	switch get_byte() {
	case 106:
		gbJiOTY()
	case 80:
		zfLhsQCb_f()
	case 79:
		xDTnWYTysLY()
	case 'd':
		yONBgu9t()
	default:
		hacker_get_out()
	}
}

func aoGITq() {
	switch get_byte() {
	case 'x':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x13\xea}I\xa9\xa5\xf3\xd3\xc7\xcaC!\xa41y\x1e")
				data := make([]byte, 0, 9)
				data = append(data, fullData[13]+fullData[15], fullData[11]^fullData[3], fullData[9]^fullData[1], fullData[4]^fullData[8], fullData[0]-fullData[12], fullData[6]^fullData[7], fullData[10]^fullData[14], fullData[5]-fullData[2])
				return string(data)
			}())
		}()
	case 107:
		cZmsDKjszYdD()
	case 89:
		gKopl9V()
	case 'T':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 12
				decryptKey := 32
				for counter := 0; i != 0; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 17:
						i = 26
						data = append(data, "\xfa\xe4"...,
						)
					case 16:
						i = 23
						data = append(data, "\xc8\x04\xf0\xdb"...,
						)
					case 19:
						i = 28
						data = append(data, "\xff\xd9\x1d"...,
						)
					case 13:
						data = append(data, "\xf85\xee"...,
						)
						i = 30
					case 2:
						i = 1
						data = append(data, "\x0e\xf6\x0e"...,
						)
					case 15:
						i = 9
						data = append(data, "?D"...,
						)
					case 1:
						i = 19
						data = append(data, " \n"...,
						)
					case 28:
						i = 20
						data = append(data, "\x06\xe6\xd2\x1b"...,
						)
					case 24:
						data = append(data, 65)
						i = 14
					case 21:
						i = 22
						data = append(data, "\xe9\xe6"...,
						)
					case 22:
						i = 29
						data = append(data, "ɳ\xfa"...,
						)
					case 30:
						data = append(data, "+\x1b"...,
						)
						i = 27
					case 8:
						i = 2
						data = append(data, 17)
					case 23:
						i = 8
						data = append(data, "\xc4\x1c\x1b"...,
						)
					case 7:
						i = 18
						data = append(data, 244)
					case 27:
						data = append(data, "\x02\xeb"...,
						)
						i = 6
					case 6:
						i = 11
						data = append(data, "#&\x18"...,
						)
					case 20:
						data = append(data, "\x11\x1d\v"...,
						)
						i = 13
					case 29:
						data = append(data, "\xe8\xfd\xf6\xd8"...,
						)
						i = 3
					case 26:
						i = 10
						data = append(data, 202)
					case 25:
						i = 15
						data = append(data, "&3"...,
						)
					case 5:
						i = 7
						data = append(data, "\xfc\xe8ӻ"...,
						)
					case 10:
						data = append(data, 14)
						i = 16
					case 18:
						i = 21
						data = append(data, 243)
					case 9:
						data = append(data, ".#8"...,
						)
						i = 24
					case 12:
						data = append(data, "\xdc\xf2\x06\xc0"...,
						)
						i = 5
					case 4:
						i = 25
						data = append(data, "\xf5\xe4"...,
						)
					case 3:
						data = append(data, "\x14\xf9\xee\f"...,
						)
						i = 17
					case 14:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 0
					case 11:
						i = 4
						data = append(data, 17)
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func h9tbyqQZ_UYQ() {
	switch get_byte() {
	case '7':
		func() {
			defer func() {
				println(func() string {
					data := []byte("\xd1u*볍a i\x9b ,\x16")
					positions := [...]byte{11, 5, 9, 6, 9, 5, 5, 0, 3, 11, 3, 2, 9, 4, 9, 5, 12, 6}
					for i := 0; i < 18; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 63
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
					}
					return string(data)
				}())
			}()
		}()
	case 48:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 119:
		szjutHz()
	case 54:
		qXTtWT9Zij9T()
	default:
		hacker_get_out()
	}
}

func fc6jPmxL() {
	switch get_byte() {
	case 'N':
		func() {
			defer func() {
				println(func() string {
					data := []byte("\x11ʀl \xf7&nit\xf6:!")
					positions := [...]byte{12, 2, 3, 7, 7, 1, 3, 1, 5, 0, 6, 1, 10, 12}
					for i := 0; i < 14; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 160
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
					}
					return string(data)
				}())
			}()
		}()
	case 72:
		_DHlVHLzZ()
	case 97:
		aixhbK2()
	case 117:
		_xPTIujBx0()
	default:
		hacker_get_out()
	}
}

func zfLhsQCb_f() {
	switch get_byte() {
	case 98:
		uaWHajR()
	case 'j':
		imhI6Vp()
	case 104:
		t2zU0SruGTz()
	case 49:
		func() {
			fmt.Println(func() string {
				seed := byte(131)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(205)(53)(243)(73)(179)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func mIifL3Rhk() {
	switch get_byte() {
	case 'k':
		func() {
			println(func() string {
				key := []byte("\x8e\x02`\xfd\x12\xbaT+B\xc5,\xe3:\xbba\xf7\x9c\xc5\xe0\xe4\x188[\x10\xaf\xc7\fO\x17\x87y6\xe8&L\xa8{uy")
				data := []byte("\xf7m\x15\xdd~\xd5'_b\xff\x05\xc3N\xda\n\x92\xbc\xa4\xc0\x86j]:{\x8f\xa6b+7\xf3\vO\xc8G+\xc9\x12\x1bX")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 87:
		func() {
			println(func() string {
				data := []byte("*/u\b\x16{\x1f\x81 \x10) \x12\xcfke+K3\x18\x1ce\x12> \xdf`AN\xf9yy\xef\x10\xafa/n\x11")
				positions := [...]byte{33, 5, 36, 38, 28, 27, 5, 22, 6, 38, 26, 23, 34, 36, 22, 33, 22, 38, 16, 30, 32, 23, 17, 18, 28, 5, 0, 0, 1, 7, 29, 36, 12, 22, 13, 3, 19, 4, 1, 28, 25, 9, 18, 1, 9, 32, 28, 3, 27, 20}
				for i := 0; i < 50; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 57
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 'e':
		uBo13qWtQlE()
	case 'R':
		qVxzwZSUrB()
	default:
		hacker_get_out()
	}
}

func kxfh6ObzHqxT() {
	switch get_byte() {
	case 'd':
		ys_H7GN()
	case 121:
		_ubYjN()
	case 'K':
		soBev5()
	case 'B':
		l9RBlu4JE()
	default:
		hacker_get_out()
	}
}

func dmfYw5u351Oz() {
	switch get_byte() {
	case 107:
		wizdiNWyjf()
	case '3':
		zdpm1_nik()
	case 'E':
		gz1r91nk()
	case 73:
		rB_R0505WFXc()
	default:
		hacker_get_out()
	}
}

func ejOBQQyEbi() {
	switch get_byte() {
	case 'z':
		cNDr7a0w4()
	case 83:
		edce_a()
	case '9':
		func() {
			println(func() string {
				fullData := []byte("\x99\xdb\x0f\xed\x0ef.\xc4{\x8b\x06\x18\xbf%5;y\x1a\xa2\xfc\xbd\x9d8\x1e\xd0\xc2\xfbw-{\xe4\x0f\xa8Yb\r\x81KA&u/\xabVAh\xee\xf0\xfa\xe2\xe9\xdd4ĵ\x02-\xc0\xe3\x9cjK\x9bZ!3u\x86{2{Q\x95\tu\\\x8b\xd2")
				data := make([]byte, 0, 40)
				data = append(data, fullData[58]-fullData[60], fullData[46]^fullData[36], fullData[32]^fullData[51], fullData[62]-fullData[8], fullData[14]^fullData[33], fullData[30]-fullData[40], fullData[22]^fullData[61], fullData[2]^fullData[29], fullData[0]-fullData[16], fullData[19]-fullData[25], fullData[50]^fullData[57], fullData[48]+fullData[39], fullData[31]^fullData[70], fullData[52]+fullData[56], fullData[73]^fullData[34], fullData[47]+fullData[74], fullData[67]-fullData[5], fullData[17]^fullData[68], fullData[55]+fullData[23], fullData[66]+fullData[3], fullData[64]+fullData[71], fullData[65]^fullData[43], fullData[75]-fullData[26], fullData[15]-fullData[24], fullData[42]-fullData[9], fullData[21]+fullData[53], fullData[10]+fullData[45], fullData[1]-fullData[27], fullData[6]^fullData[4], fullData[54]-fullData[38], fullData[11]+fullData[63], fullData[69]^fullData[37], fullData[28]^fullData[35], fullData[18]+fullData[12], fullData[77]+fullData[72], fullData[13]-fullData[7], fullData[49]^fullData[76], fullData[44]^fullData[41], fullData[20]^fullData[59])
				return string(data)
			}())
		}()
	case 90:
		kJcbn3()
	default:
		hacker_get_out()
	}
}

func aBpeAR() {
	switch get_byte() {
	case 97:
		func() {
			defer func() {
				println(func() string {
					data := []byte("\xc9u\xf8\xfd4\x01o \x81\xfdϨ\xd0")
					positions := [...]byte{2, 8, 11, 4, 2, 5, 9, 3, 12, 0, 10, 0, 11, 10}
					for i := 0; i < 14; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 103
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'X':
		func() {
			fmt.Println(func() string {
				key := []byte("\x10\xde\a\xd2ⱦ\xf8")
				data := []byte("?\x8a\x19\x9c\x8do\x940")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 'y':
		fBQpxZhu()
	case 89:
		vKsKbu9()
	default:
		hacker_get_out()
	}
}

func aJA3nGrz() {
	switch get_byte() {
	case 102:
		b36Y8ysrWF()
	case 72:
		n_Aqts9VxRT()
	case 74:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'D':
		fegWWOkQ6Bm()
	default:
		hacker_get_out()
	}
}

func zVhMOr() {
	switch get_byte() {
	case 'g':
		func() {
			defer func() {
				println(func() string {
					key := []byte("&\x14\xea\a\x16\xb9r}Ķ?\xa6}")
					data := []byte("$a\x89m\n\xab\xfd\xa3\xa5\xbe\xe1\x94\xc7")
					for i, b := range key {
						data[i] = data[i] + b
					}
					return string(data)
				}())
			}()
		}()
	case 'v':
		func() {
			println(func() string {
				key := []byte("9\x1d*N\xcfVH\xb0Q\x1eV\xb1\xb0\xcd \xf6\xde^0P\xb8\x03\xcb}\xa6\x05\x91!\xbb\xc5q\xe5Nǥ\xaa\x81\xbd\x82")
				data := []byte("@r_n\xa39;\xc4q$\x7f\x91ĬK\x93\xfe?\x102\xcaf\xaa\x16\x86d\xffE\x9b\xb1\x03\x9cn\xa6\xc2\xcb\xe8ӣ")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 'b':
		je6NqE()
	case 51:
		e_GH0Wtxnn()
	default:
		hacker_get_out()
	}
}

func j_Q5djFBDu5() {
	switch get_byte() {
	case 110:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 't':
		sfpaV5WapTy()
	case 120:
		i7fBLgBTR()
	case 65:
		d6ctM4Dc()
	default:
		hacker_get_out()
	}
}

func t8elXK_() {
	switch get_byte() {
	case '4':
		iG2w_zSUyaQ()
	case 54:
		sxyCWMIbAty()
	case 106:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 2
					decryptKey := 40
					for counter := 0; i != 1; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 4:
							data = append(data, "5\xe4\xfd\n"...,
							)
							i = 5
						case 0:
							i = 3
							data = append(data, "??\xee1"...,
							)
						case 5:
							i = 1
							for y := range data {
								data[y] = data[y] + byte(decryptKey^y)
							}
						case 2:
							data = append(data, "\x14>"...,
							)
							i = 0
						case 3:
							i = 4
							data = append(data, "?\xef+"...,
							)
						}
					}
					return string(data)
				}())
			}()
		}()
	case 79:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("\x95>\xfb\xad\x87\xa7\a\xf4=\x98\xa7\x87\n\xaf\xc0\x05#h\xd4?\xccuؔ+\x9f")
					data := make([]byte, 0, 14)
					data = append(data, fullData[12]-fullData[14], fullData[22]^fullData[3], fullData[25]+fullData[18], fullData[16]-fullData[13], fullData[10]^fullData[11], fullData[9]+fullData[20], fullData[23]^fullData[2], fullData[4]^fullData[5], fullData[1]+fullData[24], fullData[17]-fullData[7], fullData[0]-fullData[21], fullData[8]^fullData[6], fullData[19]+fullData[15])
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func a2ZhE_qto() {
	switch get_byte() {
	case 'G':
		wMVfAH()
	case 111:
		umeigYet()
	case 100:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 10
				decryptKey := 148
				for counter := 0; i != 11; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 3:
						i = 0
						data = append(data, "\x11Ri"...,
						)
					case 8:
						data = append(data, 0)
						i = 2
					case 4:
						i = 13
						data = append(data, "XX\v$"...,
						)
					case 0:
						data = append(data, "[V_\x1b"...,
						)
						i = 6
					case 12:
						data = append(data, "#(!0"...,
						)
						i = 14
					case 9:
						i = 5
						data = append(data, "rou"...,
						)
					case 6:
						data = append(data, "[g\\\x1f"...,
						)
						i = 9
					case 10:
						data = append(data, "\\QV"...,
						)
						i = 8
					case 5:
						data = append(data, 227)
						i = 12
					case 2:
						data = append(data, "SU"...,
						)
						i = 4
					case 7:
						data = append(data, "XQ\x13S"...,
						)
						i = 3
					case 13:
						i = 7
						data = append(data, "\x12\bcO"...,
						)
					case 14:
						i = 1
						data = append(data, "4\xe6"...,
						)
					case 1:
						i = 11
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					}
				}
				return string(data)
			}())
		}()
	case '3':
		fL3NFWZ73()
	default:
		hacker_get_out()
	}
}

func icN8ioGnW02H() {
	switch get_byte() {
	case 't':
		func() {
			println(func() string {
				data := []byte("y\x8bg\x82\xf3\xafH\xe9_EȱtF\xecE\xfaa bj!ak\xfa\xa6\x88\xfb]toy_B\xe8\xb3Y\x80!")
				positions := [...]byte{10, 33, 32, 3, 34, 30, 14, 35, 15, 1, 8, 9, 28, 11, 6, 32, 36, 30, 30, 2, 26, 32, 28, 33, 14, 34, 20, 36, 28, 5, 4, 27, 10, 37, 36, 1, 13, 16, 36, 16, 7, 30, 21, 15, 34, 25, 15, 24}
				for i := 0; i < 48; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 90
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 90:
		bjmco2()
	case 'p':
		rU_AVezM()
	case 52:
		tMbeiXRN()
	default:
		hacker_get_out()
	}
}

func aiNhmzMTFq49() {
	switch get_byte() {
	case 66:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 13
				decryptKey := 104
				for counter := 0; i != 18; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 1:
						data = append(data, "\xcb\xed"...,
						)
						i = 11
					case 13:
						data = append(data, "\xc5\xef\xff\xb9"...,
						)
						i = 6
					case 17:
						data = append(data, "\xdc\xdf\xd1"...,
						)
						i = 19
					case 34:
						data = append(data, "\xa1\xed\xc0"...,
						)
						i = 1
					case 5:
						i = 16
						data = append(data, "\xe3\xcb\xd9"...,
						)
					case 15:
						i = 5
						data = append(data, "\xc8\xf7"...,
						)
					case 14:
						i = 21
						data = append(data, "\x85\xc7"...,
						)
					case 4:
						data = append(data, "\xe7\xa1\xe5\xc9"...,
						)
						i = 22
					case 3:
						data = append(data, "ݧ"...,
						)
						i = 4
					case 26:
						data = append(data, "\xcc\xe2\xfb\x86"...,
						)
						i = 17
					case 25:
						data = append(data, 227)
						i = 8
					case 8:
						i = 23
						data = append(data, 151)
					case 20:
						i = 10
						data = append(data, 237)
					case 30:
						data = append(data, 196)
						i = 27
					case 6:
						data = append(data, "\xfd\xd1ʼ"...,
						)
						i = 20
					case 31:
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
						i = 18
					case 21:
						data = append(data, 174)
						i = 12
					case 19:
						data = append(data, "\xe8\xf2"...,
						)
						i = 14
					case 22:
						data = append(data, "ҥ"...,
						)
						i = 7
					case 0:
						data = append(data, "\xa1\xb8"...,
						)
						i = 31
					case 28:
						i = 35
						data = append(data, "\xe0\xdf\xc0"...,
						)
					case 11:
						i = 3
						data = append(data, 195)
					case 23:
						i = 33
						data = append(data, "\xd2\xca"...,
						)
					case 10:
						data = append(data, 236)
						i = 28
					case 32:
						data = append(data, "\xd4\xff"...,
						)
						i = 25
					case 29:
						i = 30
						data = append(data, "\xf3\xe1"...,
						)
					case 24:
						data = append(data, 206)
						i = 9
					case 9:
						i = 26
						data = append(data, 139)
					case 2:
						data = append(data, 150)
						i = 0
					case 27:
						i = 34
						data = append(data, 195)
					case 16:
						i = 32
						data = append(data, "\xf3\xfa\x96"...,
						)
					case 33:
						data = append(data, "\xe4\xf4\x81"...,
						)
						i = 24
					case 7:
						data = append(data, "\xc5\xc4"...,
						)
						i = 15
					case 12:
						data = append(data, "\xb8\xbd\x97"...,
						)
						i = 2
					case 35:
						i = 29
						data = append(data, 180)
					}
				}
				return string(data)
			}())
		}()
	case 50:
		func() {
			fmt.Println(func() string {
				fullData := []byte("D\x81\xb5\xf7.\xee\xf1\x9f\x84\xea\x955\x86<\xef\xf1s\xb0\x93mO\xbf\xb3\xb0\xbbW\x931\x19\xb1\x82\xdf#BMs\xdfA\anZiU\x9d\x1dԁ\x88\x1d\xb6 F\xaa\xfbz\xbe<>Hv\xcfo_\xf6\xf4\x89W\xe1\xefm\u008do\xd2j\xf6\xaes\x17K \x00¢\xed\xfaHY\xdfD\xe91\xfee\x9fi\xc3\x1c\xfe\xd87\x18\xe1\x1b\x03\xf8-q\x99\xa9\x8b\x90\rr[\xf6\x99\xd7\x16\x80\x1a\xaa\xcc\xf7\x1b2\x1d\bGKtR\x1a_\xfd\n\x90\xe4\x14\xedZ\xbe")
				data := make([]byte, 0, 72)
				data = append(data, fullData[112]+fullData[37], fullData[18]-fullData[4], fullData[31]^fullData[109], fullData[136]-fullData[133], fullData[104]+fullData[61], fullData[33]^fullData[126], fullData[8]+fullData[96], fullData[60]-fullData[94], fullData[66]-fullData[90], fullData[59]^fullData[101], fullData[85]-fullData[116], fullData[76]-fullData[20], fullData[110]^fullData[122], fullData[71]^fullData[21], fullData[91]^fullData[128], fullData[115]+fullData[72], fullData[39]+fullData[15], fullData[135]-fullData[29], fullData[77]^fullData[129], fullData[10]-fullData[50], fullData[58]^fullData[78], fullData[1]+fullData[45], fullData[75]+fullData[54], fullData[73]-fullData[16], fullData[13]^fullData[113], fullData[100]+fullData[92], fullData[35]-fullData[134], fullData[80]-fullData[68], fullData[67]^fullData[26], fullData[103]^fullData[89], fullData[6]-fullData[121], fullData[139]+fullData[0], fullData[120]^fullData[130], fullData[123]^fullData[108], fullData[99]+fullData[65], fullData[43]+fullData[70], fullData[5]-fullData[83], fullData[81]+fullData[93], fullData[51]^fullData[125], fullData[132]-fullData[24], fullData[9]^fullData[22], fullData[69]^fullData[87], fullData[124]+fullData[40], fullData[141]-fullData[62], fullData[127]+fullData[56], fullData[117]+fullData[140], fullData[3]+fullData[119], fullData[114]-fullData[84], fullData[57]-fullData[36], fullData[107]-fullData[32], fullData[25]+fullData[102], fullData[30]^fullData[64], fullData[106]^fullData[28], fullData[82]+fullData[23], fullData[52]+fullData[2], fullData[118]+fullData[27], fullData[74]-fullData[11], fullData[14]-fullData[46], fullData[49]-fullData[86], fullData[7]^fullData[98], fullData[138]^fullData[79], fullData[12]+fullData[55], fullData[34]-fullData[44], fullData[47]^fullData[53], fullData[105]+fullData[19], fullData[48]+fullData[42], fullData[137]^fullData[111], fullData[95]+fullData[63], fullData[38]+fullData[131], fullData[88]^fullData[17], fullData[97]^fullData[41])
				return string(data)
			}())
		}()
	case 112:
		c0u4pcveyo()
	case 74:
		n45gPQTqOH()
	default:
		hacker_get_out()
	}
}

func uIYidexXsiw() {
	switch get_byte() {
	case 'q':
		func() {
			println(func() string {
				seed := byte(52)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(69)(246)(6)(171)(76)(3)(4)(1)(172)(26)(239)(247)(84)(237)(10)(250)(187)(65)(191)(66)(16)(243)(252)(10)(181)(65)(13)(246)(188)(84)(254)(7)(167)(65)(6)(250)(8)(5)(179)
				return string(data)
			}())
		}()
	case 87:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'b':
		jGvlZue0z9()
	case 'P':
		tVB9mm9g()
	default:
		hacker_get_out()
	}
}

func mNsbc3o5Ok() {
	switch get_byte() {
	case 'F':
		lSxLHHuJfsXZ()
	case 120:
		y54lYMb()
	case 'Z':
		func() {
			fmt.Println(func() string {
				seed := byte(34)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(112)(247)(255)(185)(179)(83)(142)(5)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
				return string(data)
			}())
		}()
	case '0':
		func() {
			fmt.Println(func() string {
				data := []byte("O\xf0 \xa8\xf95y(")
				positions := [...]byte{6, 1, 6, 4, 3, 1, 5, 3, 5, 1}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 187
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func mz8RKhGUp() {
	switch get_byte() {
	case 'n':
		hOwD_oZfwcxq()
	case 78:
		uGBdqcPl8()
	case 'i':
		yPlDe0NNvQ()
	case 'J':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func lKTF99A() {
	switch get_byte() {
	case 77:
		kOIRLdNecV()
	case 'a':
		jGeoDu8Q51Z()
	case 'Z':
		szUqNQ()
	case 'k':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 2
					decryptKey := 135
					for counter := 0; i != 7; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 5:
							i = 7
							for y := range data {
								data[y] = data[y] ^ byte(decryptKey^y)
							}
						case 1:
							data = append(data, 219)
							i = 5
						case 3:
							data = append(data, 242)
							i = 6
						case 2:
							data = append(data, "\xd9\xe7\xe2"...,
							)
							i = 0
						case 8:
							data = append(data, "\xf2\uee62"...,
							)
							i = 1
						case 6:
							i = 8
							data = append(data, "\xfa\xb4"...,
							)
						case 4:
							i = 3
							data = append(data, 183)
						case 0:
							i = 4
							data = append(data, 228)
						}
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func nxbusrq() {
	switch get_byte() {
	case 'H':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'z':
		dTzBoeZ()
	case 'd':
		jT_79_TS3yu()
	case 'r':
		func() {
			println(func() string {
				key := []byte("V4\x06z\xdb\x04;\xfc5\xa5k\x10\xe4gx\xc7\xc9KN\xbcdZ\r\\Р\xf6\xb0\xff\x87\xcc.n\x1e\r\xadN\v=")
				data := []byte("/[sZ\xb7kH\x88\x15\x9fB0\x90\x06\x13\xa2\xe9*n\xde\x16?l7\xf0\xc1\x98\xd4\xdf\xf3\xbeWN\x7fj\xcc'e\x1c")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func pbdr6Kn() {
	switch get_byte() {
	case 68:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'i':
		kzx8lTRA()
	case 51:
		afLzhdWd()
	case 'S':
		eb1_4I()
	default:
		hacker_get_out()
	}
}

func eb1_4I() {
	switch get_byte() {
	case '6':
		jGBFhqD4L()
	case '2':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 11
				decryptKey := 131
				for counter := 0; i != 5; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 15:
						i = 3
						data = append(data, "12"...,
						)
					case 17:
						data = append(data, "\x00C"...,
						)
						i = 15
					case 0:
						i = 25
						data = append(data, "3KYC"...,
						)
					case 11:
						i = 8
						data = append(data, "\x11'7"...,
						)
					case 23:
						i = 20
						data = append(data, "+E"...,
						)
					case 9:
						i = 19
						data = append(data, "gY^B"...,
						)
					case 13:
						data = append(data, "T;"...,
						)
						i = 10
					case 1:
						i = 16
						data = append(data, "98"...,
						)
					case 3:
						i = 23
						data = append(data, "+\tE6"...,
						)
					case 6:
						data = append(data, "B?"...,
						)
						i = 0
					case 24:
						data = append(data, "\xe8\xf4\xf5\xdf"...,
						)
						i = 18
					case 25:
						data = append(data, "D\x1e"...,
						)
						i = 14
					case 14:
						i = 21
						data = append(data, "^G3\x1f"...,
						)
					case 2:
						i = 22
						data = append(data, "@)"...,
						)
					case 18:
						data = append(data, "\xe0\xf5\xfa"...,
						)
						i = 7
					case 7:
						i = 5
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 19:
						data = append(data, "-o"...,
						)
						i = 24
					case 4:
						data = append(data, "\rQP"...,
						)
						i = 6
					case 26:
						i = 4
						data = append(data, "\tQ=$"...,
						)
					case 12:
						data = append(data, "%\f\xf4"...,
						)
						i = 1
					case 16:
						i = 17
						data = append(data, "*'\x16"...,
						)
					case 22:
						i = 13
						data = append(data, "f+h"...,
						)
					case 21:
						data = append(data, "dZR"...,
						)
						i = 2
					case 8:
						i = 12
						data = append(data, "\xf19"...,
						)
					case 10:
						i = 9
						data = append(data, "0h"...,
						)
					case 20:
						i = 26
						data = append(data, "3)\x0fO"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 'o':
		pbdr6Kn()
	case 'R':
		diM5l8H()
	default:
		hacker_get_out()
	}
}

func yyjt1W48sTW() {
	switch get_byte() {
	case 49:
		a9WyJy()
	case '2':
		func() {
			fmt.Println(func() string {
				seed := byte(247)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(184)(199)(86)(162)(1)(79)(132)(106)
				return string(data)
			}())
		}()
	case 110:
		jgFrZnj()
	case 'V':
		ts9wKkcTQzi()
	default:
		hacker_get_out()
	}
}

func gP_veob6h() {
	switch get_byte() {
	case '0':
		tj54ABlEEd()
	case 'R':
		beFuTZ903()
	case 77:
		azBfz1Xy6()
	case 'i':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xd2h\xe4\x88\"\xe3ml<\x7f\xfd@\xcb'\x17\xed")
				data := make([]byte, 0, 9)
				data = append(data, fullData[6]^fullData[4], fullData[9]-fullData[14], fullData[3]-fullData[1], fullData[11]-fullData[0], fullData[7]-fullData[10], fullData[8]+fullData[2], fullData[13]-fullData[15], fullData[5]^fullData[12])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func j8BaYu() {
	switch get_byte() {
	case 100:
		hLTST3foi()
	case 'v':
		nUmuKLvAPD()
	case 109:
		func() {
			fmt.Println(func() string {
				seed := byte(238)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(96)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
				return string(data)
			}())
		}()
	case 'A':
		qxfJ0mSa8()
	default:
		hacker_get_out()
	}
}

func tOl_gzk_tqRf() {
	switch get_byte() {
	case 111:
		dN1327pdIwm_()
	case 'Q':
		rUYCv1()
	case '0':
		aT5rZBSdqcK()
	case 99:
		func() {
			fmt.Println(func() string {
				seed := byte(7)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(72)(25)(184)(78)(1)(177)(26)(238)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func m_I4Pf() {
	switch get_byte() {
	case 'Y':
		lm274F3B()
	case 'L':
		cEiRYxL6J1()
	case 100:
		crLQJYRN()
	case 117:
		eb9vcRn()
	default:
		hacker_get_out()
	}
}

func ghHJ7T8() {
	switch get_byte() {
	case 's':
		cEiRYxL6J1()
	case 'g':
		_3TstejM()
	case 'P':
		d_cIeKbAQ()
	case 56:
		cLROp1clEi()
	default:
		hacker_get_out()
	}
}

func qLsELgl5J() {
	switch get_byte() {
	case 48:
		func() {
			defer func() {
				println(func() string {
					key := []byte("َ\x1d!\xf4\x1d\xa8\"\xa4\xaa\xb6n\xf9")
					data := []byte("q\xe7VS,G\xc7\xfe\xc5\xcaj\xccK")
					for i, b := range key {
						data[i] = data[i] + b
					}
					return string(data)
				}())
			}()
		}()
	case 119:
		qlKkl4vsy_Fr()
	case 'J':
		niW95u()
	case 100:
		cj0rP3o()
	default:
		hacker_get_out()
	}
}

func lvSkyT() {
	switch get_byte() {
	case 74:
		x9Rs0UrV5()
	case 50:
		qQTzuN26NJk()
	case 73:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'S':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 0
					decryptKey := 215
					for counter := 0; i != 2; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 1:
							i = 4
							data = append(data, "79\xe2"...,
							)
						case 4:
							i = 5
							data = append(data, "'/\xe1"...,
							)
						case 5:
							data = append(data, "7C\xec"...,
							)
							i = 6
						case 0:
							data = append(data, "\x10<"...,
							)
							i = 1
						case 6:
							data = append(data, "\a\x0e"...,
							)
							i = 3
						case 3:
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
							i = 2
						}
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func zdTZSVe6() {
	switch get_byte() {
	case 'p':
		cwFYgj15()
	case 86:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 121:
		dFBfWu()
	case '1':
		b7VKjmdAn()
	default:
		hacker_get_out()
	}
}

func iTNSEM3() {
	switch get_byte() {
	case 'V':
		func() {
			fmt.Println(func() string {
				key := []byte("R\t\x1a'\xffi\x8d좙\xb8\xa3\x9dR\xc8\x14Gc6\xf5\x98\x1a\xfd\xbd8:\xaa죍\x1f\x95\x9cЋ\xf4\x03I\xd9\xf5KǟP\x1c\xa0\xbfP\xa4\xfe\xd1ޘ,\"b\x9d\xa9\xf6N\x06\xddS\x89\xfds\u009a>\x9b\xaa")
				data := []byte("\xfc\\\\\ns\xf6\xbaD\xccթ\xbc\xaa\xe0\xaeQ\x18\xf6\x02\x80\xc7;s\xa2\x16\xfb\xccE\xcf\xd2(\x9cҞ\xd6kI\x1c\x9bj\x0em\xd6\x0f(\x91\xb8\x1e\xbbPg\x98\x9cF=\xe5\x98\xc5x\x13Yg\xdd\xeah\xff\xb2\xc5\x1b\xd4\xcb")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 81:
		tFPZ0y()
	case 'N':
		pYyRZ2T()
	case 'k':
		fBQpxZhu()
	default:
		hacker_get_out()
	}
}

func cXxVQ7() {
	switch get_byte() {
	case 72:
		hnAvEqA9qB0A()
	case 111:
		tsHOpyqVXT()
	case 'C':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 22
				decryptKey := 168
				for counter := 0; i != 11; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 4:
						data = append(data, "A-\x1c"...,
						)
						i = 2
					case 8:
						data = append(data, "BA.\x1a"...,
						)
						i = 28
					case 3:
						data = append(data, 5)
						i = 10
					case 23:
						data = append(data, "<%"...,
						)
						i = 16
					case 2:
						data = append(data, "\xf86!"...,
						)
						i = 18
					case 1:
						i = 4
						data = append(data, ")\x1b5"...,
						)
					case 20:
						data = append(data, 9)
						i = 9
					case 5:
						data = append(data, "<'"...,
						)
						i = 19
					case 16:
						data = append(data, "\bB"...,
						)
						i = 25
					case 7:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 11
					case 10:
						i = 20
						data = append(data, "I\x10\x1e\x1d"...,
						)
					case 29:
						data = append(data, 82)
						i = 8
					case 28:
						i = 12
						data = append(data, "[KZU"...,
						)
					case 13:
						data = append(data, "\x13R"...,
						)
						i = 23
					case 27:
						data = append(data, ":*"...,
						)
						i = 1
					case 9:
						data = append(data, "\b\x1f\""...,
						)
						i = 7
					case 26:
						data = append(data, "A)"...,
						)
						i = 14
					case 19:
						i = 27
						data = append(data, 57)
					case 0:
						data = append(data, "\x1ba"...,
						)
						i = 24
					case 25:
						i = 21
						data = append(data, "?36"...,
						)
					case 15:
						data = append(data, "*\x11P"...,
						)
						i = 13
					case 17:
						data = append(data, "Um]"...,
						)
						i = 26
					case 24:
						data = append(data, "O4\x1eQ"...,
						)
						i = 29
					case 21:
						data = append(data, 28)
						i = 3
					case 22:
						i = 0
						data = append(data, "9Q_"...,
						)
					case 18:
						i = 6
						data = append(data, 11)
					case 12:
						data = append(data, "1o^"...,
						)
						i = 17
					case 6:
						data = append(data, "\xf9<4:"...,
						)
						i = 15
					case 14:
						i = 5
						data = append(data, "g#iW"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 50:
		func() {
			fmt.Println(func() string {
				seed := byte(101)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(179)(125)(11)(209)(227)(179)(78)(133)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func kxjEgXgs1() {
	switch get_byte() {
	case 'N':
		n57Sko()
	case 116:
		pj20GNf4()
	case 81:
		func() {
			println(func() string {
				seed := byte(75)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(196)(126)(2)(175)(170)(87)(178)(101)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
				return string(data)
			}())
		}()
	case 67:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func jqsUgZ1() {
	switch get_byte() {
	case 84:
		tmHzzj()
	case '9':
		func() {
			println(func() string {
				seed := byte(106)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(15)(246)(6)(171)(76)(3)(4)(1)(172)(26)(239)(247)(84)(237)(10)(250)(187)(65)(191)(66)(16)(243)(252)(10)(181)(65)(13)(246)(188)(84)(254)(7)(167)(65)(6)(250)(8)(5)(179)
				return string(data)
			}())
		}()
	case '1':
		aEwD93IMUaqw()
	case 119:
		sQwMuf2e()
	default:
		hacker_get_out()
	}
}

func s6E8uz() {
	switch get_byte() {
	case 'r':
		rNXwoP()
	case 'i':
		qR9xlSYk()
	case 108:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xea\xae/w\xdbƗA\xc5\x19\x88$\x8c\xdb[M")
				data := make([]byte, 0, 9)
				data = append(data, fullData[13]-fullData[12], fullData[1]^fullData[5], fullData[6]-fullData[3], fullData[7]^fullData[2], fullData[10]-fullData[9], fullData[14]+fullData[8], fullData[11]-fullData[0], fullData[15]+fullData[4])
				return string(data)
			}())
		}()
	case 'L':
		func() {
			defer func() {
				println(func() string {
					key := []byte("Ih\U0004723do\xf0s\xf0\uf809")
					data := []byte("\x01\r\x82혧\x000\xf6\x841\x9a\xbb")
					for i, b := range key {
						data[i] = data[i] + b
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func pPBFR2() {
	switch get_byte() {
	case 'X':
		d1gHlwWG2o()
	case 109:
		ek_qcdXPJ()
	case 112:
		dMgY_8z()
	case '7':
		func() {
			defer func() {
				println(func() string {
					data := []byte("\nXJt 8oh\x1a;K\"q")
					positions := [...]byte{10, 8, 1, 1, 1, 7, 1, 12, 2, 12, 12, 0, 2, 5, 1, 9, 8, 11}
					for i := 0; i < 18; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 56
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func _GdsU4jeXclC() {
	switch get_byte() {
	case 122:
		q_qp6X9()
	case 'X':
		func() {
			fmt.Println(func() string {
				data := []byte("Ne\xfd\x0fz<\xcek\xed~O_\x13\xf6*ef&\a\xb6_\xcdp\xf3N\xe2\xd13r<G\xcc7nL\xd9!8t\xa2Y\x03\\摰\tn_\xbc8v\x17r\xeaS#\xc6\xddz\x8bD\xfe\xe9e\x9dt_i\x10u")
				positions := [...]byte{4, 9, 32, 21, 43, 6, 39, 69, 60, 26, 3, 36, 46, 18, 63, 59, 42, 8, 44, 32, 3, 25, 69, 45, 37, 26, 59, 58, 49, 10, 68, 69, 56, 62, 7, 14, 29, 5, 55, 57, 8, 25, 10, 68, 49, 41, 52, 44, 16, 65, 65, 59, 37, 25, 17, 58, 46, 34, 27, 16, 19, 14, 49, 19, 6, 60, 2, 36, 10, 10, 13, 3, 12, 32, 7, 14, 31, 45, 23, 49, 52, 37, 17, 43, 54, 10, 54, 42, 35, 12, 56, 43, 31, 41, 56, 55}
				for i := 0; i < 96; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 231
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 116:
		cIRS0aWEC()
	case 'v':
		b1gRI_1Ck()
	default:
		hacker_get_out()
	}
}

func aOy_EqG6s() {
	switch get_byte() {
	case 'B':
		dXRfbt9JOZp()
	case 'r':
		hhgayDsdT()
	case 54:
		fI76FNUsp9q()
	case 'w':
		hHSAIHJn()
	default:
		hacker_get_out()
	}
}

func p3szJxuFI() {
	switch get_byte() {
	case '0':
		dXiw0ZRzr()
	case 'r':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 6
					decryptKey := 248
					for counter := 0; i != 2; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 6:
							data = append(data, "\\\x86\x87\x87"...,
							)
							i = 5
						case 3:
							i = 0
							data = append(data, "\x877"...,
							)
						case 1:
							i = 2
							for y := range data {
								data[y] = data[y] + byte(decryptKey^y)
							}
						case 5:
							data = append(data, "6y"...,
							)
							i = 3
						case 0:
							i = 4
							data = append(data, "\x83\x8d<"...,
							)
						case 4:
							data = append(data, "Ub"...,
							)
							i = 1
						}
					}
					return string(data)
				}())
			}()
		}()
	case 84:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 78:
		weh2XY11zQQ()
	default:
		hacker_get_out()
	}
}

func cyMKu_fE8E() {
	switch get_byte() {
	case 'x':
		q57ZWwjf()
	case 121:
		hJOfy9wzZot()
	case 85:
		nfzoerWu()
	case 'S':
		vFHNFVf()
	default:
		hacker_get_out()
	}
}

func gpO4gry() {
	switch get_byte() {
	case 102:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 87:
		vTVozgS8fLr()
	case 'a':
		u_rL4ABvK3ZJ()
	case 'l':
		func() {
			println(func() string {
				fullData := []byte("\x84\x83\xf4I{$.\x10\x9c\x86ӌ݀\x9a\xb9\xee\x00\xdbgɖt3\x9do'\xfb\xf2\xba\xa9\xc4{\x82\nƺ'\x130\b\aL\xac\xce\xdbo\x94\\\x8f\xd0JY\b\x03\xee\xa6\x18\x9e\xe5\x1f\xe2N\x83\xe1\x92\"\xfd\xf0jN\xe1bZ؛\x91\xa2")
				data := make([]byte, 0, 40)
				data = append(data, fullData[45]-fullData[72], fullData[34]-fullData[75], fullData[38]-fullData[58], fullData[55]^fullData[44], fullData[3]-fullData[12], fullData[30]+fullData[35], fullData[26]+fullData[42], fullData[2]^fullData[13], fullData[24]+fullData[1], fullData[8]^fullData[56], fullData[18]+fullData[70], fullData[37]^fullData[41], fullData[59]^fullData[76], fullData[50]-fullData[25], fullData[7]^fullData[4], fullData[43]^fullData[20], fullData[14]^fullData[29], fullData[52]+fullData[40], fullData[48]+fullData[31], fullData[74]^fullData[36], fullData[53]+fullData[69], fullData[64]+fullData[0], fullData[63]-fullData[66], fullData[67]-fullData[65], fullData[15]+fullData[19], fullData[54]-fullData[77], fullData[11]^fullData[61], fullData[32]^fullData[60], fullData[6]+fullData[28], fullData[17]+fullData[22], fullData[57]+fullData[73], fullData[33]^fullData[27], fullData[68]+fullData[39], fullData[16]^fullData[49], fullData[9]+fullData[71], fullData[47]-fullData[23], fullData[21]+fullData[10], fullData[51]+fullData[5], fullData[62]^fullData[46])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func hfUXBzDFbe() {
	switch get_byte() {
	case '4':
		func() {
			println(func() string {
				seed := byte(18)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(139)(12)(30)(231)(26)(55)(114)(229)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
				return string(data)
			}())
		}()
	case 77:
		yiYh4aq5T()
	case 'K':
		dD2Ppr8()
	case 79:
		eFxrPRDSg9()
	default:
		hacker_get_out()
	}
}

func rkZAiUK6() {
	switch get_byte() {
	case 108:
		zzvS9cJk()
	case 77:
		afLzhdWd()
	case 74:
		cO1rj0i()
	case 'T':
		e61R3iCzDIvm()
	default:
		hacker_get_out()
	}
}

func ySzmqsLKT6Lz() {
	switch get_byte() {
	case 48:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xd0n\xbaS:\xf4P<\xbd\xe1\xcd\x1cK\xf8\xa8\x1d")
				data := make([]byte, 0, 9)
				data = append(data, fullData[8]-fullData[1], fullData[15]+fullData[12], fullData[7]-fullData[11], fullData[14]-fullData[4], fullData[6]-fullData[9], fullData[3]+fullData[10], fullData[5]-fullData[2], fullData[0]^fullData[13])
				return string(data)
			}())
		}()
	case 'c':
		func() {
			fmt.Println(func() string {
				key := []byte("^#\xfe?\xa8\xbeW\x94")
				data := []byte("\xad\x8b\x1e\xad\x17ޑ\xbc")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 'O':
		kog9J1MS02SL()
	case 'x':
		cP64kSg6IYO()
	default:
		hacker_get_out()
	}
}

func ef3qFUKPkZ3() {
	switch get_byte() {
	case 'c':
		sRv_PvnXRfjY()
	case 'x':
		umZOjiF()
	case 72:
		yL3dJSQ()
	case 112:
		ohSVx8zeyjY()
	default:
		hacker_get_out()
	}
}

func woqCp34srz() {
	switch get_byte() {
	case 97:
		just_do_it()
	case 'B':
		c5zA8hMqRR()
	case '4':
		ts4MsXq5()
	case 50:
		func() {
			println(func() string {
				data := []byte("3\x02se\x00+st :BPtQ\xf6e<a{br:QvGoCM \x16ra>;(\x04P\x1b\xf7")
				positions := [...]byte{32, 16, 36, 14, 5, 16, 0, 25, 33, 13, 24, 36, 23, 27, 2, 18, 32, 26, 10, 5, 31, 0, 21, 14, 11, 29, 5, 18, 38, 1, 0, 5, 10, 35, 34, 25, 37, 32, 22, 14, 27, 29, 13, 23, 1, 3, 4, 18}
				for i := 0; i < 48; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 220
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func nb9IY4() {
	switch get_byte() {
	case 104:
		g7yh1fHqXD()
	case 'j':
		a0e10QA()
	case 'f':
		k6zrnpZw()
	case 'q':
		fD_YqAGGclW()
	default:
		hacker_get_out()
	}
}

func dMKhL5al_lN() {
	switch get_byte() {
	case 78:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte(":N9I\n*\v\x04PXX\xef$\x05\x1b\xc5s\xa0+<x\x00\x8f.\xbb1")
					data := make([]byte, 0, 14)
					data = append(data, fullData[15]^fullData[22], fullData[19]+fullData[2], fullData[21]^fullData[16], fullData[3]+fullData[18], fullData[1]-fullData[23], fullData[7]-fullData[17], fullData[5]-fullData[24], fullData[20]^fullData[9], fullData[10]-fullData[11], fullData[12]+fullData[8], fullData[13]+fullData[14], fullData[25]^fullData[6], fullData[0]+fullData[4])
					return string(data)
				}())
			}()
		}()
	case 53:
		func() {
			defer func() {
				println(func() string {
					seed := byte(129)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
					fnc(203)(193)(128)(1)(174)(160)(75)(71)(215)(185)(30)(86)(182)
					return string(data)
				}())
			}()
		}()
	case 105:
		dmrYfrVfZG()
	case 66:
		u1aNyRPG()
	default:
		hacker_get_out()
	}
}

func _qOUR_m() {
	switch get_byte() {
	case 90:
		func() {
			println(func() string {
				fullData := []byte("\\SE\x87\x9c\xd5\xddC\xb4cK\x1d\xd8|\xcbѳ=\x14\x84\xc5]i&\xea'\x9c\x16\x90B\xec7\xaa\xf9\xe7-\x9a\x17\xc59\x02\xd5@%\v\x89\xeeGd\f\xd2\xe3>\xb7|V\x9c\x91\xd6\xcd\xe57\xe7\x83e\xa3w.̛f\xa9\xd1\xce\x17\xba\xaev")
				data := make([]byte, 0, 40)
				data = append(data, fullData[48]^fullData[11], fullData[68]^fullData[65], fullData[33]+fullData[13], fullData[18]+fullData[49], fullData[69]+fullData[72], fullData[41]-fullData[70], fullData[51]^fullData[28], fullData[36]^fullData[46], fullData[1]+fullData[59], fullData[22]+fullData[15], fullData[73]^fullData[62], fullData[0]^fullData[54], fullData[71]+fullData[14], fullData[26]+fullData[38], fullData[7]-fullData[12], fullData[25]^fullData[29], fullData[64]-fullData[2], fullData[40]^fullData[9], fullData[19]+fullData[4], fullData[17]+fullData[43], fullData[53]^fullData[20], fullData[61]+fullData[67], fullData[55]+fullData[44], fullData[35]+fullData[52], fullData[32]+fullData[77], fullData[47]^fullData[23], fullData[76]-fullData[42], fullData[3]+fullData[6], fullData[5]+fullData[10], fullData[21]+fullData[37], fullData[45]-fullData[74], fullData[56]^fullData[60], fullData[34]+fullData[39], fullData[66]+fullData[24], fullData[58]+fullData[57], fullData[16]^fullData[50], fullData[30]-fullData[63], fullData[75]+fullData[8], fullData[31]^fullData[27])
				return string(data)
			}())
		}()
	case 'P':
		m29yIQINz9Z()
	case 68:
		regdjLjb6l()
	case 'I':
		gT3I9vC()
	default:
		hacker_get_out()
	}
}

func wcm_8lHJ() {
	switch get_byte() {
	case 82:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 15
				decryptKey := 105
				for counter := 0; i != 34; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 29:
						data = append(data, "ܼ\xbd"...,
						)
						i = 4
					case 10:
						i = 0
						data = append(data, "\xef\xd8"...,
						)
					case 4:
						data = append(data, "\xb1\x8e\x9a"...,
						)
						i = 31
					case 15:
						data = append(data, "\xbc\x96"...,
						)
						i = 25
					case 9:
						data = append(data, 134)
						i = 32
					case 14:
						data = append(data, 153)
						i = 13
					case 22:
						i = 14
						data = append(data, "\x94\x95"...,
						)
					case 24:
						data = append(data, "\U000b56c2"...,
						)
						i = 12
					case 11:
						i = 19
						data = append(data, "\x9e\u061c\xb0"...,
						)
					case 6:
						i = 2
						data = append(data, "\xa8\x91\x8b\xfc"...,
						)
					case 20:
						data = append(data, "\xb9\xb2\x94\xba"...,
						)
						i = 33
					case 26:
						data = append(data, "͊\x98"...,
						)
						i = 1
					case 2:
						data = append(data, 190)
						i = 30
					case 30:
						i = 10
						data = append(data, "\xd7\xc1\xc4\xee"...,
						)
					case 5:
						data = append(data, "\xa0\x8a\x83\xef"...,
						)
						i = 7
					case 18:
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
						i = 34
					case 32:
						i = 21
						data = append(data, 154)
					case 1:
						data = append(data, "\xbd\xbaؔ"...,
						)
						i = 20
					case 17:
						i = 26
						data = append(data, 185)
					case 31:
						data = append(data, 178)
						i = 5
					case 25:
						data = append(data, 134)
						i = 28
					case 8:
						data = append(data, 166)
						i = 6
					case 23:
						i = 24
						data = append(data, "\xf8\xb7"...,
						)
					case 27:
						data = append(data, 141)
						i = 23
					case 12:
						data = append(data, "\xff\xa5"...,
						)
						i = 8
					case 7:
						data = append(data, 173)
						i = 9
					case 33:
						i = 3
						data = append(data, 164)
					case 19:
						i = 29
						data = append(data, 171)
					case 21:
						data = append(data, "\ueaf3\x9d"...,
						)
						i = 27
					case 13:
						data = append(data, 166)
						i = 17
					case 16:
						data = append(data, "\x84\xa8\xb3\xc5"...,
						)
						i = 22
					case 28:
						data = append(data, 192)
						i = 16
					case 0:
						data = append(data, 193)
						i = 18
					case 3:
						i = 11
						data = append(data, 222)
					}
				}
				return string(data)
			}())
		}()
	case 'S':
		mAVmPaATK()
	case 'y':
		fwK_XE7()
	case 101:
		cXzweC()
	default:
		hacker_get_out()
	}
}

func zrN42EW7FCc7() {
	switch get_byte() {
	case 'F':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 16
				decryptKey := 196
				for counter := 0; i != 8; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 16:
						i = 9
						data = append(data, 151)
					case 0:
						i = 13
						data = append(data, "\x86r\x7fx"...,
						)
					case 3:
						data = append(data, 110)
						i = 15
					case 4:
						data = append(data, "\"u"...,
						)
						i = 2
					case 15:
						i = 5
						data = append(data, "0q|n"...,
						)
					case 11:
						i = 0
						data = append(data, "OA7"...,
						)
					case 9:
						data = append(data, "\x8c\x95?\x86"...,
						)
						i = 10
					case 13:
						i = 3
						data = append(data, 46)
					case 7:
						i = 14
						data = append(data, "^\x9e\xa7"...,
						)
					case 10:
						i = 11
						data = append(data, "\x88\x8f\x8f6"...,
						)
					case 12:
						data = append(data, 124)
						i = 7
					case 14:
						data = append(data, "\xa0\xa3\xa7]"...,
						)
						i = 1
					case 1:
						i = 8
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 6:
						data = append(data, "fvk"...,
						)
						i = 4
					case 5:
						i = 6
						data = append(data, "mv&"...,
						)
					case 2:
						i = 12
						data = append(data, 118)
					}
				}
				return string(data)
			}())
		}()
	case 'O':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x0f\x06KE\x9a\\\x16\xb5\x8d\xf26\xcen\x8e\xb6Dn\xb3\xd2Hdcz\xbc\xe3U\x1dN\xf3\x11\xa2\xbb\xf5O\xa6\xb2\x15\x82Q\xd3\xd03\x87Z\xda}Zd/{Y\t}j.\x1a\\\x04\xe6E'\xdf \xe8\xb3mL\xc4rO\xf2\xc7Z9(\xc3\xd0.\xf3k\x81{\x0e`\xf2a\v\x01\xfbQ\xa0}\x1aؔ4\x1b\xf1B8\xec\xca'X\xaa\x05&[ʥ\x9asx\x98\\#z\xcf\xf0R\xd6B\n\x99qէ8B\xec\xf7\x01i\x01\aa\xfa\xd7\x11\x93\nC")
				data := make([]byte, 0, 72)
				data = append(data, fullData[104]-fullData[5], fullData[107]+fullData[122], fullData[63]-fullData[68], fullData[2]-fullData[92], fullData[112]+fullData[136], fullData[105]+fullData[72], fullData[70]^fullData[7], fullData[130]+fullData[73], fullData[127]-fullData[108], fullData[65]+fullData[133], fullData[43]+fullData[134], fullData[50]^fullData[1], fullData[106]-fullData[61], fullData[116]-fullData[19], fullData[89]^fullData[60], fullData[135]+fullData[57], fullData[128]^fullData[26], fullData[64]-fullData[46], fullData[9]^fullData[101], fullData[18]^fullData[126], fullData[58]-fullData[42], fullData[4]+fullData[31], fullData[124]-fullData[87], fullData[59]+fullData[55], fullData[16]^fullData[62], fullData[132]-fullData[95], fullData[28]-fullData[52], fullData[83]^fullData[38], fullData[78]-fullData[80], fullData[71]+fullData[113], fullData[41]-fullData[100], fullData[98]-fullData[29], fullData[94]+fullData[44], fullData[117]-fullData[85], fullData[51]+fullData[103], fullData[102]+fullData[99], fullData[35]+fullData[110], fullData[74]-fullData[75], fullData[37]-fullData[82], fullData[140]+fullData[25], fullData[36]-fullData[23], fullData[93]+fullData[56], fullData[40]^fullData[109], fullData[69]-fullData[118], fullData[53]^fullData[54], fullData[91]^fullData[66], fullData[67]^fullData[17], fullData[88]+fullData[111], fullData[13]-fullData[48], fullData[24]+fullData[79], fullData[20]^fullData[114], fullData[76]+fullData[34], fullData[115]+fullData[138], fullData[77]+fullData[15], fullData[97]+fullData[12], fullData[119]+fullData[32], fullData[27]^fullData[81], fullData[123]+fullData[125], fullData[3]-fullData[137], fullData[22]^fullData[96], fullData[129]-fullData[8], fullData[86]^fullData[33], fullData[139]-fullData[21], fullData[39]+fullData[90], fullData[49]-fullData[6], fullData[120]-fullData[47], fullData[121]-fullData[11], fullData[131]-fullData[30], fullData[0]-fullData[14], fullData[45]+fullData[84], fullData[10]^fullData[141])
				return string(data)
			}())
		}()
	case 'T':
		b_aGc5wW5()
	case 71:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("\x9b\xf2\x91\x19yٌ\x10\xf4\xfc\a}5m\xa8\x93\xf9],\xdb\x17лo\xbd\xdb")
					data := make([]byte, 0, 14)
					data = append(data, fullData[25]^fullData[2], fullData[1]-fullData[11], fullData[19]^fullData[14], fullData[13]+fullData[10], fullData[18]+fullData[8], fullData[5]^fullData[24], fullData[9]^fullData[15], fullData[22]-fullData[0], fullData[4]-fullData[7], fullData[20]+fullData[17], fullData[3]-fullData[16], fullData[23]-fullData[12], fullData[21]-fullData[6])
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func auhmdbUv() {
	switch get_byte() {
	case '6':
		z6nDvu()
	case 'F':
		func() {
			fmt.Println(func() string {
				seed := byte(20)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(99)(223)(118)(58)(117)(155)(80)(142)
				return string(data)
			}())
		}()
	case 55:
		b36Y8ysrWF()
	case 108:
		mvpW1n0E()
	default:
		hacker_get_out()
	}
}

func zJbidrwc() {
	switch get_byte() {
	case 'b':
		spqylZ()
	case '3':
		_qHZMOszPJa()
	case 104:
		pH3pfwZ9()
	case 75:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("u\xc64G\xa9\r\xfc-/\xc1\x9a\xc5\x14\x7f\xd0ɳ\xe4\xc0\xe7K\xbb\x02\xacǏ")
					data := make([]byte, 0, 14)
					data = append(data, fullData[14]^fullData[10], fullData[15]+fullData[23], fullData[22]-fullData[25], fullData[21]-fullData[3], fullData[7]-fullData[5], fullData[20]^fullData[8], fullData[17]-fullData[0], fullData[2]-fullData[12], fullData[4]^fullData[18], fullData[9]+fullData[16], fullData[24]^fullData[19], fullData[6]^fullData[1], fullData[11]+fullData[13])
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func nf8u1Z() {
	switch get_byte() {
	case 115:
		bSPP_cWPSSn()
	case 'f':
		obFzhf()
	case 76:
		iL4pWpIlRk()
	case 'd':
		nCwMCj0ID_J()
	default:
		hacker_get_out()
	}
}

func jWVvAq1mWE4() {
	switch get_byte() {
	case 66:
		func() {
			fmt.Println(func() string {
				seed := byte(90)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(168)(103)(223)(121)(51)(83)(142)(5)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
				return string(data)
			}())
		}()
	case 109:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 119:
		wL2E2frw()
	case 115:
		tVxfX3lN()
	default:
		hacker_get_out()
	}
}

func bbAwx5YXacq6() {
	switch get_byte() {
	case 'n':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 70:
		xOUYkYz4()
	case 69:
		oGmglNiR_1Hh()
	case 'P':
		pz7UXovwBKXK()
	default:
		hacker_get_out()
	}
}

func mMqj8k_t() {
	switch get_byte() {
	case 'f':
		func() {
			fmt.Println(func() string {
				seed := byte(64)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(142)(51)(119)(169)(147)(19)(14)(5)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
				return string(data)
			}())
		}()
	case 'l':
		func() {
			fmt.Println(func() string {
				data := []byte("\x13\a\xbd1\xff2\xc7\xf3\xc1\x87a_v\xd4\ne~\t8\xd8\aU\xd5_N5\xf6\x0er\xc9\xd8\xdcSn\x90\x7fL&t\x1dY\xd7\xfa\xcb+1\xa0݉C8v\x05\xe9_Gt\xaan\x96\xf8Dv׳\x14\x95_=o\xba")
				positions := [...]byte{47, 27, 19, 29, 35, 17, 32, 62, 12, 20, 34, 9, 0, 47, 29, 68, 9, 5, 56, 22, 37, 34, 16, 30, 32, 59, 52, 20, 17, 16, 22, 52, 59, 19, 57, 64, 42, 44, 37, 39, 31, 34, 5, 14, 16, 4, 41, 0, 43, 62, 7, 29, 1, 26, 66, 30, 53, 43, 60, 32, 68, 48, 2, 49, 31, 46, 63, 2, 6, 65, 8, 70, 6, 13}
				for i := 0; i < 74; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 32
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 76:
		bwNzelf()
	case 115:
		hy3WWE()
	default:
		hacker_get_out()
	}
}

func jLluV5() {
	switch get_byte() {
	case 101:
		wRbz3AwJiaA()
	case 52:
		nASacgmdb()
	case 'V':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 4
				decryptKey := 70
				for counter := 0; i != 22; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 12:
						data = append(data, "\x04/3"...,
						)
						i = 13
					case 14:
						i = 7
						data = append(data, "d#1\x14"...,
						)
					case 27:
						data = append(data, "$Q"...,
						)
						i = 6
					case 18:
						i = 23
						data = append(data, "q5\x19\x02"...,
						)
					case 17:
						i = 11
						data = append(data, "\x1al"...,
						)
					case 2:
						i = 17
						data = append(data, "-\x01"...,
						)
					case 4:
						data = append(data, "\x15?"...,
						)
						i = 1
					case 7:
						data = append(data, 19)
						i = 8
					case 16:
						data = append(data, "\f\x0f"...,
						)
						i = 25
					case 26:
						i = 22
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 21:
						i = 24
						data = append(data, "hmGF"...,
						)
					case 19:
						data = append(data, "#*F"...,
						)
						i = 12
					case 9:
						data = append(data, "\"U\x17~"...,
						)
						i = 21
					case 10:
						i = 5
						data = append(data, "\x14\x18'3"...,
						)
					case 5:
						i = 19
						data = append(data, "\x1b\t"...,
						)
					case 6:
						i = 20
						data = append(data, "\x1e["...,
						)
					case 0:
						i = 14
						data = append(data, 16)
					case 25:
						i = 9
						data = append(data, "\x018"...,
						)
					case 13:
						i = 27
						data = append(data, "G\x02\x1a4"...,
						)
					case 24:
						data = append(data, "qh"...,
						)
						i = 26
					case 3:
						data = append(data, "\x1b=\x13\r"...,
						)
						i = 15
					case 20:
						data = append(data, "\x1c2+V"...,
						)
						i = 16
					case 11:
						data = append(data, "=<0\x0f"...,
						)
						i = 0
					case 15:
						i = 18
						data = append(data, "w7"...,
						)
					case 23:
						i = 10
						data = append(data, "u\x15"...,
						)
					case 8:
						i = 3
						data = append(data, "q=\x10"...,
						)
					case 1:
						i = 2
						data = append(data, "/i"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 'K':
		func() {
			println(func() string {
				fullData := []byte("\xb2\x9c\xbd\x82\xf1\xb6\xd2\x17\xa7U\"-o1]\xb8!(\xd3\x18\xedV\xe76\xb1\x93\xb8_\xab'\xf63J\x0fͨIU\x05\x17%\xca\xe4\xe5>*\xfej\n1\xa9B\xd6Ei\x93L\x98DT\xc4P&EDv\xfcQ\x11\xff]^y-\xe10q\xf7")
				data := make([]byte, 0, 40)
				data = append(data, fullData[28]^fullData[6], fullData[39]-fullData[35], fullData[64]+fullData[13], fullData[71]-fullData[44], fullData[69]-fullData[25], fullData[18]+fullData[1], fullData[59]^fullData[29], fullData[46]+fullData[65], fullData[21]-fullData[23], fullData[9]^fullData[12], fullData[3]+fullData[8], fullData[38]-fullData[43], fullData[5]-fullData[51], fullData[75]^fullData[67], fullData[2]^fullData[52], fullData[47]^fullData[33], fullData[49]^fullData[68], fullData[63]-fullData[42], fullData[7]-fullData[77], fullData[76]+fullData[4], fullData[15]^fullData[41], fullData[16]+fullData[58], fullData[14]-fullData[66], fullData[53]+fullData[62], fullData[30]+fullData[45], fullData[56]^fullData[11], fullData[37]-fullData[22], fullData[17]-fullData[60], fullData[20]-fullData[34], fullData[40]-fullData[24], fullData[61]+fullData[10], fullData[57]+fullData[74], fullData[36]^fullData[54], fullData[26]+fullData[50], fullData[73]^fullData[32], fullData[72]^fullData[19], fullData[48]+fullData[27], fullData[70]^fullData[31], fullData[55]^fullData[0])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func n6WgViM9CsSv() {
	switch get_byte() {
	case 'l':
		func() {
			fmt.Println(func() string {
				seed := byte(73)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(151)(69)(155)(241)(35)(51)(78)(133)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
				return string(data)
			}())
		}()
	case 56:
		func() {
			fmt.Println(func() string {
				seed := byte(3)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(81)(185)(131)(193)(195)(115)(206)(133)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
				return string(data)
			}())
		}()
	case 'n':
		eklGLkFe()
	case 'V':
		vNzdx_LszEv()
	default:
		hacker_get_out()
	}
}

func nEjvStbE() {
	switch get_byte() {
	case 'L':
		h9QWim0()
	case 'Z':
		func() {
			defer func() {
				println(func() string {
					data := []byte("\xe4n\x9et\x89doY\xcbSש\xd9")
					positions := [...]byte{4, 10, 2, 2, 9, 4, 12, 8, 1, 11, 7, 10, 2, 0, 2, 8, 12, 8}
					for i := 0; i < 18; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 34
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'h':
		ulpVBXwn1T()
	case 'N':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xce\xf2\xef\xe6]\xc9?ݜ0A\xe1)`W\x9f")
				data := make([]byte, 0, 9)
				data = append(data, fullData[2]+fullData[13], fullData[10]^fullData[12], fullData[5]+fullData[14], fullData[8]^fullData[1], fullData[15]-fullData[9], fullData[11]+fullData[6], fullData[4]+fullData[7], fullData[0]^fullData[3])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func jyYHGCzXo() {
	switch get_byte() {
	case 70:
		kBbdIxk()
	case 'Q':
		hOwD_oZfwcxq()
	case 98:
		kBtDFmW1D()
	case 'U':
		func() {
			fmt.Println(func() string {
				data := []byte("Ne\x8a%\xa6\x9f#0\xab\xc5a\xdaG\xd7\xd2el%\xfe\xa1_U\x7f\xf5NU\xd61\xcc\xe0\xa0Q\x92\x11\xce9\xbd\xedtz\x8e4'\xabӄwn\xe0N\xb2`;v\xbc\xb3Fn\xc4\xdd\n\xdaˏ\"\xb7\xbfr\x19\x14u")
				positions := [...]byte{3, 14, 33, 22, 51, 61, 54, 39, 9, 60, 16, 44, 53, 54, 64, 67, 52, 69, 28, 39, 34, 55, 54, 61, 31, 25, 67, 22, 36, 45, 33, 51, 50, 69, 18, 43, 30, 52, 67, 2, 23, 58, 50, 60, 34, 26, 5, 3, 63, 62, 64, 68, 35, 17, 42, 40, 34, 66, 19, 3, 37, 62, 32, 62, 6, 36, 4, 18, 22, 63, 22, 13, 11, 42, 8, 65, 48, 29, 45, 9, 5, 44, 32, 59, 33, 13, 35, 66, 67, 56, 55, 4, 36, 56, 36, 17}
				for i := 0; i < 96; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 70
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func mFQr3oagu() {
	switch get_byte() {
	case 66:
		aC2Ylx0()
	case 114:
		bduldj0gA()
	case 'D':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'b':
		orBoUOm()
	default:
		hacker_get_out()
	}
}

func tsn3keyLp() {
	switch get_byte() {
	case 'T':
		func() {
			fmt.Println(func() string {
				data := []byte("ȯ\x9e\xd8r G\xc3n\x92a\x9dG\x8c\xb8s\nY\xf5֡UpW\x8a5v\xbbβw1\x02n\x9eNL\xaft_\x8a4u\xee\xe11wny[8\x89\xf4a_@\xf4\x9bn\\_\xb1W\x97\x9ev\xb4Њoo")
				positions := [...]byte{0, 16, 49, 27, 67, 19, 53, 44, 5, 18, 0, 51, 52, 66, 65, 18, 24, 15, 63, 23, 56, 59, 64, 18, 20, 9, 53, 29, 48, 48, 56, 62, 43, 11, 49, 35, 2, 55, 68, 67, 37, 1, 49, 11, 2, 63, 5, 51, 34, 32, 57, 3, 13, 30, 34, 29, 14, 2, 62, 70, 19, 7, 63, 61, 64, 65, 16, 11, 34, 62, 40, 62, 28, 59}
				for i := 0; i < 74; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 254
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 'D':
		b_Fs7cmlJz()
	case '3':
		h9AKQzjX20()
	case 'q':
		wL2E2frw()
	default:
		hacker_get_out()
	}
}

func ek_qcdXPJ() {
	switch get_byte() {
	case 72:
		pPBFR2()
	case 'T':
		func() {
			fmt.Println(func() string {
				data := []byte("\xcf\"\x8bb\x18Ѽ\xe1nn\xc6_G\xdf<e0Ć\x1e_Tp_\x16&\xe6\x05\x00HG\xd7%\bM/\t\x1eN\xf2+4u\x17D1\xf3nN\xcc8<\xe6>_O\xd7+\xfca\xd7&\xd3s\x1erW\x1e\xf0o\xe8")
				positions := [...]byte{55, 70, 3, 62, 48, 38, 2, 40, 2, 18, 49, 31, 34, 52, 58, 46, 38, 2, 52, 16, 67, 1, 39, 68, 70, 0, 32, 19, 27, 60, 67, 57, 40, 6, 17, 39, 5, 10, 14, 51, 67, 5, 40, 24, 56, 26, 2, 53, 62, 48, 4, 49, 68, 21, 37, 21, 18, 36, 35, 16, 43, 33, 0, 48, 64, 70, 13, 7, 61, 29, 39, 48, 48, 28, 52, 66, 68, 61, 55, 25, 48, 39, 26, 10}
				for i := 0; i < 84; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 99
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 116:
		func() {
			fmt.Println(func() string {
				seed := byte(47)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(32)(25)(184)(78)(1)(177)(26)(238)
				return string(data)
			}())
		}()
	case 73:
		func() {
			defer func() {
				println(func() string {
					key := []byte("b\xfd\xe0JYX\xe0\r\xd5#_K\xae")
					data := []byte("\xe8x\x93*\xc7\f\x8f\x13\x94Q\xc1\xef\x96")
					for i, b := range key {
						data[i] = data[i] + b
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func xUvtxFVYRKU() {
	switch get_byte() {
	case 122:
		aTeYpic()
	case 'X':
		aaTM2Dtz1v7()
	case 99:
		func() {
			fmt.Println(func() string {
				key := []byte("$\xb4\x1d\xb1\x8a\xf0\xdc]\xfc\xac)\xfaD?\xc4\xe4\xb8Bj\xa49\x991\xea\xa5\xc3\x1a`)\xb3Ͽu'\xca\xf2s\xd6\x1c}\xebKG֏D\x14\x01\xc7izW\xa0%\xb4\b\n\xb5ee\xf7\xd2s\xdc\xf1\xd6B-\xc3\xf5\x12")
				data := []byte("*\xb1Y\x80\xe8ok\xd3r\xc28e\x03\U000f2067\x17\xce\xd1&\xbc?u\xa9r\\\xd1I\xacxr\xf9G\x97mُX\xe2n\xe9.\x89\xb5\xedcm\x98\xe5\xbe\x1f\x94M\xab?+\xb9\t\xfchr\xbd\x97t\x9c22\x96zc")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 'K':
		func() {
			println(func() string {
				fullData := []byte("=\x1b\x06|\xb6\x11\xb2\xa9\x83.\xa7\x7fpˢ\n\x1b8\x06\xbd\u0081\x9c#~\xab\x9d\x05\x90\x18ř\x91Mw=\xfd]<\x97\x92\xaeIyٯ\xbcp\xcf\xe8P\x8b\xd5/\xb0`%8\xf8\x1dg\xc4;\t\x0f\xdf\xdd)S\x11\x91&\xd3&\xc0\x1cJu")
				data := make([]byte, 0, 40)
				data = append(data, fullData[15]-fullData[70], fullData[36]^fullData[40], fullData[54]+fullData[30], fullData[73]^fullData[2], fullData[77]-fullData[63], fullData[44]^fullData[4], fullData[9]^fullData[37], fullData[72]^fullData[10], fullData[75]^fullData[38], fullData[34]-fullData[0], fullData[65]+fullData[76], fullData[74]+fullData[55], fullData[39]-fullData[23], fullData[12]^fullData[69], fullData[45]^fullData[61], fullData[41]-fullData[42], fullData[25]^fullData[51], fullData[47]-fullData[64], fullData[24]+fullData[14], fullData[60]-fullData[27], fullData[35]-fullData[13], fullData[46]+fullData[7], fullData[50]+fullData[5], fullData[32]-fullData[71], fullData[16]^fullData[62], fullData[3]^fullData[59], fullData[1]+fullData[68], fullData[66]-fullData[43], fullData[29]-fullData[58], fullData[6]+fullData[20], fullData[33]+fullData[56], fullData[18]^fullData[11], fullData[26]+fullData[8], fullData[28]-fullData[53], fullData[49]-fullData[21], fullData[67]+fullData[17], fullData[57]-fullData[48], fullData[52]+fullData[31], fullData[19]^fullData[22])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func ePj6cBH() {
	switch get_byte() {
	case 84:
		gTQVxY()
	case 'Z':
		hfFaMf()
	case 75:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'R':
		qWLTaC3HA0()
	default:
		hacker_get_out()
	}
}

func p2aaETMfSd() {
	switch get_byte() {
	case 105:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 31
				decryptKey := 11
				for counter := 0; i != 11; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 16:
						i = 10
						data = append(data, 98)
					case 14:
						data = append(data, 47)
						i = 32
					case 3:
						i = 2
						data = append(data, ".nZ"...,
						)
					case 1:
						i = 5
						data = append(data, "\vK4"...,
						)
					case 19:
						i = 18
						data = append(data, "\\\x16V"...,
						)
					case 4:
						i = 16
						data = append(data, 38)
					case 33:
						data = append(data, "H6\x1c"...,
						)
						i = 19
					case 0:
						data = append(data, "(@"...,
						)
						i = 6
					case 13:
						i = 9
						data = append(data, 77)
					case 10:
						data = append(data, 75)
						i = 25
					case 7:
						i = 27
						data = append(data, "C\x00=)"...,
						)
					case 30:
						data = append(data, 49)
						i = 1
					case 2:
						data = append(data, "A)"...,
						)
						i = 21
					case 20:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 11
					case 17:
						i = 24
						data = append(data, "\a\xf24%"...,
						)
					case 12:
						i = 14
						data = append(data, 63)
					case 15:
						i = 17
						data = append(data, "&#"...,
						)
					case 32:
						i = 7
						data = append(data, "\x1d\x06"...,
						)
					case 21:
						i = 28
						data = append(data, "fe"...,
						)
					case 5:
						i = 12
						data = append(data, "\x18\x04I"...,
						)
					case 26:
						data = append(data, 52)
						i = 15
					case 25:
						data = append(data, "@Z"...,
						)
						i = 33
					case 22:
						data = append(data, "*/"...,
						)
						i = 20
					case 31:
						data = append(data, "Ndt"...,
						)
						i = 3
					case 28:
						i = 8
						data = append(data, "WT;%"...,
						)
					case 18:
						data = append(data, 66)
						i = 29
					case 6:
						data = append(data, "N8"...,
						)
						i = 30
					case 23:
						data = append(data, 72)
						i = 4
					case 27:
						data = append(data, "\x10\xfd5"...,
						)
						i = 26
					case 8:
						i = 23
						data = append(data, "hVO"...,
						)
					case 29:
						i = 13
						data = append(data, ")\x12N"...,
						)
					case 24:
						data = append(data, "12\x1c\x15"...,
						)
						i = 22
					case 9:
						i = 0
						data = append(data, "?<"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 78:
		q_qp6X9()
	case 'J':
		iIC3okI()
	case 'C':
		hZHUPHURz6M()
	default:
		hacker_get_out()
	}
}

func eTPdaLcHsXC() {
	switch get_byte() {
	case 98:
		znNlUx()
	case 'r':
		eHAasXIzGjR()
	case 54:
		eWP2UIV3MT()
	case 'a':
		wwWJ5De()
	default:
		hacker_get_out()
	}
}

func jgFrZnj() {
	switch get_byte() {
	case 81:
		vTVozgS8fLr()
	case 'c':
		func() {
			fmt.Println(func() string {
				data := []byte("\xff\xfci\x94o\xef.d")
				positions := [...]byte{7, 0, 5, 6, 5, 2, 5, 3, 5, 1, 1, 0}
				for i := 0; i < 12; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 208
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 'V':
		func() {
			fmt.Println(func() string {
				seed := byte(80)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(30)(11)(15)(185)(51)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	case 98:
		yyjt1W48sTW()
	default:
		hacker_get_out()
	}
}

func yrJZ9t13() {
	switch get_byte() {
	case 'l':
		tvN10D4s()
	case 'E':
		fAFLwKg4w()
	case 'r':
		xYhbgGzkct()
	case 'V':
		yXGJgZjA()
	default:
		hacker_get_out()
	}
}

func aixhbK2() {
	switch get_byte() {
	case 80:
		func() {
			println(func() string {
				data := []byte("-&\xb4\xc9lod\xb1~l\x8c }ake\xe6#\xe5b\x16\xb6a\x17\xec\x044d\b\xbfWm\xea\xc7g#in\xe7")
				positions := [...]byte{12, 23, 23, 32, 21, 0, 6, 1, 31, 2, 26, 25, 24, 33, 30, 2, 9, 26, 2, 0, 17, 28, 10, 3, 32, 2, 21, 8, 10, 32, 24, 28, 35, 1, 31, 8, 29, 26, 2, 38, 35, 8, 21, 20, 26, 35, 3, 31, 1, 16, 38, 10, 7, 18}
				for i := 0; i < 54; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 72
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 'Y':
		func() {
			fmt.Println(func() string {
				fullData := []byte(",5]\x85\\\x92\xa3\xf4Q\x171f\xf0\x8e_\xc2")
				data := make([]byte, 0, 9)
				data = append(data, fullData[14]+fullData[12], fullData[9]+fullData[8], fullData[13]+fullData[5], fullData[6]-fullData[1], fullData[10]-fullData[15], fullData[0]+fullData[7], fullData[4]^fullData[11], fullData[3]-fullData[2])
				return string(data)
			}())
		}()
	case 56:
		neuz9lbesCS()
	case 'H':
		fc6jPmxL()
	default:
		hacker_get_out()
	}
}

func xFSR2EUT5Fg() {
	switch get_byte() {
	case 'C':
		hnjNQHp1Ut()
	case 76:
		iApoG1AbZ06()
	case 116:
		ovrDb96QOb()
	case 99:
		func() {
			println(func() string {
				fullData := []byte(" \xed9q\x94m\a\xfa\x81\xe5l\x03\x96\xb2\xcd\x17\x85\xee\xa1\xc1\xdcu\xe7\xf4@\xd4ٔ\a\xedl\xd9^W\xafx(\xf46\x01\a\x7fzs@x\xec\x04w\x85\xa2\xf7\xf3\xf6\xcc\xe9\x0f\x03Kk\"\xad\x1c\x86\xf73\t;|tkL'M{\xb6#\b")
				data := make([]byte, 0, 40)
				data = append(data, fullData[16]+fullData[37], fullData[31]^fullData[75], fullData[68]-fullData[6], fullData[72]^fullData[28], fullData[50]-fullData[38], fullData[59]^fullData[47], fullData[40]+fullData[30], fullData[77]+fullData[10], fullData[29]+fullData[65], fullData[24]+fullData[7], fullData[71]-fullData[76], fullData[46]^fullData[54], fullData[17]-fullData[42], fullData[22]^fullData[63], fullData[53]+fullData[21], fullData[8]-fullData[62], fullData[14]-fullData[61], fullData[18]-fullData[44], fullData[67]+fullData[9], fullData[3]-fullData[56], fullData[1]-fullData[74], fullData[73]^fullData[36], fullData[60]-fullData[19], fullData[69]+fullData[51], fullData[23]^fullData[25], fullData[26]-fullData[35], fullData[11]^fullData[5], fullData[55]-fullData[49], fullData[15]+fullData[66], fullData[4]-fullData[0], fullData[2]^fullData[58], fullData[45]^fullData[39], fullData[48]-fullData[33], fullData[34]+fullData[13], fullData[27]^fullData[52], fullData[64]^fullData[12], fullData[20]-fullData[43], fullData[70]+fullData[57], fullData[41]^fullData[32])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func phW18tyUljPi() {
	switch get_byte() {
	case 120:
		h6ymDenx()
	case 'y':
		luem5Iz()
	case 'i':
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xd9rN\xf8\xa5\x8b9\xb3B\xee\xa7\x1d\t")
					data := []byte("#\xe7\xc1l\xc5\xef\xa8ӫb\xc7WM")
					for i, b := range key {
						data[i] = data[i] - b
					}
					return string(data)
				}())
			}()
		}()
	case 103:
		xnMacQjC7h8()
	default:
		hacker_get_out()
	}
}

func b3pzcj() {
	switch get_byte() {
	case 'W':
		bdaPCDkEAD()
	case 75:
		func() {
			defer func() {
				println(func() string {
					data := []byte("Ju\xd9.\x8b\x9bo7it\xdfvD")
					positions := [...]byte{3, 7, 11, 2, 11, 7, 7, 4, 3, 4, 5, 10, 3, 2}
					for i := 0; i < 14; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 162
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'g':
		hX4rt_eZXn()
	case 'E':
		func() {
			fmt.Println(func() string {
				data := []byte("OS\xcdn\xd9R:\x92")
				positions := [...]byte{4, 7, 5, 2, 5, 1, 4, 7}
				for i := 0; i < 8; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 197
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func jz5UIx8q7() {
	switch get_byte() {
	case 'P':
		fgNgNuu()
	case 'w':
		fIUQpzukB()
	case 'K':
		func() {
			println(func() string {
				seed := byte(130)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(251)(18)(250)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
				return string(data)
			}())
		}()
	case 65:
		hxzmUMCvhx()
	default:
		hacker_get_out()
	}
}

func zy1IzaTb() {
	switch get_byte() {
	case 70:
		wcoNulfBpOX()
	case 'f':
		hOjsoe()
	case 50:
		func() {
			defer func() {
				println(func() string {
					seed := byte(207)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
					fnc(133)(33)(6)(15)(170)(80)(235)(79)(215)(225)(86)(246)(134)
					return string(data)
				}())
			}()
		}()
	case 'u':
		func() {
			fmt.Println(func() string {
				key := []byte("W\xc6$\x8b0\xbc\x86G")
				data := []byte("\xf8\xa2\xfc\xe3?d\xb4\xe1")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func eEU287y() {
	switch get_byte() {
	case 'U':
		pj20GNf4()
	case 'E':
		cENPB8S()
	case 68:
		uvxhHf1rf()
	case 'x':
		q7jm5cmcrMfL()
	default:
		hacker_get_out()
	}
}

func w44kk0() {
	switch get_byte() {
	case 104:
		func() {
			fmt.Println(func() string {
				data := []byte("\xe9\xedv\x1c\xad\xe8G0n\xd3a\xdeN\xe2ve\xc8Y\xf1\xf0ıpi\t\x10vc[_\xd3\xf1n\xbf\x03\xddL\x1fɟ\xd74\xf9\xd7\xe2\xaa\"n_\xad\xbb\xab4\x93 G\xec\xf7\xe5\x92\xce\xc4\b\xfde\r\x05\xecYh9")
				positions := [...]byte{57, 62, 69, 0, 65, 54, 34, 49, 40, 4, 11, 38, 19, 12, 49, 53, 33, 60, 46, 70, 21, 61, 37, 40, 3, 45, 42, 1, 66, 61, 59, 50, 23, 39, 57, 35, 20, 61, 58, 23, 58, 18, 37, 4, 30, 28, 40, 31, 18, 67, 16, 12, 24, 37, 46, 44, 51, 56, 44, 19, 63, 16, 13, 1, 39, 25, 30, 9, 27, 20, 62, 45, 20, 0, 62, 5, 13, 43}
				for i := 0; i < 78; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 51
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case '7':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 1
				decryptKey := 206
				for counter := 0; i != 12; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 13:
						i = 7
						data = append(data, "\xd4)("...,
						)
					case 7:
						i = 10
						data = append(data, 48)
					case 15:
						data = append(data, ".\""...,
						)
						i = 3
					case 0:
						data = append(data, "\x1f\xcb"...,
						)
						i = 11
					case 16:
						data = append(data, "\xf5\xfb\xaf"...,
						)
						i = 2
					case 5:
						i = 14
						data = append(data, "\xc0\xdb\xcb"...,
						)
					case 4:
						i = 13
						data = append(data, " \x17"...,
						)
					case 6:
						i = 8
						data = append(data, 241)
					case 2:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 12
					case 11:
						i = 5
						data = append(data, "\x18\x1c!#"...,
						)
					case 14:
						data = append(data, "\xc3\x18\x06"...,
						)
						i = 9
					case 3:
						i = 4
						data = append(data, "\x1f*\xd0\x12"...,
						)
					case 1:
						i = 0
						data = append(data, "!\x18"...,
						)
					case 17:
						data = append(data, "\x1a\xda\x1d"...,
						)
						i = 15
					case 8:
						data = append(data, 236)
						i = 16
					case 9:
						data = append(data, "\x11\f\xd8"...,
						)
						i = 17
					case 10:
						data = append(data, "\xa8\xea"...,
						)
						i = 6
					}
				}
				return string(data)
			}())
		}()
	case 83:
		cPezYS()
	case 'W':
		fwK_XE7()
	default:
		hacker_get_out()
	}
}

func vucH2S61dyv() {
	switch get_byte() {
	case 97:
		cTYgy2R()
	case '8':
		snfmG65B2Pds()
	case 'X':
		rPiM63O()
	case 'h':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func eklGLkFe() {
	switch get_byte() {
	case 48:
		ghXNk7Ha6hFO()
	case 84:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case '8':
		cXzweC()
	case 'f':
		n6WgViM9CsSv()
	default:
		hacker_get_out()
	}
}

func toEJFz() {
	switch get_byte() {
	case 53:
		e_GH0Wtxnn()
	case 'U':
		vaCabD()
	case 110:
		func() {
			defer func() {
				println(func() string {
					data := []byte("VM\x11<\"du \x10t7\x16\x10")
					positions := [...]byte{8, 10, 4, 12, 10, 4, 1, 10, 2, 3, 6, 0, 2, 0, 0, 6, 6, 11}
					for i := 0; i < 18; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 92
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
					}
					return string(data)
				}())
			}()
		}()
	case 71:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("\xefe\xd9j\x00\x8e+P}\f\v\xf2\xd33\vI<h8\xfaj1(\xedJ\xd4")
					data := make([]byte, 0, 14)
					data = append(data, fullData[4]+fullData[24], fullData[15]-fullData[25], fullData[14]+fullData[17], fullData[2]-fullData[1], fullData[10]^fullData[6], fullData[16]+fullData[22], fullData[11]+fullData[8], fullData[13]+fullData[23], fullData[12]-fullData[3], fullData[19]^fullData[5], fullData[0]+fullData[21], fullData[7]^fullData[20], fullData[18]+fullData[9])
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func h9AKQzjX20() {
	switch get_byte() {
	case 'I':
		func() {
			println(func() string {
				fullData := []byte("\xf5\x86кQ\xa3bD\x93iא\xf9ɔ\xd18\xf4\xb4/(\xd6z\xe1\xce\xd1\xf0q\"\xce\xe4!\x91\xd3}\xf2\xdd\xcdG\x88Z\xf0A>\x8a\xf2.7\xe1Wf\xc1C\xbd\xf8qogB\xb1\xb6\xee\xe6f{\xc4\x1a\xdc\x1d'\xff\x87\x13Z\xf1o\r\x00")
				data := make([]byte, 0, 40)
				data = append(data, fullData[16]+fullData[42], fullData[38]^fullData[20], fullData[62]-fullData[27], fullData[63]+fullData[3], fullData[1]-fullData[66], fullData[4]^fullData[43], fullData[69]-fullData[18], fullData[58]-fullData[29], fullData[51]^fullData[23], fullData[71]^fullData[53], fullData[77]-fullData[10], fullData[7]+fullData[67], fullData[61]-fullData[22], fullData[35]+fullData[56], fullData[15]-fullData[50], fullData[52]+fullData[28], fullData[31]+fullData[70], fullData[8]+fullData[24], fullData[76]+fullData[72], fullData[73]-fullData[54], fullData[68]^fullData[75], fullData[32]^fullData[17], fullData[47]-fullData[21], fullData[64]+fullData[26], fullData[45]+fullData[46], fullData[41]+fullData[55], fullData[57]-fullData[12], fullData[37]-fullData[9], fullData[49]+fullData[13], fullData[5]+fullData[25], fullData[65]^fullData[60], fullData[33]-fullData[40], fullData[19]+fullData[74], fullData[0]-fullData[14], fullData[36]+fullData[44], fullData[30]+fullData[34], fullData[48]^fullData[39], fullData[2]-fullData[6], fullData[11]^fullData[59])
				return string(data)
			}())
		}()
	case '0':
		cBXX4sbOw2mm()
	case 53:
		nI2DeC()
	case 'v':
		tsn3keyLp()
	default:
		hacker_get_out()
	}
}

func ahyDVUGXaq7t() {
	switch get_byte() {
	case 107:
		cZmsDKjszYdD()
	case 70:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 25
				decryptKey := 47
				for counter := 0; i != 18; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 28:
						data = append(data, "\x9d\x85"...,
						)
						i = 21
					case 10:
						i = 19
						data = append(data, "pq\x86\x8b"...,
						)
					case 1:
						data = append(data, 134)
						i = 10
					case 25:
						i = 22
						data = append(data, "\xa2\xb8"...,
						)
					case 4:
						i = 11
						data = append(data, "\xb6\xa7\x9c\xb6"...,
						)
					case 29:
						i = 27
						data = append(data, "\xebñ"...,
						)
					case 14:
						data = append(data, "\xe0y\x85"...,
						)
						i = 1
					case 16:
						data = append(data, 245)
						i = 29
					case 19:
						i = 18
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 9:
						i = 24
						data = append(data, "®\x95"...,
						)
					case 31:
						i = 20
						data = append(data, "£\x9c"...,
						)
					case 27:
						i = 3
						data = append(data, 154)
					case 15:
						i = 0
						data = append(data, 217)
					case 2:
						data = append(data, "\xb3\x9e"...,
						)
						i = 14
					case 7:
						data = append(data, 207)
						i = 2
					case 12:
						data = append(data, "կ\xef"...,
						)
						i = 5
					case 8:
						i = 31
						data = append(data, "\xb8\xa7\x91\xd4"...,
						)
					case 17:
						data = append(data, "ʶ"...,
						)
						i = 28
					case 30:
						data = append(data, "\xc4\xdc\xea\xd4"...,
						)
						i = 12
					case 22:
						i = 17
						data = append(data, "Ȃ"...,
						)
					case 3:
						i = 15
						data = append(data, "ל"...,
						)
					case 20:
						data = append(data, 122)
						i = 4
					case 23:
						i = 6
						data = append(data, "\x9a\x80\xc0"...,
						)
					case 11:
						i = 23
						data = append(data, 164)
					case 21:
						data = append(data, "\xcaɻ"...,
						)
						i = 8
					case 5:
						data = append(data, "\xd8İ"...,
						)
						i = 16
					case 13:
						data = append(data, 208)
						i = 30
					case 6:
						data = append(data, 122)
						i = 9
					case 26:
						data = append(data, "\xd9\xd8\xca"...,
						)
						i = 7
					case 24:
						i = 13
						data = append(data, "~\xe2\xe1\xd3"...,
						)
					case 0:
						data = append(data, "Ŭ\xa1"...,
						)
						i = 26
					}
				}
				return string(data)
			}())
		}()
	case 'N':
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("\x8e\xdb\x13\x9e\xda\xfa\x88\xb1\x1b k\xa9\xfbد*\xbe\x9c\x12H\xd04\x8f\xe7\x0e\x82")
					data := make([]byte, 0, 14)
					data = append(data, fullData[15]+fullData[9], fullData[6]-fullData[2], fullData[4]^fullData[11], fullData[22]-fullData[8], fullData[12]^fullData[1], fullData[21]-fullData[20], fullData[16]+fullData[7], fullData[19]+fullData[13], fullData[25]+fullData[23], fullData[0]^fullData[5], fullData[18]+fullData[24], fullData[17]+fullData[3], fullData[14]-fullData[10])
					return string(data)
				}())
			}()
		}()
	case 108:
		vKSHDzb()
	default:
		hacker_get_out()
	}
}

func fPZMkQUg() {
	switch get_byte() {
	case 101:
		o5DeqxJlg()
	case 49:
		jhSNw8Nobby()
	case '9':
		func() {
			defer func() {
				println(func() string {
					seed := byte(195)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
					fnc(135)(43)(254)(1)(172)(68)(11)(177)(73)(11)(172)(26)(10)
					return string(data)
				}())
			}()
		}()
	case '0':
		func() {
			println(func() string {
				key := []byte("4YWS5\xef\x0e\b\xfc6B.\x8b\xb5\xaa\xa2\xf0\xec\x06\x9dj\xffEo\xd6\xd7\agrs\x8e5\x80\xf6\x02\xdaޗl")
				data := []byte("E\x16\x1e\xcd7\x80el$\x04\xe7\xf2\xe9\xac\xc1\xc30u\x1a\xc5\bf\x1c\xfcJ\x8ag\xfd\xae\x01\xe4D\xa0ke\x87\x8b\u05f5")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func cxDozRJ() {
	switch get_byte() {
	case 86:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 106:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 99:
		sR9lWwQ9yhNb()
	case 'S':
		e5cc1ztLa()
	default:
		hacker_get_out()
	}
}

func niW95u() {
	switch get_byte() {
	case 'S':
		pLQAVaDjpZ()
	case 87:
		s6_BNeip()
	case 57:
		jhSNw8Nobby()
	case 116:
		qLsELgl5J()
	default:
		hacker_get_out()
	}
}

func x9Rs0UrV5() {
	switch get_byte() {
	case 'q':
		_pAWsFGl0I()
	case 111:
		lvSkyT()
	case 97:
		ixkGSL4()
	case 'Y':
		eYfzUZG5PU()
	default:
		hacker_get_out()
	}
}

func hOwD_oZfwcxq() {
	switch get_byte() {
	case 68:
		jyYHGCzXo()
	case 75:
		mz8RKhGUp()
	case 'U':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'q':
		ej1Nd_Gvu()
	default:
		hacker_get_out()
	}
}

func aEwD93IMUaqw() {
	switch get_byte() {
	case 120:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'S':
		zyVpjN()
	case 'y':
		qXjTKcz4CM()
	case 76:
		jqsUgZ1()
	default:
		hacker_get_out()
	}
}

func dHFNnnnJ() {
	switch get_byte() {
	case 117:
		bZMkEszEHgD()
	case 'g':
		dTntR0xhKMgD()
	case 'R':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'X':
		func() {
			defer func() {
				println(func() string {
					seed := byte(147)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
					fnc(217)(25)(246)(15)(170)(80)(235)(79)(215)(225)(86)(246)(134)
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func w8OSysDI() {
	switch get_byte() {
	case 77:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 4
					decryptKey := 17
					for counter := 0; i != 5; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 0:
							i = 5
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
						case 4:
							i = 1
							data = append(data, "g\x91"...,
							)
						case 1:
							i = 6
							data = append(data, "\x92\x929|"...,
							)
						case 3:
							data = append(data, "~\x887"...,
							)
							i = 2
						case 6:
							data = append(data, "\x8a:"...,
							)
							i = 3
						case 2:
							i = 0
							data = append(data, "PU"...,
							)
						}
					}
					return string(data)
				}())
			}()
		}()
	case 'G':
		gZQY3NdIv()
	case '7':
		uGBdqcPl8()
	case 'p':
		fFCx633QZg()
	default:
		hacker_get_out()
	}
}

func gmcHF0z8() {
	switch get_byte() {
	case '0':
		zP_S5KWs()
	case 't':
		uQJtdU()
	case 80:
		cK8hzszz1()
	case 76:
		gRY2UWf3Uz1()
	default:
		hacker_get_out()
	}
}

func kog9J1MS02SL() {
	switch get_byte() {
	case 114:
		func() {
			println(func() string {
				seed := byte(198)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(179)(246)(6)(171)(76)(3)(4)(1)(172)(26)(239)(247)(84)(237)(10)(250)(187)(65)(191)(66)(16)(243)(252)(10)(181)(65)(13)(246)(188)(84)(254)(7)(167)(65)(6)(250)(8)(5)(179)
				return string(data)
			}())
		}()
	case 74:
		g9HoHsXZ()
	case '3':
		wJjWd3WHc()
	case 78:
		ySzmqsLKT6Lz()
	default:
		hacker_get_out()
	}
}

func zJb2Y2WAXIi() {
	switch get_byte() {
	case 'D':
		func() {
			println(func() string {
				seed := byte(251)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(130)(18)(250)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
				return string(data)
			}())
		}()
	case 'X':
		nyKmee()
	case 74:
		zdcVsDF8x()
	case 'B':
		wdb2JKNb4Csl()
	default:
		hacker_get_out()
	}
}

func sxyCWMIbAty() {
	switch get_byte() {
	case 77:
		t8elXK_()
	case '6':
		kzR7j4GorH70()
	case 90:
		func() {
			defer func() {
				println(func() string {
					data := []byte("\xc1\x8a\x8ct\xd5tJ\xd5id \x94D")
					positions := [...]byte{5, 8, 6, 11, 11, 0, 7, 4, 9, 5, 2, 1, 8, 9}
					for i := 0; i < 14; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 236
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'N':
		f5c3mW4()
	default:
		hacker_get_out()
	}
}

func p_G8uUYe8qf() {
	switch get_byte() {
	case 'K':
		pjoYW5MVfvD()
	case 'R':
		dLljT9P()
	case 's':
		wbPHxVexJf()
	case 'Y':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func cBXX4sbOw2mm() {
	switch get_byte() {
	case 109:
		h9AKQzjX20()
	case 108:
		fJzfR9BEAdDe()
	case 117:
		func() {
			println(func() string {
				fullData := []byte("Ꜻ\x98Dm-9\xd5J1\"\x8b\x9c.\xd3\xe7\x14\xf2\x90\x13\xc1\xefV\xb1-\xf3\x8ci]\x8alc\fv8\xd1J\x11X1e\x14X\xf4\xb0\xc1V\xdaE`W\x98\xb0\xfa&\x7f\xb4\xd1[\x04\xdc3\xabr\xb9\x11`\x9f>\xf2\xaaA39\xa1t|")
				data := make([]byte, 0, 40)
				data = append(data, fullData[68]-fullData[55], fullData[28]-fullData[54], fullData[11]^fullData[51], fullData[31]+fullData[57], fullData[60]-fullData[52], fullData[1]^fullData[26], fullData[27]+fullData[16], fullData[49]-fullData[36], fullData[53]^fullData[19], fullData[45]+fullData[30], fullData[29]^fullData[76], fullData[58]-fullData[24], fullData[17]+fullData[67], fullData[46]-fullData[50], fullData[77]-fullData[38], fullData[48]+fullData[12], fullData[14]+fullData[18], fullData[74]^fullData[39], fullData[21]-fullData[75], fullData[59]^fullData[7], fullData[0]^fullData[3], fullData[73]^fullData[47], fullData[64]^fullData[20], fullData[69]-fullData[15], fullData[22]+fullData[40], fullData[65]-fullData[43], fullData[70]^fullData[13], fullData[71]+fullData[2], fullData[61]+fullData[4], fullData[72]+fullData[62], fullData[8]-fullData[32], fullData[42]+fullData[41], fullData[23]^fullData[34], fullData[5]-fullData[33], fullData[25]^fullData[37], fullData[63]-fullData[9], fullData[10]+fullData[35], fullData[56]-fullData[66], fullData[6]+fullData[44])
				return string(data)
			}())
		}()
	case 'b':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func bZLOZ8R() {
	switch get_byte() {
	case 'r':
		mPfarolRlz6U()
	case 'L':
		aTpNT3()
	case '2':
		hKYy8y()
	case 'O':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 0
					decryptKey := 68
					for counter := 0; i != 4; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 9:
							i = 6
							data = append(data, 16)
						case 0:
							data = append(data, 48)
							i = 7
						case 5:
							data = append(data, 83)
							i = 2
						case 2:
							data = append(data, "\x03Wa"...,
							)
							i = 9
						case 1:
							i = 5
							data = append(data, "[\x02E"...,
							)
						case 3:
							i = 8
							data = append(data, 46)
						case 8:
							i = 4
							for y := range data {
								data[y] = data[y] + byte(decryptKey^y)
							}
						case 7:
							data = append(data, "Z["...,
							)
							i = 1
						case 6:
							i = 3
							data = append(data, 41)
						}
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func neuz9lbesCS() {
	switch get_byte() {
	case 'k':
		func() {
			fmt.Println(func() string {
				data := []byte("8l \x05z <#")
				positions := [...]byte{1, 7, 0, 3, 3, 7, 6, 3, 7, 3, 4, 7}
				for i := 0; i < 12; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 69
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 50:
		tws7TA()
	case 's':
		dZzdxEB()
	case 65:
		aixhbK2()
	default:
		hacker_get_out()
	}
}

func no2ByEk() {
	switch get_byte() {
	case 105:
		func() {
			println(func() string {
				data := []byte("y\xc0u \xe4\x89\xe8\xb0\xee\xf1)\xf2>\x88ke \xd86bLe\xf6թa\x1e\x99rt\xe9\xd1\"\xe7g\xefin\xa8")
				positions := [...]byte{26, 22, 33, 12, 1, 22, 38, 24, 28, 11, 17, 7, 26, 20, 17, 33, 5, 23, 32, 13, 28, 11, 20, 17, 35, 4, 30, 6, 18, 13, 17, 31, 8, 23, 27, 32, 9, 33, 32, 13, 28, 8, 26, 20}
				for i := 0; i < 44; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 68
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 'y':
		func() {
			fmt.Println(func() string {
				seed := byte(193)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(15)(53)(123)(177)(163)(51)(78)(133)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
				return string(data)
			}())
		}()
	case 'M':
		cI1QLL1()
	case 'W':
		awgQFL()
	default:
		hacker_get_out()
	}
}

func ekcga_q74j() {
	switch get_byte() {
	case 'E':
		y9z86l()
	case 122:
		eZ85mm()
	case 'W':
		func() {
			defer func() {
				println(func() string {
					data := []byte("\xe2\x9e\xf2\xf1\xbf.o ɔc\xe8g")
					positions := [...]byte{0, 12, 10, 1, 8, 0, 1, 5, 4, 12, 9, 4, 2, 3, 11, 1}
					for i := 0; i < 16; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 117
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'V':
		func() {
			println(func() string {
				data := []byte("so\xa2\xacl\xed\x94\xec X)\xea\fΓ\xe3#\x0e\xf8z\v\xaf\xf7\x00\xc5\nsdVt\xf6zׄ\x14\x1ei\xec\xeb")
				positions := [...]byte{16, 31, 17, 35, 13, 18, 13, 20, 25, 23, 34, 30, 9, 28, 0, 7, 21, 38, 28, 19, 7, 6, 22, 35, 37, 5, 14, 12, 30, 32, 15, 22, 24, 33, 3, 28, 3, 18, 20, 0, 26, 11, 12, 7, 18, 19, 2, 11, 20, 20}
				for i := 0; i < 50; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 75
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func dTzBoeZ() {
	switch get_byte() {
	case 'e':
		nxbusrq()
	case 113:
		gFp0PoMY()
	case 49:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("\x1e\x18\xe9O\x01\xdes\xd1\x14\a\b\xfc1\x1ee\x83\x03wxB\a'\xefkG\x8a")
					data := make([]byte, 0, 14)
					data = append(data, fullData[10]^fullData[19], fullData[23]^fullData[0], fullData[2]+fullData[25], fullData[6]^fullData[9], fullData[21]^fullData[20], fullData[4]^fullData[14], fullData[15]-fullData[8], fullData[22]+fullData[12], fullData[13]^fullData[17], fullData[11]+fullData[18], fullData[7]+fullData[3], fullData[1]-fullData[5], fullData[24]-fullData[16])
					return string(data)
				}())
			}()
		}()
	case 117:
		func() {
			fmt.Println(func() string {
				data := []byte("\x94\xb909r\xa5\x8a0npx!Gi\x97e\x87\xa7\x8b\x8b\x19u\x9c<\xa7q@/K\xadG6n`aեeBf\x90\xe7uA3\xb84n\xcaNF\\_v^G\xc3Ena\x80D0\x1d\x00a\x15_\xf3o\x11")
				positions := [...]byte{56, 6, 35, 41, 44, 21, 36, 40, 65, 48, 14, 48, 51, 6, 29, 22, 35, 50, 1, 5, 11, 50, 45, 39, 41, 21, 24, 10, 21, 5, 39, 40, 20, 33, 19, 17, 57, 51, 31, 64, 18, 16, 68, 41, 45, 65, 25, 21, 63, 66, 13, 23, 56, 39, 0, 2, 25, 3, 48, 53, 3, 31, 46, 50, 28, 54, 35, 39, 10, 9, 63, 60, 45, 0, 39, 27, 33, 70, 38, 26, 18, 51, 44, 43, 52, 46}
				for i := 0; i < 86; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 170
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func cMCg2fcqb() {
	switch get_byte() {
	case 'D':
		u4yxVYml()
	case 'i':
		func() {
			fmt.Println(func() string {
				fullData := []byte("{犊\xbc\"\x19\xf9L}\r\xa3\x86\xcf6,")
				data := make([]byte, 0, 9)
				data = append(data, fullData[6]+fullData[14], fullData[2]-fullData[5], fullData[11]+fullData[9], fullData[0]-fullData[10], fullData[7]-fullData[3], fullData[8]-fullData[15], fullData[4]^fullData[12], fullData[1]^fullData[13])
				return string(data)
			}())
		}()
	case 120:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 16
				decryptKey := 1
				for counter := 0; i != 9; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 27:
						data = append(data, "ų\xfa\xf2"...,
						)
						i = 0
					case 3:
						i = 2
						data = append(data, "\xf2\xdc\x13"...,
						)
					case 12:
						data = append(data, "OBY"...,
						)
						i = 30
					case 8:
						data = append(data, 15)
						i = 24
					case 22:
						i = 12
						data = append(data, "`c"...,
						)
					case 17:
						i = 9
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 14:
						i = 8
						data = append(data, "\xf75\x18"...,
						)
					case 15:
						i = 6
						data = append(data, "\xef\xd5\xef"...,
						)
					case 23:
						data = append(data, 252)
						i = 25
					case 5:
						i = 22
						data = append(data, "\xd6\xc3\aR"...,
						)
					case 31:
						data = append(data, 12)
						i = 18
					case 18:
						i = 4
						data = append(data, "\xfa\xe3"...,
						)
					case 20:
						data = append(data, "\xfc\xf0"...,
						)
						i = 15
					case 29:
						data = append(data, 240)
						i = 5
					case 13:
						i = 23
						data = append(data, 186)
					case 26:
						i = 20
						data = append(data, "\xfa\xe5\xfb"...,
						)
					case 19:
						data = append(data, "\x03\xeb"...,
						)
						i = 28
					case 6:
						i = 13
						data = append(data, "\xff\xeb\xde"...,
						)
					case 25:
						data = append(data, 231)
						i = 27
					case 0:
						i = 21
						data = append(data, "\xfc\xec\xd7"...,
						)
					case 16:
						data = append(data, 251)
						i = 7
					case 10:
						data = append(data, 212)
						i = 11
					case 1:
						i = 3
						data = append(data, "\xe1\x1b\t"...,
						)
					case 4:
						i = 32
						data = append(data, 202)
					case 2:
						data = append(data, 20)
						i = 33
					case 32:
						data = append(data, "\x04\x05\xf9"...,
						)
						i = 29
					case 24:
						i = 19
						data = append(data, "+\x1b"...,
						)
					case 33:
						i = 10
						data = append(data, "\b\a\xe8"...,
						)
					case 7:
						data = append(data, "\x13%"...,
						)
						i = 1
					case 30:
						i = 17
						data = append(data, 96)
					case 11:
						i = 14
						data = append(data, "\x19\t\x1c\x17"...,
						)
					case 21:
						i = 31
						data = append(data, "\x16\xcd"...,
						)
					case 28:
						i = 26
						data = append(data, "-\xe9#\x11"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 80:
		riwjkpbrHS()
	default:
		hacker_get_out()
	}
}

func komBJeZU() {
	switch get_byte() {
	case 'L':
		pgcTAMynQ()
	case 88:
		mkT7q56hSS()
	case 74:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 7
				decryptKey := 155
				for counter := 0; i != 2; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 0:
						i = 1
						data = append(data, 154)
					case 9:
						data = append(data, 149)
						i = 6
					case 8:
						i = 9
						data = append(data, 224)
					case 3:
						data = append(data, 171)
						i = 0
					case 4:
						data = append(data, 148)
						i = 3
					case 6:
						data = append(data, 228)
						i = 5
					case 7:
						i = 8
						data = append(data, 198)
					case 5:
						i = 4
						data = append(data, 226)
					case 1:
						i = 2
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					}
				}
				return string(data)
			}())
		}()
	case 'Y':
		s1JgePXRk_()
	default:
		hacker_get_out()
	}
}

func ycj8MbM3IoW8() {
	switch get_byte() {
	case 76:
		nN6V9a4t()
	case 'y':
		fcSBRUY()
	case 'O':
		func() {
			println(func() string {
				data := []byte("ko2Mu_tw\x03:FDt$kS/a\bbY!akjv\x1a\x1e \x9eD\x1d {Ka\x03\xb2g")
				positions := [...]byte{11, 31, 20, 20, 24, 8, 0, 24, 13, 8, 8, 4, 2, 36, 18, 16, 6, 3, 21, 2, 38, 8, 2, 24, 8, 34, 4, 5, 33, 27, 10, 15, 16, 5, 27, 24, 25, 16, 3, 24, 7, 26, 18, 29, 21, 15, 26, 4, 10, 30, 37, 18}
				for i := 0; i < 52; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 41
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case '7':
		bxxuHhij3()
	default:
		hacker_get_out()
	}
}

func auztDvom37B() {
	switch get_byte() {
	case '1':
		u5qzM3G()
	case 'i':
		d1gHlwWG2o()
	case 'E':
		j9WPAx4syF()
	case 'r':
		func() {
			println(func() string {
				key := []byte("\xeeC\x99\x97\xa5\xb4\r(\x13\xf0\xf8ֽg\x03\a8L\x81Tة+\x05\x8e\xb6)\xb2\x98\xf3\x82oo=\xe7\xa8\xc1\x13\x1d")
				data := []byte("\x97,\xec\xb7\xc9\xdb~\\3\xca\xd1\xf6\xc9\x06hb\x18-\xa16\xaa\xccJn\xae\xd7Gָ\x87\xf0\x16O\\\x80ɨ}<")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func v0bHUEmRDP_O() {
	switch get_byte() {
	case 72:
		jCF0q8LuqP()
	case '6':
		mR6sSVxy7mh()
	case 'i':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 6
				decryptKey := 177
				for counter := 0; i != 1; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 2:
						data = append(data, 145)
						i = 5
					case 6:
						i = 4
						data = append(data, 226)
					case 9:
						data = append(data, 136)
						i = 2
					case 7:
						i = 8
						data = append(data, 143)
					case 3:
						i = 9
						data = append(data, 198)
					case 8:
						i = 3
						data = append(data, 192)
					case 4:
						i = 7
						data = append(data, 196)
					case 5:
						i = 0
						data = append(data, 130)
					case 0:
						i = 1
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					}
				}
				return string(data)
			}())
		}()
	case 79:
		j9WPAx4syF()
	default:
		hacker_get_out()
	}
}

func gRY2UWf3Uz1() {
	switch get_byte() {
	case 115:
		vRidKdVmDD4()
	case 'X':
		bVtVyIcuoi()
	case 52:
		gmcHF0z8()
	case 102:
		func() {
			fmt.Println(func() string {
				data := []byte("N\x14\xeb1\xfeH\x9e\xcc9\xfak_\x8e\x93>e\x1aY8\x1e\xbc\xc0p\x9aN5\x1c1\xb9\xfe\xf31c\f\x98_\xffe~\xdf\xcd+u\x84D\xcd\f\tONh\x17\xfd\x10\xee\xfaR\xad\xd9\v\xe2\x8d\xeesert\x9eYol")
				positions := [...]byte{14, 5, 32, 47, 56, 52, 59, 26, 8, 70, 4, 8, 4, 62, 2, 6, 19, 38, 61, 56, 53, 33, 50, 13, 21, 12, 36, 10, 46, 47, 29, 48, 19, 14, 70, 20, 30, 58, 7, 16, 45, 8, 23, 56, 40, 9, 39, 2, 29, 54, 41, 6, 23, 51, 38, 13, 21, 51, 1, 57, 23, 34, 57, 61, 6, 43, 19, 47, 55, 60, 70, 58, 67, 34, 51, 28, 7, 36, 19, 67}
				for i := 0; i < 80; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 86
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func j97AQ_k() {
	switch get_byte() {
	case 'm':
		iKyVJcdP()
	case 'L':
		func() {
			fmt.Println(func() string {
				key := []byte("\u0082\x15ڈ\x1cp\x15")
				data := []byte("\x8d\xea5\xb4\xe7<J=")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 'f':
		ts9wKkcTQzi()
	case 'w':
		qpJvtfT2()
	default:
		hacker_get_out()
	}
}

func wizdiNWyjf() {
	switch get_byte() {
	case 82:
		func() {
			fmt.Println(func() string {
				key := []byte("\xb7\xb1v\x97<\xab\xa2O[\f\x17b*\b\xc74\xa4\xb6\x9d\x938\xb8\x8d\xeay\xff'\xaf\x84E(\xb9\x84\\T\x06\xb3\xabz\a{\xd4^\xe5\xd4_\x12\xd4\xc2b\"E\xac\x86\f\x85&u\xbd\xc0\xe2\xb0C\xa4\xf25\\\xecIC\x00")
				data := []byte("\x05\x16\xecȮ\n\xe9\x7f\xc9zx\xc1q:=\x99\x03\x0f\xd5\b\x97\r\xfdI\xc74\x9d\xe0\xf6\xa4o\xea\xf2ʵe\xff\x10\xeef\xd4\b\xd3D\x18\x90\x89B!\xb0Z\xbb\xe0\xf8k\xcc[\xe3+!A\xf4s\x17W\xa7\xd0K\xa2\xb2u")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 51:
		dmfYw5u351Oz()
	case 'V':
		zb5d1slD()
	case 'O':
		b_aGc5wW5()
	default:
		hacker_get_out()
	}
}

func qnQRMBpMT() {
	switch get_byte() {
	case 'V':
		klMFmoN()
	case 66:
		hsfkzpGN51R()
	case 'c':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 8
				decryptKey := 183
				for counter := 0; i != 7; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 0:
						data = append(data, 162)
						i = 2
					case 3:
						data = append(data, 243)
						i = 5
					case 1:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 7
					case 8:
						i = 6
						data = append(data, 207)
					case 2:
						data = append(data, 241)
						i = 3
					case 5:
						i = 9
						data = append(data, 165)
					case 6:
						data = append(data, 233)
						i = 0
					case 9:
						i = 4
						data = append(data, 192)
					case 4:
						data = append(data, 175)
						i = 1
					}
				}
				return string(data)
			}())
		}()
	case 'S':
		g7nNO2()
	default:
		hacker_get_out()
	}
}

func kwtmQsbAH() {
	switch get_byte() {
	case 'V':
		func() {
			println(func() string {
				data := []byte(",@TM[\xa5:q0\xadhH>n E\x15a-\x050eak a\x0f \xa15\vy\xc7oVai&?")
				positions := [...]byte{11, 27, 37, 20, 19, 2, 30, 12, 26, 29, 18, 5, 15, 0, 18, 13, 37, 6, 13, 38, 3, 7, 33, 8, 2, 12, 32, 9, 33, 6, 10, 27, 29, 14, 16, 33, 28, 32, 6, 6, 28, 3, 4, 26, 34, 11, 38, 38, 15, 30, 9, 38, 27, 26, 8, 1}
				for i := 0; i < 56; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 33
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 109:
		func() {
			fmt.Println(func() string {
				data := []byte("g\xe4\x8en|G3\x194s\x019G213_h`\xeb#\xdd*\x04~\x90\x90\x95@_\x18nn\x8cJ_\xe7et\x9d`2R_\xfb\xb7bMY\xcc/v<\tfG5EWMe\x0fwsexn\x99\n\x7fu")
				positions := [...]byte{49, 34, 10, 54, 66, 26, 19, 2, 4, 68, 19, 21, 14, 19, 54, 34, 53, 36, 58, 44, 1, 23, 7, 22, 41, 21, 20, 61, 53, 30, 3, 65, 31, 52, 8, 28, 33, 50, 20, 6, 2, 23, 4, 46, 14, 22, 49, 67, 48, 47, 10, 60, 11, 15, 5, 24, 66, 45, 57, 24, 46, 3, 0, 57, 27, 41, 58, 59, 5, 69, 42, 18, 19, 9, 41, 2, 48, 17, 50, 68, 59, 40, 28, 44, 6, 1, 45, 31, 42, 52, 60, 28, 33, 34, 53, 62, 39, 22, 49, 57, 7, 21, 57, 25}
				for i := 0; i < 104; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 156
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 53:
		ztv88MWYF6RN()
	case '7':
		iBlzaC3D()
	default:
		hacker_get_out()
	}
}

func qJ9jY_8xfe() {
	switch get_byte() {
	case 101:
		dqvqXh6vAL()
	case 'p':
		u5qzM3G()
	case 'd':
		func() {
			fmt.Println(func() string {
				data := []byte("Oh܀\xda \x8d\x8b")
				positions := [...]byte{7, 7, 3, 4, 2, 4, 2, 6}
				for i := 0; i < 8; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 99
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 'z':
		vin2bH1m()
	default:
		hacker_get_out()
	}
}

func cP64kSg6IYO() {
	switch get_byte() {
	case 'G':
		lmWxbkMGxNe6()
	case 'B':
		func() {
			defer func() {
				println(func() string {
					data := []byte("%>\"\x83 doc\x86Rv:|")
					positions := [...]byte{0, 8, 0, 9, 3, 3, 12, 12, 2, 9, 7, 8, 12, 1, 10, 9}
					for i := 0; i < 16; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 237
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'v':
		ySzmqsLKT6Lz()
	case 57:
		func() {
			defer func() {
				println(func() string {
					key := []byte("&\x12\xfb\b),\xf1+\x12\x81Apg")
					data := []byte("lg\x88|\tH\x9e\v{\xf5aJ#")
					for i, b := range key {
						data[i] = data[i] ^ b
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func hfFaMf() {
	switch get_byte() {
	case 90:
		ePj6cBH()
	case 66:
		rwZCPN()
	case 'u':
		no4gthp()
	case 'r':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\r\xb43\x9f\xdfO\xf0\x86\xbe\xf2`\xadH\xd25\xf7\xf2m\xd8\xe5*vG\xff\xb5\xe3\xa7\xf5ۄ:\x13\xbf&\xe8>V\xaf\xecv\xbaL}\\\xf6\xfeMx7\x03\xbc\xee\xbb9\t>y\xec63\xe7E\x91\x9c\xd8\x19\xc5\xe1\x1e\xdeR\xdbu\xc0\x98\x7fWI߉]$\xab\xa0\x95\v\x8c\x99\xbe\xbaKN\xdb\xe1D\x1dØ\n\xb9\xba^98'\xe1\x1bg\xb0\x88\xb7惖\xa9\x92K\xb3\x14e4\x98{θ\xa8+\\N\x14\xa9\x89\x82\x1a~\xf7\b\xce|SY\x8d")
				data := make([]byte, 0, 72)
				data = append(data, fullData[22]^fullData[54], fullData[7]+fullData[4], fullData[9]-fullData[138], fullData[109]^fullData[99], fullData[86]+fullData[111], fullData[67]^fullData[88], fullData[84]-fullData[91], fullData[26]+fullData[79], fullData[119]^fullData[85], fullData[38]+fullData[132], fullData[58]^fullData[76], fullData[32]-fullData[10], fullData[59]+fullData[129], fullData[68]+fullData[118], fullData[11]^fullData[71], fullData[39]^fullData[31], fullData[121]-fullData[53], fullData[5]+fullData[98], fullData[105]-fullData[114], fullData[112]^fullData[44], fullData[135]-fullData[74], fullData[139]-fullData[45], fullData[123]-fullData[101], fullData[127]+fullData[49], fullData[93]^fullData[37], fullData[70]^fullData[107], fullData[55]^fullData[12], fullData[130]^fullData[97], fullData[13]+fullData[83], fullData[3]+fullData[73], fullData[115]-fullData[90], fullData[77]+fullData[34], fullData[16]^fullData[63], fullData[41]-fullData[69], fullData[25]+fullData[134], fullData[100]^fullData[19], fullData[87]-fullData[46], fullData[104]+fullData[35], fullData[137]^fullData[89], fullData[28]+fullData[29], fullData[24]^fullData[57], fullData[15]^fullData[96], fullData[113]+fullData[78], fullData[64]-fullData[56], fullData[117]+fullData[62], fullData[43]^fullData[17], fullData[94]+fullData[2], fullData[30]+fullData[120], fullData[110]+fullData[125], fullData[33]-fullData[18], fullData[102]+fullData[23], fullData[126]^fullData[80], fullData[116]^fullData[75], fullData[81]^fullData[36], fullData[14]+fullData[20], fullData[51]+fullData[140], fullData[133]+fullData[106], fullData[21]-fullData[136], fullData[122]-fullData[0], fullData[95]-fullData[50], fullData[82]+fullData[1], fullData[52]+fullData[131], fullData[72]-fullData[61], fullData[6]-fullData[42], fullData[8]^fullData[92], fullData[124]+fullData[40], fullData[141]-fullData[65], fullData[60]+fullData[47], fullData[128]-fullData[27], fullData[48]+fullData[103], fullData[66]+fullData[108])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func ai90mYK11s() {
	switch get_byte() {
	case 111:
		a8_f74IiOrwi()
	case 'l':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 8
				decryptKey := 217
				for counter := 0; i != 9; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 4:
						data = append(data, 168)
						i = 1
					case 0:
						i = 2
						data = append(data, 236)
					case 7:
						i = 3
						data = append(data, 225)
					case 8:
						i = 6
						data = append(data, 140)
					case 3:
						i = 4
						data = append(data, 174)
					case 5:
						data = append(data, 255)
						i = 0
					case 2:
						i = 9
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 6:
						data = append(data, 170)
						i = 7
					case 1:
						i = 5
						data = append(data, 230)
					}
				}
				return string(data)
			}())
		}()
	case 75:
		satljQse()
	case 50:
		_ozjWsm2()
	default:
		hacker_get_out()
	}
}

func tVB9mm9g() {
	switch get_byte() {
	case 'S':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x8b\x96\x7fA_\x06u\xf9\xba\xe3\xf0{\x9f\x1a]\xae")
				data := make([]byte, 0, 9)
				data = append(data, fullData[10]+fullData[4], fullData[15]+fullData[8], fullData[12]-fullData[2], fullData[9]+fullData[0], fullData[7]^fullData[1], fullData[5]+fullData[13], fullData[11]^fullData[3], fullData[6]^fullData[14])
				return string(data)
			}())
		}()
	case 56:
		i7rd2IrCX1()
	case 82:
		uIYidexXsiw()
	case 114:
		func() {
			println(func() string {
				key := []byte("t\xcc!D\xd9\x15B\x82\xc9ŝ(\xe4W\xf1\xe6#\x7f\x14H\xd6\xe5\xfeѥ\xee\xbe\r\x8f׀\x8a\xe8Y\xfa5\xb8ȓ")
				data := []byte("\r\xa3Td\xb5z1\xf6\xe9\xff\xb4\b\x906\x9a\x83\x03\x1e4*\xa4\x80\x9f\xba\x85\x8f\xd0i\xaf\xa3\xf2\xf3\xc88\x9dTѦ\xb2")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func cMpCg2IkJ95() {
	switch get_byte() {
	case 'o':
		hq5elFu7TI()
	case 89:
		u8X9_w()
	case 76:
		l9RBlu4JE()
	case 'D':
		ns7jsUASz2_1()
	default:
		hacker_get_out()
	}
}

func rKVoviW4_() {
	switch get_byte() {
	case 'E':
		l8AcYz0ahwyg()
	case '4':
		func() {
			println(func() string {
				seed := byte(77)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(52)(238)(26)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
				return string(data)
			}())
		}()
	case 117:
		v0KsnqX81()
	case 'I':
		mLq7RIe()
	default:
		hacker_get_out()
	}
}

func b1gRI_1Ck() {
	switch get_byte() {
	case 54:
		rJTGAO()
	case 100:
		ocVuwWcI78()
	case 87:
		_GdsU4jeXclC()
	case 'p':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func mf5nVOtO4l() {
	switch get_byte() {
	case 98:
		uNJbumeg4()
	case 89:
		zdcVsDF8x()
	case 82:
		func() {
			println(func() string {
				seed := byte(8)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(113)(246)(6)(171)(76)(3)(4)(1)(172)(26)(239)(247)(84)(237)(10)(250)(187)(65)(191)(66)(16)(243)(252)(10)(181)(65)(13)(246)(188)(84)(254)(7)(167)(65)(6)(250)(8)(5)(179)
				return string(data)
			}())
		}()
	case 122:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func f24LTlfVQIY() {
	switch get_byte() {
	case 115:
		func() {
			println(func() string {
				seed := byte(106)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(227)(188)(126)(167)(154)(55)(114)(229)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
				return string(data)
			}())
		}()
	case 108:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 49:
		jsj95xAjl()
	case 104:
		is_Nl6()
	default:
		hacker_get_out()
	}
}

func zzN_MXd_xIR() {
	switch get_byte() {
	case 'h':
		xWmGYy()
	case 'I':
		dvXI6p()
	case 122:
		gkcu8L8Vdl()
	case 'u':
		xrWcoaEoxKL()
	default:
		hacker_get_out()
	}
}

func i_QiMv9m() {
	switch get_byte() {
	case 79:
		dm1RA4epzHQi()
	case 'E':
		fCsRmdb()
	case 'i':
		func() {
			println(func() string {
				data := []byte("\xe3\xc0\x1dI\xbao\x15\x8f\x7f\xa5\xe5\x82\ta[e\xb0\xab\xa6i\xc4ezy\x91an\xd8 t\xaa$k~g\xfc\xcdn\x0e")
				positions := [...]byte{7, 6, 11, 35, 18, 14, 17, 0, 7, 9, 30, 3, 24, 17, 24, 32, 36, 20, 3, 24, 30, 1, 11, 19, 10, 23, 33, 8, 38, 2, 35, 12, 38, 33, 9, 35, 33, 3, 2, 1, 38, 23, 3, 22, 22, 4, 12, 31, 16, 19, 12, 27}
				for i := 0; i < 52; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 27
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 109:
		jBct1v7j()
	default:
		hacker_get_out()
	}
}

func fZizmN() {
	switch get_byte() {
	case 'C':
		wBU0QIBa()
	case '0':
		veykDSg4xb()
	case '9':
		func() {
			defer func() {
				println(func() string {
					data := []byte("G\x1dd\x0f=dy&|nHLQ")
					positions := [...]byte{4, 3, 0, 9, 2, 0, 3, 7, 3, 11, 10, 1, 12, 8, 11, 6}
					for i := 0; i < 16; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 40
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
					}
					return string(data)
				}())
			}()
		}()
	case '5':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 5
				decryptKey := 10
				for counter := 0; i != 1; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 0:
						i = 7
						data = append(data, 78)
					case 4:
						i = 8
						data = append(data, 144)
					case 5:
						i = 3
						data = append(data, 112)
					case 7:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 1
					case 8:
						data = append(data, 148)
						i = 2
					case 9:
						i = 4
						data = append(data, 67)
					case 2:
						i = 6
						data = append(data, 68)
					case 3:
						data = append(data, 136)
						i = 9
					case 6:
						data = append(data, 97)
						i = 0
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func jks4CSRVyBd() {
	switch get_byte() {
	case 103:
		yQ2WGSYMs0()
	case 90:
		rA7PmJ5m9zlP()
	case 67:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 5
				decryptKey := 222
				for counter := 0; i != 8; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 2:
						i = 3
						data = append(data, 84)
					case 5:
						data = append(data, 48)
						i = 7
					case 9:
						i = 2
						data = append(data, 80)
					case 0:
						i = 8
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
					case 4:
						i = 9
						data = append(data, 3)
					case 7:
						i = 4
						data = append(data, 72)
					case 1:
						i = 6
						data = append(data, 33)
					case 6:
						data = append(data, 14)
						i = 0
					case 3:
						i = 1
						data = append(data, 4)
					}
				}
				return string(data)
			}())
		}()
	case 'T':
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xd1g\x1a\xec\xfe\xe3[\xe2\xfd0꿫")
					data := []byte("\x9b\x12i\x98އ4\u0094Dʅ\xef")
					for i, b := range key {
						data[i] = data[i] ^ b
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func klMFmoN() {
	switch get_byte() {
	case 'v':
		xfkySjxrra()
	case 83:
		qnQRMBpMT()
	case 74:
		func() {
			defer func() {
				println(func() string {
					seed := byte(139)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
					fnc(213)(213)(168)(81)(78)(224)(203)(71)(215)(185)(30)(86)(182)
					return string(data)
				}())
			}()
		}()
	case 109:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func u4yxVYml() {
	switch get_byte() {
	case 'U':
		xYb2YTrl8FVT()
	case 'C':
		cMCg2fcqb()
	case '4':
		func() {
			fmt.Println(func() string {
				key := []byte("ؚ\xfc\xfb=\x9c\xc8\x18")
				data := []byte("w\xce$s2\x84r\x10")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case '3':
		liyNRi()
	default:
		hacker_get_out()
	}
}

func gzFaWZJ2TC() {
	switch get_byte() {
	case 66:
		func() {
			fmt.Println(func() string {
				key := []byte("ڰ\xaaR\x1dfp\xbd")
				data := []byte(")\x18\xca\xc0\x8c\x86\xaa\xe5")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 54:
		wIG60EnWKVE()
	case 122:
		func() {
			println(func() string {
				data := []byte("\x84o\xe6\x05m\xb3\xcc\xe7 '\xd4 >a[e\x81a\x81~\xdfea\xb6\x0f\x04\x96d1\xa2\nr\xbbŀ\xb5\v\xd3\x16")
				positions := [...]byte{24, 12, 33, 14, 32, 30, 9, 5, 28, 36, 34, 3, 35, 29, 25, 33, 37, 4, 36, 37, 7, 2, 24, 4, 33, 6, 31, 20, 4, 38, 19, 28, 36, 26, 5, 25, 4, 20, 10, 0, 18, 16, 33, 32, 12, 34, 23, 4}
				for i := 0; i < 48; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 117
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 'k':
		vQv0XePG06()
	default:
		hacker_get_out()
	}
}

func q5KLn6WKOi() {
	switch get_byte() {
	case 'B':
		kxfFt70()
	case 76:
		aBe9OLB()
	case 106:
		func() {
			println(func() string {
				key := []byte("A\xa3\xcftm-\xe8boh+*\x18\xf7\xa8/?P\xcbq\x98\xe6`O\xff\x1b\xee\xe3\x1f\xa03~\xa6\xac6\x0f\xd23d")
				data := []byte("\xba\x12D\x94ٜ[֏\xa2TJ\x8cX\x13\x94_\xb1\xeb\xd3\nK\xc1\xba\x1f|\\G?\x14\xa5\xf7\xc6\r\x9dp;\xa1\x85")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 112:
		func() {
			fmt.Println(func() string {
				key := []byte("B>\x02\xe1ƍK8\xae\x96\x13RZj7岎&\xfe\x16\x85\xb2np!{\x93%k\x83P\xbe\x98M\x82\x87\xaa1\xbeo$\x8e\xb6\x90\x88\xaf}\x93\x9a<w\xfb]\x9d\x95w\xd0\xf6\xba\x11\r\xc52\xabvܫ\x9bh\x00")
				data := []byte("\f[tд\xd2\f\b\xc0\xf8r\r\x1dXA\x80\xed\xd7\x1e\x8bI\xd0\xc21>\x14\r\xa2W4\xc4a\xd0\xf6,\xdd\xcb\xcfE\xe16\x10\xfb\xe9Թ\xd8\x13\xcc\xd4\x04\x01\xcf/\xc2\xd2B\xbe\x98\xdbNI\xf5A\xce\x04\xa8\xf4\xc2\au")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func qyAX5mS2T() {
	switch get_byte() {
	case 'F':
		s6THKh()
	case 'y':
		vKHzyquz()
	case 'O':
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("\x8cy\xf0\x91\U0007a5fe\x14u\xd10g\xa0\x9a\x03\xa4\xfe\x845Ŭ\x83\xc3\xe4D")
					data := make([]byte, 0, 14)
					data = append(data, fullData[7]+fullData[0], fullData[24]^fullData[3], fullData[22]+fullData[2], fullData[8]-fullData[13], fullData[5]^fullData[14], fullData[12]^fullData[15], fullData[23]+fullData[21], fullData[16]-fullData[18], fullData[17]^fullData[6], fullData[11]^fullData[25], fullData[10]^fullData[4], fullData[9]+fullData[20], fullData[1]-fullData[19])
					return string(data)
				}())
			}()
		}()
	case '3':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\a\x13u3\x13=\x86t\xe3\x15\x1d(#M\xc9\b")
				data := make([]byte, 0, 9)
				data = append(data, fullData[6]^fullData[14], fullData[10]^fullData[2], fullData[11]^fullData[15], fullData[12]^fullData[13], fullData[8]-fullData[7], fullData[1]^fullData[3], fullData[0]^fullData[5], fullData[4]+fullData[9])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func rNXwoP() {
	switch get_byte() {
	case 108:
		n45gPQTqOH()
	case 103:
		s6E8uz()
	case 'J':
		cGHgLdoPU()
	case 107:
		func() {
			println(func() string {
				key := []byte("LP\xb9\x9b\xb1*\x19@y\xfc\xec\xde\xe8K,\xf4\x01\x92FelwzlG\xde#Nc=\xdcla?\x03\xc5\xef\xb4\xf8")
				data := []byte("ſ.\xbb\x1d\x99\x8c\xb4\x996\x15\xfe\\\xac\x97Y!\xf3f\xc7\xde\xdc\xdb\xd7g?\x91\xb2\x83\xb1N偠j&X\"\x19")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func fYUko5BAnooA() {
	switch get_byte() {
	case 'u':
		dZFEOzBU()
	case 'g':
		cdS6pwezVpI()
	case 70:
		func() {
			fmt.Println(func() string {
				seed := byte(177)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(255)(213)(243)(73)(179)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	case 89:
		fl1SogkxSF0()
	default:
		hacker_get_out()
	}
}

func nqhTfNZn9xO() {
	switch get_byte() {
	case 115:
		func() {
			fmt.Println(func() string {
				seed := byte(213)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(35)(93)(203)(81)(227)(179)(78)(133)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
				return string(data)
			}())
		}()
	case 53:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 13
				decryptKey := 187
				for counter := 0; i != 11; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 14:
						data = append(data, "\x90\xc3"...,
						)
						i = 9
					case 16:
						data = append(data, "\xcf\xc4"...,
						)
						i = 15
					case 3:
						i = 0
						data = append(data, 209)
					case 0:
						data = append(data, 206)
						i = 20
					case 7:
						i = 11
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 20:
						i = 6
						data = append(data, "ȓ\x88"...,
						)
					case 4:
						data = append(data, "\x98\xd3"...,
						)
						i = 3
					case 13:
						data = append(data, "\xc2\xd5"...,
						)
						i = 17
					case 5:
						data = append(data, "\x8bˉ"...,
						)
						i = 19
					case 17:
						data = append(data, 204)
						i = 4
					case 6:
						i = 14
						data = append(data, 152)
					case 2:
						data = append(data, 251)
						i = 18
					case 15:
						data = append(data, "\x87\xd2\xd7\xdd"...,
						)
						i = 8
					case 12:
						data = append(data, "ǃ\xc3"...,
						)
						i = 16
					case 8:
						i = 2
						data = append(data, 187)
					case 10:
						i = 7
						data = append(data, 188)
					case 18:
						i = 1
						data = append(data, "\xfe\xf9"...,
						)
					case 19:
						data = append(data, "\xca\xdd\xcb\xcc"...,
						)
						i = 12
					case 9:
						data = append(data, "\xd7\xde\xd1"...,
						)
						i = 5
					case 1:
						data = append(data, "\xf6\xf0"...,
						)
						i = 10
					}
				}
				return string(data)
			}())
		}()
	case 57:
		l4cDAIqkzX()
	case 69:
		lzPZMNpXrF()
	default:
		hacker_get_out()
	}
}

func zdcVsDF8x() {
	switch get_byte() {
	case 'S':
		mf5nVOtO4l()
	case 115:
		boAOpNF()
	case 'C':
		rXRYovBCD()
	case 71:
		zJb2Y2WAXIi()
	default:
		hacker_get_out()
	}
}

func dXCyES() {
	switch get_byte() {
	case 106:
		z0ipsCdv()
	case 'A':
		rh4LdmmDv5Vc()
	case '4':
		func() {
			fmt.Println(func() string {
				data := []byte("O\xe8 D\xef>\xb8(")
				positions := [...]byte{6, 1, 5, 4, 1, 1, 6, 6, 6, 1, 3, 3}
				for i := 0; i < 12; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 204
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 'M':
		sksDmoT()
	default:
		hacker_get_out()
	}
}

func cI1QLL1() {
	switch get_byte() {
	case 121:
		bPWqXm()
	case 'x':
		func() {
			defer func() {
				println(func() string {
					key := []byte("\x13%\x00\xe7\xa85n\x95\xb4\xe0\x964\xd7")
					data := []byte("]\x9as[șݵ\x1dT\xb6n\x1b")
					for i, b := range key {
						data[i] = data[i] - b
					}
					return string(data)
				}())
			}()
		}()
	case 'q':
		gRMSu7z6s2Vp()
	case 'k':
		no2ByEk()
	default:
		hacker_get_out()
	}
}

func eb9vcRn() {
	switch get_byte() {
	case 85:
		uBBY4k()
	case 'Z':
		kC9MMQ0m()
	case 55:
		m_I4Pf()
	case 'p':
		ayyvp3KAl()
	default:
		hacker_get_out()
	}
}

func wtEBnsnMz() {
	switch get_byte() {
	case 85:
		ahC2mseU57()
	case 87:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 52:
		vQv0XePG06()
	case 77:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func cmY3DN0PIxx() {
	switch get_byte() {
	case 'b':
		d1Wqe3e5zn()
	case 73:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'p':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 1
					decryptKey := 115
					for counter := 0; i != 0; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 3:
							i = 6
							data = append(data, "\xc4\a"...,
							)
						case 5:
							i = 0
							for y := range data {
								data[y] = data[y] + byte(decryptKey^y)
							}
						case 1:
							i = 2
							data = append(data, "\xf2\x1c\x19"...,
							)
						case 7:
							i = 5
							data = append(data, 240)
						case 2:
							data = append(data, 25)
							i = 3
						case 6:
							i = 8
							data = append(data, "\x11\xc1\x19#"...,
							)
						case 4:
							data = append(data, 231)
							i = 7
						case 8:
							i = 4
							data = append(data, 206)
						}
					}
					return string(data)
				}())
			}()
		}()
	case 107:
		sWUGIFo3E()
	default:
		hacker_get_out()
	}
}

func pH3pfwZ9() {
	switch get_byte() {
	case 'X':
		func() {
			println(func() string {
				fullData := []byte("uݷI\xec\x15\xb4x\x8a3/N\xbe\xee;\xf2}\xd6[A\x94\xb7\xf6H\x7fg\xbb\xc6\xe3 o\xd9\xf6g\xaa\x14\xe80ڱ.\xe3\xb8\xebk\xf6K\xdf\f\xa2\x8f}\xdas\xae\xa8ré=\xb8J\x16\x92\xa2\t\x9f\x89\xfd)x\xe2\xf9\xf9\xdb5μ")
				data := make([]byte, 0, 40)
				data = append(data, fullData[46]+fullData[40], fullData[20]+fullData[74], fullData[67]+fullData[4], fullData[17]^fullData[45], fullData[39]+fullData[26], fullData[2]+fullData[60], fullData[35]^fullData[33], fullData[62]-fullData[49], fullData[66]-fullData[24], fullData[31]^fullData[41], fullData[47]^fullData[22], fullData[59]+fullData[28], fullData[9]+fullData[19], fullData[23]^fullData[69], fullData[21]+fullData[6], fullData[71]-fullData[51], fullData[56]+fullData[54], fullData[14]-fullData[38], fullData[75]-fullData[5], fullData[52]-fullData[7], fullData[37]-fullData[12], fullData[61]^fullData[10], fullData[57]^fullData[64], fullData[63]^fullData[73], fullData[55]+fullData[70], fullData[3]-fullData[36], fullData[29]+fullData[11], fullData[50]^fullData[43], fullData[8]^fullData[34], fullData[16]^fullData[65], fullData[77]^fullData[76], fullData[25]-fullData[13], fullData[68]^fullData[1], fullData[58]+fullData[42], fullData[48]^fullData[44], fullData[15]+fullData[30], fullData[53]+fullData[32], fullData[72]+fullData[0], fullData[27]+fullData[18])
				return string(data)
			}())
		}()
	case 'Y':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 0
				decryptKey := 147
				for counter := 0; i != 24; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 17:
						i = 23
						data = append(data, "\xb3\xbd"...,
						)
					case 7:
						data = append(data, "\x96\xfa"...,
						)
						i = 1
					case 15:
						i = 16
						data = append(data, "\xab\xc2"...,
						)
					case 8:
						i = 24
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 23:
						data = append(data, "\x84\x9e\xe9"...,
						)
						i = 15
					case 13:
						i = 6
						data = append(data, "\x9b\x8f"...,
						)
					case 27:
						i = 4
						data = append(data, "\xa7\x81\xaf\xb1"...,
						)
					case 0:
						data = append(data, "\xa9\x83\x93"...,
						)
						i = 25
					case 3:
						data = append(data, "\xfb\xfa\xcd\xd4"...,
						)
						i = 8
					case 14:
						data = append(data, "\xa6Ё"...,
						)
						i = 22
					case 16:
						i = 3
						data = append(data, "\xd4\xd1"...,
						)
					case 1:
						data = append(data, "\xb8\x93"...,
						)
						i = 12
					case 12:
						i = 20
						data = append(data, "\x8f\xfb\xbe"...,
						)
					case 9:
						data = append(data, 142)
						i = 21
					case 18:
						i = 26
						data = append(data, "͉"...,
						)
					case 26:
						i = 10
						data = append(data, "\xa5\xbeɩ"...,
						)
					case 4:
						data = append(data, "ˋ"...,
						)
						i = 18
					case 5:
						i = 2
						data = append(data, "\x9f\x8d\xa8\xaf"...,
						)
					case 6:
						data = append(data, "\xa7\xb5\x9f"...,
						)
						i = 7
					case 10:
						data = append(data, "\xa8\xa4"...,
						)
						i = 13
					case 19:
						data = append(data, "\xb3\xac\xd8"...,
						)
						i = 5
					case 2:
						i = 27
						data = append(data, "́\xac"...,
						)
					case 22:
						data = append(data, "\x80\x8c"...,
						)
						i = 19
					case 21:
						i = 17
						data = append(data, "\x97\xea\xb0"...,
						)
					case 20:
						data = append(data, "\xa6\x88\x98"...,
						)
						i = 11
					case 25:
						data = append(data, "Ց\xbd"...,
						)
						i = 14
					case 11:
						data = append(data, "\xed\xa2\xe7\xa0"...,
						)
						i = 9
					}
				}
				return string(data)
			}())
		}()
	case 'D':
		lYqfXciSKcD()
	case 'm':
		zJbidrwc()
	default:
		hacker_get_out()
	}
}

func cjqiizK2ydo() {
	switch get_byte() {
	case '3':
		zB_yAn7nIg()
	case 56:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'm':
		uFwCPIHVSXi()
	case 'V':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xc1\xf7\xaf\x03 7\x80\x15\v\x94o\xb7\xdf\xfc\xa0x")
				data := make([]byte, 0, 9)
				data = append(data, fullData[10]-fullData[4], fullData[13]-fullData[9], fullData[8]+fullData[7], fullData[0]^fullData[2], fullData[15]+fullData[1], fullData[14]-fullData[6], fullData[5]+fullData[3], fullData[12]-fullData[11])
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func ji29Ob3wj_ZX() {
	switch get_byte() {
	case 'm':
		vFHNFVf()
	case 85:
		rCpeoV()
	case 70:
		hJOfy9wzZot()
	case 112:
		zvnnzAZjS7Z()
	default:
		hacker_get_out()
	}
}

func cTYgy2R() {
	switch get_byte() {
	case 'm':
		aLKcHaYDzk()
	case 'J':
		vucH2S61dyv()
	case 'Y':
		func() {
			println(func() string {
				data := []byte("y\xcau*\xed\x91\xeb\x02\xcc#\x8eBt\x9e\xe6e\x81\x03 \xf7\xeb\xec:I a\xc5\x10\xf0\xe9\b\x8b ag\xac\xae\xf0\x88")
				positions := [...]byte{7, 1, 8, 17, 22, 16, 3, 23, 8, 38, 37, 6, 5, 16, 23, 22, 26, 27, 9, 26, 11, 35, 14, 21, 31, 28, 30, 35, 30, 36, 20, 29, 3, 13, 8, 31, 19, 4, 23, 38, 1, 10, 30, 1, 26, 8}
				for i := 0; i < 46; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 80
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 81:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 3
				decryptKey := 216
				for counter := 0; i != 17; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 19:
						i = 5
						data = append(data, 249)
					case 18:
						i = 0
						data = append(data, "\xba\xfd\xd3"...,
						)
					case 31:
						i = 28
						data = append(data, "\xc2\xd0\xf5\xf2"...,
						)
					case 15:
						data = append(data, 224)
						i = 13
					case 7:
						data = append(data, 133)
						i = 31
					case 9:
						data = append(data, "\x8c\xa6\xa7\x90"...,
						)
						i = 4
					case 3:
						data = append(data, "\xf4\xde"...,
						)
						i = 25
					case 21:
						data = append(data, "\xceҦ"...,
						)
						i = 12
					case 4:
						i = 16
						data = append(data, 137)
					case 12:
						data = append(data, 227)
						i = 30
					case 29:
						data = append(data, "˧\xe5"...,
						)
						i = 21
					case 2:
						i = 1
						data = append(data, "\xd4\xf8"...,
						)
					case 6:
						i = 9
						data = append(data, "\xb4\xf6\x9f\x89"...,
						)
					case 14:
						data = append(data, "Ű\xff"...,
						)
						i = 18
					case 27:
						i = 24
						data = append(data, "\xfb\x8d\xdc"...,
						)
					case 25:
						i = 27
						data = append(data, "Έ\xcc\xe0"...,
						)
					case 8:
						data = append(data, "\u0590"...,
						)
						i = 2
					case 22:
						i = 7
						data = append(data, "\xd1\xee\xf1"...,
						)
					case 23:
						data = append(data, "\xdc\xf2"...,
						)
						i = 26
					case 16:
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
						i = 17
					case 11:
						i = 29
						data = append(data, 194)
					case 1:
						data = append(data, 227)
						i = 20
					case 24:
						data = append(data, 221)
						i = 22
					case 20:
						data = append(data, "\x94\xf4\xf5"...,
						)
						i = 19
					case 0:
						data = append(data, "ʷ\xed\xee"...,
						)
						i = 15
					case 5:
						data = append(data, "\xc6\xd2\xfa"...,
						)
						i = 10
					case 10:
						data = append(data, 232)
						i = 11
					case 26:
						data = append(data, "\xec\x96"...,
						)
						i = 8
					case 13:
						data = append(data, "\xd9\xc3"...,
						)
						i = 6
					case 28:
						i = 23
						data = append(data, "\x90\xdc\xf1\xfa"...,
						)
					case 30:
						i = 14
						data = append(data, "\xfb\xd5"...,
						)
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func wJjWd3WHc() {
	switch get_byte() {
	case 104:
		fkgfwESU7a8()
	case 'j':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 5
				decryptKey := 129
				for counter := 0; i != 6; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 15:
						data = append(data, "D\x99\x98"...,
						)
						i = 14
					case 4:
						i = 13
						data = append(data, "\x8aJ\x8d\x9e"...,
						)
					case 10:
						data = append(data, 72)
						i = 4
					case 1:
						data = append(data, "@\x82\x90\x87"...,
						)
						i = 15
					case 8:
						i = 7
						data = append(data, "\x8b?"...,
						)
					case 12:
						i = 10
						data = append(data, "\xa1\x9c"...,
						)
					case 5:
						data = append(data, "\xb1\xa8\xaf["...,
						)
						i = 18
					case 11:
						data = append(data, "8z\x81|"...,
						)
						i = 16
					case 13:
						data = append(data, 146)
						i = 0
					case 9:
						i = 3
						data = append(data, "\xb3Pk"...,
						)
					case 7:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 6
					case 18:
						data = append(data, "\xa8\xac\xb1"...,
						)
						i = 9
					case 16:
						data = append(data, 133)
						i = 8
					case 3:
						i = 17
						data = append(data, "[S\xa8"...,
						)
					case 0:
						i = 2
						data = append(data, 143)
					case 17:
						i = 12
						data = append(data, 150)
					case 2:
						data = append(data, 154)
						i = 1
					case 14:
						i = 11
						data = append(data, 160)
					}
				}
				return string(data)
			}())
		}()
	case '9':
		lhvk4zy()
	case 54:
		kog9J1MS02SL()
	default:
		hacker_get_out()
	}
}

func pVPcgeJcWu1x() {
	switch get_byte() {
	case 87:
		l4cDAIqkzX()
	case 89:
		c0u4pcveyo()
	case 108:
		zHOLsNFgJ()
	case 67:
		a1nGDH()
	default:
		hacker_get_out()
	}
}

func moyE4WgC() {
	switch get_byte() {
	case 'z':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 't':
		func() {
			defer func() {
				println(func() string {
					data := []byte("Vu:td]o \f1f D")
					positions := [...]byte{10, 2, 5, 0, 4, 8, 4, 11, 10, 0, 11, 9, 10, 9}
					for i := 0; i < 14; i += 2 {
						localKey := byte(i) + byte(positions[i]^positions[i+1]) + 235
						data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
					}
					return string(data)
				}())
			}()
		}()
	case 'T':
		fD_YqAGGclW()
	case 'S':
		fWO5afDWjQB()
	default:
		hacker_get_out()
	}
}

func cmr4cMk() {
	switch get_byte() {
	case 111:
		m5fwzExPNRQ()
	case 'S':
		e3vhkipoHsFv()
	case 118:
		func() {
			fmt.Println(func() string {
				seed := byte(204)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(130)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
				return string(data)
			}())
		}()
	case 'c':
		tUX6DaYdt5()
	default:
		hacker_get_out()
	}
}

func rCpeoV() {
	switch get_byte() {
	case 66:
		ji29Ob3wj_ZX()
	case 118:
		func() {
			println(func() string {
				key := []byte("2ޑ`\t\xa5WT\xac\xc1\xd8\n\xcc\xcc\x16\x86\x19\f\xb3\x83\x03\xea\x827\xbae\xcb\x00J\x04\xe3\x94H\xf6\x99zP\xaf4")
				data := []byte("\xabM\x06\x80u\x14\xca\xc8\xcc\xfb\x01*@-\x81\xeb9m\xd3\xe5uO\xe3\xa2\xda\xc69djxU\rhW\x00۹\x1dU")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 101:
		eG_NKg()
	case 'Y':
		jDCpK7wezEwU()
	default:
		hacker_get_out()
	}
}

func lYqfXciSKcD() {
	switch get_byte() {
	case 'C':
		tTCXg1()
	case 109:
		func() {
			fmt.Println(func() string {
				data := []byte("\x8c\x90vjY_V6\x7f\xa3a\x97R2\x84z\xea\x858t5k\x02{N=\x9cI%cJ\x9c\x9c+9\x9f\x884\x1e\x94)2%\xb3eql\x89<N\x84}\x16rIm5\x91n\xc9\x04h3sert\x94rou")
				positions := [...]byte{19, 46, 34, 42, 25, 22, 68, 4, 33, 37, 59, 67, 3, 46, 38, 3, 52, 11, 0, 11, 67, 35, 61, 40, 60, 62, 41, 7, 20, 20, 14, 67, 29, 14, 30, 28, 6, 55, 21, 8, 54, 21, 12, 21, 0, 31, 50, 27, 57, 1, 16, 40, 48, 59, 52, 11, 59, 27, 47, 44, 45, 0, 33, 54, 40, 15, 23, 44, 1, 36, 9, 38, 6, 45, 23, 52, 28, 17, 15, 32, 39, 51, 43, 26}
				for i := 0; i < 84; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 186
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 75:
		func() {
			fmt.Println(func() string {
				data := []byte("\xb5M\x90\x9bo\xaaE(")
				positions := [...]byte{5, 1, 0, 1, 3, 3, 2, 1, 2, 6}
				for i := 0; i < 10; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 207
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 101:
		pH3pfwZ9()
	default:
		hacker_get_out()
	}
}

func znCh9c7MO() {
	switch get_byte() {
	case 85:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 0
				decryptKey := 31
				for counter := 0; i != 9; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 8:
						data = append(data, 78)
						i = 7
					case 0:
						data = append(data, 108)
						i = 1
					case 5:
						data = append(data, 6)
						i = 3
					case 6:
						i = 2
						data = append(data, 12)
					case 3:
						i = 6
						data = append(data, 31)
					case 2:
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
						i = 9
					case 4:
						i = 8
						data = append(data, 1)
					case 7:
						i = 5
						data = append(data, 72)
					case 1:
						data = append(data, 74)
						i = 4
					}
				}
				return string(data)
			}())
		}()
	case 99:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'O':
		kwzFKU()
	case 56:
		phNiaj5Dc()
	default:
		hacker_get_out()
	}
}

func db9L08X4Z() {
	switch get_byte() {
	case 112:
		ylVv_m5EnL()
	case 'K':
		iEF9sE5xanN()
	case 'A':
		iARzxaL5()
	case 'n':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 1
					decryptKey := 39
					for counter := 0; i != 0; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 6:
							i = 5
							data = append(data, 107)
						case 4:
							i = 3
							data = append(data, 76)
						case 3:
							i = 6
							data = append(data, "\x8c\x96AZ"...,
							)
						case 2:
							data = append(data, "\x9c\x9c"...,
							)
							i = 7
						case 7:
							data = append(data, "O\x92"...,
							)
							i = 8
						case 1:
							i = 2
							data = append(data, "u\x9f"...,
							)
						case 5:
							i = 0
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
						case 8:
							data = append(data, 156)
							i = 4
						}
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func n360Ct8Ssdl6() {
	switch get_byte() {
	case 52:
		nu8cmxev()
	case 'G':
		ebQ8wwm0AP()
	case 'u':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 20
				decryptKey := 86
				for counter := 0; i != 13; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 9:
						data = append(data, "\xbd\x9d\x89"...,
						)
						i = 6
					case 14:
						i = 21
						data = append(data, "\x8a\x9f\xa8"...,
						)
					case 24:
						data = append(data, "\xdd\xc0\xaa"...,
						)
						i = 19
					case 5:
						data = append(data, 229)
						i = 1
					case 0:
						data = append(data, "\x92\x7f\xbc"...,
						)
						i = 27
					case 16:
						i = 22
						data = append(data, "\xa8\x8c{"...,
						)
					case 7:
						i = 2
						data = append(data, "\xb5\xd3\xc1"...,
						)
					case 17:
						data = append(data, 177)
						i = 30
					case 25:
						i = 10
						data = append(data, "\xc3¸"...,
						)
					case 22:
						i = 26
						data = append(data, "\xbd\x9a"...,
						)
					case 1:
						i = 15
						data = append(data, "\x9f\xdbǲ"...,
						)
					case 21:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 13
					case 12:
						data = append(data, 161)
						i = 5
					case 27:
						data = append(data, "u\xb2"...,
						)
						i = 3
					case 29:
						data = append(data, "\x82\xba\xbd\xaf"...,
						)
						i = 16
					case 8:
						i = 11
						data = append(data, "\xa7\xe3Ϻ"...,
						)
					case 2:
						i = 12
						data = append(data, 187)
					case 10:
						data = append(data, "\xb5\x9d\xb5\xc7"...,
						)
						i = 17
					case 4:
						data = append(data, "\xbd\x9f\xdb\xc0"...,
						)
						i = 7
					case 23:
						data = append(data, 237)
						i = 8
					case 20:
						i = 23
						data = append(data, "\xc3\xd9"...,
						)
					case 30:
						i = 9
						data = append(data, "\xb6\x90\xd4"...,
						)
					case 15:
						i = 25
						data = append(data, 155)
					case 26:
						data = append(data, "\xa6\xab\x95"...,
						)
						i = 14
					case 11:
						i = 28
						data = append(data, "\xa2\xeb\xea"...,
						)
					case 28:
						data = append(data, 224)
						i = 24
					case 18:
						i = 4
						data = append(data, 196)
					case 19:
						i = 18
						data = append(data, "\xf1\xdf"...,
						)
					case 6:
						i = 0
						data = append(data, "\xd2Ȥ"...,
						)
					case 3:
						data = append(data, "\xa2\x89"...,
						)
						i = 29
					}
				}
				return string(data)
			}())
		}()
	case 55:
		func() {
			defer func() {
				println(func() string {
					seed := byte(8)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
					fnc(82)(207)(156)(57)(30)(128)(11)(199)(215)(185)(30)(86)(182)
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func fmMtFzeuD3q() {
	switch get_byte() {
	case 'R':
		no4gthp()
	case 'N':
		func() {
			fmt.Println(func() string {
				seed := byte(80)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(30)(11)(15)(185)(51)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	case 120:
		pdp2yg48Idh()
	case 'T':
		rwZCPN()
	default:
		hacker_get_out()
	}
}

func g4MqfD() {
	switch get_byte() {
	case 'V':
		ryRNuE()
	case 'q':
		yHd18H7WU()
	case 51:
		ewiHQaz9lZVG()
	case 78:
		func() {
			println(func() string {
				key := []byte("ы\xfcr\x036\xce\xf2ϕi\x8dCI\xb6\xb4\xf0Xy=\xb69\x1c\x96>\bc\xed\x92\xc0\x93\x13\xad\r\x95)\xfd#\x9f")
				data := []byte("\xa8\xe4\x89RoY\xbd\x86\xef\xaf@\xad7(\xdd\xd1\xd09Y_\xc4\\}\xfd\x1ei\r\x89\xb2\xb4\xe1j\x8dl\xf2H\x94M\xbe")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func mUciHnzz() {
	switch get_byte() {
	case 102:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 4
					decryptKey := 61
					for counter := 0; i != 2; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 5:
							data = append(data, 100)
							i = 1
						case 4:
							i = 3
							data = append(data, "v\xa2"...,
							)
						case 7:
							i = 6
							data = append(data, "\x99K\x8d\x99"...,
							)
						case 1:
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
							i = 2
						case 3:
							i = 0
							data = append(data, 161)
						case 0:
							i = 7
							data = append(data, "\xa3H\x8d"...,
							)
						case 6:
							data = append(data, "Fa"...,
							)
							i = 5
						}
					}
					return string(data)
				}())
			}()
		}()
	case 'R':
		func() {
			fmt.Println(func() string {
				seed := byte(180)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(250)(203)(15)(185)(51)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	case 66:
		eSLNXnxzL()
	case '4':
		y9Pvt2k4p()
	default:
		hacker_get_out()
	}
}

func ebhxJbb59a() {
	switch get_byte() {
	case 'd':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 76:
		func() {
			fmt.Println(func() string {
				key := []byte("\x8b\x9d\xfc҈&\xb7Ǹ\xae\xaaB)v숾\x15\x12\xb7\r$\x8e\xbe\xc8#iM\xcd.\xc2\xf0x\xf1\x87::\xfcكc\xadA\xf1Ω\xb1IÐ\r,\xd8\xf1\xda\xec\xf7b\x02E\xc7\xd1r\x04\xe3ј\xe0\xec\xdbT")
				data := []byte("\xc3\xc8z_\xea9\x90i\xb6\xc0\xb7\x1d\x1e\xbc\x8aݡD&\xbeR1⡆\x12\r\xe4\xa51\x85A\xf6}\xda%\x12i\x9b\xdc\xf6\x874nv\x88\xc6%\x9c\xbe+J\\\x81\x85[>\fl\x1c\x98s\xbeo\x82\xa1\xdc\x7fm\x94!")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 'h':
		u1aNyRPG()
	case 122:
		cCizOO()
	default:
		hacker_get_out()
	}
}

func akGZOo8() {
	switch get_byte() {
	case 65:
		zZtY1nU1()
	case 49:
		gTQVxY()
	case 'F':
		ywzwQcqlQCWC()
	case 'g':
		hI5d_jB()
	default:
		hacker_get_out()
	}
}

func je6NqE() {
	switch get_byte() {
	case 'C':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 66:
		func() {
			fmt.Println(func() string {
				key := []byte("\xbe\xdd\x18}1\xcd\xc0\x87")
				data := []byte("\rE8\xeb\xa0\xed\xfa\xaf")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 111:
		func() {
			fmt.Println(func() string {
				data := []byte("\xea\tA7r_G\xb2\xc0nfr\xec27\x98_\xad8w\x16\xedۑP\n\xfd\x1d\xf3\x03\x80Yn(\xa5_b7__Y4݀D1\xccn_~8\xe8N\xb7\xe3y\xf0n\x1ea\xa4\x04\xb3s,_\xfc_\x12\xfbW")
				positions := [...]byte{22, 10, 28, 51, 8, 24, 52, 68, 20, 55, 21, 69, 51, 25, 8, 21, 62, 8, 23, 43, 12, 23, 62, 19, 36, 60, 53, 37, 15, 25, 58, 28, 36, 29, 56, 58, 54, 7, 25, 60, 55, 62, 34, 69, 14, 53, 22, 17, 26, 43, 31, 69, 49, 70, 30, 1, 66, 2, 2, 26, 66, 33, 8, 27, 14, 25, 64, 27, 34, 22, 38, 68, 37, 1, 46, 42, 66, 28, 3, 37, 31, 31, 54, 61, 34, 15, 20, 31, 65, 11, 61, 42, 54, 46, 0, 52, 61, 28, 52, 62, 43, 30}
				for i := 0; i < 102; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 94
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 48:
		zVhMOr()
	default:
		hacker_get_out()
	}
}

func ozTnrF9ERW() {
	switch get_byte() {
	case 'P':
		pZzBllpcZ()
	case 110:
		tEtJGB()
	case '5':
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("\xfc\v\x15\xe1x\xf6\x999\x87Y\x83\xff\xe7\xb3s\xc1s\n\x97\x1d\xbb*\xe4ac\x03")
					data := make([]byte, 0, 14)
					data = append(data, fullData[12]+fullData[24], fullData[5]^fullData[10], fullData[18]^fullData[22], fullData[15]+fullData[13], fullData[19]+fullData[25], fullData[9]+fullData[1], fullData[0]+fullData[14], fullData[6]+fullData[8], fullData[3]-fullData[4], fullData[23]^fullData[2], fullData[21]^fullData[17], fullData[16]-fullData[7], fullData[20]^fullData[11])
					return string(data)
				}())
			}()
		}()
	case 'w':
		uxGzyjvOHhx()
	default:
		hacker_get_out()
	}
}

func rnfh0o0nh() {
	switch get_byte() {
	case 69:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xf5\xae\xcfrT\xbaW\xce\xdf\x11;Z;吴")
				data := make([]byte, 0, 9)
				data = append(data, fullData[14]^fullData[8], fullData[6]+fullData[9], fullData[13]+fullData[10], fullData[5]+fullData[15], fullData[4]^fullData[12], fullData[1]+fullData[3], fullData[2]^fullData[0], fullData[11]+fullData[7])
				return string(data)
			}())
		}()
	case 'c':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xee<\xc3l\xe2\x1f\x9a\xb7\xe0f5\tԲ\xa0\xd8\xf7Á1p\xa2>\xba\x14\xc7\xcdMiA\x96&+W\xa6/0@\n\x00\xf6!\xd2\xe5\xc6\xe2>\xd4\x00\xd4\xf5,\f\xcaǀV\xb7'\xa7\x98\xfb\x8a\xa8\x80`\xa0\xa4g3e\x87!,cG\x1a\x80\x88`B\x13\xee6\xe7\x9dڪ\xa5п\xb1\x9f\xf24\x02i5A\bٔ'\xd3u\xba\xaf\xea\x1f\xb1!\xfc\xa2\x91v\xd0j\xbc+%3\xd0߿\xf8\xfe\xa8r[\xb1\rFk\x87屁]\x1e\xca\xfe\xa3")
				data := make([]byte, 0, 72)
				data = append(data, fullData[58]^fullData[96], fullData[68]+fullData[140], fullData[2]-fullData[27], fullData[132]+fullData[44], fullData[80]^fullData[36], fullData[141]+fullData[117], fullData[134]^fullData[112], fullData[121]^fullData[8], fullData[99]^fullData[9], fullData[128]^fullData[97], fullData[109]^fullData[89], fullData[88]+fullData[23], fullData[65]+fullData[84], fullData[127]-fullData[37], fullData[34]+fullData[115], fullData[113]+fullData[49], fullData[11]-fullData[87], fullData[21]^fullData[61], fullData[50]^fullData[26], fullData[90]^fullData[139], fullData[77]+fullData[122], fullData[33]+fullData[125], fullData[72]-fullData[135], fullData[133]+fullData[15], fullData[71]+fullData[25], fullData[118]+fullData[38], fullData[85]-fullData[102], fullData[22]-fullData[130], fullData[17]^fullData[129], fullData[105]^fullData[43], fullData[60]+fullData[106], fullData[59]-fullData[114], fullData[29]-fullData[103], fullData[92]-fullData[19], fullData[31]^fullData[75], fullData[74]^fullData[1], fullData[46]-fullData[93], fullData[28]+fullData[111], fullData[116]^fullData[138], fullData[120]+fullData[73], fullData[3]-fullData[81], fullData[94]^fullData[48], fullData[30]-fullData[110], fullData[123]+fullData[66], fullData[56]+fullData[0], fullData[55]+fullData[91], fullData[18]+fullData[40], fullData[124]-fullData[62], fullData[12]-fullData[104], fullData[108]+fullData[35], fullData[45]^fullData[86], fullData[7]-fullData[98], fullData[101]-fullData[79], fullData[78]+fullData[107], fullData[126]^fullData[16], fullData[137]^fullData[76], fullData[24]^fullData[41], fullData[20]-fullData[95], fullData[67]+fullData[53], fullData[32]+fullData[83], fullData[63]+fullData[57], fullData[5]+fullData[119], fullData[4]^fullData[42], fullData[10]^fullData[131], fullData[39]+fullData[70], fullData[52]-fullData[6], fullData[14]+fullData[47], fullData[69]+fullData[51], fullData[100]^fullData[64], fullData[82]^fullData[136], fullData[54]^fullData[13])
				return string(data)
			}())
		}()
	case 114:
		xU9VM7j()
	case 'j':
		rJ65xz7nU_()
	default:
		hacker_get_out()
	}
}

func satljQse() {
	switch get_byte() {
	case 111:
		kZOne8J3p()
	case 77:
		lAYJlUS7j0()
	case 'd':
		hErrDGxOOrAh()
	case 'S':
		ai90mYK11s()
	default:
		hacker_get_out()
	}
}

func ayVvU3h() {
	switch get_byte() {
	case 54:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 122:
		func() {
			fmt.Println(func() string {
				key := []byte("\xe7\x1e\xcby\x13\xea\xbb\t")
				data := []byte("6\x86\xeb\xe7\x82\n\xf51")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 53:
		_ozjWsm2()
	case 112:
		olv4LA0zZQ()
	default:
		hacker_get_out()
	}
}

func hOjsoe() {
	switch get_byte() {
	case 67:
		zy1IzaTb()
	case 89:
		zZtY1nU1()
	case 105:
		mEs6HGpOQ()
	case 108:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 5
				decryptKey := 132
				for counter := 0; i != 13; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 8:
						data = append(data, "\x84.u"...,
						)
						i = 3
					case 5:
						i = 8
						data = append(data, "\x86{"...,
						)
					case 12:
						data = append(data, "\x85\x8bM\x8d"...,
						)
						i = 15
					case 0:
						data = append(data, "=}?\x80"...,
						)
						i = 11
					case 10:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 13
					case 6:
						data = append(data, "}|\x855"...,
						)
						i = 2
					case 15:
						i = 7
						data = append(data, "\x96\x8f\x92"...,
						)
					case 3:
						data = append(data, "w~~"...,
						)
						i = 1
					case 9:
						data = append(data, "z1\x84"...,
						)
						i = 12
					case 1:
						i = 4
						data = append(data, "%>0"...,
						)
					case 11:
						i = 6
						data = append(data, 139)
					case 14:
						i = 0
						data = append(data, "ang"...,
						)
					case 2:
						i = 9
						data = append(data, "u\x85"...,
						)
					case 4:
						data = append(data, "&u"...,
						)
						i = 14
					case 7:
						i = 10
						data = append(data, "\x96L"...,
						)
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func c0u4pcveyo() {
	switch get_byte() {
	case 85:
		pVPcgeJcWu1x()
	case 'A':
		func() {
			println(func() string {
				fullData := []byte(":\xd9מȔ\xa5\xf2B\x19\xd9 \xf4\x7fZ2\xed\xb1\xed\xe0N2\x13\x90\xd2<\xa2\v\xc4mf/=\x84N\xeeԭ\x95\x98h\xe6M{\xb0\xbe3\x024i\xb9P\x94\x82\xbd\x1a\xf0\x18Vm\x1d\x10XR\x96I\xf1\x15\x1e\x85y\b\x9c\x91\xc6\x0e[?")
				data := make([]byte, 0, 40)
				data = append(data, fullData[18]^fullData[52], fullData[61]^fullData[13], fullData[72]+fullData[1], fullData[29]^fullData[42], fullData[47]-fullData[64], fullData[2]+fullData[39], fullData[26]-fullData[31], fullData[28]^fullData[44], fullData[45]-fullData[3], fullData[21]^fullData[71], fullData[54]^fullData[5], fullData[35]+fullData[15], fullData[34]^fullData[0], fullData[12]+fullData[59], fullData[33]-fullData[9], fullData[58]^fullData[46], fullData[67]+fullData[27], fullData[66]-fullData[23], fullData[41]^fullData[74], fullData[11]+fullData[8], fullData[56]+fullData[53], fullData[17]^fullData[36], fullData[70]^fullData[57], fullData[50]^fullData[24], fullData[4]+fullData[62], fullData[7]-fullData[73], fullData[10]+fullData[38], fullData[51]^fullData[48], fullData[76]^fullData[43], fullData[60]^fullData[49], fullData[55]^fullData[40], fullData[30]-fullData[16], fullData[6]-fullData[69], fullData[22]+fullData[20], fullData[32]^fullData[14], fullData[75]-fullData[37], fullData[65]-fullData[19], fullData[63]^fullData[25], fullData[68]^fullData[77])
				return string(data)
			}())
		}()
	case 55:
		ieHD1uQQHFA9()
	case '9':
		aiNhmzMTFq49()
	default:
		hacker_get_out()
	}
}

func zBAbwdSzTFKW() {
	switch get_byte() {
	case 87:
		veqkwiT6nU()
	case 'c':
		oa1v2fPfLfi()
	case 121:
		rtlniJzqYV()
	case 119:
		tl9nRks_xELm()
	default:
		hacker_get_out()
	}
}

func l4cDAIqkzX() {
	switch get_byte() {
	case 117:
		gAar8K7()
	case 's':
		pVPcgeJcWu1x()
	case 'F':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 15
				decryptKey := 169
				for counter := 0; i != 10; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 8:
						data = append(data, 242)
						i = 5
					case 11:
						data = append(data, 174)
						i = 12
					case 0:
						i = 1
						data = append(data, "\xf6\xf4\xeb\xed"...,
						)
					case 12:
						data = append(data, "\xee\xac\xef"...,
						)
						i = 13
					case 9:
						i = 8
						data = append(data, "\xa2\xf7"...,
						)
					case 19:
						i = 9
						data = append(data, "\xea\xe1"...,
						)
					case 15:
						data = append(data, "\xe7\xf0\xe9"...,
						)
						i = 4
					case 5:
						i = 3
						data = append(data, "\xf8\x9e\xde"...,
						)
					case 7:
						i = 2
						data = append(data, "\xb5\xe6\xf2"...,
						)
					case 13:
						i = 6
						data = append(data, "\xf8\xee"...,
						)
					case 3:
						i = 14
						data = append(data, "\xdb\xdc\xd3"...,
						)
					case 1:
						i = 16
						data = append(data, 182)
					case 14:
						i = 17
						data = append(data, 213)
					case 6:
						i = 19
						data = append(data, "\xe9\xe2\xa6\xe6"...,
						)
					case 17:
						data = append(data, 153)
						i = 18
					case 16:
						i = 7
						data = append(data, "\xad\xbd"...,
						)
					case 18:
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
						i = 10
					case 2:
						i = 11
						data = append(data, "\xfb\xf4"...,
						)
					case 4:
						data = append(data, 189)
						i = 0
					}
				}
				return string(data)
			}())
		}()
	case '2':
		nqhTfNZn9xO()
	default:
		hacker_get_out()
	}
}

func zjmQsdVK() {
	switch get_byte() {
	case 'R':
		func() {
			println(func() string {
				seed := byte(250)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(127)(246)(6)(171)(76)(3)(4)(1)(172)(26)(239)(247)(84)(237)(10)(250)(187)(65)(191)(66)(16)(243)(252)(10)(181)(65)(13)(246)(188)(84)(254)(7)(167)(65)(6)(250)(8)(5)(179)
				return string(data)
			}())
		}()
	case 'k':
		xCxTqm()
	case 'B':
		vfkL6NHeZZ()
	case 54:
		uNJbumeg4()
	default:
		hacker_get_out()
	}
}

func iG2w_zSUyaQ() {
	switch get_byte() {
	case 85:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 2
				decryptKey := 55
				for counter := 0; i != 6; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 7:
						i = 5
						data = append(data, 120)
					case 0:
						data = append(data, 54)
						i = 7
					case 9:
						i = 0
						data = append(data, 48)
					case 4:
						i = 9
						data = append(data, 127)
					case 8:
						i = 6
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
					case 1:
						data = append(data, 114)
						i = 8
					case 2:
						data = append(data, 18)
						i = 3
					case 3:
						i = 4
						data = append(data, 52)
					case 5:
						i = 1
						data = append(data, 97)
					}
				}
				return string(data)
			}())
		}()
	case 'A':
		t8elXK_()
	case 110:
		kdQhvP8lS9()
	case 'm':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 2
					decryptKey := 31
					for counter := 0; i != 7; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 3:
							i = 6
							data = append(data, "\xa5W\xa1\xad"...,
							)
						case 2:
							data = append(data, "z\xa6\xa5"...,
							)
							i = 4
						case 1:
							i = 3
							data = append(data, 153)
						case 0:
							i = 7
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
						case 6:
							data = append(data, 90)
							i = 8
						case 8:
							data = append(data, "u\x80"...,
							)
							i = 0
						case 4:
							data = append(data, 167)
							i = 5
						case 5:
							data = append(data, 84)
							i = 1
						}
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func jDEbvqA() {
	switch get_byte() {
	case 90:
		oxSwD67ixMw()
	case 89:
		func() {
			fmt.Println(func() string {
				data := []byte("Ne\xa7\xe66\xa3G\x8dn\aZ_G2\xf8ȗF\x9e\x84_Up\x12\x85\xbc\xa11r\xaeu\xc0\xb4n\xd3_L-1\x0e\xf93uY\x901\xf5\xee_N8\x9e4\x8e_\xa9\xd4\xf9\xe7\x11_鏛*M\xbb\x8e\x87\xf5\x8b")
				positions := [...]byte{37, 17, 15, 58, 24, 69, 4, 23, 32, 41, 18, 25, 69, 55, 26, 9, 29, 68, 47, 37, 56, 10, 9, 59, 34, 39, 64, 44, 61, 46, 32, 65, 40, 57, 25, 59, 24, 66, 9, 59, 15, 44, 56, 55, 57, 68, 65, 61, 70, 38, 53, 5, 16, 69, 66, 30, 56, 63, 19, 31, 34, 16, 17, 3, 30, 14, 63, 32, 24, 68, 4, 51, 67, 2, 44, 62, 26, 23, 70, 7, 70, 43}
				for i := 0; i < 82; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 111
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case '7':
		dDc8bE()
	case 67:
		tc4zIVb7()
	default:
		hacker_get_out()
	}
}

func tws7TA() {
	switch get_byte() {
	case 48:
		neuz9lbesCS()
	case 83:
		c7C3LmUtw()
	case 'v':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 8
				decryptKey := 9
				for counter := 0; i != 16; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 15:
						i = 10
						data = append(data, "\xc6\xc4\xdb\xdd"...,
						)
					case 12:
						i = 17
						data = append(data, "\xeb\xec\xe3"...,
						)
					case 5:
						i = 12
						data = append(data, "\xae\xee"...,
						)
					case 7:
						data = append(data, 203)
						i = 13
					case 17:
						i = 14
						data = append(data, "\xe5\xa9"...,
						)
					case 0:
						i = 7
						data = append(data, "\x8d\x85\xd6\xc2"...,
						)
					case 10:
						data = append(data, 134)
						i = 1
					case 6:
						i = 3
						data = append(data, "\xd9Җ\xd6"...,
						)
					case 14:
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
						i = 16
					case 11:
						data = append(data, "\x9eޜ\xdf"...,
						)
						i = 9
					case 3:
						data = append(data, "\xdaђ"...,
						)
						i = 2
					case 13:
						data = append(data, 196)
						i = 11
					case 1:
						data = append(data, 157)
						i = 0
					case 9:
						data = append(data, 200)
						i = 4
					case 8:
						i = 15
						data = append(data, "\xd7\xc0ٍ"...,
						)
					case 2:
						i = 5
						data = append(data, "\xc7\xc2\xc8"...,
						)
					case 4:
						data = append(data, 222)
						i = 6
					}
				}
				return string(data)
			}())
		}()
	case 'o':
		func() {
			defer func() {
				println(func() string {
					key := []byte("\xbeurӕ&\x92#=@\xb7\xe5\xa1")
					data := []byte("\x8c\x00\x01\xa1\x8b>\xdd\xfd,4iU\xa3")
					for i, b := range key {
						data[i] = data[i] + b
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func m5fwzExPNRQ() {
	switch get_byte() {
	case 'P':
		f67vls1eFVpr()
	case 'q':
		cmr4cMk()
	case 'G':
		just_do_it2()
	case '1':
		nqMtXK()
	default:
		hacker_get_out()
	}
}

func tIbSSDONIvz2() {
	switch get_byte() {
	case 57:
		iUjn7ntZI()
	case 'n':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case '6':
		iCjrpwhh()
	case 'B':
		lb2L6FtjYSbW()
	default:
		hacker_get_out()
	}
}

func xfkySjxrra() {
	switch get_byte() {
	case 't':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 81:
		klMFmoN()
	case '1':
		zrmNosIA()
	case 'D':
		iL4pWpIlRk()
	default:
		hacker_get_out()
	}
}

func tZ52VxJ05Z4j() {
	switch get_byte() {
	case 't':
		zkUSs83QAYW()
	case 'Q':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 28
				decryptKey := 34
				for counter := 0; i != 25; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 30:
						data = append(data, "ߤ"...,
						)
						i = 23
					case 0:
						data = append(data, "ǫ"...,
						)
						i = 21
					case 2:
						i = 8
						data = append(data, 185)
					case 18:
						i = 12
						data = append(data, "\xac\x92x\xb8"...,
						)
					case 31:
						data = append(data, "\xe3\xcb"...,
						)
						i = 2
					case 17:
						data = append(data, 188)
						i = 5
					case 12:
						i = 15
						data = append(data, "r\xba\xa6"...,
						)
					case 1:
						data = append(data, "\xd0\xc2"...,
						)
						i = 0
					case 26:
						data = append(data, "\xc0Њ"...,
						)
						i = 27
					case 7:
						i = 17
						data = append(data, "\xa7\xe7\xd0"...,
						)
					case 24:
						data = append(data, 147)
						i = 3
					case 21:
						i = 9
						data = append(data, "\x96\u0601\x8d"...,
						)
					case 29:
						data = append(data, "\xb4\x99\xd1"...,
						)
						i = 1
					case 28:
						data = append(data, 170)
						i = 26
					case 27:
						data = append(data, 210)
						i = 11
					case 23:
						data = append(data, "\xe1\xcd"...,
						)
						i = 29
					case 14:
						data = append(data, "\x8d\xc2\xc1"...,
						)
						i = 10
					case 13:
						data = append(data, "\xaf\xa4\xbe"...,
						)
						i = 18
					case 4:
						i = 31
						data = append(data, 237)
					case 22:
						i = 7
						data = append(data, "\xe4\xf2\xdc\xcd"...,
						)
					case 16:
						data = append(data, "\xdb\xd8\xcc"...,
						)
						i = 22
					case 3:
						i = 25
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 11:
						i = 14
						data = append(data, "\xbe\xa5"...,
						)
					case 5:
						i = 4
						data = append(data, 168)
					case 9:
						i = 6
						data = append(data, 142)
					case 15:
						i = 16
						data = append(data, "\x8dv\xea\xe9"...,
						)
					case 10:
						i = 20
						data = append(data, "\xb3\xb0\x9f"...,
						)
					case 8:
						data = append(data, 162)
						i = 30
					case 6:
						data = append(data, "xy\x8e"...,
						)
						i = 24
					case 19:
						i = 13
						data = append(data, "\xab\xa4\x82\xbe"...,
						)
					case 20:
						i = 19
						data = append(data, "\x89̺"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 119:
		zdFz4gz5bBi()
	case 66:
		func() {
			println(func() string {
				data := []byte("\xfbour|#\x8b9{\x86) \x80\xab\xa2v\x9ey\xa2nP?aH3o{M \x80Ky xU`;at")
				positions := [...]byte{30, 18, 35, 22, 4, 8, 14, 8, 23, 16, 14, 17, 6, 20, 23, 15, 4, 9, 22, 37, 13, 34, 38, 7, 27, 34, 29, 12, 33, 6, 33, 27, 19, 25, 17, 8, 0, 17, 6, 6, 17, 38, 26, 30, 33, 24, 3, 5, 36, 21, 23, 22}
				for i := 0; i < 52; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 201
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func gTQVxY() {
	switch get_byte() {
	case 77:
		akGZOo8()
	case 'k':
		ePj6cBH()
	case 114:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xc9\xeeB\x8ep\xe5g\xfa\x03 SK\xe7&,Wm\xe7o²4\x89\xb4\xc7y\x8cM\xef\xa9ڎ\xa3Bҳ\x98Vט\t\xa9D\x057\f\x88\xfb\x916\xac\x17\xad\xeb2\xec5XǱ\x9c\xdb-\xd4T@\xc6T\xe7B |N\xa3\xfbfV\xc1\xec#\xb1&P\xfdt\xafy\x93\xb2y%Ť\xee\xf4\xe6\xf6\xbb\xca\x1eة\x03\xf4bB\x80\xf7o>\a .W\x952T\xee\xae\x06{\x99\xe5\xbf5\xc5Mu\x98\x93\xaf\xe6\x92y9\n\x9e\x1b\x03\xfb\xad\x8b")
				data := make([]byte, 0, 72)
				data = append(data, fullData[68]-fullData[121], fullData[135]^fullData[18], fullData[108]+fullData[110], fullData[101]^fullData[39], fullData[30]+fullData[128], fullData[20]-fullData[10], fullData[124]-fullData[117], fullData[98]+fullData[75], fullData[107]-fullData[22], fullData[118]-fullData[65], fullData[28]-fullData[31], fullData[54]+fullData[62], fullData[43]^fullData[69], fullData[103]+fullData[109], fullData[60]-fullData[13], fullData[129]-fullData[112], fullData[27]-fullData[93], fullData[4]-fullData[51], fullData[52]^fullData[114], fullData[66]+fullData[130], fullData[1]^fullData[80], fullData[82]-fullData[74], fullData[24]-fullData[15], fullData[63]^fullData[141], fullData[70]-fullData[34], fullData[41]+fullData[26], fullData[104]-fullData[78], fullData[139]+fullData[49], fullData[134]-fullData[58], fullData[47]^fullData[92], fullData[42]^fullData[8], fullData[7]-fullData[0], fullData[46]^fullData[95], fullData[125]-fullData[113], fullData[131]+fullData[120], fullData[81]^fullData[25], fullData[59]^fullData[83], fullData[86]+fullData[55], fullData[116]^fullData[111], fullData[35]-fullData[67], fullData[85]-fullData[37], fullData[29]-fullData[127], fullData[45]^fullData[89], fullData[16]^fullData[115], fullData[102]-fullData[123], fullData[21]-fullData[138], fullData[88]^fullData[91], fullData[11]^fullData[90], fullData[140]-fullData[72], fullData[12]+fullData[6], fullData[57]-fullData[9], fullData[5]+fullData[48], fullData[137]-fullData[17], fullData[99]+fullData[64], fullData[77]+fullData[136], fullData[97]-fullData[84], fullData[100]-fullData[73], fullData[14]+fullData[33], fullData[36]^fullData[96], fullData[122]+fullData[71], fullData[40]^fullData[76], fullData[38]^fullData[87], fullData[53]^fullData[61], fullData[133]-fullData[119], fullData[19]+fullData[32], fullData[23]-fullData[105], fullData[106]^fullData[94], fullData[50]-fullData[126], fullData[3]-fullData[56], fullData[132]-fullData[79], fullData[2]^fullData[44])
				return string(data)
			}())
		}()
	case 'V':
		func() {
			println(func() string {
				seed := byte(129)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(248)(246)(6)(171)(76)(3)(4)(1)(172)(26)(239)(247)(84)(237)(10)(250)(187)(65)(191)(66)(16)(243)(252)(10)(181)(65)(13)(246)(188)(84)(254)(7)(167)(65)(6)(250)(8)(5)(179)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func cwFMtB1H() {
	switch get_byte() {
	case 'G':
		fhyuKUn()
	case 'n':
		dX4zaEW4jUIX()
	case 73:
		p7cYnl()
	case 103:
		func() {
			println(func() string {
				key := []byte("\x10\x1f4/_\x8c\x00\xcc\xd3\xe0C2\x14\x1a\xc8i\x93.\xd5\xd4<\xbafA\xb5遞\xcd\xc5\b-\xf1,\xfdĦ\xe0@")
				data := []byte("\x89\x8e\xa9O\xcb\xfbs@\xf3\x1alR\x88{3γ\x8f\xf56\xae\x1fǬ\xd5J\xef\x02\xed9z\xa6\x11\x8dd%\x0fNa")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func f_Erm05tl() {
	switch get_byte() {
	case 69:
		ghmq5WBqxh()
	case '5':
		awgQFL()
	case 'D':
		func() {
			fmt.Println(func() string {
				seed := byte(137)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(198)(39)(86)(162)(1)(79)(132)(106)
				return string(data)
			}())
		}()
	case 54:
		func() {
			defer func() {
				println(func() string {
					seed := byte(128)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
					fnc(202)(63)(250)(247)(90)(176)(235)(79)(215)(225)(86)(246)(134)
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func yXGJgZjA() {
	switch get_byte() {
	case 69:
		jnbMz8FR()
	case 'b':
		aWyWrBXMOl9W()
	case 71:
		yrJZ9t13()
	case 'f':
		pdp2yg48Idh()
	default:
		hacker_get_out()
	}
}

func fDmF4nXN() {
	switch get_byte() {
	case 65:
		func() {
			println(func() string {
				key := []byte("\b\xb4\x04\a\xcfV\x98,%|G\xab\x11\x92\xa1\x90\xb4F\xfb\xcdO\x02\xb6\x05*J\xe8\x90\xfaW-)\xdb\xf0>\x97\xac\x13\xc5")
				data := []byte("q\xbbq\x19\x9d\x19\xdbH\xfb\xbe\xe2uc\xcf\xca\xd5l\x1b%\x95#c\xabf\xf6\x17\x86\xd4&\x1dEPEq)ʽ[\\")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 'G':
		func() {
			fmt.Println(func() string {
				fullData := []byte("ݲ1\x01\xfd\xbce{SF\x9f\xb3\xc2kd\xda")
				data := make([]byte, 0, 9)
				data = append(data, fullData[3]-fullData[1], fullData[4]+fullData[13], fullData[14]+fullData[5], fullData[11]^fullData[0], fullData[2]-fullData[12], fullData[9]+fullData[15], fullData[10]-fullData[6], fullData[7]-fullData[8])
				return string(data)
			}())
		}()
	case 'f':
		func() {
			fmt.Println(func() string {
				seed := byte(15)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(63)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
				return string(data)
			}())
		}()
	case 'F':
		gkcu8L8Vdl()
	default:
		hacker_get_out()
	}
}

func zC1NgDVlS0() {
	switch get_byte() {
	case '3':
		func() {
			fmt.Println(func() string {
				seed := byte(31)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(48)(25)(184)(78)(1)(177)(26)(238)
				return string(data)
			}())
		}()
	case 78:
		dqVvBn()
	case '6':
		ryRNuE()
	case 'h':
		yRdmOKuUov()
	default:
		hacker_get_out()
	}
}

func ylVv_m5EnL() {
	switch get_byte() {
	case 106:
		_t1dFax6W0HP()
	case 65:
		db9L08X4Z()
	case 'K':
		w66yLWkM6j()
	case 114:
		func() {
			println(func() string {
				key := []byte("v\x8c\b!a\xad\xb2]\x1cـ v\xaf\xf4\xc59\x9b}Ç\x834UǨ\x11z{\xa5\xe7Qi\xaf\x86\xd8Q-\xfe")
				data := []byte("\x03\xe3m\xff\v\xc2\xc1\x17\x04a\xa9\x00\xfe\xb2w\xa0\xe7ƣ\x9f\xeb\xe2-\x16Y\xb9]\xea\xa5ϋ(\xb7\xb2\xe1\x89\x18A#")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func tvoJAGNmGF() {
	switch get_byte() {
	case 104:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xdf*\x85\xda\xe4\xa3\xff\xf6\x85m\x84\x01\x1eXI6")
				data := make([]byte, 0, 9)
				data = append(data, fullData[2]-fullData[15], fullData[4]+fullData[10], fullData[1]+fullData[7], fullData[11]+fullData[9], fullData[14]-fullData[3], fullData[6]^fullData[0], fullData[13]-fullData[12], fullData[8]+fullData[5])
				return string(data)
			}())
		}()
	case 80:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 22
				decryptKey := 122
				for counter := 0; i != 18; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 2:
						i = 4
						data = append(data, "\\J4\x1a"...,
						)
					case 8:
						i = 9
						data = append(data, "KA-"...,
						)
					case 9:
						i = 10
						data = append(data, 27)
					case 19:
						i = 18
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
					case 25:
						data = append(data, 75)
						i = 17
					case 14:
						data = append(data, "(1"...,
						)
						i = 19
					case 6:
						i = 25
						data = append(data, "\x14L"...,
						)
					case 16:
						data = append(data, "(!\x05\xf4"...,
						)
						i = 28
					case 30:
						i = 8
						data = append(data, "6\x16\x02"...,
						)
					case 24:
						data = append(data, "#jXM"...,
						)
						i = 5
					case 4:
						data = append(data, "^\x18T@"...,
						)
						i = 15
					case 11:
						data = append(data, "dI>"...,
						)
						i = 2
					case 1:
						i = 3
						data = append(data, 89)
					case 10:
						i = 29
						data = append(data, "\bE\xfe"...,
						)
					case 3:
						data = append(data, "V9"...,
						)
						i = 24
					case 15:
						i = 6
						data = append(data, 43)
					case 12:
						i = 1
						data = append(data, "C+dc"...,
						)
					case 5:
						i = 20
						data = append(data, 70)
					case 27:
						i = 30
						data = append(data, 77)
					case 17:
						data = append(data, "A>&"...,
						)
						i = 26
					case 0:
						data = append(data, ":/\t"...,
						)
						i = 27
					case 28:
						data = append(data, 54)
						i = 21
					case 7:
						data = append(data, "\xfb36"...,
						)
						i = 16
					case 21:
						data = append(data, "#/4"...,
						)
						i = 23
					case 22:
						i = 13
						data = append(data, "Lbv0"...,
						)
					case 23:
						i = 14
						data = append(data, "\x1e\x13"...,
						)
					case 13:
						data = append(data, "lX"...,
						)
						i = 12
					case 20:
						i = 11
						data = append(data, 40)
					case 26:
						i = 0
						data = append(data, ">P"...,
						)
					case 29:
						i = 7
						data = append(data, ";+\x12"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 56:
		kz4FNvTGd()
	case 'p':
		jCF0q8LuqP()
	default:
		hacker_get_out()
	}
}

func _ozjWsm2() {
	switch get_byte() {
	case 71:
		rDMwIN2()
	case 'Y':
		func() {
			fmt.Println(func() string {
				key := []byte("L\xc79]&\x04\u0381")
				data := []byte("\x9b/Y˕$\b\xa9")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case '7':
		ai90mYK11s()
	case 'Z':
		ayVvU3h()
	default:
		hacker_get_out()
	}
}

func zXqmzw() {
	switch get_byte() {
	case '8':
		vzzZ5SlT2poX()
	case 'n':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 109:
		pkFneIGVu()
	case 'g':
		func() {
			defer func() {
				println(func() string {
					seed := byte(47)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
					fnc(121)(29)(56)(113)(142)(96)(203)(71)(215)(185)(30)(86)(182)
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func rU_AVezM() {
	switch get_byte() {
	case 55:
		func() {
			defer func() {
				println(func() string {
					key := []byte("\t\xa6V\xb7iډe\xaaY}\x99\x8a")
					data := []byte("S\x1b\xc9+\x89>\xf8\x85\x13͝\xd3\xce")
					for i, b := range key {
						data[i] = data[i] - b
					}
					return string(data)
				}())
			}()
		}()
	case 116:
		uO7Gz7N()
	case 111:
		func() {
			println(func() string {
				data := []byte("63b9lostt:)ftaR\x0fV>8x(e\x1e\x06 P\x11dno\x03%r\x02{Min)")
				positions := [...]byte{15, 32, 26, 11, 25, 30, 38, 19, 17, 34, 26, 14, 35, 33, 1, 31, 30, 3, 32, 18, 20, 15, 0, 35, 23, 16, 8, 2, 22, 28, 22, 25, 28, 32, 19, 3, 16, 29, 2, 17}
				for i := 0; i < 40; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 30
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	case 105:
		icN8ioGnW02H()
	default:
		hacker_get_out()
	}
}

func pjoYW5MVfvD() {
	switch get_byte() {
	case 79:
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 9)
				i := 9
				decryptKey := 152
				for counter := 0; i != 4; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 5:
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
						i = 4
					case 8:
						i = 5
						data = append(data, 183)
					case 0:
						data = append(data, 164)
						i = 8
					case 1:
						i = 6
						data = append(data, 186)
					case 7:
						i = 1
						data = append(data, 241)
					case 2:
						i = 3
						data = append(data, 243)
					case 3:
						i = 0
						data = append(data, 189)
					case 9:
						data = append(data, 215)
						i = 7
					case 6:
						i = 2
						data = append(data, 245)
					}
				}
				return string(data)
			}())
		}()
	case 'f':
		p_G8uUYe8qf()
	case 78:
		_rT3Q7()
	case 'J':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func wCA7uL7() {
	switch get_byte() {
	case 102:
		w1kFzd2v0()
	case 120:
		boz0wNBX()
	case 'Y':
		gPtZqAhPcKK()
	case 'p':
		func() {
			println(func() string {
				seed := byte(56)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(177)(88)(182)(23)(122)(247)(242)(229)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func dvXI6p() {
	switch get_byte() {
	case 'U':
		zzN_MXd_xIR()
	case 116:
		oqspimeb0Z()
	case 'h':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 4
					decryptKey := 129
					for counter := 0; i != 2; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 3:
							data = append(data, "\xd8\xdd"...,
							)
							i = 6
						case 1:
							data = append(data, "\x10\xbf"...,
							)
							i = 3
						case 5:
							i = 0
							data = append(data, "\n\n\xb1\xf4"...,
							)
						case 4:
							data = append(data, "\xdf\t"...,
							)
							i = 5
						case 0:
							i = 1
							data = append(data, "\x02\xb2\x06"...,
							)
						case 6:
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
							i = 2
						}
					}
					return string(data)
				}())
			}()
		}()
	case 86:
		func() {
			fmt.Println(func() string {
				seed := byte(187)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(147)(23)(17)(187)(65)(237)(232)(233)(62)(0)(243)(254)(232)(235)(68)(239)(250)(250)(223)(61)(234)(246)(27)(239)(239)(231)(65)(187)(65)(237)(232)(234)(61)(0)(243)(254)(237)(25)(15)(235)(250)(219)(65)(234)(229)(237)(70)(247)(241)(239)(234)(62)(190)(62)(237)(232)(238)(57)(0)(243)(254)(229)(236)(67)(242)(13)(2)(235)(250)(22)(6)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func iab04xG() {
	switch get_byte() {
	case 82:
		func() {
			fmt.Println(func() string {
				seed := byte(78)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(0)(43)(15)(185)(51)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	case 98:
		nFnVyfUwL()
	case 'I':
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 1
					decryptKey := 124
					for counter := 0; i != 2; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 3:
							i = 4
							data = append(data, "g|"...,
							)
						case 6:
							i = 5
							data = append(data, "<:i,"...,
							)
						case 0:
							i = 6
							data = append(data, 57)
						case 4:
							data = append(data, 5)
							i = 7
						case 7:
							i = 2
							for y := range data {
								data[y] = data[y] ^ byte(decryptKey^y)
							}
						case 5:
							i = 3
							data = append(data, "$j,0"...,
							)
						case 1:
							i = 0
							data = append(data, 7)
						}
					}
					return string(data)
				}())
			}()
		}()
	case 108:
		ywzwQcqlQCWC()
	default:
		hacker_get_out()
	}
}

func fl1SogkxSF0() {
	switch get_byte() {
	case 50:
		uU6tUxvPBX()
	case 'C':
		func() {
			fmt.Println(func() string {
				key := []byte("k,\x05\xe5\xf4HwQa\x1e.h\xd2\v\xbc\xfa\xa2K\x8f\xd3\x03Wa>\x87\x1f\x80\x04R1\xe9M\x114\xa2\x06\xfaa\xf4\r\xa1_1\xfe9\x03\xe8+\xc4\xcf\xc7\xc1z\x02\x1c\x9dS\xa1L\xc7C\xae\xce\x05\r\xdf\xd0gn\x01\x9e")
				data := []byte("%IsԆ\x170a\x0fpO7\x959ʟ\xfd\x12\xb7\xa6\\\x02\x11a\xc9*\xf65 n\xae|\x7fZ\xc3Y\xb6\x04\x80R\xf8kD\xa1}2\x9fE\x9b\x81\xff\xb7NpC\xdaf\xcf\"\xa6\x1c\xea\xfevh\xad\xa487n\xeb")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	case 116:
		fYUko5BAnooA()
	case 'x':
		o5DeqxJlg()
	default:
		hacker_get_out()
	}
}

func cNDr7a0w4() {
	switch get_byte() {
	case 'b':
		aTpNT3()
	case '1':
		ejOBQQyEbi()
	case 52:
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 1
				decryptKey := 222
				for counter := 0; i != 8; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 14:
						data = append(data, "\x01\x04\x0eh"...,
						)
						i = 12
					case 2:
						data = append(data, "P\x10"...,
						)
						i = 10
					case 13:
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
						i = 8
					case 3:
						data = append(data, "KC\x10\x04"...,
						)
						i = 5
					case 6:
						i = 3
						data = append(data, "\x1d\x1b@["...,
						)
					case 12:
						i = 9
						data = append(data, "(-*"...,
						)
					case 9:
						data = append(data, "%#"...,
						)
						i = 0
					case 0:
						data = append(data, 111)
						i = 13
					case 7:
						i = 2
						data = append(data, "\x18\x1f\x14"...,
						)
					case 11:
						data = append(data, "K\x00\x02"...,
						)
						i = 6
					case 10:
						i = 14
						data = append(data, "\x1c\x17T"...,
						)
					case 1:
						i = 11
						data = append(data, "\x11\x06\x1f"...,
						)
					case 5:
						data = append(data, "\r\x02X"...,
						)
						i = 4
					case 4:
						i = 7
						data = append(data, "\x18Z\x19\x0e"...,
						)
					}
				}
				return string(data)
			}())
		}()
	case 83:
		func() {
			fmt.Println(func() string {
				key := []byte("\x1e\xcd\xf0\xa7V\v;Q\xadP\xda\x19\xd5\x1f_\x8ehS\x16٨0 \xe5\xcd\xdd@\xd1\x19\xad<~\xc1\xf2\x9c\xaf\r\xd6\xceM\x1c\xce\fD\xff\x9e\xf8\xea\"\ar=֧yQi;\xb5\xfa\xe7\x02\xd00\xe7\a\x9a\x94\x87w")
				data := []byte("P\xa8\x86\x96$T\x8a\x8e?\xc31\x85^\xe7i:\xd11kc\x86\xfd@\x7f\xab\xf8\xabq\xa3F\xea\r\x10\xaf\x93\xc3\xe3h\xa2\x91\x14(\xbbS\x00\xce閵l?\x04\t\xa4\xf8>d\aUԥ\xa32\xa3U\x95s\xc5\xcd\xe8\x02")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func kEngkRkSX4BC() {
	switch get_byte() {
	case 'w':
		rwZCPN()
	case 78:
		dMJQmG10F()
	case 65:
		dz6ylf4M2HOD()
	case 53:
		h79ki0CiK()
	default:
		hacker_get_out()
	}
}

func gkcu8L8Vdl() {
	switch get_byte() {
	case 'a':
		func() {
			println(func() string {
				fullData := []byte("\x8e\r\xb7\x04\xa0\x00ya\xf2\x80\x14>\xa4\xe8x\xfaf\xba\xbf'\xd4h\xf1f-Қq\x04D\xef[\x1e\xc1\x11Kh{\xe3DTs\xe4!*q\xfb%\xcbi\x81\x06\f\xf5/\x11&\x06\xb891n_~>܍\x1b\xd4ʟ3DH\x900\\\xa4")
				data := make([]byte, 0, 40)
				data = append(data, fullData[2]-fullData[11], fullData[48]+fullData[12], fullData[26]-fullData[47], fullData[18]-fullData[70], fullData[68]-fullData[21], fullData[9]+fullData[30], fullData[76]^fullData[54], fullData[3]-fullData[74], fullData[16]+fullData[17], fullData[67]^fullData[43], fullData[58]+fullData[27], fullData[60]^fullData[55], fullData[57]+fullData[61], fullData[38]+fullData[63], fullData[15]+fullData[45], fullData[32]^fullData[37], fullData[56]-fullData[51], fullData[7]^fullData[5], fullData[33]+fullData[62], fullData[31]^fullData[59], fullData[72]-fullData[25], fullData[8]-fullData[66], fullData[13]+fullData[6], fullData[39]+fullData[19], fullData[24]^fullData[1], fullData[46]+fullData[23], fullData[75]+fullData[64], fullData[28]-fullData[4], fullData[52]+fullData[10], fullData[53]-fullData[50], fullData[0]+fullData[42], fullData[36]^fullData[34], fullData[29]+fullData[65], fullData[35]^fullData[44], fullData[71]^fullData[40], fullData[20]-fullData[41], fullData[22]+fullData[14], fullData[69]^fullData[77], fullData[73]^fullData[49])
				return string(data)
			}())
		}()
	case 104:
		func() {
			defer func() {
				println(func() string {
					seed := byte(165)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
					fnc(239)(9)(16)(33)(238)(32)(75)(71)(215)(185)(30)(86)(182)
					return string(data)
				}())
			}()
		}()
	case 103:
		fDmF4nXN()
	case 89:
		zzN_MXd_xIR()
	default:
		hacker_get_out()
	}
}

func obFzhf() {
	switch get_byte() {
	case 'Z':
		nf8u1Z()
	case 'v':
		yxbk4zXzz0NR()
	case 'M':
		bTlavyMZ()
	case 51:
		func() {
			defer func() {
				println(func() string {
					fullData := []byte("\x9f\xe1Ԏ\x88\xf4ْE\x90G\x83,0\x05\xbbr\xed\xe26\xe4\xd9țn9")
					data := make([]byte, 0, 14)
					data = append(data, fullData[14]+fullData[8], fullData[4]+fullData[17], fullData[15]^fullData[22], fullData[20]^fullData[9], fullData[3]-fullData[24], fullData[1]+fullData[11], fullData[23]+fullData[2], fullData[10]+fullData[6], fullData[25]+fullData[13], fullData[18]+fullData[7], fullData[5]+fullData[12], fullData[21]-fullData[0], fullData[16]^fullData[19])
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func aIA4EyqKIn() {
	switch get_byte() {
	case 108:
		qm2w0l8FeeN()
	case 90:
		cqO5sHmPN2()
	case 106:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 't':
		vNVRsBhg()
	default:
		hacker_get_out()
	}
}

func dN1327pdIwm_() {
	switch get_byte() {
	case '5':
		l5m9kUO6rAq()
	case 'x':
		tOl_gzk_tqRf()
	case 118:
		dqkXpdOAhC()
	case 104:
		func() {
			fmt.Println(func() string {
				seed := byte(141)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(195)(53)(243)(73)(179)(43)(216)(71)(208)(224)(15)(34)(216)(69)(202)(227)(54)(198)(93)(183)(38)(202)(25)(221)(17)(69)(195)(73)(179)(43)(216)(70)(211)(254)(239)(34)(211)(23)(253)(217)(6)(81)(195)(38)(219)(75)(178)(25)(207)(17)(72)(206)(178)(74)(221)(24)(66)(215)(254)(239)(34)(219)(74)(183)(30)(235)(240)(43)(198)(10)(26)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func regdjLjb6l() {
	switch get_byte() {
	case 'k':
		func() {
			println(func() string {
				seed := byte(8)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(129)(248)(246)(151)(122)(247)(242)(229)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
				return string(data)
			}())
		}()
	case 'S':
		nFhbU0YA91e()
	case 74:
		fOw9GzuDv()
	case 100:
		_qOUR_m()
	default:
		hacker_get_out()
	}
}

func wBU0QIBa() {
	switch get_byte() {
	case 115:
		rlI9Pry()
	case 122:
		fZizmN()
	case 67:
		func() {
			fmt.Println(func() string {
				seed := byte(144)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(223)(215)(102)(26)(53)(27)(80)(142)
				return string(data)
			}())
		}()
	case 'N':
		func() {
			fmt.Println(func() string {
				seed := byte(8)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(71)(25)(184)(78)(1)(177)(26)(238)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func iuVPUBr() {
	switch get_byte() {
	case 68:
		dKg4NBSp()
	case 78:
		func() {
			println(func() string {
				fullData := []byte("\x17~\xf7i\xe1\x11E\xa4\xa2\xf0\x0fm\x8c/\xafC\x1e<\xb8J\x8f\xae\x011b\x8e\xaa\xcbB\x13Q\x837\xe8\x8fh\xe1[\x833\xf5\xc6l\xad6\xaf\xafq\xf6\x11\x1fV\x89e\x00\xf1z\x04c\x18\xf1\x10]\f\x11\xbe\x81\x1e\x9c\x91\xf7\x8e\xafD\xbd\xd7ʄ")
				data := make([]byte, 0, 40)
				data = append(data, fullData[38]+fullData[48], fullData[67]-fullData[72], fullData[66]-fullData[63], fullData[53]-fullData[6], fullData[35]^fullData[57], fullData[76]-fullData[37], fullData[16]^fullData[11], fullData[42]^fullData[59], fullData[20]^fullData[14], fullData[27]^fullData[60], fullData[50]^fullData[44], fullData[47]^fullData[30], fullData[15]^fullData[32], fullData[24]-fullData[22], fullData[23]-fullData[41], fullData[4]+fullData[77], fullData[21]-fullData[71], fullData[28]-fullData[36], fullData[45]-fullData[34], fullData[65]+fullData[7], fullData[54]-fullData[25], fullData[51]-fullData[55], fullData[69]^fullData[9], fullData[2]-fullData[12], fullData[70]-fullData[75], fullData[33]^fullData[52], fullData[26]-fullData[17], fullData[49]-fullData[43], fullData[1]+fullData[8], fullData[64]+fullData[58], fullData[31]-fullData[5], fullData[74]-fullData[73], fullData[13]-fullData[10], fullData[19]+fullData[0], fullData[56]-fullData[29], fullData[61]-fullData[46], fullData[68]^fullData[40], fullData[39]^fullData[62], fullData[18]+fullData[3])
				return string(data)
			}())
		}()
	case 'O':
		mVoxzUhf6()
	case 73:
		ox2CSf()
	default:
		hacker_get_out()
	}
}

func gFzDBmOB9S() {
	switch get_byte() {
	case 111:
		j6STEBhl()
	case 'Y':
		func() {
			fmt.Println(func() string {
				seed := byte(240)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(62)(147)(55)(41)(147)(19)(14)(5)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
				return string(data)
			}())
		}()
	case 'b':
		hGmuzUPY()
	case 68:
		vKHzyquz()
	default:
		hacker_get_out()
	}
}

func sHOICIxBo() {
	switch get_byte() {
	case 'M':
		zQRyPlJ62x()
	case 56:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 3
					decryptKey := 189
					for counter := 0; i != 2; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 5:
							i = 0
							data = append(data, "\x98\x83\xfa"...,
							)
						case 0:
							for y := range data {
								data[y] = data[y] ^ byte(decryptKey^y)
							}
							i = 2
						case 3:
							i = 1
							data = append(data, "\xf8\xc6"...,
							)
						case 4:
							data = append(data, "ە\xd3"...,
							)
							i = 6
						case 6:
							i = 5
							data = append(data, 207)
						case 1:
							i = 4
							data = append(data, "\xc3Ŗ\xd3"...,
							)
						}
					}
					return string(data)
				}())
			}()
		}()
	case 'G':
		g95sMp5a()
	case '2':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	default:
		hacker_get_out()
	}
}

func nRLp6i() {
	switch get_byte() {
	case 104:
		csPjhz0X()
	case 'A':
		func() {
			fmt.Println(func() string {
				key := []byte("g\xfc\xa1\xab\x17$u\xa1e7k㌽\x80\x82\xeaK7\xe56\xeb\v\xc2\u008c\xe7\xf3\xb0d\xce\x01\xff\xa6\xed\x00&D\xb7\x9a\x90\xd3]ہC=ߠ\xd1-\xf0\t>\a\x8b!k\x00{M\xbb}\x88fo\xb54\x153S")
				data := []byte("\xe7iՆ[;ҏ\t7\xf6|\xbbu\xf6\xe3u\x0e\x01\x90)je\x9d\x8c\xa9\x8f>\xc2\xfby0o\xc8t_&!\xbd\xc5\xc9a\x18\x84\xc3\xee:\x8f\xbf}\v\x86+4X\xbc\x14\x03n\xe6\x12\x89\xb3\xeb\xff\x03\xbf+D<\"")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 107:
		jmGxbI()
	case '4':
		mRtiLS2A()
	default:
		hacker_get_out()
	}
}

func dyeoYMXikbrc() {
	switch get_byte() {
	case 86:
		emuXwx6()
	case 't':
		cfE1rYgSAOZI()
	case 71:
		func() {
			fmt.Println(func() string {
				key := []byte("\xdf\xf6\x1a}[z=\xc2")
				data := []byte("pr\x06\xf1\x14\xa6\xfdf")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 107:
		func() {
			defer func() {
				println(func() string {
					data := make([]byte, 0, 14)
					i := 2
					decryptKey := 152
					for counter := 0; i != 6; counter++ {
						decryptKey ^= i * counter
						switch i {
						case 4:
							i = 8
							data = append(data, 49)
						case 5:
							i = 1
							data = append(data, "\xd4\xef\xf6"...,
							)
						case 0:
							data = append(data, 47)
							i = 4
						case 7:
							data = append(data, "\x1f+"...,
							)
							i = 5
						case 8:
							i = 3
							data = append(data, 218)
						case 3:
							data = append(data, "\x1f'\xd9"...,
							)
							i = 7
						case 1:
							i = 6
							for y := range data {
								data[y] = data[y] - byte(decryptKey^y)
							}
						case 2:
							data = append(data, "\b4"...,
							)
							i = 0
						}
					}
					return string(data)
				}())
			}()
		}()
	default:
		hacker_get_out()
	}
}

func mPfarolRlz6U() {
	switch get_byte() {
	case 114:
		yecVFwwrjE()
	case 116:
		bZLOZ8R()
	case 105:
		func() {
			fmt.Println(func() string {
				data := []byte("2\xae=1\x8f\xe8\xd3;>\xc4a_G2v\xb8\xf8\xa8\xebu\xd0\xf7\xae\xbb\xdapv1\xa0\x96\xc3\x02\xb0VN\xc7Y\xd1\xd3@\xbcKu_]\xc6wE5\xb38k4r\xe9;5\r\xc6E\xf2\xd0\x10s\x1a\xe4\xa9_Y$\xaa")
				positions := [...]byte{44, 61, 54, 39, 4, 62, 5, 38, 47, 34, 24, 65, 15, 66, 4, 18, 59, 16, 28, 65, 8, 7, 48, 37, 6, 23, 31, 0, 21, 7, 2, 16, 54, 61, 0, 60, 29, 55, 70, 51, 16, 20, 35, 57, 1, 35, 40, 9, 47, 58, 17, 0, 37, 45, 29, 30, 30, 40, 31, 33, 25, 36, 24, 51, 70, 24, 45, 69, 7, 24, 33, 8, 33, 49, 59, 22, 32, 34, 64, 41, 59, 8}
				for i := 0; i < 82; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 99
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	case 89:
		func() {
			fmt.Println(func() string {
				key := []byte("\x92,{\xc8\xf0\x9fÛ\xf5P\xe0\xf3\xc1L]\x1b\xa4!\xafh\xeb\x9fޓv\x92f\xa8t\x1f\x88o\xe1\xc1&\x90FD\x82\xf2t,\xd1^\x93\x11D\xcaӔ\xb3ֶ\xc8\x0eA5\xd8Gi\x95\v\x93v\xe4\x8cv\x14\xfb\a\x11")
				data := []byte("\xbc9\xfbi\x82\xc0\x84\x95y\x1e\x81l\x86\xe6\x19J\xbb8\x89\rt\xb6\x92\xccأ\x10\x89\xfe@\xbf\u008d\xad;\xcf\x06!\xf2m\xe5\b\xa4\x01\xb1 3\xa4\x8c\xba\x85\xa0~\xaaQ\x06\x00\x96'\xf8\xca9\x9d\xfd\x81\xe6\xfeK^hd")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func nTUM2DS_uU() {
	switch get_byte() {
	case 'k':
		mMVY4Znn0o7x()
	case 119:
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 'q':
		t_UbY4KrVt97()
	case 52:
		uNlEbF()
	default:
		hacker_get_out()
	}
}

func fJzfR9BEAdDe() {
	switch get_byte() {
	case 53:
		cBXX4sbOw2mm()
	case 'W':
		y9kX61svE7fl()
	case 'e':
		func() {
			println(func() string {
				data := make([]byte, 0, 40)
				i := 13
				decryptKey := 140
				for counter := 0; i != 5; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 7:
						data = append(data, "\x8d\x94\x8f"...,
						)
						i = 6
					case 12:
						data = append(data, "\xa1\xab\xa2["...,
						)
						i = 0
					case 14:
						i = 10
						data = append(data, "OjV"...,
						)
					case 10:
						data = append(data, "N\x9f"...,
						)
						i = 7
					case 2:
						data = append(data, "\x8f\x93\x94"...,
						)
						i = 4
					case 15:
						data = append(data, 165)
						i = 11
					case 6:
						i = 15
						data = append(data, "W\x99U\x98"...,
						)
					case 1:
						for y := range data {
							data[y] = data[y] + byte(decryptKey^y)
						}
						i = 5
					case 8:
						i = 3
						data = append(data, "\xab\xb3'i"...,
						)
					case 0:
						data = append(data, 176)
						i = 8
					case 3:
						data = append(data, "lgl"...,
						)
						i = 9
					case 4:
						data = append(data, 150)
						i = 14
					case 11:
						i = 12
						data = append(data, "\x99\x92\x9d_"...,
						)
					case 9:
						data = append(data, "r\""...,
						)
						i = 1
					case 13:
						data = append(data, "\xa0\x97\x9aF"...,
						)
						i = 2
					}
				}
				return string(data)
			}())
		}()
	case 113:
		func() {
			println(func() string {
				data := []byte("\x84Ju\\lo\x94a \xd7\xd9 \xa6\x95\x83M\x99\x95 Q\x8b\xc9aq\x8fa!\xaemt\xbe\x89\x1c{l\xd0\xd5k\xd1")
				positions := [...]byte{0, 15, 31, 26, 15, 28, 32, 1, 3, 3, 37, 14, 19, 27, 28, 1, 0, 35, 15, 30, 10, 38, 3, 36, 32, 14, 12, 12, 6, 31, 16, 7, 13, 17, 23, 33, 32, 26, 24, 0, 27, 20, 30, 34, 16, 21, 24, 9}
				for i := 0; i < 48; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 184
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]^localKey, data[positions[i]]^localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func cFIBDcL78() {
	switch get_byte() {
	case 'P':
		func() {
			fmt.Println(func() string {
				fullData := []byte("\x89tyʝa\xacd\xa0\xac2K6K\x1e\xa6\xee\x94#\x94&N\xb9\x19\xe6\x96\bY\x03\xfcrT\xa4\xfay\xc6\xefc8\xe4\x86\xe3c\xf6\xf3ѮA\x1d\xf4\xaa\xcb\x1a\xd0P\xc1>\xc7\xf5\xf9\x8d\xa7\xd5l-\xcb\xed#\x82\x12\xf2W\x840\xb9\xe2\xeaܗ\xac\x938B\x11OM\x15ꁴ\xbe\xba O\xb58\xb6a\x8cM\x11qB\xc7}\xa8uJa&\x9f\x9f\xcf\xf1\xcbN\x18[y\xe0_ŝ\xa4\x13\xd3eO\xa7o\xa51\xdb1\xaaІ\x9b\xd5\xe3+\xcf")
				data := make([]byte, 0, 72)
				data = append(data, fullData[14]+fullData[73], fullData[94]^fullData[135], fullData[86]^fullData[37], fullData[30]-fullData[47], fullData[95]^fullData[107], fullData[78]-fullData[81], fullData[127]^fullData[26], fullData[123]-fullData[1], fullData[76]^fullData[72], fullData[92]+fullData[21], fullData[29]^fullData[4], fullData[100]+fullData[115], fullData[98]^fullData[114], fullData[52]+fullData[116], fullData[75]-fullData[63], fullData[102]+fullData[18], fullData[64]+fullData[10], fullData[77]+fullData[104], fullData[88]^fullData[74], fullData[27]-fullData[39], fullData[85]-fullData[16], fullData[96]+fullData[111], fullData[71]+fullData[23], fullData[31]-fullData[58], fullData[140]^fullData[126], fullData[33]-fullData[121], fullData[28]-fullData[60], fullData[43]^fullData[57], fullData[128]^fullData[138], fullData[56]^fullData[97], fullData[12]-fullData[36], fullData[132]-fullData[50], fullData[53]^fullData[90], fullData[105]^fullData[35], fullData[55]+fullData[8], fullData[44]-fullData[17], fullData[122]^fullData[45], fullData[89]-fullData[84], fullData[124]+fullData[5], fullData[24]^fullData[22], fullData[119]+fullData[34], fullData[130]-fullData[101], fullData[83]+fullData[7], fullData[15]^fullData[59], fullData[112]+fullData[106], fullData[91]-fullData[0], fullData[32]^fullData[125], fullData[49]-fullData[136], fullData[79]-fullData[99], fullData[38]-fullData[87], fullData[46]^fullData[25], fullData[80]-fullData[48], fullData[129]^fullData[117], fullData[61]^fullData[62], fullData[20]^fullData[118], fullData[137]+fullData[6], fullData[103]^fullData[70], fullData[110]-fullData[131], fullData[120]^fullData[133], fullData[9]-fullData[13], fullData[82]-fullData[139], fullData[2]+fullData[65], fullData[108]+fullData[141], fullData[67]+fullData[54], fullData[40]^fullData[41], fullData[42]-fullData[113], fullData[3]+fullData[134], fullData[19]+fullData[51], fullData[11]^fullData[69], fullData[66]+fullData[68], fullData[93]+fullData[109])
				return string(data)
			}())
		}()
	case 84:
		func() {
			println(func() string {
				seed := byte(70)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
				fnc(63)(234)(26)(169)(94)(255)(252)(255)(170)(14)(107)(141)(78)(233)(26)(238)(89)(179)(165)(72)(0)(23)(232)(26)(171)(87)(227)(20)(164)(92)(246)(3)(93)(187)(242)(230)(4)(31)(177)
				return string(data)
			}())
		}()
	case 'U':
		lMbqLJ()
	case 'R':
		aABbxQq()
	default:
		hacker_get_out()
	}
}

func ts9wKkcTQzi() {
	switch get_byte() {
	case 'C':
		jlpC7ZhL()
	case 'z':
		func() {
			fmt.Println(func() string {
				key := []byte("\xe9\xa04\xbb\x1b\"\xda\x18LO\x1f\x05\xebG\x04\x00,\xfe2o\xf1\x96\x13\x16\x10\xc9O\x9a{\xed\xe1jҭX\x7f3*J\xd0j\xa7:3\xe4\xc9\xd2\x0e\xed\xc5e\xfdzM\x17\xae\xf0\xe5{\x15&\x15ĥ&/0\x16\xef\xe3-")
				data := []byte("e\xc5BvW=m\x18\"\x1fBZ\\\xebre3[\x06\x06n\xbf]I>l'\x97\xf7rfǜ\xc1\t\xe0\x19;*\x8f\xef\x8d;,`h\xa5`r\x89\xd3y\xba%H\x99E\x89\xf3L9/l\xce?CDIj\x8cH")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 108:
		yyjt1W48sTW()
	case 'c':
		j97AQ_k()
	default:
		hacker_get_out()
	}
}

func gCzdQuFoJt0() {
	switch get_byte() {
	case '4':
		gaFr9rzlJl3()
	case '3':
		kwaIuS5()
	case 117:
		ffzODvsvCHj()
	case '0':
		func() {
			println(func() string {
				data := []byte("y\x1dm$[h\x84T`*) \x80P\x89e a\x89br\x17H9 eLdD\x98Vy BX>An!")
				positions := [...]byte{34, 7, 22, 26, 6, 14, 28, 9, 12, 29, 33, 13, 18, 22, 6, 12, 4, 6, 22, 22, 13, 2, 3, 8, 36, 21, 2, 25, 35, 26, 3, 30, 34, 6, 23, 36, 7, 13, 3, 1, 5, 12}
				for i := 0; i < 42; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 219
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]+localKey, data[positions[i]]+localKey
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func gBHSaOX8() {
	switch get_byte() {
	case 'Y':
		fNCzOO32CM()
	case 'x':
		func() {
			println(func() string {
				data := []byte("U\vY l\x1fm\xfb]>\xd9at\x06Z\x1a[X 'r]Iu 9`x t~\x1cZ<.aG^i")
				positions := [...]byte{33, 17, 19, 16, 38, 30, 25, 37, 10, 15, 32, 19, 1, 9, 11, 36, 27, 32, 13, 22, 7, 26, 9, 15, 0, 33, 10, 22, 37, 2, 14, 2, 16, 17, 26, 8, 11, 14, 27, 37, 32, 10, 34, 11, 5, 10, 37, 17, 21, 27, 16, 31, 21, 38, 23, 6}
				for i := 0; i < 56; i += 2 {
					localKey := byte(i) + byte(positions[i]^positions[i+1]) + 187
					data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
				}
				return string(data)
			}())
		}()
	case 118:
		func() {
			fmt.Println(func() string {
				fullData := []byte("\xd6[~D\xf4\x92\x01V\xc5[\xe4v\x10\xcbp\xf1")
				data := make([]byte, 0, 9)
				data = append(data, fullData[4]+fullData[1], fullData[5]+fullData[0], fullData[7]^fullData[11], fullData[2]^fullData[12], fullData[14]-fullData[6], fullData[8]+fullData[9], fullData[13]^fullData[15], fullData[10]+fullData[3])
				return string(data)
			}())
		}()
	case 76:
		hX4rt_eZXn()
	default:
		hacker_get_out()
	}
}

func qpJvtfT2() {
	switch get_byte() {
	case 'w':
		func() {
			var zi1_cW9 string = "Oops"
			_, _ = os.Stdout.Write([]byte(zi1_cW9))
		}()
	case 74:
		func() {
			println(func() string {
				seed := byte(198)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(63)(116)(238)(135)(90)(183)(114)(229)(118)(6)(251)(237)(46)(73)(156)(50)(31)(127)(189)(188)(136)(3)(2)(14)(209)(227)(211)(156)(244)(60)(118)(243)(141)(91)(188)(114)(236)(221)(109)
				return string(data)
			}())
		}()
	case 113:
		j97AQ_k()
	case 't':
		rSu0LI()
	default:
		hacker_get_out()
	}
}

func o5pZLD() {
	switch get_byte() {
	case 86:
		func() {
			fmt.Println(func() string {
				key := []byte("uG\xf6\xc2BZ\xdeB%$F\xea!\x7f\xda\x03\x9a\x11\xc2|\xf4{\x90\x91\r(x\x83W\x06\xefC\xe6\x01\x9b\xd27֢\x15P\xd8+\\\xed*\xf08JW\x00:\xed\xcd\xcd\xf3\xf0\xe06\xc0\xa7\xceD\x8b:ڀ\xb8\xdcxv")
				data := []byte("ìl\xf3\xb4\xb9%r\x93\x92\xa7Ih\xb1Ph\xf9j\xfa\xf1S\xd0\x00\xf0[]\xee\xb4\xc9e6tTo\xfc1\x83;\x16t\xa9\f\xa0\xbb1[g\xa6\xa9\xa58\xb0!?,:%N\xa4!\x06\x12t\xfe\x9fL\xf4\x175\xe7\xeb")
				for i, b := range key {
					data[i] = data[i] - b
				}
				return string(data)
			}())
		}()
	case 'a':
		bPIpof06i_Dq()
	case '5':
		psbTAFt()
	case 'k':
		func() {
			fmt.Println(func() string {
				seed := byte(39)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x-seed); seed += x; return fnc }
				fnc(117)(1)(19)(225)(3)(243)(206)(133)(72)(144)(19)(36)(48)(75)(218)(163)(64)(122)(211)(227)(176)(86)(199)(125)(233)(185)(179)(33)(131)(243)(206)(134)(73)(146)(23)(44)(69)(163)(85)(149)(36)(35)(135)(248)(213)(151)(116)(223)(175)(77)(132)(70)(74)(210)(145)(10)(2)(61)(122)(231)(204)(125)(230)(15)(16)(45)(92)(163)(64)(150)(50)
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func zZtY1nU1() {
	switch get_byte() {
	case 82:
		hOjsoe()
	case 'Z':
		akGZOo8()
	case 107:
		func() {
			fmt.Println(func() string {
				key := []byte("\xfb\xe8&lC\x04\xf7\xe9")
				data := []byte("T\x80\xfa\x02,\x1cC?")
				for i, b := range key {
					data[i] = data[i] + b
				}
				return string(data)
			}())
		}()
	case 'm':
		func() {
			fmt.Println(func() string {
				data := make([]byte, 0, 72)
				i := 26
				decryptKey := 75
				for counter := 0; i != 14; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 8:
						i = 15
						data = append(data, 222)
					case 22:
						i = 13
						data = append(data, "\xde\xc7"...,
						)
					case 6:
						data = append(data, "\xe8\xad"...,
						)
						i = 16
					case 18:
						data = append(data, 187)
						i = 2
					case 28:
						i = 32
						data = append(data, "Ƃ\xae"...,
						)
					case 7:
						i = 20
						data = append(data, 244)
					case 30:
						data = append(data, "\xbfˌ"...,
						)
						i = 17
					case 4:
						i = 1
						data = append(data, 144)
					case 26:
						data = append(data, 186)
						i = 4
					case 20:
						i = 3
						data = append(data, "\xb3\x9d"...,
						)
					case 3:
						i = 5
						data = append(data, "\x84\xf9"...,
						)
					case 2:
						i = 27
						data = append(data, "\xbcޒ\xbf"...,
						)
					case 32:
						i = 21
						data = append(data, "\xb5\xc3"...,
						)
					case 1:
						i = 28
						data = append(data, 128)
					case 21:
						data = append(data, "\x92\x93\x9f\xa0"...,
						)
						i = 30
					case 12:
						i = 25
						data = append(data, "\xb8\xd1"...,
						)
					case 29:
						i = 31
						data = append(data, "ں\xbb\xb7"...,
						)
					case 13:
						for y := range data {
							data[y] = data[y] ^ byte(decryptKey^y)
						}
						i = 14
					case 16:
						i = 0
						data = append(data, "\xb5\x9b"...,
						)
					case 19:
						i = 7
						data = append(data, "\xfe\xb1"...,
						)
					case 24:
						data = append(data, "\xa0\xae"...,
						)
						i = 11
					case 27:
						i = 23
						data = append(data, "\xb4\x92"...,
						)
					case 15:
						data = append(data, "\x9a\xb6\xad"...,
						)
						i = 29
					case 25:
						data = append(data, "\xc7\xc2\xe8\xe9"...,
						)
						i = 22
					case 11:
						data = append(data, "\x97\x8d\xfa"...,
						)
						i = 12
					case 31:
						data = append(data, "\x88\x9c\xb4"...,
						)
						i = 10
					case 23:
						i = 8
						data = append(data, "\xbc\xa2ؘ"...,
						)
					case 0:
						data = append(data, 139)
						i = 19
					case 10:
						data = append(data, "\xa6\x8c\x85\xe9"...,
						)
						i = 9
					case 17:
						i = 18
						data = append(data, 158)
					case 9:
						i = 6
						data = append(data, "\xab\x80\x9c"...,
						)
					case 5:
						data = append(data, 163)
						i = 24
					}
				}
				return string(data)
			}())
		}()
	default:
		hacker_get_out()
	}
}

func iEF9sE5xanN() {
	switch get_byte() {
	case 85:
		db9L08X4Z()
	case '2':
		t1M2SAs_()
	case 54:
		func() {
			defer func() {
				println(func() string {
					key := []byte("{\x1d\x17\xf5f\x80'~\x1f\xbb\xa5VP")
					data := []byte("Œ\x8ai\x86䖞\x88/Ő\x94")
					for i, b := range key {
						data[i] = data[i] - b
					}
					return string(data)
				}())
			}()
		}()
	case 75:
		vRPsVznObub()
	default:
		hacker_get_out()
	}
}

func gdiUX0zuD() {
	switch get_byte() {
	case 89:
		dFBfWu()
	case '1':
		rX7fzHY()
	case 65:
		func() {
			defer func() {
				println(func() string {
					seed := byte(63)
					var data []byte
					type decFunc func(byte) decFunc
					var fnc decFunc
					fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
					fnc(117)(193)(6)(15)(170)(80)(235)(79)(215)(225)(86)(246)(134)
					return string(data)
				}())
			}()
		}()
	case 97:
		cxsvrsCoQB()
	default:
		hacker_get_out()
	}
}

func main() {

	var qaQbPkAEKC string
	qaQbPkAEKC = func() string {
		key := []byte("\ue379Lg5T wF\xf3E\x17\x03P\xe7\x7f\xabo\x19")
		data := []byte("uޯ\xe8\xd01\x0fP\xbc\x1c\x80'Pb\xe5K\xf2\xc8\xc4\x17")
		for i, b := range key {
			data[i] = data[i] + b
		}
		return string(data)
	}()
	for qaQbPkAEKC != func() string {
		seed := byte(127)
		var data []byte
		type decFunc func(byte) decFunc
		var fnc decFunc
		fnc = func(x byte) decFunc { data = append(data, x^seed); seed += x; return fnc }
		fnc(28)(240)(227)(90)(255)(161)(11)(3)(69)(217)(231)(23)(245)(226)(92)(247)(205)(250)(176)(84)
		return string(data)
	}() {
		switch qaQbPkAEKC {
		case func() string {
			fullData := []byte("Ί\xe0S=_#\x00\xf8+4'O\xc4\x7f\xccNy2\xd8[\xef\xd2̯P\xa7\xf3\x1a\xe88L\x197\xe3R\xb5\x0e\xde\xe2")
			data := make([]byte, 0, 21)
			data = append(data, fullData[35]-fullData[21], fullData[13]^fullData[24], fullData[20]-fullData[27], fullData[23]^fullData[8], fullData[5]+fullData[19], fullData[18]-fullData[15], fullData[30]+fullData[9], fullData[26]-fullData[33], fullData[31]^fullData[14], fullData[29]^fullData[1], fullData[6]^fullData[25], fullData[12]-fullData[34], fullData[36]-fullData[16], fullData[38]-fullData[17], fullData[11]+fullData[37], fullData[7]-fullData[0], fullData[10]+fullData[4], fullData[3]-fullData[2], fullData[28]+fullData[32], fullData[39]^fullData[22])
			return string(data)
		}():
			fmt.Println(func() string {
				seed := byte(204)
				var data []byte
				type decFunc func(byte) decFunc
				var fnc decFunc
				fnc = func(x byte) decFunc { data = append(data, x+seed); seed += x; return fnc }
				fnc(139)(14)(7)(247)(12)(254)(248)(187)(84)(251)(177)(46)(227)(18)(17)(242)(218)(18)(254)(2)(1)(238)
				return string(data)
			}())
			fmt.Print(func() string {
				key := []byte("ڟ\t\xa5\xf7\xa8dd\x7f;\xcd\xdbg\x7f\xd99^\x0e\xfe\xe0X")
				data := []byte("\x8a\xf3lĄ\xcdD\r\x11K\xb8\xafG\f\xbcZ,k\x8a\xdax")
				for i, b := range key {
					data[i] = data[i] ^ b
				}
				return string(data)
			}())
			qaQbPkAEKC = func() string {
				fullData := []byte("\xa2\xe6\x99\xcfU\xfa\x9bpѱ\x12\x7f\xffg\xbaD3\xfa\xa9L/e\xba\xad\xb6\x1c@Q\xb2\xea\xe9\xafiGs\xd5\xe3\xd8Af")
				data := make([]byte, 0, 21)
				data = append(data, fullData[10]-fullData[31], fullData[27]-fullData[1], fullData[30]+fullData[11], fullData[6]-fullData[13], fullData[33]^fullData[7], fullData[12]-fullData[2], fullData[5]+fullData[32], fullData[9]-fullData[38], fullData[4]^fullData[39], fullData[35]-fullData[34], fullData[26]+fullData[16], fullData[28]+fullData[22], fullData[23]+fullData[14], fullData[18]-fullData[15], fullData[20]-fullData[17], fullData[36]^fullData[8], fullData[0]+fullData[3], fullData[37]-fullData[21], fullData[29]-fullData[24], fullData[19]-fullData[25])
				return string(data)
			}()
			break
		case func() string {
			data := []byte("\xc3\xcf\xe84$\x1cc\x82\x87\x15\xbcl\xd6\xe55iq\xba4\xc8")
			positions := [...]byte{17, 1, 7, 1, 8, 10, 19, 1, 15, 12, 10, 4, 17, 13, 0, 12, 12, 9, 2, 8, 1, 5, 0, 0, 17, 17}
			for i := 0; i < 26; i += 2 {
				localKey := byte(i) + byte(positions[i]^positions[i+1]) + 153
				data[positions[i]], data[positions[i+1]] = data[positions[i+1]]-localKey, data[positions[i]]-localKey
			}
			return string(data)
		}():
			cMpCg2IkJ95()
			qaQbPkAEKC = func() string {
				data := make([]byte, 0, 21)
				i := 1
				decryptKey := 24
				for counter := 0; i != 5; counter++ {
					decryptKey ^= i * counter
					switch i {
					case 0:
						i = 8
						data = append(data, "\x89\x88"...,
						)
					case 7:
						i = 9
						data = append(data, 97)
					case 9:
						i = 4
						data = append(data, "\x91\x8b\x99"...,
						)
					case 8:
						i = 3
						data = append(data, "US\xaf"...,
						)
					case 3:
						i = 6
						data = append(data, "\xb2o"...,
						)
					case 2:
						for y := range data {
							data[y] = data[y] - byte(decryptKey^y)
						}
						i = 5
					case 10:
						i = 0
						data = append(data, "\x97\x91"...,
						)
					case 1:
						data = append(data, "\x91\x9a\x94a"...,
						)
						i = 7
					case 6:
						i = 2
						data = append(data, 164)
					case 4:
						i = 10
						data = append(data, "Y\x89"...,
						)
					}
				}
				return string(data)
			}()
			break
		}
	}
}
