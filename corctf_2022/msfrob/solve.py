import zlib
from Crypto.Cipher import AES


class AES_pkcs5:
    def __init__(self):
        self.key = bytes([0xD4, 0xF5, 0xD9, 0x67, 0x15, 0x2F, 0x77, 0x7F, 0x6C, 0x7C,
                          0x46, 0x73, 0xF6, 0xF0, 0x92, 0xF0, 0x77, 0x50, 0x3B, 0x30,
                          0x0C, 0x87, 0x8A, 0x0D, 0x9C, 0x1D, 0x72, 0xA2, 0x65, 0x46,
                          0xC8, 0xDC
                          ])
        self.block_size = 16
        self.iv = b'\x00' * 16

    def pad(self, byte_array: bytearray):
        pad_len = self.block_size - len(byte_array) % self.block_size
        return byte_array + (bytes([pad_len]) * pad_len)

    def unpad(self, byte_array: bytearray):
        return byte_array[:-ord(byte_array[-1:])]

    def encrypt(self, message):
        padded = self.pad(message)
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv)
        encrypted = cipher.encrypt(padded)
        return encrypted

    def decrypt(self, message):
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv)
        decrypted = cipher.decrypt(message)
        return self.unpad(decrypted)


cipher = AES_pkcs5()
rawdata = bytes([
    0x4C, 0xEF, 0x34, 0xFA, 0xD1, 0x25, 0x45, 0x4B, 0xE7, 0xAD,
    0x99, 0xC4, 0xB1, 0xD7, 0xF6, 0x2C, 0x5B, 0xF3, 0x13, 0xBF,
    0xCC, 0x03, 0x1D, 0x16, 0x81, 0xDB, 0x50, 0x38, 0xA8, 0xB6,
    0xDD, 0x20, 0x90, 0x2A, 0x6E, 0xA2, 0xEF, 0xFE, 0x6B, 0x8F,
    0xDB, 0x80, 0x6F, 0x70, 0x74, 0xEB, 0x7D, 0x36, 0xE4, 0xDC,
    0x87, 0xF3, 0x20, 0xEB, 0xE5, 0x0F, 0x3E, 0x28, 0x35, 0x58,
    0xAD, 0x07, 0xD2, 0x3D, 0xD8, 0x5D, 0x41, 0x35, 0x5E, 0x4F,
    0x41, 0x9B, 0x91, 0x85, 0xE1, 0x5C, 0x18, 0xB8, 0xF6, 0x5A,
    0xDF, 0x08, 0x35, 0x31, 0x04, 0xD2, 0xE0, 0x44, 0x64, 0xFC,
    0x06, 0xC6, 0xD6, 0x5B, 0x98, 0x20, 0x4F, 0x1C, 0x1E, 0xB8,
    0x20, 0xD5, 0x9E, 0xDA, 0x81, 0xD6, 0x36, 0x5B, 0x55, 0x60,
    0xA8, 0x2C, 0xF2, 0xDA, 0x57, 0x92, 0xC9, 0xE0, 0x14, 0xF0,
    0x43, 0x4B, 0x2E, 0x11, 0xD3, 0x70, 0x67, 0xA8, 0x55, 0x08,
    0x7D, 0xC7, 0x76, 0x4F, 0x77, 0xE8, 0xBE, 0xF3, 0x19, 0x04,
    0x84, 0xB2, 0xA0, 0x20, 0xDC, 0x4C, 0xD2, 0xC8, 0x94, 0x17,
    0x9B, 0x75, 0x4F, 0x78, 0x35, 0x35, 0xE6, 0x62, 0x74, 0x2D,
    0x0C, 0xA8, 0x34, 0xF1, 0x90, 0xA9, 0xFD, 0x59, 0xD4, 0xF8,
    0x24, 0xB9, 0x3B, 0x94, 0xBD, 0x79, 0xC7, 0x78, 0xB9, 0x56,
    0xC1, 0xE3, 0xB6, 0x2E, 0x17, 0x3A, 0x32, 0xF9, 0x4E, 0x47,
    0xF9, 0x09, 0xC4, 0xE8, 0xFA, 0x49, 0x53, 0x6A, 0x0B, 0xB9,
    0x36, 0x0B, 0x2B, 0x5C, 0xC9, 0xF3, 0x39, 0x63, 0xB3, 0xD1,
    0xAC, 0x70, 0x6C, 0xF1, 0x46, 0x42, 0xBC, 0x0B, 0x91, 0x3A,
    0x64, 0x95, 0x77, 0xEC, 0x24, 0x01, 0x64, 0xD2, 0x98, 0xE1,
    0xBF, 0x38, 0x17, 0xD4, 0xD0, 0x39, 0x16, 0x13, 0x1D, 0x34,
    0xA4, 0x1A, 0xFA, 0x33, 0x5F, 0x88, 0x21, 0xD5, 0x5C, 0x4E,
    0xBF, 0x33, 0x9D, 0xE1, 0x2A, 0xCC, 0x47, 0x15, 0x03, 0x9D,
    0xA6, 0x85, 0x36, 0x2D, 0x6D, 0x31, 0x01, 0x3D, 0x95, 0x08,
    0xDC, 0x72, 0xD3, 0xF6, 0xF7, 0x65, 0xB7, 0xC0, 0x95, 0x5D,
    0xF4, 0xC9, 0xA7, 0xFA, 0xDC, 0xEF, 0x51, 0x36, 0xC1, 0x1D,
    0xE6, 0x08, 0xEB, 0x8A, 0xEC, 0x5D, 0xC9, 0x5A, 0x3D, 0xD3,
    0x9A, 0xA6, 0xAD, 0x28, 0x99, 0x24, 0x88, 0x92, 0x40, 0x2D,
    0xAB, 0x12, 0x59, 0xF8, 0x84, 0x47, 0xB2, 0xB9, 0x48, 0xF7,
    0x8F, 0x1E, 0x32, 0x64, 0xBA, 0x24, 0xD2, 0x3D, 0xF3, 0xC4,
    0x84, 0xBD, 0xD2, 0xE1, 0x01, 0x07, 0xA1, 0x76, 0x18, 0x45,
    0x1E, 0x54, 0x91, 0x93, 0x11, 0x6E, 0x41, 0x54, 0x7E, 0x40,
    0xE7, 0x02
])


dec = rawdata
for i in range(20):
    dec = zlib.decompress(cipher.decrypt(dec))

print(dec)
