# BEAN-2a21-b91dc84834-24e676

ex_t = [
    0xA3, 0xD7, 0x09, 0x83, 0xF8, 0x48, 0xF6, 0xF4, 0xB3, 0x21,
    0x15, 0x78, 0x99, 0xB1, 0xAF, 0xF9, 0xE7, 0x2D, 0x4D, 0x8A,
    0xCE, 0x4C, 0xCA, 0x2E, 0x52, 0x95, 0xD9, 0x1E, 0x4E, 0x38,
    0x44, 0x28, 0x0A, 0xDF, 0x02, 0xA0, 0x17, 0xF1, 0x60, 0x68,
    0x12, 0xB7, 0x7A, 0xC3, 0xE9, 0xFA, 0x3D, 0x53, 0x96, 0x84,
    0x6B, 0xBA, 0xF2, 0x63, 0x9A, 0x19, 0x7C, 0xAE, 0xE5, 0xF5,
    0xF7, 0x16, 0x6A, 0xA2, 0x39, 0xB6, 0x7B, 0x0F, 0xC1, 0x93,
    0x81, 0x1B, 0xEE, 0xB4, 0x1A, 0xEA, 0xD0, 0x91, 0x2F, 0xB8,
    0x55, 0xB9, 0xDA, 0x85, 0x3F, 0x41, 0xBF, 0xE0, 0x5A, 0x58,
    0x80, 0x5F, 0x66, 0x0B, 0xD8, 0x90, 0x35, 0xD5, 0xC0, 0xA7,
    0x33, 0x06, 0x65, 0x69, 0x45, 0x00, 0x94, 0x56, 0x6D, 0x98,
    0x9B, 0x76, 0x97, 0xFC, 0xB2, 0xC2, 0xB0, 0xFE, 0xDB, 0x20,
    0xE1, 0xEB, 0xD6, 0xE4, 0xDD, 0x47, 0x4A, 0x1D, 0x42, 0xED,
    0x9E, 0x6E, 0x49, 0x3C, 0xCD, 0x43, 0x27, 0xD2, 0x07, 0xD4,
    0xDE, 0xC7, 0x67, 0x18, 0x89, 0xCB, 0x30, 0x1F, 0x8D, 0xC6,
    0x8F, 0xAA, 0xC8, 0x74, 0xDC, 0xC9, 0x5D, 0x5C, 0x31, 0xA4,
    0x70, 0x88, 0x61, 0x2C, 0x9F, 0x0D, 0x2B, 0x87, 0x50, 0x82,
    0x54, 0x64, 0x26, 0x7D, 0x03, 0x40, 0x34, 0x4B, 0x1C, 0x73,
    0xD1, 0xC4, 0xFD, 0x3B, 0xCC, 0xFB, 0x7F, 0xAB, 0xE6, 0x3E,
    0x5B, 0xA5, 0xAD, 0x04, 0x23, 0x9C, 0x14, 0x51, 0x22, 0xF0,
    0x29, 0x79, 0x71, 0x7E, 0xFF, 0x8C, 0x0E, 0xE2, 0x0C, 0xEF,
    0xBC, 0x72, 0x75, 0x6F, 0x37, 0xA1, 0xEC, 0xD3, 0x8E, 0x62,
    0x8B, 0x86, 0x10, 0xE8, 0x08, 0x77, 0x11, 0xBE, 0x92, 0x4F,
    0x24, 0xC5, 0x32, 0x36, 0x9D, 0xCF, 0xF3, 0xA6, 0xBB, 0xAC,
    0x5E, 0x6C, 0xA9, 0x13, 0x57, 0x25, 0xB5, 0xE3, 0xBD, 0xA8,
    0x3A, 0x01, 0x05, 0x59, 0x2A, 0x46
]


key = [0x21, 0x2a, 0x34, 0x48, 0xc8, 0x1d, 0xb9, 0x76, 0xe6, 0x24]
ex_f = [
    0x46, 0x9D, 0xFA, 0x32, 0x51, 0xE2, 0x65, 0xF4, 0x80, 0xC6,
    0xBE, 0xB3, 0xC6, 0x6E, 0x7E, 0x3C, 0x65, 0xC1, 0x35, 0xE0,
    0x11, 0x19, 0x0D, 0x86, 0x2E, 0x93, 0xFE, 0xEA, 0xD6, 0x67,
    0xD7, 0xB1, 0xCD, 0xEC, 0x52, 0xE4, 0x53, 0x3E, 0x3B, 0xE1,
    0x0A, 0xFD, 0x50, 0x7E, 0xB4, 0xF8, 0xD0, 0x43
]

matrix = []
for i in range(10):
    matrix.append([ex_t[j ^ key[i]] for j in range(0x100)])

# print(', '.join(map(hex, matrix[4])))

rands = [0x9b12, 0x56d6, 0xc91b, 0x8d57, 0xd732, 0x9c12, 0x1f46, 0xdd56, 0x2476, 0xfdd9, 0x55fe, 0xb1c, 0x562a, 0xd10c,
         0x9646, 0x9ebf, 0xc2d8, 0xab0d, 0xecb4, 0x782c, 0x3d45, 0xcb5c, 0x75aa, 0xdbff, 0xf9e0, 0x669f, 0xfa78, 0x3299,
         0xc801, 0xb1cd, 0x7db0, 0x6313, ]
rands = rands[::-1]
rand_idx = 0

def p_hex(v):
    print(', '.join(map(hex, v)))

def g(block, dest, a3, a4, a5, a6):
    block[2*dest] ^= matrix[a3][block[2*dest + 1]]
    block[2*dest + 1] ^= matrix[a4][block[2*dest]]
    block[2*dest] ^= matrix[a5][block[2*dest + 1]]
    block[2*dest + 1] ^= matrix[a6][block[2*dest]]


def g0(block, dest):
    g(block, dest, 0, 1, 2, 3)

def g1(block, dest):
    g(block, dest, 4, 5, 6, 7)

def g2(block, dest):
    g(block, dest, 8, 9, 0, 1)

def g3(block, dest):
    g(block, dest, 2, 3, 4, 5)

def g4(block, dest):
    g(block, dest, 6, 7, 8, 9)

def make_short(a, b):
    return a << 8 | b

def z(block, dest, a3):
    global rand_idx
    v3 = make_short(block[2*a3+1], block[2*a3])
    v = rands[rand_idx] ^ v3
    block[2*dest+1] ^= (v & 0xFF00) >> 8
    block[2*dest] ^= v & 0xFF
    rand_idx += 1

for i in range(len(ex_f) // 8):
    rand_idx = 0
    bl = ex_f[8*i:8*(i+1)]
    for i in range(len(bl)//2):
        bl[2*i], bl[2*i+1] = bl[2*i+1], bl[2*i]
    g1(bl, 0)
    z(bl, 1, 0)
    g0(bl, 1)
    z(bl, 2, 1)
    g4(bl, 2)
    z(bl, 3, 2)
    g3(bl, 3)
    z(bl, 0, 3)
    g2(bl, 0)
    z(bl, 1, 0)
    g1(bl, 1)
    z(bl, 2, 1)
    g0(bl, 2)
    z(bl, 3, 2)
    g4(bl, 3)
    z(bl, 0, 3)
    z(bl, 3, 0)
    g3(bl, 0)
    z(bl, 0, 1)
    g2(bl, 1)
    z(bl, 1, 2)
    g1(bl, 2)
    z(bl, 2, 3)
    g0(bl, 3)
    z(bl, 3, 0)
    g4(bl, 0)
    z(bl, 0, 1)
    g3(bl, 1)
    z(bl, 1, 2)
    g2(bl, 2)
    z(bl, 2, 3)
    g1(bl, 3)
    g0(bl, 0)
    z(bl, 1, 0)
    g4(bl, 1)
    z(bl, 2, 1)
    g3(bl, 2)
    z(bl, 3, 2)
    g2(bl, 3)
    z(bl, 0, 3)
    g1(bl, 0)
    z(bl, 1, 0)
    g0(bl, 1)
    z(bl, 2, 1)
    g4(bl, 2)
    z(bl, 3, 2)
    g3(bl, 3)
    z(bl, 0, 3)
    z(bl, 3, 0)
    g2(bl, 0)
    z(bl, 0, 1)
    g1(bl, 1)
    z(bl, 1, 2)
    g0(bl, 2)
    z(bl, 2, 3)
    g4(bl, 3)
    z(bl, 3, 0)
    g3(bl, 0)
    z(bl, 0, 1)
    g2(bl, 1)
    z(bl, 1, 2)
    g1(bl, 2)
    z(bl, 2, 3)
    g0(bl, 3)

    for i in range(len(bl)//2):
        bl[2*i], bl[2*i+1] = bl[2*i+1], bl[2*i]

    print(''.join(map(chr, bl)), end='')